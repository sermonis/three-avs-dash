function dash_initPathPlannerWorker(){(()=>{var __webpack_modules__={243:module=>{eval('module.exports = "Math.clamp = (number, min, max) => Math.max(min, Math.min(number, max));\\r\\n\\r\\nMath.wrapAngle = (angle) => {\\r\\n  angle = angle % (Math.PI * 2);\\r\\n  if (angle <= -Math.PI) return angle + Math.PI * 2;\\r\\n  else if (angle > Math.PI) return angle - Math.PI * 2;\\r\\n  else return angle;\\r\\n}\\r\\n\\r\\nTHREE.Vector2.fromAngle = (angle) => new THREE.Vector2(Math.cos(angle), Math.sin(angle));\\r\\n\\r\\nTHREE.Curve.prototype.getCurvatureAt = function(u) {\\r\\n  let t2 = this.getUtoTmapping(u);\\r\\n\\r\\n  const delta = 0.0001;\\r\\n  let t1 = t2 - delta;\\r\\n  let t3 = t2 + delta;\\r\\n\\r\\n  if (t1 < 0) {\\r\\n    t1 = 0;\\r\\n    t2 = delta;\\r\\n    t3 = 2 * delta;\\r\\n  }\\r\\n\\r\\n  if (t3 > 1) {\\r\\n    t3 = 1;\\r\\n    t2 = 1 - delta;\\r\\n    t1 = 1 - 2 * delta;\\r\\n  }\\r\\n\\r\\n  const p1 = this.getPoint(t1);\\r\\n  const p2 = this.getPoint(t2);\\r\\n  const p3 = this.getPoint(t3);\\r\\n\\r\\n  return (Math.atan2(p3.y - p2.y, p3.x - p2.x) - Math.atan2(p2.y - p1.y, p2.x - p1.x)) / p2.distanceTo(p1);\\r\\n};\\r\\n"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL1V0aWxzLmpzPzEyNjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEZBQTBGLHFDQUFxQyxvQ0FBb0Msd0RBQXdELDJEQUEyRCx3QkFBd0IsS0FBSyxpR0FBaUcsNERBQTRELHNDQUFzQywrQkFBK0IsMEJBQTBCLDBCQUEwQix1QkFBdUIsZUFBZSxtQkFBbUIsdUJBQXVCLE9BQU8sdUJBQXVCLGVBQWUsdUJBQXVCLDJCQUEyQixPQUFPLHVDQUF1QyxtQ0FBbUMsbUNBQW1DLG1IQUFtSCxNQUFNIiwiZmlsZSI6IjI0My5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCJNYXRoLmNsYW1wID0gKG51bWJlciwgbWluLCBtYXgpID0+IE1hdGgubWF4KG1pbiwgTWF0aC5taW4obnVtYmVyLCBtYXgpKTtcXHJcXG5cXHJcXG5NYXRoLndyYXBBbmdsZSA9IChhbmdsZSkgPT4ge1xcclxcbiAgYW5nbGUgPSBhbmdsZSAlIChNYXRoLlBJICogMik7XFxyXFxuICBpZiAoYW5nbGUgPD0gLU1hdGguUEkpIHJldHVybiBhbmdsZSArIE1hdGguUEkgKiAyO1xcclxcbiAgZWxzZSBpZiAoYW5nbGUgPiBNYXRoLlBJKSByZXR1cm4gYW5nbGUgLSBNYXRoLlBJICogMjtcXHJcXG4gIGVsc2UgcmV0dXJuIGFuZ2xlO1xcclxcbn1cXHJcXG5cXHJcXG5USFJFRS5WZWN0b3IyLmZyb21BbmdsZSA9IChhbmdsZSkgPT4gbmV3IFRIUkVFLlZlY3RvcjIoTWF0aC5jb3MoYW5nbGUpLCBNYXRoLnNpbihhbmdsZSkpO1xcclxcblxcclxcblRIUkVFLkN1cnZlLnByb3RvdHlwZS5nZXRDdXJ2YXR1cmVBdCA9IGZ1bmN0aW9uKHUpIHtcXHJcXG4gIGxldCB0MiA9IHRoaXMuZ2V0VXRvVG1hcHBpbmcodSk7XFxyXFxuXFxyXFxuICBjb25zdCBkZWx0YSA9IDAuMDAwMTtcXHJcXG4gIGxldCB0MSA9IHQyIC0gZGVsdGE7XFxyXFxuICBsZXQgdDMgPSB0MiArIGRlbHRhO1xcclxcblxcclxcbiAgaWYgKHQxIDwgMCkge1xcclxcbiAgICB0MSA9IDA7XFxyXFxuICAgIHQyID0gZGVsdGE7XFxyXFxuICAgIHQzID0gMiAqIGRlbHRhO1xcclxcbiAgfVxcclxcblxcclxcbiAgaWYgKHQzID4gMSkge1xcclxcbiAgICB0MyA9IDE7XFxyXFxuICAgIHQyID0gMSAtIGRlbHRhO1xcclxcbiAgICB0MSA9IDEgLSAyICogZGVsdGE7XFxyXFxuICB9XFxyXFxuXFxyXFxuICBjb25zdCBwMSA9IHRoaXMuZ2V0UG9pbnQodDEpO1xcclxcbiAgY29uc3QgcDIgPSB0aGlzLmdldFBvaW50KHQyKTtcXHJcXG4gIGNvbnN0IHAzID0gdGhpcy5nZXRQb2ludCh0Myk7XFxyXFxuXFxyXFxuICByZXR1cm4gKE1hdGguYXRhbjIocDMueSAtIHAyLnksIHAzLnggLSBwMi54KSAtIE1hdGguYXRhbjIocDIueSAtIHAxLnksIHAyLnggLSBwMS54KSkgLyBwMi5kaXN0YW5jZVRvKHAxKTtcXHJcXG59O1xcclxcblwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///243\n')},931:module=>{eval("module.exports = \"(function (global, factory) {\\r\\n\\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\\r\\n\\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\\r\\n\\t(factory((global.THREE = {})));\\r\\n}(this, (function (exports) { 'use strict';\\r\\n\\r\\n\\t// Polyfills\\r\\n\\r\\n\\tif ( Number.EPSILON === undefined ) {\\r\\n\\r\\n\\t\\tNumber.EPSILON = Math.pow( 2, - 52 );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tif ( Number.isInteger === undefined ) {\\r\\n\\r\\n\\t\\t// Missing in IE\\r\\n\\t\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\\r\\n\\r\\n\\t\\tNumber.isInteger = function ( value ) {\\r\\n\\r\\n\\t\\t\\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tif ( Math.sign === undefined ) {\\r\\n\\r\\n\\t\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\\r\\n\\r\\n\\t\\tMath.sign = function ( x ) {\\r\\n\\r\\n\\t\\t\\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tif ( 'name' in Function.prototype === false ) {\\r\\n\\r\\n\\t\\t// Missing in IE\\r\\n\\t\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\\r\\n\\r\\n\\t\\tObject.defineProperty( Function.prototype, 'name', {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this.toString().match( /^\\\\s*function\\\\s*([^\\\\(\\\\s]*)/ )[ 1 ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tif ( Object.assign === undefined ) {\\r\\n\\r\\n\\t\\t// Missing in IE\\r\\n\\t\\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\\r\\n\\r\\n\\t\\t( function () {\\r\\n\\r\\n\\t\\t\\tObject.assign = function ( target ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( target === undefined || target === null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthrow new TypeError( 'Cannot convert undefined or null to object' );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar output = Object( target );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var index = 1; index < arguments.length; index ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar source = arguments[ index ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( source !== undefined && source !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var nextKey in source ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\toutput[ nextKey ] = source[ nextKey ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn output;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * https://github.com/mrdoob/eventdispatcher.js/\\r\\n\\t */\\r\\n\\r\\n\\tfunction EventDispatcher() {}\\r\\n\\r\\n\\tObject.assign( EventDispatcher.prototype, {\\r\\n\\r\\n\\t\\taddEventListener: function ( type, listener ) {\\r\\n\\r\\n\\t\\t\\tif ( this._listeners === undefined ) this._listeners = {};\\r\\n\\r\\n\\t\\t\\tvar listeners = this._listeners;\\r\\n\\r\\n\\t\\t\\tif ( listeners[ type ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tlisteners[ type ] = [];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\tlisteners[ type ].push( listener );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\thasEventListener: function ( type, listener ) {\\r\\n\\r\\n\\t\\t\\tif ( this._listeners === undefined ) return false;\\r\\n\\r\\n\\t\\t\\tvar listeners = this._listeners;\\r\\n\\r\\n\\t\\t\\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tremoveEventListener: function ( type, listener ) {\\r\\n\\r\\n\\t\\t\\tif ( this._listeners === undefined ) return;\\r\\n\\r\\n\\t\\t\\tvar listeners = this._listeners;\\r\\n\\t\\t\\tvar listenerArray = listeners[ type ];\\r\\n\\r\\n\\t\\t\\tif ( listenerArray !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar index = listenerArray.indexOf( listener );\\r\\n\\r\\n\\t\\t\\t\\tif ( index !== - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tlistenerArray.splice( index, 1 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdispatchEvent: function ( event ) {\\r\\n\\r\\n\\t\\t\\tif ( this._listeners === undefined ) return;\\r\\n\\r\\n\\t\\t\\tvar listeners = this._listeners;\\r\\n\\t\\t\\tvar listenerArray = listeners[ event.type ];\\r\\n\\r\\n\\t\\t\\tif ( listenerArray !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tevent.target = this;\\r\\n\\r\\n\\t\\t\\t\\tvar array = listenerArray.slice( 0 );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tarray[ i ].call( this, event );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tvar REVISION = '89';\\r\\n\\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\\r\\n\\tvar CullFaceNone = 0;\\r\\n\\tvar CullFaceBack = 1;\\r\\n\\tvar CullFaceFront = 2;\\r\\n\\tvar CullFaceFrontBack = 3;\\r\\n\\tvar FrontFaceDirectionCW = 0;\\r\\n\\tvar FrontFaceDirectionCCW = 1;\\r\\n\\tvar BasicShadowMap = 0;\\r\\n\\tvar PCFShadowMap = 1;\\r\\n\\tvar PCFSoftShadowMap = 2;\\r\\n\\tvar FrontSide = 0;\\r\\n\\tvar BackSide = 1;\\r\\n\\tvar DoubleSide = 2;\\r\\n\\tvar FlatShading = 1;\\r\\n\\tvar SmoothShading = 2;\\r\\n\\tvar NoColors = 0;\\r\\n\\tvar FaceColors = 1;\\r\\n\\tvar VertexColors = 2;\\r\\n\\tvar NoBlending = 0;\\r\\n\\tvar NormalBlending = 1;\\r\\n\\tvar AdditiveBlending = 2;\\r\\n\\tvar SubtractiveBlending = 3;\\r\\n\\tvar MultiplyBlending = 4;\\r\\n\\tvar CustomBlending = 5;\\r\\n\\tvar AddEquation = 100;\\r\\n\\tvar SubtractEquation = 101;\\r\\n\\tvar ReverseSubtractEquation = 102;\\r\\n\\tvar MinEquation = 103;\\r\\n\\tvar MaxEquation = 104;\\r\\n\\tvar ZeroFactor = 200;\\r\\n\\tvar OneFactor = 201;\\r\\n\\tvar SrcColorFactor = 202;\\r\\n\\tvar OneMinusSrcColorFactor = 203;\\r\\n\\tvar SrcAlphaFactor = 204;\\r\\n\\tvar OneMinusSrcAlphaFactor = 205;\\r\\n\\tvar DstAlphaFactor = 206;\\r\\n\\tvar OneMinusDstAlphaFactor = 207;\\r\\n\\tvar DstColorFactor = 208;\\r\\n\\tvar OneMinusDstColorFactor = 209;\\r\\n\\tvar SrcAlphaSaturateFactor = 210;\\r\\n\\tvar NeverDepth = 0;\\r\\n\\tvar AlwaysDepth = 1;\\r\\n\\tvar LessDepth = 2;\\r\\n\\tvar LessEqualDepth = 3;\\r\\n\\tvar EqualDepth = 4;\\r\\n\\tvar GreaterEqualDepth = 5;\\r\\n\\tvar GreaterDepth = 6;\\r\\n\\tvar NotEqualDepth = 7;\\r\\n\\tvar MultiplyOperation = 0;\\r\\n\\tvar MixOperation = 1;\\r\\n\\tvar AddOperation = 2;\\r\\n\\tvar NoToneMapping = 0;\\r\\n\\tvar LinearToneMapping = 1;\\r\\n\\tvar ReinhardToneMapping = 2;\\r\\n\\tvar Uncharted2ToneMapping = 3;\\r\\n\\tvar CineonToneMapping = 4;\\r\\n\\tvar UVMapping = 300;\\r\\n\\tvar CubeReflectionMapping = 301;\\r\\n\\tvar CubeRefractionMapping = 302;\\r\\n\\tvar EquirectangularReflectionMapping = 303;\\r\\n\\tvar EquirectangularRefractionMapping = 304;\\r\\n\\tvar SphericalReflectionMapping = 305;\\r\\n\\tvar CubeUVReflectionMapping = 306;\\r\\n\\tvar CubeUVRefractionMapping = 307;\\r\\n\\tvar RepeatWrapping = 1000;\\r\\n\\tvar ClampToEdgeWrapping = 1001;\\r\\n\\tvar MirroredRepeatWrapping = 1002;\\r\\n\\tvar NearestFilter = 1003;\\r\\n\\tvar NearestMipMapNearestFilter = 1004;\\r\\n\\tvar NearestMipMapLinearFilter = 1005;\\r\\n\\tvar LinearFilter = 1006;\\r\\n\\tvar LinearMipMapNearestFilter = 1007;\\r\\n\\tvar LinearMipMapLinearFilter = 1008;\\r\\n\\tvar UnsignedByteType = 1009;\\r\\n\\tvar ByteType = 1010;\\r\\n\\tvar ShortType = 1011;\\r\\n\\tvar UnsignedShortType = 1012;\\r\\n\\tvar IntType = 1013;\\r\\n\\tvar UnsignedIntType = 1014;\\r\\n\\tvar FloatType = 1015;\\r\\n\\tvar HalfFloatType = 1016;\\r\\n\\tvar UnsignedShort4444Type = 1017;\\r\\n\\tvar UnsignedShort5551Type = 1018;\\r\\n\\tvar UnsignedShort565Type = 1019;\\r\\n\\tvar UnsignedInt248Type = 1020;\\r\\n\\tvar AlphaFormat = 1021;\\r\\n\\tvar RGBFormat = 1022;\\r\\n\\tvar RGBAFormat = 1023;\\r\\n\\tvar LuminanceFormat = 1024;\\r\\n\\tvar LuminanceAlphaFormat = 1025;\\r\\n\\tvar RGBEFormat = RGBAFormat;\\r\\n\\tvar DepthFormat = 1026;\\r\\n\\tvar DepthStencilFormat = 1027;\\r\\n\\tvar RGB_S3TC_DXT1_Format = 2001;\\r\\n\\tvar RGBA_S3TC_DXT1_Format = 2002;\\r\\n\\tvar RGBA_S3TC_DXT3_Format = 2003;\\r\\n\\tvar RGBA_S3TC_DXT5_Format = 2004;\\r\\n\\tvar RGB_PVRTC_4BPPV1_Format = 2100;\\r\\n\\tvar RGB_PVRTC_2BPPV1_Format = 2101;\\r\\n\\tvar RGBA_PVRTC_4BPPV1_Format = 2102;\\r\\n\\tvar RGBA_PVRTC_2BPPV1_Format = 2103;\\r\\n\\tvar RGB_ETC1_Format = 2151;\\r\\n\\tvar LoopOnce = 2200;\\r\\n\\tvar LoopRepeat = 2201;\\r\\n\\tvar LoopPingPong = 2202;\\r\\n\\tvar InterpolateDiscrete = 2300;\\r\\n\\tvar InterpolateLinear = 2301;\\r\\n\\tvar InterpolateSmooth = 2302;\\r\\n\\tvar ZeroCurvatureEnding = 2400;\\r\\n\\tvar ZeroSlopeEnding = 2401;\\r\\n\\tvar WrapAroundEnding = 2402;\\r\\n\\tvar TrianglesDrawMode = 0;\\r\\n\\tvar TriangleStripDrawMode = 1;\\r\\n\\tvar TriangleFanDrawMode = 2;\\r\\n\\tvar LinearEncoding = 3000;\\r\\n\\tvar sRGBEncoding = 3001;\\r\\n\\tvar GammaEncoding = 3007;\\r\\n\\tvar RGBEEncoding = 3002;\\r\\n\\tvar LogLuvEncoding = 3003;\\r\\n\\tvar RGBM7Encoding = 3004;\\r\\n\\tvar RGBM16Encoding = 3005;\\r\\n\\tvar RGBDEncoding = 3006;\\r\\n\\tvar BasicDepthPacking = 3200;\\r\\n\\tvar RGBADepthPacking = 3201;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tvar _Math = {\\r\\n\\r\\n\\t\\tDEG2RAD: Math.PI / 180,\\r\\n\\t\\tRAD2DEG: 180 / Math.PI,\\r\\n\\r\\n\\t\\tgenerateUUID: ( function () {\\r\\n\\r\\n\\t\\t\\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\\r\\n\\r\\n\\t\\t\\tvar lut = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 256; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 ).toUpperCase();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn function () {\\r\\n\\r\\n\\t\\t\\t\\tvar d0 = Math.random() * 0xffffffff | 0;\\r\\n\\t\\t\\t\\tvar d1 = Math.random() * 0xffffffff | 0;\\r\\n\\t\\t\\t\\tvar d2 = Math.random() * 0xffffffff | 0;\\r\\n\\t\\t\\t\\tvar d3 = Math.random() * 0xffffffff | 0;\\r\\n\\t\\t\\t\\treturn lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\\r\\n\\t\\t\\t\\t\\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\\r\\n\\t\\t\\t\\t\\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\\r\\n\\t\\t\\t\\t\\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )(),\\r\\n\\r\\n\\t\\tclamp: function ( value, min, max ) {\\r\\n\\r\\n\\t\\t\\treturn Math.max( min, Math.min( max, value ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// compute euclidian modulo of m % n\\r\\n\\t\\t// https://en.wikipedia.org/wiki/Modulo_operation\\r\\n\\r\\n\\t\\teuclideanModulo: function ( n, m ) {\\r\\n\\r\\n\\t\\t\\treturn ( ( n % m ) + m ) % m;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Linear mapping from range <a1, a2> to range <b1, b2>\\r\\n\\r\\n\\t\\tmapLinear: function ( x, a1, a2, b1, b2 ) {\\r\\n\\r\\n\\t\\t\\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// https://en.wikipedia.org/wiki/Linear_interpolation\\r\\n\\r\\n\\t\\tlerp: function ( x, y, t ) {\\r\\n\\r\\n\\t\\t\\treturn ( 1 - t ) * x + t * y;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// http://en.wikipedia.org/wiki/Smoothstep\\r\\n\\r\\n\\t\\tsmoothstep: function ( x, min, max ) {\\r\\n\\r\\n\\t\\t\\tif ( x <= min ) return 0;\\r\\n\\t\\t\\tif ( x >= max ) return 1;\\r\\n\\r\\n\\t\\t\\tx = ( x - min ) / ( max - min );\\r\\n\\r\\n\\t\\t\\treturn x * x * ( 3 - 2 * x );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsmootherstep: function ( x, min, max ) {\\r\\n\\r\\n\\t\\t\\tif ( x <= min ) return 0;\\r\\n\\t\\t\\tif ( x >= max ) return 1;\\r\\n\\r\\n\\t\\t\\tx = ( x - min ) / ( max - min );\\r\\n\\r\\n\\t\\t\\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Random integer from <low, high> interval\\r\\n\\r\\n\\t\\trandInt: function ( low, high ) {\\r\\n\\r\\n\\t\\t\\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Random float from <low, high> interval\\r\\n\\r\\n\\t\\trandFloat: function ( low, high ) {\\r\\n\\r\\n\\t\\t\\treturn low + Math.random() * ( high - low );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Random float from <-range/2, range/2> interval\\r\\n\\r\\n\\t\\trandFloatSpread: function ( range ) {\\r\\n\\r\\n\\t\\t\\treturn range * ( 0.5 - Math.random() );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdegToRad: function ( degrees ) {\\r\\n\\r\\n\\t\\t\\treturn degrees * _Math.DEG2RAD;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tradToDeg: function ( radians ) {\\r\\n\\r\\n\\t\\t\\treturn radians * _Math.RAD2DEG;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tisPowerOfTwo: function ( value ) {\\r\\n\\r\\n\\t\\t\\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tceilPowerOfTwo: function ( value ) {\\r\\n\\r\\n\\t\\t\\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfloorPowerOfTwo: function ( value ) {\\r\\n\\r\\n\\t\\t\\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author philogb / http://blog.thejit.org/\\r\\n\\t * @author egraether / http://egraether.com/\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t */\\r\\n\\r\\n\\tfunction Vector2( x, y ) {\\r\\n\\r\\n\\t\\tthis.x = x || 0;\\r\\n\\t\\tthis.y = y || 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.defineProperties( Vector2.prototype, {\\r\\n\\r\\n\\t\\t\\\"width\\\": {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this.x;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.x = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t\\\"height\\\": {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this.y;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.y = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Vector2.prototype, {\\r\\n\\r\\n\\t\\tisVector2: true,\\r\\n\\r\\n\\t\\tset: function ( x, y ) {\\r\\n\\r\\n\\t\\t\\tthis.x = x;\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\tthis.x = scalar;\\r\\n\\t\\t\\tthis.y = scalar;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetX: function ( x ) {\\r\\n\\r\\n\\t\\t\\tthis.x = x;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetY: function ( y ) {\\r\\n\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetComponent: function ( index, value ) {\\r\\n\\r\\n\\t\\t\\tswitch ( index ) {\\r\\n\\r\\n\\t\\t\\t\\tcase 0: this.x = value; break;\\r\\n\\t\\t\\t\\tcase 1: this.y = value; break;\\r\\n\\t\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetComponent: function ( index ) {\\r\\n\\r\\n\\t\\t\\tswitch ( index ) {\\r\\n\\r\\n\\t\\t\\t\\tcase 0: return this.x;\\r\\n\\t\\t\\t\\tcase 1: return this.y;\\r\\n\\t\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.x, this.y );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x = v.x;\\r\\n\\t\\t\\tthis.y = v.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tadd: function ( v, w ) {\\r\\n\\r\\n\\t\\t\\tif ( w !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.addVectors( v, w );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x += v.x;\\r\\n\\t\\t\\tthis.y += v.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tthis.x += s;\\r\\n\\t\\t\\tthis.y += s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddVectors: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tthis.x = a.x + b.x;\\r\\n\\t\\t\\tthis.y = a.y + b.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddScaledVector: function ( v, s ) {\\r\\n\\r\\n\\t\\t\\tthis.x += v.x * s;\\r\\n\\t\\t\\tthis.y += v.y * s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsub: function ( v, w ) {\\r\\n\\r\\n\\t\\t\\tif ( w !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.subVectors( v, w );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x -= v.x;\\r\\n\\t\\t\\tthis.y -= v.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsubScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tthis.x -= s;\\r\\n\\t\\t\\tthis.y -= s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsubVectors: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tthis.x = a.x - b.x;\\r\\n\\t\\t\\tthis.y = a.y - b.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiply: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x *= v.x;\\r\\n\\t\\t\\tthis.y *= v.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\tthis.x *= scalar;\\r\\n\\t\\t\\tthis.y *= scalar;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdivide: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x /= v.x;\\r\\n\\t\\t\\tthis.y /= v.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdivideScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\treturn this.multiplyScalar( 1 / scalar );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyMatrix3: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar x = this.x, y = this.y;\\r\\n\\t\\t\\tvar e = m.elements;\\r\\n\\r\\n\\t\\t\\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\\r\\n\\t\\t\\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmin: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.min( this.x, v.x );\\r\\n\\t\\t\\tthis.y = Math.min( this.y, v.y );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmax: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.max( this.x, v.x );\\r\\n\\t\\t\\tthis.y = Math.max( this.y, v.y );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclamp: function ( min, max ) {\\r\\n\\r\\n\\t\\t\\t// assumes min < max, componentwise\\r\\n\\r\\n\\t\\t\\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\\r\\n\\t\\t\\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclampScalar: function () {\\r\\n\\r\\n\\t\\t\\tvar min = new Vector2();\\r\\n\\t\\t\\tvar max = new Vector2();\\r\\n\\r\\n\\t\\t\\treturn function clampScalar( minVal, maxVal ) {\\r\\n\\r\\n\\t\\t\\t\\tmin.set( minVal, minVal );\\r\\n\\t\\t\\t\\tmax.set( maxVal, maxVal );\\r\\n\\r\\n\\t\\t\\t\\treturn this.clamp( min, max );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tclampLength: function ( min, max ) {\\r\\n\\r\\n\\t\\t\\tvar length = this.length();\\r\\n\\r\\n\\t\\t\\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfloor: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.floor( this.x );\\r\\n\\t\\t\\tthis.y = Math.floor( this.y );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tceil: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.ceil( this.x );\\r\\n\\t\\t\\tthis.y = Math.ceil( this.y );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tround: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.round( this.x );\\r\\n\\t\\t\\tthis.y = Math.round( this.y );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\troundToZero: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\\r\\n\\t\\t\\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnegate: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = - this.x;\\r\\n\\t\\t\\tthis.y = - this.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdot: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn this.x * v.x + this.y * v.y;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlengthSq: function () {\\r\\n\\r\\n\\t\\t\\treturn this.x * this.x + this.y * this.y;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlength: function () {\\r\\n\\r\\n\\t\\t\\treturn Math.sqrt( this.x * this.x + this.y * this.y );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmanhattanLength: function () {\\r\\n\\r\\n\\t\\t\\treturn Math.abs( this.x ) + Math.abs( this.y );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormalize: function () {\\r\\n\\r\\n\\t\\t\\treturn this.divideScalar( this.length() || 1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tangle: function () {\\r\\n\\r\\n\\t\\t\\t// computes the angle in radians with respect to the positive x-axis\\r\\n\\r\\n\\t\\t\\tvar angle = Math.atan2( this.y, this.x );\\r\\n\\r\\n\\t\\t\\tif ( angle < 0 ) angle += 2 * Math.PI;\\r\\n\\r\\n\\t\\t\\treturn angle;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceTo: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn Math.sqrt( this.distanceToSquared( v ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceToSquared: function ( v ) {\\r\\n\\r\\n\\t\\t\\tvar dx = this.x - v.x, dy = this.y - v.y;\\r\\n\\t\\t\\treturn dx * dx + dy * dy;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmanhattanDistanceTo: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetLength: function ( length ) {\\r\\n\\r\\n\\t\\t\\treturn this.normalize().multiplyScalar( length );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlerp: function ( v, alpha ) {\\r\\n\\r\\n\\t\\t\\tthis.x += ( v.x - this.x ) * alpha;\\r\\n\\t\\t\\tthis.y += ( v.y - this.y ) * alpha;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlerpVectors: function ( v1, v2, alpha ) {\\r\\n\\r\\n\\t\\t\\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tthis.x = array[ offset ];\\r\\n\\t\\t\\tthis.y = array[ offset + 1 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( array === undefined ) array = [];\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tarray[ offset ] = this.x;\\r\\n\\t\\t\\tarray[ offset + 1 ] = this.y;\\r\\n\\r\\n\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromBufferAttribute: function ( attribute, index, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x = attribute.getX( index );\\r\\n\\t\\t\\tthis.y = attribute.getY( index );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\trotateAround: function ( center, angle ) {\\r\\n\\r\\n\\t\\t\\tvar c = Math.cos( angle ), s = Math.sin( angle );\\r\\n\\r\\n\\t\\t\\tvar x = this.x - center.x;\\r\\n\\t\\t\\tvar y = this.y - center.y;\\r\\n\\r\\n\\t\\t\\tthis.x = x * c - y * s + center.x;\\r\\n\\t\\t\\tthis.y = x * s + y * c + center.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author supereggbert / http://www.paulbrunt.co.uk/\\r\\n\\t * @author philogb / http://blog.thejit.org/\\r\\n\\t * @author jordi_ros / http://plattsoft.com\\r\\n\\t * @author D1plo1d / http://github.com/D1plo1d\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author timknip / http://www.floorplanner.com/\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction Matrix4() {\\r\\n\\r\\n\\t\\tthis.elements = [\\r\\n\\r\\n\\t\\t\\t1, 0, 0, 0,\\r\\n\\t\\t\\t0, 1, 0, 0,\\r\\n\\t\\t\\t0, 0, 1, 0,\\r\\n\\t\\t\\t0, 0, 0, 1\\r\\n\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tif ( arguments.length > 0 ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Matrix4.prototype, {\\r\\n\\r\\n\\t\\tisMatrix4: true,\\r\\n\\r\\n\\t\\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\\r\\n\\t\\t\\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\\r\\n\\t\\t\\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\\r\\n\\t\\t\\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tidentity: function () {\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\t1, 0, 0, 0,\\r\\n\\t\\t\\t\\t0, 1, 0, 0,\\r\\n\\t\\t\\t\\t0, 0, 1, 0,\\r\\n\\t\\t\\t\\t0, 0, 0, 1\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new Matrix4().fromArray( this.elements );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\t\\t\\tvar me = m.elements;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\\r\\n\\t\\t\\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\\r\\n\\t\\t\\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\\r\\n\\t\\t\\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyPosition: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements, me = m.elements;\\r\\n\\r\\n\\t\\t\\tte[ 12 ] = me[ 12 ];\\r\\n\\t\\t\\tte[ 13 ] = me[ 13 ];\\r\\n\\t\\t\\tte[ 14 ] = me[ 14 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\textractBasis: function ( xAxis, yAxis, zAxis ) {\\r\\n\\r\\n\\t\\t\\txAxis.setFromMatrixColumn( this, 0 );\\r\\n\\t\\t\\tyAxis.setFromMatrixColumn( this, 1 );\\r\\n\\t\\t\\tzAxis.setFromMatrixColumn( this, 2 );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\t\\t\\t\\txAxis.x, yAxis.x, zAxis.x, 0,\\r\\n\\t\\t\\t\\txAxis.y, yAxis.y, zAxis.y, 0,\\r\\n\\t\\t\\t\\txAxis.z, yAxis.z, zAxis.z, 0,\\r\\n\\t\\t\\t\\t0, 0, 0, 1\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\textractRotation: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function extractRotation( m ) {\\r\\n\\r\\n\\t\\t\\t\\tvar te = this.elements;\\r\\n\\t\\t\\t\\tvar me = m.elements;\\r\\n\\r\\n\\t\\t\\t\\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\\r\\n\\t\\t\\t\\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\\r\\n\\t\\t\\t\\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\\r\\n\\r\\n\\t\\t\\t\\tte[ 0 ] = me[ 0 ] * scaleX;\\r\\n\\t\\t\\t\\tte[ 1 ] = me[ 1 ] * scaleX;\\r\\n\\t\\t\\t\\tte[ 2 ] = me[ 2 ] * scaleX;\\r\\n\\r\\n\\t\\t\\t\\tte[ 4 ] = me[ 4 ] * scaleY;\\r\\n\\t\\t\\t\\tte[ 5 ] = me[ 5 ] * scaleY;\\r\\n\\t\\t\\t\\tte[ 6 ] = me[ 6 ] * scaleY;\\r\\n\\r\\n\\t\\t\\t\\tte[ 8 ] = me[ 8 ] * scaleZ;\\r\\n\\t\\t\\t\\tte[ 9 ] = me[ 9 ] * scaleZ;\\r\\n\\t\\t\\t\\tte[ 10 ] = me[ 10 ] * scaleZ;\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tmakeRotationFromEuler: function ( euler ) {\\r\\n\\r\\n\\t\\t\\tif ( ! ( euler && euler.isEuler ) ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tvar x = euler.x, y = euler.y, z = euler.z;\\r\\n\\t\\t\\tvar a = Math.cos( x ), b = Math.sin( x );\\r\\n\\t\\t\\tvar c = Math.cos( y ), d = Math.sin( y );\\r\\n\\t\\t\\tvar e = Math.cos( z ), f = Math.sin( z );\\r\\n\\r\\n\\t\\t\\tif ( euler.order === 'XYZ' ) {\\r\\n\\r\\n\\t\\t\\t\\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\\r\\n\\r\\n\\t\\t\\t\\tte[ 0 ] = c * e;\\r\\n\\t\\t\\t\\tte[ 4 ] = - c * f;\\r\\n\\t\\t\\t\\tte[ 8 ] = d;\\r\\n\\r\\n\\t\\t\\t\\tte[ 1 ] = af + be * d;\\r\\n\\t\\t\\t\\tte[ 5 ] = ae - bf * d;\\r\\n\\t\\t\\t\\tte[ 9 ] = - b * c;\\r\\n\\r\\n\\t\\t\\t\\tte[ 2 ] = bf - ae * d;\\r\\n\\t\\t\\t\\tte[ 6 ] = be + af * d;\\r\\n\\t\\t\\t\\tte[ 10 ] = a * c;\\r\\n\\r\\n\\t\\t\\t} else if ( euler.order === 'YXZ' ) {\\r\\n\\r\\n\\t\\t\\t\\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\\r\\n\\r\\n\\t\\t\\t\\tte[ 0 ] = ce + df * b;\\r\\n\\t\\t\\t\\tte[ 4 ] = de * b - cf;\\r\\n\\t\\t\\t\\tte[ 8 ] = a * d;\\r\\n\\r\\n\\t\\t\\t\\tte[ 1 ] = a * f;\\r\\n\\t\\t\\t\\tte[ 5 ] = a * e;\\r\\n\\t\\t\\t\\tte[ 9 ] = - b;\\r\\n\\r\\n\\t\\t\\t\\tte[ 2 ] = cf * b - de;\\r\\n\\t\\t\\t\\tte[ 6 ] = df + ce * b;\\r\\n\\t\\t\\t\\tte[ 10 ] = a * c;\\r\\n\\r\\n\\t\\t\\t} else if ( euler.order === 'ZXY' ) {\\r\\n\\r\\n\\t\\t\\t\\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\\r\\n\\r\\n\\t\\t\\t\\tte[ 0 ] = ce - df * b;\\r\\n\\t\\t\\t\\tte[ 4 ] = - a * f;\\r\\n\\t\\t\\t\\tte[ 8 ] = de + cf * b;\\r\\n\\r\\n\\t\\t\\t\\tte[ 1 ] = cf + de * b;\\r\\n\\t\\t\\t\\tte[ 5 ] = a * e;\\r\\n\\t\\t\\t\\tte[ 9 ] = df - ce * b;\\r\\n\\r\\n\\t\\t\\t\\tte[ 2 ] = - a * d;\\r\\n\\t\\t\\t\\tte[ 6 ] = b;\\r\\n\\t\\t\\t\\tte[ 10 ] = a * c;\\r\\n\\r\\n\\t\\t\\t} else if ( euler.order === 'ZYX' ) {\\r\\n\\r\\n\\t\\t\\t\\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\\r\\n\\r\\n\\t\\t\\t\\tte[ 0 ] = c * e;\\r\\n\\t\\t\\t\\tte[ 4 ] = be * d - af;\\r\\n\\t\\t\\t\\tte[ 8 ] = ae * d + bf;\\r\\n\\r\\n\\t\\t\\t\\tte[ 1 ] = c * f;\\r\\n\\t\\t\\t\\tte[ 5 ] = bf * d + ae;\\r\\n\\t\\t\\t\\tte[ 9 ] = af * d - be;\\r\\n\\r\\n\\t\\t\\t\\tte[ 2 ] = - d;\\r\\n\\t\\t\\t\\tte[ 6 ] = b * c;\\r\\n\\t\\t\\t\\tte[ 10 ] = a * c;\\r\\n\\r\\n\\t\\t\\t} else if ( euler.order === 'YZX' ) {\\r\\n\\r\\n\\t\\t\\t\\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\\r\\n\\r\\n\\t\\t\\t\\tte[ 0 ] = c * e;\\r\\n\\t\\t\\t\\tte[ 4 ] = bd - ac * f;\\r\\n\\t\\t\\t\\tte[ 8 ] = bc * f + ad;\\r\\n\\r\\n\\t\\t\\t\\tte[ 1 ] = f;\\r\\n\\t\\t\\t\\tte[ 5 ] = a * e;\\r\\n\\t\\t\\t\\tte[ 9 ] = - b * e;\\r\\n\\r\\n\\t\\t\\t\\tte[ 2 ] = - d * e;\\r\\n\\t\\t\\t\\tte[ 6 ] = ad * f + bc;\\r\\n\\t\\t\\t\\tte[ 10 ] = ac - bd * f;\\r\\n\\r\\n\\t\\t\\t} else if ( euler.order === 'XZY' ) {\\r\\n\\r\\n\\t\\t\\t\\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\\r\\n\\r\\n\\t\\t\\t\\tte[ 0 ] = c * e;\\r\\n\\t\\t\\t\\tte[ 4 ] = - f;\\r\\n\\t\\t\\t\\tte[ 8 ] = d * e;\\r\\n\\r\\n\\t\\t\\t\\tte[ 1 ] = ac * f + bd;\\r\\n\\t\\t\\t\\tte[ 5 ] = a * e;\\r\\n\\t\\t\\t\\tte[ 9 ] = ad * f - bc;\\r\\n\\r\\n\\t\\t\\t\\tte[ 2 ] = bc * f - ad;\\r\\n\\t\\t\\t\\tte[ 6 ] = b * e;\\r\\n\\t\\t\\t\\tte[ 10 ] = bd * f + ac;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// last column\\r\\n\\t\\t\\tte[ 3 ] = 0;\\r\\n\\t\\t\\tte[ 7 ] = 0;\\r\\n\\t\\t\\tte[ 11 ] = 0;\\r\\n\\r\\n\\t\\t\\t// bottom row\\r\\n\\t\\t\\tte[ 12 ] = 0;\\r\\n\\t\\t\\tte[ 13 ] = 0;\\r\\n\\t\\t\\tte[ 14 ] = 0;\\r\\n\\t\\t\\tte[ 15 ] = 1;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeRotationFromQuaternion: function ( q ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tvar x = q._x, y = q._y, z = q._z, w = q._w;\\r\\n\\t\\t\\tvar x2 = x + x, y2 = y + y, z2 = z + z;\\r\\n\\t\\t\\tvar xx = x * x2, xy = x * y2, xz = x * z2;\\r\\n\\t\\t\\tvar yy = y * y2, yz = y * z2, zz = z * z2;\\r\\n\\t\\t\\tvar wx = w * x2, wy = w * y2, wz = w * z2;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = 1 - ( yy + zz );\\r\\n\\t\\t\\tte[ 4 ] = xy - wz;\\r\\n\\t\\t\\tte[ 8 ] = xz + wy;\\r\\n\\r\\n\\t\\t\\tte[ 1 ] = xy + wz;\\r\\n\\t\\t\\tte[ 5 ] = 1 - ( xx + zz );\\r\\n\\t\\t\\tte[ 9 ] = yz - wx;\\r\\n\\r\\n\\t\\t\\tte[ 2 ] = xz - wy;\\r\\n\\t\\t\\tte[ 6 ] = yz + wx;\\r\\n\\t\\t\\tte[ 10 ] = 1 - ( xx + yy );\\r\\n\\r\\n\\t\\t\\t// last column\\r\\n\\t\\t\\tte[ 3 ] = 0;\\r\\n\\t\\t\\tte[ 7 ] = 0;\\r\\n\\t\\t\\tte[ 11 ] = 0;\\r\\n\\r\\n\\t\\t\\t// bottom row\\r\\n\\t\\t\\tte[ 12 ] = 0;\\r\\n\\t\\t\\tte[ 13 ] = 0;\\r\\n\\t\\t\\tte[ 14 ] = 0;\\r\\n\\t\\t\\tte[ 15 ] = 1;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlookAt: function () {\\r\\n\\r\\n\\t\\t\\tvar x = new Vector3();\\r\\n\\t\\t\\tvar y = new Vector3();\\r\\n\\t\\t\\tvar z = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function lookAt( eye, target, up ) {\\r\\n\\r\\n\\t\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\t\\tz.subVectors( eye, target );\\r\\n\\r\\n\\t\\t\\t\\tif ( z.lengthSq() === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// eye and target are in the same position\\r\\n\\r\\n\\t\\t\\t\\t\\tz.z = 1;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tz.normalize();\\r\\n\\t\\t\\t\\tx.crossVectors( up, z );\\r\\n\\r\\n\\t\\t\\t\\tif ( x.lengthSq() === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// up and z are parallel\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( Math.abs( up.z ) === 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tz.x += 0.0001;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tz.z += 0.0001;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tz.normalize();\\r\\n\\t\\t\\t\\t\\tx.crossVectors( up, z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tx.normalize();\\r\\n\\t\\t\\t\\ty.crossVectors( z, x );\\r\\n\\r\\n\\t\\t\\t\\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\\r\\n\\t\\t\\t\\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\\r\\n\\t\\t\\t\\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tmultiply: function ( m, n ) {\\r\\n\\r\\n\\t\\t\\tif ( n !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.multiplyMatrices( m, n );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this.multiplyMatrices( this, m );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tpremultiply: function ( m ) {\\r\\n\\r\\n\\t\\t\\treturn this.multiplyMatrices( m, this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyMatrices: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tvar ae = a.elements;\\r\\n\\t\\t\\tvar be = b.elements;\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\\r\\n\\t\\t\\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\\r\\n\\t\\t\\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\\r\\n\\t\\t\\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\\r\\n\\r\\n\\t\\t\\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\\r\\n\\t\\t\\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\\r\\n\\t\\t\\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\\r\\n\\t\\t\\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\\r\\n\\t\\t\\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\\r\\n\\t\\t\\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\\r\\n\\t\\t\\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\\r\\n\\r\\n\\t\\t\\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\\r\\n\\t\\t\\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\\r\\n\\t\\t\\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\\r\\n\\t\\t\\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\\r\\n\\r\\n\\t\\t\\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\\r\\n\\t\\t\\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\\r\\n\\t\\t\\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\\r\\n\\t\\t\\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\\r\\n\\r\\n\\t\\t\\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\\r\\n\\t\\t\\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\\r\\n\\t\\t\\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\\r\\n\\t\\t\\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\\r\\n\\t\\t\\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\\r\\n\\t\\t\\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\\r\\n\\t\\t\\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyToBufferAttribute: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function applyToBufferAttribute( attribute ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tv1.x = attribute.getX( i );\\r\\n\\t\\t\\t\\t\\tv1.y = attribute.getY( i );\\r\\n\\t\\t\\t\\t\\tv1.z = attribute.getZ( i );\\r\\n\\r\\n\\t\\t\\t\\t\\tv1.applyMatrix4( this );\\r\\n\\r\\n\\t\\t\\t\\t\\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn attribute;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tdeterminant: function () {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\\r\\n\\t\\t\\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\\r\\n\\t\\t\\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\\r\\n\\t\\t\\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\\r\\n\\r\\n\\t\\t\\t//TODO: make this more efficient\\r\\n\\t\\t\\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\\r\\n\\r\\n\\t\\t\\treturn (\\r\\n\\t\\t\\t\\tn41 * (\\r\\n\\t\\t\\t\\t\\t+ n14 * n23 * n32\\r\\n\\t\\t\\t\\t\\t - n13 * n24 * n32\\r\\n\\t\\t\\t\\t\\t - n14 * n22 * n33\\r\\n\\t\\t\\t\\t\\t + n12 * n24 * n33\\r\\n\\t\\t\\t\\t\\t + n13 * n22 * n34\\r\\n\\t\\t\\t\\t\\t - n12 * n23 * n34\\r\\n\\t\\t\\t\\t) +\\r\\n\\t\\t\\t\\tn42 * (\\r\\n\\t\\t\\t\\t\\t+ n11 * n23 * n34\\r\\n\\t\\t\\t\\t\\t - n11 * n24 * n33\\r\\n\\t\\t\\t\\t\\t + n14 * n21 * n33\\r\\n\\t\\t\\t\\t\\t - n13 * n21 * n34\\r\\n\\t\\t\\t\\t\\t + n13 * n24 * n31\\r\\n\\t\\t\\t\\t\\t - n14 * n23 * n31\\r\\n\\t\\t\\t\\t) +\\r\\n\\t\\t\\t\\tn43 * (\\r\\n\\t\\t\\t\\t\\t+ n11 * n24 * n32\\r\\n\\t\\t\\t\\t\\t - n11 * n22 * n34\\r\\n\\t\\t\\t\\t\\t - n14 * n21 * n32\\r\\n\\t\\t\\t\\t\\t + n12 * n21 * n34\\r\\n\\t\\t\\t\\t\\t + n14 * n22 * n31\\r\\n\\t\\t\\t\\t\\t - n12 * n24 * n31\\r\\n\\t\\t\\t\\t) +\\r\\n\\t\\t\\t\\tn44 * (\\r\\n\\t\\t\\t\\t\\t- n13 * n22 * n31\\r\\n\\t\\t\\t\\t\\t - n11 * n23 * n32\\r\\n\\t\\t\\t\\t\\t + n11 * n22 * n33\\r\\n\\t\\t\\t\\t\\t + n13 * n21 * n32\\r\\n\\t\\t\\t\\t\\t - n12 * n21 * n33\\r\\n\\t\\t\\t\\t\\t + n12 * n23 * n31\\r\\n\\t\\t\\t\\t)\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttranspose: function () {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\t\\t\\tvar tmp;\\r\\n\\r\\n\\t\\t\\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\\r\\n\\t\\t\\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\\r\\n\\t\\t\\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\\r\\n\\r\\n\\t\\t\\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\\r\\n\\t\\t\\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\\r\\n\\t\\t\\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetPosition: function ( v ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tte[ 12 ] = v.x;\\r\\n\\t\\t\\tte[ 13 ] = v.y;\\r\\n\\t\\t\\tte[ 14 ] = v.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetInverse: function ( m, throwOnDegenerate ) {\\r\\n\\r\\n\\t\\t\\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\\r\\n\\t\\t\\tvar te = this.elements,\\r\\n\\t\\t\\t\\tme = m.elements,\\r\\n\\r\\n\\t\\t\\t\\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\\r\\n\\t\\t\\t\\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\\r\\n\\t\\t\\t\\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\\r\\n\\t\\t\\t\\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\\r\\n\\r\\n\\t\\t\\t\\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\\r\\n\\t\\t\\t\\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\\r\\n\\t\\t\\t\\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\\r\\n\\t\\t\\t\\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\\r\\n\\r\\n\\t\\t\\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\\r\\n\\r\\n\\t\\t\\tif ( det === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar msg = \\\"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\\\";\\r\\n\\r\\n\\t\\t\\t\\tif ( throwOnDegenerate === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthrow new Error( msg );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( msg );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn this.identity();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar detInv = 1 / det;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = t11 * detInv;\\r\\n\\t\\t\\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\\r\\n\\t\\t\\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\\r\\n\\t\\t\\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\\r\\n\\r\\n\\t\\t\\tte[ 4 ] = t12 * detInv;\\r\\n\\t\\t\\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\\r\\n\\t\\t\\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\\r\\n\\t\\t\\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\\r\\n\\r\\n\\t\\t\\tte[ 8 ] = t13 * detInv;\\r\\n\\t\\t\\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\\r\\n\\t\\t\\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\\r\\n\\t\\t\\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\\r\\n\\r\\n\\t\\t\\tte[ 12 ] = t14 * detInv;\\r\\n\\t\\t\\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\\r\\n\\t\\t\\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\\r\\n\\t\\t\\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tscale: function ( v ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\t\\t\\tvar x = v.x, y = v.y, z = v.z;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\\r\\n\\t\\t\\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\\r\\n\\t\\t\\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\\r\\n\\t\\t\\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetMaxScaleOnAxis: function () {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\\r\\n\\t\\t\\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\\r\\n\\t\\t\\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\\r\\n\\r\\n\\t\\t\\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeTranslation: function ( x, y, z ) {\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\t1, 0, 0, x,\\r\\n\\t\\t\\t\\t0, 1, 0, y,\\r\\n\\t\\t\\t\\t0, 0, 1, z,\\r\\n\\t\\t\\t\\t0, 0, 0, 1\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeRotationX: function ( theta ) {\\r\\n\\r\\n\\t\\t\\tvar c = Math.cos( theta ), s = Math.sin( theta );\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\t1, 0, 0, 0,\\r\\n\\t\\t\\t\\t0, c, - s, 0,\\r\\n\\t\\t\\t\\t0, s, c, 0,\\r\\n\\t\\t\\t\\t0, 0, 0, 1\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeRotationY: function ( theta ) {\\r\\n\\r\\n\\t\\t\\tvar c = Math.cos( theta ), s = Math.sin( theta );\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\t c, 0, s, 0,\\r\\n\\t\\t\\t\\t 0, 1, 0, 0,\\r\\n\\t\\t\\t\\t- s, 0, c, 0,\\r\\n\\t\\t\\t\\t 0, 0, 0, 1\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeRotationZ: function ( theta ) {\\r\\n\\r\\n\\t\\t\\tvar c = Math.cos( theta ), s = Math.sin( theta );\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\tc, - s, 0, 0,\\r\\n\\t\\t\\t\\ts, c, 0, 0,\\r\\n\\t\\t\\t\\t0, 0, 1, 0,\\r\\n\\t\\t\\t\\t0, 0, 0, 1\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeRotationAxis: function ( axis, angle ) {\\r\\n\\r\\n\\t\\t\\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\\r\\n\\r\\n\\t\\t\\tvar c = Math.cos( angle );\\r\\n\\t\\t\\tvar s = Math.sin( angle );\\r\\n\\t\\t\\tvar t = 1 - c;\\r\\n\\t\\t\\tvar x = axis.x, y = axis.y, z = axis.z;\\r\\n\\t\\t\\tvar tx = t * x, ty = t * y;\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\\r\\n\\t\\t\\t\\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\\r\\n\\t\\t\\t\\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\\r\\n\\t\\t\\t\\t0, 0, 0, 1\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t return this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeScale: function ( x, y, z ) {\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\tx, 0, 0, 0,\\r\\n\\t\\t\\t\\t0, y, 0, 0,\\r\\n\\t\\t\\t\\t0, 0, z, 0,\\r\\n\\t\\t\\t\\t0, 0, 0, 1\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeShear: function ( x, y, z ) {\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\t1, y, z, 0,\\r\\n\\t\\t\\t\\tx, 1, z, 0,\\r\\n\\t\\t\\t\\tx, y, 1, 0,\\r\\n\\t\\t\\t\\t0, 0, 0, 1\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcompose: function ( position, quaternion, scale ) {\\r\\n\\r\\n\\t\\t\\tthis.makeRotationFromQuaternion( quaternion );\\r\\n\\t\\t\\tthis.scale( scale );\\r\\n\\t\\t\\tthis.setPosition( position );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdecompose: function () {\\r\\n\\r\\n\\t\\t\\tvar vector = new Vector3();\\r\\n\\t\\t\\tvar matrix = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function decompose( position, quaternion, scale ) {\\r\\n\\r\\n\\t\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\t\\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\\r\\n\\t\\t\\t\\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\\r\\n\\t\\t\\t\\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\\r\\n\\r\\n\\t\\t\\t\\t// if determine is negative, we need to invert one scale\\r\\n\\t\\t\\t\\tvar det = this.determinant();\\r\\n\\t\\t\\t\\tif ( det < 0 ) sx = - sx;\\r\\n\\r\\n\\t\\t\\t\\tposition.x = te[ 12 ];\\r\\n\\t\\t\\t\\tposition.y = te[ 13 ];\\r\\n\\t\\t\\t\\tposition.z = te[ 14 ];\\r\\n\\r\\n\\t\\t\\t\\t// scale the rotation part\\r\\n\\t\\t\\t\\tmatrix.copy( this );\\r\\n\\r\\n\\t\\t\\t\\tvar invSX = 1 / sx;\\r\\n\\t\\t\\t\\tvar invSY = 1 / sy;\\r\\n\\t\\t\\t\\tvar invSZ = 1 / sz;\\r\\n\\r\\n\\t\\t\\t\\tmatrix.elements[ 0 ] *= invSX;\\r\\n\\t\\t\\t\\tmatrix.elements[ 1 ] *= invSX;\\r\\n\\t\\t\\t\\tmatrix.elements[ 2 ] *= invSX;\\r\\n\\r\\n\\t\\t\\t\\tmatrix.elements[ 4 ] *= invSY;\\r\\n\\t\\t\\t\\tmatrix.elements[ 5 ] *= invSY;\\r\\n\\t\\t\\t\\tmatrix.elements[ 6 ] *= invSY;\\r\\n\\r\\n\\t\\t\\t\\tmatrix.elements[ 8 ] *= invSZ;\\r\\n\\t\\t\\t\\tmatrix.elements[ 9 ] *= invSZ;\\r\\n\\t\\t\\t\\tmatrix.elements[ 10 ] *= invSZ;\\r\\n\\r\\n\\t\\t\\t\\tquaternion.setFromRotationMatrix( matrix );\\r\\n\\r\\n\\t\\t\\t\\tscale.x = sx;\\r\\n\\t\\t\\t\\tscale.y = sy;\\r\\n\\t\\t\\t\\tscale.z = sz;\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tmakePerspective: function ( left, right, top, bottom, near, far ) {\\r\\n\\r\\n\\t\\t\\tif ( far === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\t\\t\\tvar x = 2 * near / ( right - left );\\r\\n\\t\\t\\tvar y = 2 * near / ( top - bottom );\\r\\n\\r\\n\\t\\t\\tvar a = ( right + left ) / ( right - left );\\r\\n\\t\\t\\tvar b = ( top + bottom ) / ( top - bottom );\\r\\n\\t\\t\\tvar c = - ( far + near ) / ( far - near );\\r\\n\\t\\t\\tvar d = - 2 * far * near / ( far - near );\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = x;\\tte[ 4 ] = 0;\\tte[ 8 ] = a;\\tte[ 12 ] = 0;\\r\\n\\t\\t\\tte[ 1 ] = 0;\\tte[ 5 ] = y;\\tte[ 9 ] = b;\\tte[ 13 ] = 0;\\r\\n\\t\\t\\tte[ 2 ] = 0;\\tte[ 6 ] = 0;\\tte[ 10 ] = c;\\tte[ 14 ] = d;\\r\\n\\t\\t\\tte[ 3 ] = 0;\\tte[ 7 ] = 0;\\tte[ 11 ] = - 1;\\tte[ 15 ] = 0;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\t\\t\\tvar w = 1.0 / ( right - left );\\r\\n\\t\\t\\tvar h = 1.0 / ( top - bottom );\\r\\n\\t\\t\\tvar p = 1.0 / ( far - near );\\r\\n\\r\\n\\t\\t\\tvar x = ( right + left ) * w;\\r\\n\\t\\t\\tvar y = ( top + bottom ) * h;\\r\\n\\t\\t\\tvar z = ( far + near ) * p;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = 2 * w;\\tte[ 4 ] = 0;\\tte[ 8 ] = 0;\\tte[ 12 ] = - x;\\r\\n\\t\\t\\tte[ 1 ] = 0;\\tte[ 5 ] = 2 * h;\\tte[ 9 ] = 0;\\tte[ 13 ] = - y;\\r\\n\\t\\t\\tte[ 2 ] = 0;\\tte[ 6 ] = 0;\\tte[ 10 ] = - 2 * p;\\tte[ 14 ] = - z;\\r\\n\\t\\t\\tte[ 3 ] = 0;\\tte[ 7 ] = 0;\\tte[ 11 ] = 0;\\tte[ 15 ] = 1;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( matrix ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\t\\t\\tvar me = matrix.elements;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 16; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( te[ i ] !== me[ i ] ) return false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 16; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.elements[ i ] = array[ i + offset ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( array === undefined ) array = [];\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tarray[ offset ] = te[ 0 ];\\r\\n\\t\\t\\tarray[ offset + 1 ] = te[ 1 ];\\r\\n\\t\\t\\tarray[ offset + 2 ] = te[ 2 ];\\r\\n\\t\\t\\tarray[ offset + 3 ] = te[ 3 ];\\r\\n\\r\\n\\t\\t\\tarray[ offset + 4 ] = te[ 4 ];\\r\\n\\t\\t\\tarray[ offset + 5 ] = te[ 5 ];\\r\\n\\t\\t\\tarray[ offset + 6 ] = te[ 6 ];\\r\\n\\t\\t\\tarray[ offset + 7 ] = te[ 7 ];\\r\\n\\r\\n\\t\\t\\tarray[ offset + 8 ] = te[ 8 ];\\r\\n\\t\\t\\tarray[ offset + 9 ] = te[ 9 ];\\r\\n\\t\\t\\tarray[ offset + 10 ] = te[ 10 ];\\r\\n\\t\\t\\tarray[ offset + 11 ] = te[ 11 ];\\r\\n\\r\\n\\t\\t\\tarray[ offset + 12 ] = te[ 12 ];\\r\\n\\t\\t\\tarray[ offset + 13 ] = te[ 13 ];\\r\\n\\t\\t\\tarray[ offset + 14 ] = te[ 14 ];\\r\\n\\t\\t\\tarray[ offset + 15 ] = te[ 15 ];\\r\\n\\r\\n\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t */\\r\\n\\r\\n\\tfunction Quaternion( x, y, z, w ) {\\r\\n\\r\\n\\t\\tthis._x = x || 0;\\r\\n\\t\\tthis._y = y || 0;\\r\\n\\t\\tthis._z = z || 0;\\r\\n\\t\\tthis._w = ( w !== undefined ) ? w : 1;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Quaternion, {\\r\\n\\r\\n\\t\\tslerp: function ( qa, qb, qm, t ) {\\r\\n\\r\\n\\t\\t\\treturn qm.copy( qa ).slerp( qb, t );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\\r\\n\\r\\n\\t\\t\\t// fuzz-free, array-based Quaternion SLERP operation\\r\\n\\r\\n\\t\\t\\tvar x0 = src0[ srcOffset0 + 0 ],\\r\\n\\t\\t\\t\\ty0 = src0[ srcOffset0 + 1 ],\\r\\n\\t\\t\\t\\tz0 = src0[ srcOffset0 + 2 ],\\r\\n\\t\\t\\t\\tw0 = src0[ srcOffset0 + 3 ],\\r\\n\\r\\n\\t\\t\\t\\tx1 = src1[ srcOffset1 + 0 ],\\r\\n\\t\\t\\t\\ty1 = src1[ srcOffset1 + 1 ],\\r\\n\\t\\t\\t\\tz1 = src1[ srcOffset1 + 2 ],\\r\\n\\t\\t\\t\\tw1 = src1[ srcOffset1 + 3 ];\\r\\n\\r\\n\\t\\t\\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar s = 1 - t,\\r\\n\\r\\n\\t\\t\\t\\t\\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\\r\\n\\r\\n\\t\\t\\t\\t\\tdir = ( cos >= 0 ? 1 : - 1 ),\\r\\n\\t\\t\\t\\t\\tsqrSin = 1 - cos * cos;\\r\\n\\r\\n\\t\\t\\t\\t// Skip the Slerp for tiny steps to avoid numeric problems:\\r\\n\\t\\t\\t\\tif ( sqrSin > Number.EPSILON ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar sin = Math.sqrt( sqrSin ),\\r\\n\\t\\t\\t\\t\\t\\tlen = Math.atan2( sin, cos * dir );\\r\\n\\r\\n\\t\\t\\t\\t\\ts = Math.sin( s * len ) / sin;\\r\\n\\t\\t\\t\\t\\tt = Math.sin( t * len ) / sin;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar tDir = t * dir;\\r\\n\\r\\n\\t\\t\\t\\tx0 = x0 * s + x1 * tDir;\\r\\n\\t\\t\\t\\ty0 = y0 * s + y1 * tDir;\\r\\n\\t\\t\\t\\tz0 = z0 * s + z1 * tDir;\\r\\n\\t\\t\\t\\tw0 = w0 * s + w1 * tDir;\\r\\n\\r\\n\\t\\t\\t\\t// Normalize in case we just did a lerp:\\r\\n\\t\\t\\t\\tif ( s === 1 - t ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\\r\\n\\r\\n\\t\\t\\t\\t\\tx0 *= f;\\r\\n\\t\\t\\t\\t\\ty0 *= f;\\r\\n\\t\\t\\t\\t\\tz0 *= f;\\r\\n\\t\\t\\t\\t\\tw0 *= f;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tdst[ dstOffset ] = x0;\\r\\n\\t\\t\\tdst[ dstOffset + 1 ] = y0;\\r\\n\\t\\t\\tdst[ dstOffset + 2 ] = z0;\\r\\n\\t\\t\\tdst[ dstOffset + 3 ] = w0;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperties( Quaternion.prototype, {\\r\\n\\r\\n\\t\\tx: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this._x;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = value;\\r\\n\\t\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ty: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this._y;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._y = value;\\r\\n\\t\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tz: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this._z;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._z = value;\\r\\n\\t\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tw: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this._w;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._w = value;\\r\\n\\t\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Quaternion.prototype, {\\r\\n\\r\\n\\t\\tset: function ( x, y, z, w ) {\\r\\n\\r\\n\\t\\t\\tthis._x = x;\\r\\n\\t\\t\\tthis._y = y;\\r\\n\\t\\t\\tthis._z = z;\\r\\n\\t\\t\\tthis._w = w;\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this._x, this._y, this._z, this._w );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( quaternion ) {\\r\\n\\r\\n\\t\\t\\tthis._x = quaternion.x;\\r\\n\\t\\t\\tthis._y = quaternion.y;\\r\\n\\t\\t\\tthis._z = quaternion.z;\\r\\n\\t\\t\\tthis._w = quaternion.w;\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromEuler: function ( euler, update ) {\\r\\n\\r\\n\\t\\t\\tif ( ! ( euler && euler.isEuler ) ) {\\r\\n\\r\\n\\t\\t\\t\\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\\r\\n\\r\\n\\t\\t\\t// http://www.mathworks.com/matlabcentral/fileexchange/\\r\\n\\t\\t\\t// \\t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\\r\\n\\t\\t\\t//\\tcontent/SpinCalc.m\\r\\n\\r\\n\\t\\t\\tvar cos = Math.cos;\\r\\n\\t\\t\\tvar sin = Math.sin;\\r\\n\\r\\n\\t\\t\\tvar c1 = cos( x / 2 );\\r\\n\\t\\t\\tvar c2 = cos( y / 2 );\\r\\n\\t\\t\\tvar c3 = cos( z / 2 );\\r\\n\\r\\n\\t\\t\\tvar s1 = sin( x / 2 );\\r\\n\\t\\t\\tvar s2 = sin( y / 2 );\\r\\n\\t\\t\\tvar s3 = sin( z / 2 );\\r\\n\\r\\n\\t\\t\\tif ( order === 'XYZ' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\\r\\n\\t\\t\\t\\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\\r\\n\\t\\t\\t\\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\\r\\n\\t\\t\\t\\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'YXZ' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\\r\\n\\t\\t\\t\\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\\r\\n\\t\\t\\t\\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\\r\\n\\t\\t\\t\\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'ZXY' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\\r\\n\\t\\t\\t\\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\\r\\n\\t\\t\\t\\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\\r\\n\\t\\t\\t\\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'ZYX' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\\r\\n\\t\\t\\t\\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\\r\\n\\t\\t\\t\\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\\r\\n\\t\\t\\t\\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'YZX' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\\r\\n\\t\\t\\t\\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\\r\\n\\t\\t\\t\\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\\r\\n\\t\\t\\t\\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'XZY' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\\r\\n\\t\\t\\t\\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\\r\\n\\t\\t\\t\\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\\r\\n\\t\\t\\t\\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( update !== false ) this.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromAxisAngle: function ( axis, angle ) {\\r\\n\\r\\n\\t\\t\\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\\r\\n\\r\\n\\t\\t\\t// assumes axis is normalized\\r\\n\\r\\n\\t\\t\\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\\r\\n\\r\\n\\t\\t\\tthis._x = axis.x * s;\\r\\n\\t\\t\\tthis._y = axis.y * s;\\r\\n\\t\\t\\tthis._z = axis.z * s;\\r\\n\\t\\t\\tthis._w = Math.cos( halfAngle );\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromRotationMatrix: function ( m ) {\\r\\n\\r\\n\\t\\t\\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\\r\\n\\r\\n\\t\\t\\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\\r\\n\\r\\n\\t\\t\\tvar te = m.elements,\\r\\n\\r\\n\\t\\t\\t\\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\\r\\n\\t\\t\\t\\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\\r\\n\\t\\t\\t\\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\\r\\n\\r\\n\\t\\t\\t\\ttrace = m11 + m22 + m33,\\r\\n\\t\\t\\t\\ts;\\r\\n\\r\\n\\t\\t\\tif ( trace > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\ts = 0.5 / Math.sqrt( trace + 1.0 );\\r\\n\\r\\n\\t\\t\\t\\tthis._w = 0.25 / s;\\r\\n\\t\\t\\t\\tthis._x = ( m32 - m23 ) * s;\\r\\n\\t\\t\\t\\tthis._y = ( m13 - m31 ) * s;\\r\\n\\t\\t\\t\\tthis._z = ( m21 - m12 ) * s;\\r\\n\\r\\n\\t\\t\\t} else if ( m11 > m22 && m11 > m33 ) {\\r\\n\\r\\n\\t\\t\\t\\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\\r\\n\\r\\n\\t\\t\\t\\tthis._w = ( m32 - m23 ) / s;\\r\\n\\t\\t\\t\\tthis._x = 0.25 * s;\\r\\n\\t\\t\\t\\tthis._y = ( m12 + m21 ) / s;\\r\\n\\t\\t\\t\\tthis._z = ( m13 + m31 ) / s;\\r\\n\\r\\n\\t\\t\\t} else if ( m22 > m33 ) {\\r\\n\\r\\n\\t\\t\\t\\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\\r\\n\\r\\n\\t\\t\\t\\tthis._w = ( m13 - m31 ) / s;\\r\\n\\t\\t\\t\\tthis._x = ( m12 + m21 ) / s;\\r\\n\\t\\t\\t\\tthis._y = 0.25 * s;\\r\\n\\t\\t\\t\\tthis._z = ( m23 + m32 ) / s;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\\r\\n\\r\\n\\t\\t\\t\\tthis._w = ( m21 - m12 ) / s;\\r\\n\\t\\t\\t\\tthis._x = ( m13 + m31 ) / s;\\r\\n\\t\\t\\t\\tthis._y = ( m23 + m32 ) / s;\\r\\n\\t\\t\\t\\tthis._z = 0.25 * s;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromUnitVectors: function () {\\r\\n\\r\\n\\t\\t\\t// assumes direction vectors vFrom and vTo are normalized\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\t\\t\\tvar r;\\r\\n\\r\\n\\t\\t\\tvar EPS = 0.000001;\\r\\n\\r\\n\\t\\t\\treturn function setFromUnitVectors( vFrom, vTo ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( v1 === undefined ) v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\t\\tr = vFrom.dot( vTo ) + 1;\\r\\n\\r\\n\\t\\t\\t\\tif ( r < EPS ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tr = 0;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tv1.set( - vFrom.y, vFrom.x, 0 );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tv1.set( 0, - vFrom.z, vFrom.y );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tv1.crossVectors( vFrom, vTo );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis._x = v1.x;\\r\\n\\t\\t\\t\\tthis._y = v1.y;\\r\\n\\t\\t\\t\\tthis._z = v1.z;\\r\\n\\t\\t\\t\\tthis._w = r;\\r\\n\\r\\n\\t\\t\\t\\treturn this.normalize();\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tinverse: function () {\\r\\n\\r\\n\\t\\t\\treturn this.conjugate().normalize();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tconjugate: function () {\\r\\n\\r\\n\\t\\t\\tthis._x *= - 1;\\r\\n\\t\\t\\tthis._y *= - 1;\\r\\n\\t\\t\\tthis._z *= - 1;\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdot: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlengthSq: function () {\\r\\n\\r\\n\\t\\t\\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlength: function () {\\r\\n\\r\\n\\t\\t\\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormalize: function () {\\r\\n\\r\\n\\t\\t\\tvar l = this.length();\\r\\n\\r\\n\\t\\t\\tif ( l === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = 0;\\r\\n\\t\\t\\t\\tthis._y = 0;\\r\\n\\t\\t\\t\\tthis._z = 0;\\r\\n\\t\\t\\t\\tthis._w = 1;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tl = 1 / l;\\r\\n\\r\\n\\t\\t\\t\\tthis._x = this._x * l;\\r\\n\\t\\t\\t\\tthis._y = this._y * l;\\r\\n\\t\\t\\t\\tthis._z = this._z * l;\\r\\n\\t\\t\\t\\tthis._w = this._w * l;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiply: function ( q, p ) {\\r\\n\\r\\n\\t\\t\\tif ( p !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.multiplyQuaternions( q, p );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this.multiplyQuaternions( this, q );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tpremultiply: function ( q ) {\\r\\n\\r\\n\\t\\t\\treturn this.multiplyQuaternions( q, this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyQuaternions: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\\r\\n\\r\\n\\t\\t\\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\\r\\n\\t\\t\\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\\r\\n\\r\\n\\t\\t\\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\\r\\n\\t\\t\\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\\r\\n\\t\\t\\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\\r\\n\\t\\t\\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tslerp: function ( qb, t ) {\\r\\n\\r\\n\\t\\t\\tif ( t === 0 ) return this;\\r\\n\\t\\t\\tif ( t === 1 ) return this.copy( qb );\\r\\n\\r\\n\\t\\t\\tvar x = this._x, y = this._y, z = this._z, w = this._w;\\r\\n\\r\\n\\t\\t\\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\\r\\n\\r\\n\\t\\t\\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\\r\\n\\r\\n\\t\\t\\tif ( cosHalfTheta < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._w = - qb._w;\\r\\n\\t\\t\\t\\tthis._x = - qb._x;\\r\\n\\t\\t\\t\\tthis._y = - qb._y;\\r\\n\\t\\t\\t\\tthis._z = - qb._z;\\r\\n\\r\\n\\t\\t\\t\\tcosHalfTheta = - cosHalfTheta;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.copy( qb );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( cosHalfTheta >= 1.0 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._w = w;\\r\\n\\t\\t\\t\\tthis._x = x;\\r\\n\\t\\t\\t\\tthis._y = y;\\r\\n\\t\\t\\t\\tthis._z = z;\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\\r\\n\\r\\n\\t\\t\\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._w = 0.5 * ( w + this._w );\\r\\n\\t\\t\\t\\tthis._x = 0.5 * ( x + this._x );\\r\\n\\t\\t\\t\\tthis._y = 0.5 * ( y + this._y );\\r\\n\\t\\t\\t\\tthis._z = 0.5 * ( z + this._z );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\\r\\n\\t\\t\\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\\r\\n\\t\\t\\t\\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\\r\\n\\r\\n\\t\\t\\tthis._w = ( w * ratioA + this._w * ratioB );\\r\\n\\t\\t\\tthis._x = ( x * ratioA + this._x * ratioB );\\r\\n\\t\\t\\tthis._y = ( y * ratioA + this._y * ratioB );\\r\\n\\t\\t\\tthis._z = ( z * ratioA + this._z * ratioB );\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( quaternion ) {\\r\\n\\r\\n\\t\\t\\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tthis._x = array[ offset ];\\r\\n\\t\\t\\tthis._y = array[ offset + 1 ];\\r\\n\\t\\t\\tthis._z = array[ offset + 2 ];\\r\\n\\t\\t\\tthis._w = array[ offset + 3 ];\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( array === undefined ) array = [];\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tarray[ offset ] = this._x;\\r\\n\\t\\t\\tarray[ offset + 1 ] = this._y;\\r\\n\\t\\t\\tarray[ offset + 2 ] = this._z;\\r\\n\\t\\t\\tarray[ offset + 3 ] = this._w;\\r\\n\\r\\n\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tonChange: function ( callback ) {\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback = callback;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tonChangeCallback: function () {}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author kile / http://kile.stravaganza.org/\\r\\n\\t * @author philogb / http://blog.thejit.org/\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author egraether / http://egraether.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction Vector3( x, y, z ) {\\r\\n\\r\\n\\t\\tthis.x = x || 0;\\r\\n\\t\\tthis.y = y || 0;\\r\\n\\t\\tthis.z = z || 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Vector3.prototype, {\\r\\n\\r\\n\\t\\tisVector3: true,\\r\\n\\r\\n\\t\\tset: function ( x, y, z ) {\\r\\n\\r\\n\\t\\t\\tthis.x = x;\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\t\\t\\tthis.z = z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\tthis.x = scalar;\\r\\n\\t\\t\\tthis.y = scalar;\\r\\n\\t\\t\\tthis.z = scalar;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetX: function ( x ) {\\r\\n\\r\\n\\t\\t\\tthis.x = x;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetY: function ( y ) {\\r\\n\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetZ: function ( z ) {\\r\\n\\r\\n\\t\\t\\tthis.z = z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetComponent: function ( index, value ) {\\r\\n\\r\\n\\t\\t\\tswitch ( index ) {\\r\\n\\r\\n\\t\\t\\t\\tcase 0: this.x = value; break;\\r\\n\\t\\t\\t\\tcase 1: this.y = value; break;\\r\\n\\t\\t\\t\\tcase 2: this.z = value; break;\\r\\n\\t\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetComponent: function ( index ) {\\r\\n\\r\\n\\t\\t\\tswitch ( index ) {\\r\\n\\r\\n\\t\\t\\t\\tcase 0: return this.x;\\r\\n\\t\\t\\t\\tcase 1: return this.y;\\r\\n\\t\\t\\t\\tcase 2: return this.z;\\r\\n\\t\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.x, this.y, this.z );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x = v.x;\\r\\n\\t\\t\\tthis.y = v.y;\\r\\n\\t\\t\\tthis.z = v.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tadd: function ( v, w ) {\\r\\n\\r\\n\\t\\t\\tif ( w !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.addVectors( v, w );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x += v.x;\\r\\n\\t\\t\\tthis.y += v.y;\\r\\n\\t\\t\\tthis.z += v.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tthis.x += s;\\r\\n\\t\\t\\tthis.y += s;\\r\\n\\t\\t\\tthis.z += s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddVectors: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tthis.x = a.x + b.x;\\r\\n\\t\\t\\tthis.y = a.y + b.y;\\r\\n\\t\\t\\tthis.z = a.z + b.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddScaledVector: function ( v, s ) {\\r\\n\\r\\n\\t\\t\\tthis.x += v.x * s;\\r\\n\\t\\t\\tthis.y += v.y * s;\\r\\n\\t\\t\\tthis.z += v.z * s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsub: function ( v, w ) {\\r\\n\\r\\n\\t\\t\\tif ( w !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.subVectors( v, w );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x -= v.x;\\r\\n\\t\\t\\tthis.y -= v.y;\\r\\n\\t\\t\\tthis.z -= v.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsubScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tthis.x -= s;\\r\\n\\t\\t\\tthis.y -= s;\\r\\n\\t\\t\\tthis.z -= s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsubVectors: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tthis.x = a.x - b.x;\\r\\n\\t\\t\\tthis.y = a.y - b.y;\\r\\n\\t\\t\\tthis.z = a.z - b.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiply: function ( v, w ) {\\r\\n\\r\\n\\t\\t\\tif ( w !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.multiplyVectors( v, w );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x *= v.x;\\r\\n\\t\\t\\tthis.y *= v.y;\\r\\n\\t\\t\\tthis.z *= v.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\tthis.x *= scalar;\\r\\n\\t\\t\\tthis.y *= scalar;\\r\\n\\t\\t\\tthis.z *= scalar;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyVectors: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tthis.x = a.x * b.x;\\r\\n\\t\\t\\tthis.y = a.y * b.y;\\r\\n\\t\\t\\tthis.z = a.z * b.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyEuler: function () {\\r\\n\\r\\n\\t\\t\\tvar quaternion = new Quaternion();\\r\\n\\r\\n\\t\\t\\treturn function applyEuler( euler ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( ! ( euler && euler.isEuler ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tapplyAxisAngle: function () {\\r\\n\\r\\n\\t\\t\\tvar quaternion = new Quaternion();\\r\\n\\r\\n\\t\\t\\treturn function applyAxisAngle( axis, angle ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tapplyMatrix3: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar x = this.x, y = this.y, z = this.z;\\r\\n\\t\\t\\tvar e = m.elements;\\r\\n\\r\\n\\t\\t\\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\\r\\n\\t\\t\\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\\r\\n\\t\\t\\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyMatrix4: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar x = this.x, y = this.y, z = this.z;\\r\\n\\t\\t\\tvar e = m.elements;\\r\\n\\r\\n\\t\\t\\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\\r\\n\\r\\n\\t\\t\\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\\r\\n\\t\\t\\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\\r\\n\\t\\t\\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyQuaternion: function ( q ) {\\r\\n\\r\\n\\t\\t\\tvar x = this.x, y = this.y, z = this.z;\\r\\n\\t\\t\\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\\r\\n\\r\\n\\t\\t\\t// calculate quat * vector\\r\\n\\r\\n\\t\\t\\tvar ix = qw * x + qy * z - qz * y;\\r\\n\\t\\t\\tvar iy = qw * y + qz * x - qx * z;\\r\\n\\t\\t\\tvar iz = qw * z + qx * y - qy * x;\\r\\n\\t\\t\\tvar iw = - qx * x - qy * y - qz * z;\\r\\n\\r\\n\\t\\t\\t// calculate result * inverse quat\\r\\n\\r\\n\\t\\t\\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\\r\\n\\t\\t\\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\\r\\n\\t\\t\\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tproject: function () {\\r\\n\\r\\n\\t\\t\\tvar matrix = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function project( camera ) {\\r\\n\\r\\n\\t\\t\\t\\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\\r\\n\\t\\t\\t\\treturn this.applyMatrix4( matrix );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tunproject: function () {\\r\\n\\r\\n\\t\\t\\tvar matrix = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function unproject( camera ) {\\r\\n\\r\\n\\t\\t\\t\\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\\r\\n\\t\\t\\t\\treturn this.applyMatrix4( matrix );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttransformDirection: function ( m ) {\\r\\n\\r\\n\\t\\t\\t// input: THREE.Matrix4 affine matrix\\r\\n\\t\\t\\t// vector interpreted as a direction\\r\\n\\r\\n\\t\\t\\tvar x = this.x, y = this.y, z = this.z;\\r\\n\\t\\t\\tvar e = m.elements;\\r\\n\\r\\n\\t\\t\\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\\r\\n\\t\\t\\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\\r\\n\\t\\t\\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\\r\\n\\r\\n\\t\\t\\treturn this.normalize();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdivide: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x /= v.x;\\r\\n\\t\\t\\tthis.y /= v.y;\\r\\n\\t\\t\\tthis.z /= v.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdivideScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\treturn this.multiplyScalar( 1 / scalar );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmin: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.min( this.x, v.x );\\r\\n\\t\\t\\tthis.y = Math.min( this.y, v.y );\\r\\n\\t\\t\\tthis.z = Math.min( this.z, v.z );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmax: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.max( this.x, v.x );\\r\\n\\t\\t\\tthis.y = Math.max( this.y, v.y );\\r\\n\\t\\t\\tthis.z = Math.max( this.z, v.z );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclamp: function ( min, max ) {\\r\\n\\r\\n\\t\\t\\t// assumes min < max, componentwise\\r\\n\\r\\n\\t\\t\\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\\r\\n\\t\\t\\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\\r\\n\\t\\t\\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclampScalar: function () {\\r\\n\\r\\n\\t\\t\\tvar min = new Vector3();\\r\\n\\t\\t\\tvar max = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function clampScalar( minVal, maxVal ) {\\r\\n\\r\\n\\t\\t\\t\\tmin.set( minVal, minVal, minVal );\\r\\n\\t\\t\\t\\tmax.set( maxVal, maxVal, maxVal );\\r\\n\\r\\n\\t\\t\\t\\treturn this.clamp( min, max );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tclampLength: function ( min, max ) {\\r\\n\\r\\n\\t\\t\\tvar length = this.length();\\r\\n\\r\\n\\t\\t\\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfloor: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.floor( this.x );\\r\\n\\t\\t\\tthis.y = Math.floor( this.y );\\r\\n\\t\\t\\tthis.z = Math.floor( this.z );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tceil: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.ceil( this.x );\\r\\n\\t\\t\\tthis.y = Math.ceil( this.y );\\r\\n\\t\\t\\tthis.z = Math.ceil( this.z );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tround: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.round( this.x );\\r\\n\\t\\t\\tthis.y = Math.round( this.y );\\r\\n\\t\\t\\tthis.z = Math.round( this.z );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\troundToZero: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\\r\\n\\t\\t\\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\\r\\n\\t\\t\\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnegate: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = - this.x;\\r\\n\\t\\t\\tthis.y = - this.y;\\r\\n\\t\\t\\tthis.z = - this.z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdot: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn this.x * v.x + this.y * v.y + this.z * v.z;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// TODO lengthSquared?\\r\\n\\r\\n\\t\\tlengthSq: function () {\\r\\n\\r\\n\\t\\t\\treturn this.x * this.x + this.y * this.y + this.z * this.z;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlength: function () {\\r\\n\\r\\n\\t\\t\\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmanhattanLength: function () {\\r\\n\\r\\n\\t\\t\\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormalize: function () {\\r\\n\\r\\n\\t\\t\\treturn this.divideScalar( this.length() || 1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetLength: function ( length ) {\\r\\n\\r\\n\\t\\t\\treturn this.normalize().multiplyScalar( length );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlerp: function ( v, alpha ) {\\r\\n\\r\\n\\t\\t\\tthis.x += ( v.x - this.x ) * alpha;\\r\\n\\t\\t\\tthis.y += ( v.y - this.y ) * alpha;\\r\\n\\t\\t\\tthis.z += ( v.z - this.z ) * alpha;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlerpVectors: function ( v1, v2, alpha ) {\\r\\n\\r\\n\\t\\t\\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcross: function ( v, w ) {\\r\\n\\r\\n\\t\\t\\tif ( w !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.crossVectors( v, w );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this.crossVectors( this, v );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcrossVectors: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tvar ax = a.x, ay = a.y, az = a.z;\\r\\n\\t\\t\\tvar bx = b.x, by = b.y, bz = b.z;\\r\\n\\r\\n\\t\\t\\tthis.x = ay * bz - az * by;\\r\\n\\t\\t\\tthis.y = az * bx - ax * bz;\\r\\n\\t\\t\\tthis.z = ax * by - ay * bx;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tprojectOnVector: function ( vector ) {\\r\\n\\r\\n\\t\\t\\tvar scalar = vector.dot( this ) / vector.lengthSq();\\r\\n\\r\\n\\t\\t\\treturn this.copy( vector ).multiplyScalar( scalar );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tprojectOnPlane: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function projectOnPlane( planeNormal ) {\\r\\n\\r\\n\\t\\t\\t\\tv1.copy( this ).projectOnVector( planeNormal );\\r\\n\\r\\n\\t\\t\\t\\treturn this.sub( v1 );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\treflect: function () {\\r\\n\\r\\n\\t\\t\\t// reflect incident vector off plane orthogonal to normal\\r\\n\\t\\t\\t// normal is assumed to have unit length\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function reflect( normal ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tangleTo: function ( v ) {\\r\\n\\r\\n\\t\\t\\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\\r\\n\\r\\n\\t\\t\\t// clamp, to handle numerical problems\\r\\n\\r\\n\\t\\t\\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceTo: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn Math.sqrt( this.distanceToSquared( v ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceToSquared: function ( v ) {\\r\\n\\r\\n\\t\\t\\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\\r\\n\\r\\n\\t\\t\\treturn dx * dx + dy * dy + dz * dz;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmanhattanDistanceTo: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromSpherical: function ( s ) {\\r\\n\\r\\n\\t\\t\\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\\r\\n\\r\\n\\t\\t\\tthis.x = sinPhiRadius * Math.sin( s.theta );\\r\\n\\t\\t\\tthis.y = Math.cos( s.phi ) * s.radius;\\r\\n\\t\\t\\tthis.z = sinPhiRadius * Math.cos( s.theta );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromCylindrical: function ( c ) {\\r\\n\\r\\n\\t\\t\\tthis.x = c.radius * Math.sin( c.theta );\\r\\n\\t\\t\\tthis.y = c.y;\\r\\n\\t\\t\\tthis.z = c.radius * Math.cos( c.theta );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromMatrixPosition: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar e = m.elements;\\r\\n\\r\\n\\t\\t\\tthis.x = e[ 12 ];\\r\\n\\t\\t\\tthis.y = e[ 13 ];\\r\\n\\t\\t\\tthis.z = e[ 14 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromMatrixScale: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\\r\\n\\t\\t\\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\\r\\n\\t\\t\\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\\r\\n\\r\\n\\t\\t\\tthis.x = sx;\\r\\n\\t\\t\\tthis.y = sy;\\r\\n\\t\\t\\tthis.z = sz;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromMatrixColumn: function ( m, index ) {\\r\\n\\r\\n\\t\\t\\treturn this.fromArray( m.elements, index * 4 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tthis.x = array[ offset ];\\r\\n\\t\\t\\tthis.y = array[ offset + 1 ];\\r\\n\\t\\t\\tthis.z = array[ offset + 2 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( array === undefined ) array = [];\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tarray[ offset ] = this.x;\\r\\n\\t\\t\\tarray[ offset + 1 ] = this.y;\\r\\n\\t\\t\\tarray[ offset + 2 ] = this.z;\\r\\n\\r\\n\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromBufferAttribute: function ( attribute, index, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x = attribute.getX( index );\\r\\n\\t\\t\\tthis.y = attribute.getY( index );\\r\\n\\t\\t\\tthis.z = attribute.getZ( index );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction Matrix3() {\\r\\n\\r\\n\\t\\tthis.elements = [\\r\\n\\r\\n\\t\\t\\t1, 0, 0,\\r\\n\\t\\t\\t0, 1, 0,\\r\\n\\t\\t\\t0, 0, 1\\r\\n\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tif ( arguments.length > 0 ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Matrix3.prototype, {\\r\\n\\r\\n\\t\\tisMatrix3: true,\\r\\n\\r\\n\\t\\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\\r\\n\\t\\t\\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\\r\\n\\t\\t\\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tidentity: function () {\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\t1, 0, 0,\\r\\n\\t\\t\\t\\t0, 1, 0,\\r\\n\\t\\t\\t\\t0, 0, 1\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().fromArray( this.elements );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\t\\t\\tvar me = m.elements;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\\r\\n\\t\\t\\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\\r\\n\\t\\t\\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromMatrix4: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar me = m.elements;\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\r\\n\\t\\t\\t\\tme[ 0 ], me[ 4 ], me[ 8 ],\\r\\n\\t\\t\\t\\tme[ 1 ], me[ 5 ], me[ 9 ],\\r\\n\\t\\t\\t\\tme[ 2 ], me[ 6 ], me[ 10 ]\\r\\n\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyToBufferAttribute: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function applyToBufferAttribute( attribute ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tv1.x = attribute.getX( i );\\r\\n\\t\\t\\t\\t\\tv1.y = attribute.getY( i );\\r\\n\\t\\t\\t\\t\\tv1.z = attribute.getZ( i );\\r\\n\\r\\n\\t\\t\\t\\t\\tv1.applyMatrix3( this );\\r\\n\\r\\n\\t\\t\\t\\t\\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn attribute;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tmultiply: function ( m ) {\\r\\n\\r\\n\\t\\t\\treturn this.multiplyMatrices( this, m );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tpremultiply: function ( m ) {\\r\\n\\r\\n\\t\\t\\treturn this.multiplyMatrices( m, this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyMatrices: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tvar ae = a.elements;\\r\\n\\t\\t\\tvar be = b.elements;\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\\r\\n\\t\\t\\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\\r\\n\\t\\t\\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\\r\\n\\r\\n\\t\\t\\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\\r\\n\\t\\t\\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\\r\\n\\t\\t\\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\\r\\n\\t\\t\\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\\r\\n\\t\\t\\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\\r\\n\\r\\n\\t\\t\\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\\r\\n\\t\\t\\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\\r\\n\\t\\t\\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\\r\\n\\r\\n\\t\\t\\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\\r\\n\\t\\t\\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\\r\\n\\t\\t\\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\\r\\n\\t\\t\\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\\r\\n\\t\\t\\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdeterminant: function () {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\\r\\n\\t\\t\\t\\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\\r\\n\\t\\t\\t\\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\\r\\n\\r\\n\\t\\t\\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetInverse: function ( matrix, throwOnDegenerate ) {\\r\\n\\r\\n\\t\\t\\tif ( matrix && matrix.isMatrix4 ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( \\\"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\\\" );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar me = matrix.elements,\\r\\n\\t\\t\\t\\tte = this.elements,\\r\\n\\r\\n\\t\\t\\t\\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\\r\\n\\t\\t\\t\\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\\r\\n\\t\\t\\t\\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\\r\\n\\r\\n\\t\\t\\t\\tt11 = n33 * n22 - n32 * n23,\\r\\n\\t\\t\\t\\tt12 = n32 * n13 - n33 * n12,\\r\\n\\t\\t\\t\\tt13 = n23 * n12 - n22 * n13,\\r\\n\\r\\n\\t\\t\\t\\tdet = n11 * t11 + n21 * t12 + n31 * t13;\\r\\n\\r\\n\\t\\t\\tif ( det === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar msg = \\\"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\\\";\\r\\n\\r\\n\\t\\t\\t\\tif ( throwOnDegenerate === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthrow new Error( msg );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( msg );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn this.identity();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar detInv = 1 / det;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = t11 * detInv;\\r\\n\\t\\t\\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\\r\\n\\t\\t\\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\\r\\n\\r\\n\\t\\t\\tte[ 3 ] = t12 * detInv;\\r\\n\\t\\t\\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\\r\\n\\t\\t\\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\\r\\n\\r\\n\\t\\t\\tte[ 6 ] = t13 * detInv;\\r\\n\\t\\t\\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\\r\\n\\t\\t\\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttranspose: function () {\\r\\n\\r\\n\\t\\t\\tvar tmp, m = this.elements;\\r\\n\\r\\n\\t\\t\\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\\r\\n\\t\\t\\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\\r\\n\\t\\t\\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetNormalMatrix: function ( matrix4 ) {\\r\\n\\r\\n\\t\\t\\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttransposeIntoArray: function ( r ) {\\r\\n\\r\\n\\t\\t\\tvar m = this.elements;\\r\\n\\r\\n\\t\\t\\tr[ 0 ] = m[ 0 ];\\r\\n\\t\\t\\tr[ 1 ] = m[ 3 ];\\r\\n\\t\\t\\tr[ 2 ] = m[ 6 ];\\r\\n\\t\\t\\tr[ 3 ] = m[ 1 ];\\r\\n\\t\\t\\tr[ 4 ] = m[ 4 ];\\r\\n\\t\\t\\tr[ 5 ] = m[ 7 ];\\r\\n\\t\\t\\tr[ 6 ] = m[ 2 ];\\r\\n\\t\\t\\tr[ 7 ] = m[ 5 ];\\r\\n\\t\\t\\tr[ 8 ] = m[ 8 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\\r\\n\\r\\n\\t\\t\\tvar c = Math.cos( rotation );\\r\\n\\t\\t\\tvar s = Math.sin( rotation );\\r\\n\\r\\n\\t\\t\\tthis.set(\\r\\n\\t\\t\\t\\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\\r\\n\\t\\t\\t\\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\\r\\n\\t\\t\\t\\t0, 0, 1\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tscale: function ( sx, sy ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\\r\\n\\t\\t\\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\trotate: function ( theta ) {\\r\\n\\r\\n\\t\\t\\tvar c = Math.cos( theta );\\r\\n\\t\\t\\tvar s = Math.sin( theta );\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\\r\\n\\t\\t\\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\\r\\n\\r\\n\\t\\t\\tte[ 0 ] = c * a11 + s * a21;\\r\\n\\t\\t\\tte[ 3 ] = c * a12 + s * a22;\\r\\n\\t\\t\\tte[ 6 ] = c * a13 + s * a23;\\r\\n\\r\\n\\t\\t\\tte[ 1 ] = - s * a11 + c * a21;\\r\\n\\t\\t\\tte[ 4 ] = - s * a12 + c * a22;\\r\\n\\t\\t\\tte[ 7 ] = - s * a13 + c * a23;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttranslate: function ( tx, ty ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\\r\\n\\t\\t\\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( matrix ) {\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\t\\t\\tvar me = matrix.elements;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 9; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( te[ i ] !== me[ i ] ) return false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 9; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.elements[ i ] = array[ i + offset ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( array === undefined ) array = [];\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tvar te = this.elements;\\r\\n\\r\\n\\t\\t\\tarray[ offset ] = te[ 0 ];\\r\\n\\t\\t\\tarray[ offset + 1 ] = te[ 1 ];\\r\\n\\t\\t\\tarray[ offset + 2 ] = te[ 2 ];\\r\\n\\r\\n\\t\\t\\tarray[ offset + 3 ] = te[ 3 ];\\r\\n\\t\\t\\tarray[ offset + 4 ] = te[ 4 ];\\r\\n\\t\\t\\tarray[ offset + 5 ] = te[ 5 ];\\r\\n\\r\\n\\t\\t\\tarray[ offset + 6 ] = te[ 6 ];\\r\\n\\t\\t\\tarray[ offset + 7 ] = te[ 7 ];\\r\\n\\t\\t\\tarray[ offset + 8 ] = te[ 8 ];\\r\\n\\r\\n\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author szimek / https://github.com/szimek/\\r\\n\\t */\\r\\n\\r\\n\\tvar textureId = 0;\\r\\n\\r\\n\\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\\r\\n\\r\\n\\t\\tObject.defineProperty( this, 'id', { value: textureId ++ } );\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\tthis.name = '';\\r\\n\\r\\n\\t\\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\\r\\n\\t\\tthis.mipmaps = [];\\r\\n\\r\\n\\t\\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\\r\\n\\r\\n\\t\\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\\r\\n\\t\\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\\r\\n\\r\\n\\t\\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\\r\\n\\t\\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\\r\\n\\r\\n\\t\\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\\r\\n\\r\\n\\t\\tthis.format = format !== undefined ? format : RGBAFormat;\\r\\n\\t\\tthis.type = type !== undefined ? type : UnsignedByteType;\\r\\n\\r\\n\\t\\tthis.offset = new Vector2( 0, 0 );\\r\\n\\t\\tthis.repeat = new Vector2( 1, 1 );\\r\\n\\t\\tthis.center = new Vector2( 0, 0 );\\r\\n\\t\\tthis.rotation = 0;\\r\\n\\r\\n\\t\\tthis.matrixAutoUpdate = true;\\r\\n\\t\\tthis.matrix = new Matrix3();\\r\\n\\r\\n\\t\\tthis.generateMipmaps = true;\\r\\n\\t\\tthis.premultiplyAlpha = false;\\r\\n\\t\\tthis.flipY = true;\\r\\n\\t\\tthis.unpackAlignment = 4;\\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\\r\\n\\r\\n\\t\\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\\r\\n\\t\\t//\\r\\n\\t\\t// Also changing the encoding after already used by a Material will not automatically make the Material\\r\\n\\t\\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\\r\\n\\t\\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\\r\\n\\r\\n\\t\\tthis.version = 0;\\r\\n\\t\\tthis.onUpdate = null;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTexture.DEFAULT_IMAGE = undefined;\\r\\n\\tTexture.DEFAULT_MAPPING = UVMapping;\\r\\n\\r\\n\\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Texture,\\r\\n\\r\\n\\t\\tisTexture: true,\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tthis.name = source.name;\\r\\n\\r\\n\\t\\t\\tthis.image = source.image;\\r\\n\\t\\t\\tthis.mipmaps = source.mipmaps.slice( 0 );\\r\\n\\r\\n\\t\\t\\tthis.mapping = source.mapping;\\r\\n\\r\\n\\t\\t\\tthis.wrapS = source.wrapS;\\r\\n\\t\\t\\tthis.wrapT = source.wrapT;\\r\\n\\r\\n\\t\\t\\tthis.magFilter = source.magFilter;\\r\\n\\t\\t\\tthis.minFilter = source.minFilter;\\r\\n\\r\\n\\t\\t\\tthis.anisotropy = source.anisotropy;\\r\\n\\r\\n\\t\\t\\tthis.format = source.format;\\r\\n\\t\\t\\tthis.type = source.type;\\r\\n\\r\\n\\t\\t\\tthis.offset.copy( source.offset );\\r\\n\\t\\t\\tthis.repeat.copy( source.repeat );\\r\\n\\t\\t\\tthis.center.copy( source.center );\\r\\n\\t\\t\\tthis.rotation = source.rotation;\\r\\n\\r\\n\\t\\t\\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\\r\\n\\t\\t\\tthis.matrix.copy( source.matrix );\\r\\n\\r\\n\\t\\t\\tthis.generateMipmaps = source.generateMipmaps;\\r\\n\\t\\t\\tthis.premultiplyAlpha = source.premultiplyAlpha;\\r\\n\\t\\t\\tthis.flipY = source.flipY;\\r\\n\\t\\t\\tthis.unpackAlignment = source.unpackAlignment;\\r\\n\\t\\t\\tthis.encoding = source.encoding;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( meta ) {\\r\\n\\r\\n\\t\\t\\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\\r\\n\\r\\n\\t\\t\\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\treturn meta.textures[ this.uuid ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction getDataURL( image ) {\\r\\n\\r\\n\\t\\t\\t\\tvar canvas;\\r\\n\\r\\n\\t\\t\\t\\tif ( image instanceof HTMLCanvasElement ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcanvas = image;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\\r\\n\\t\\t\\t\\t\\tcanvas.width = image.width;\\r\\n\\t\\t\\t\\t\\tcanvas.height = image.height;\\r\\n\\r\\n\\t\\t\\t\\t\\tvar context = canvas.getContext( '2d' );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( image instanceof ImageData ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcontext.putImageData( image, 0, 0 );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcontext.drawImage( image, 0, 0, image.width, image.height );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn canvas.toDataURL( 'image/png' );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar output = {\\r\\n\\t\\t\\t\\tmetadata: {\\r\\n\\t\\t\\t\\t\\tversion: 4.5,\\r\\n\\t\\t\\t\\t\\ttype: 'Texture',\\r\\n\\t\\t\\t\\t\\tgenerator: 'Texture.toJSON'\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tuuid: this.uuid,\\r\\n\\t\\t\\t\\tname: this.name,\\r\\n\\r\\n\\t\\t\\t\\tmapping: this.mapping,\\r\\n\\r\\n\\t\\t\\t\\trepeat: [ this.repeat.x, this.repeat.y ],\\r\\n\\t\\t\\t\\toffset: [ this.offset.x, this.offset.y ],\\r\\n\\t\\t\\t\\tcenter: [ this.center.x, this.center.y ],\\r\\n\\t\\t\\t\\trotation: this.rotation,\\r\\n\\r\\n\\t\\t\\t\\twrap: [ this.wrapS, this.wrapT ],\\r\\n\\r\\n\\t\\t\\t\\tminFilter: this.minFilter,\\r\\n\\t\\t\\t\\tmagFilter: this.magFilter,\\r\\n\\t\\t\\t\\tanisotropy: this.anisotropy,\\r\\n\\r\\n\\t\\t\\t\\tflipY: this.flipY\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tif ( this.image !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// TODO: Move to THREE.Image\\r\\n\\r\\n\\t\\t\\t\\tvar image = this.image;\\r\\n\\r\\n\\t\\t\\t\\tif ( image.uuid === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\timage.uuid = _Math.generateUUID(); // UGH\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmeta.images[ image.uuid ] = {\\r\\n\\t\\t\\t\\t\\t\\tuuid: image.uuid,\\r\\n\\t\\t\\t\\t\\t\\turl: getDataURL( image )\\r\\n\\t\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\toutput.image = image.uuid;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( ! isRootObject ) {\\r\\n\\r\\n\\t\\t\\t\\tmeta.textures[ this.uuid ] = output;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn output;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdispose: function () {\\r\\n\\r\\n\\t\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttransformUv: function ( uv ) {\\r\\n\\r\\n\\t\\t\\tif ( this.mapping !== UVMapping ) return;\\r\\n\\r\\n\\t\\t\\tuv.applyMatrix3( this.matrix );\\r\\n\\r\\n\\t\\t\\tif ( uv.x < 0 || uv.x > 1 ) {\\r\\n\\r\\n\\t\\t\\t\\tswitch ( this.wrapS ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase RepeatWrapping:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuv.x = uv.x - Math.floor( uv.x );\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase ClampToEdgeWrapping:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuv.x = uv.x < 0 ? 0 : 1;\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase MirroredRepeatWrapping:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tuv.x = Math.ceil( uv.x ) - uv.x;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tuv.x = uv.x - Math.floor( uv.x );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( uv.y < 0 || uv.y > 1 ) {\\r\\n\\r\\n\\t\\t\\t\\tswitch ( this.wrapT ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase RepeatWrapping:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuv.y = uv.y - Math.floor( uv.y );\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase ClampToEdgeWrapping:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuv.y = uv.y < 0 ? 0 : 1;\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase MirroredRepeatWrapping:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tuv.y = Math.ceil( uv.y ) - uv.y;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tuv.y = uv.y - Math.floor( uv.y );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.flipY ) {\\r\\n\\r\\n\\t\\t\\t\\tuv.y = 1 - uv.y;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperty( Texture.prototype, \\\"needsUpdate\\\", {\\r\\n\\r\\n\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( value === true ) this.version ++;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author supereggbert / http://www.paulbrunt.co.uk/\\r\\n\\t * @author philogb / http://blog.thejit.org/\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author egraether / http://egraether.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction Vector4( x, y, z, w ) {\\r\\n\\r\\n\\t\\tthis.x = x || 0;\\r\\n\\t\\tthis.y = y || 0;\\r\\n\\t\\tthis.z = z || 0;\\r\\n\\t\\tthis.w = ( w !== undefined ) ? w : 1;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Vector4.prototype, {\\r\\n\\r\\n\\t\\tisVector4: true,\\r\\n\\r\\n\\t\\tset: function ( x, y, z, w ) {\\r\\n\\r\\n\\t\\t\\tthis.x = x;\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\t\\t\\tthis.z = z;\\r\\n\\t\\t\\tthis.w = w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\tthis.x = scalar;\\r\\n\\t\\t\\tthis.y = scalar;\\r\\n\\t\\t\\tthis.z = scalar;\\r\\n\\t\\t\\tthis.w = scalar;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetX: function ( x ) {\\r\\n\\r\\n\\t\\t\\tthis.x = x;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetY: function ( y ) {\\r\\n\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetZ: function ( z ) {\\r\\n\\r\\n\\t\\t\\tthis.z = z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetW: function ( w ) {\\r\\n\\r\\n\\t\\t\\tthis.w = w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetComponent: function ( index, value ) {\\r\\n\\r\\n\\t\\t\\tswitch ( index ) {\\r\\n\\r\\n\\t\\t\\t\\tcase 0: this.x = value; break;\\r\\n\\t\\t\\t\\tcase 1: this.y = value; break;\\r\\n\\t\\t\\t\\tcase 2: this.z = value; break;\\r\\n\\t\\t\\t\\tcase 3: this.w = value; break;\\r\\n\\t\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetComponent: function ( index ) {\\r\\n\\r\\n\\t\\t\\tswitch ( index ) {\\r\\n\\r\\n\\t\\t\\t\\tcase 0: return this.x;\\r\\n\\t\\t\\t\\tcase 1: return this.y;\\r\\n\\t\\t\\t\\tcase 2: return this.z;\\r\\n\\t\\t\\t\\tcase 3: return this.w;\\r\\n\\t\\t\\t\\tdefault: throw new Error( 'index is out of range: ' + index );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.x, this.y, this.z, this.w );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x = v.x;\\r\\n\\t\\t\\tthis.y = v.y;\\r\\n\\t\\t\\tthis.z = v.z;\\r\\n\\t\\t\\tthis.w = ( v.w !== undefined ) ? v.w : 1;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tadd: function ( v, w ) {\\r\\n\\r\\n\\t\\t\\tif ( w !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.addVectors( v, w );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x += v.x;\\r\\n\\t\\t\\tthis.y += v.y;\\r\\n\\t\\t\\tthis.z += v.z;\\r\\n\\t\\t\\tthis.w += v.w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tthis.x += s;\\r\\n\\t\\t\\tthis.y += s;\\r\\n\\t\\t\\tthis.z += s;\\r\\n\\t\\t\\tthis.w += s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddVectors: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tthis.x = a.x + b.x;\\r\\n\\t\\t\\tthis.y = a.y + b.y;\\r\\n\\t\\t\\tthis.z = a.z + b.z;\\r\\n\\t\\t\\tthis.w = a.w + b.w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddScaledVector: function ( v, s ) {\\r\\n\\r\\n\\t\\t\\tthis.x += v.x * s;\\r\\n\\t\\t\\tthis.y += v.y * s;\\r\\n\\t\\t\\tthis.z += v.z * s;\\r\\n\\t\\t\\tthis.w += v.w * s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsub: function ( v, w ) {\\r\\n\\r\\n\\t\\t\\tif ( w !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\\r\\n\\t\\t\\t\\treturn this.subVectors( v, w );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x -= v.x;\\r\\n\\t\\t\\tthis.y -= v.y;\\r\\n\\t\\t\\tthis.z -= v.z;\\r\\n\\t\\t\\tthis.w -= v.w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsubScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tthis.x -= s;\\r\\n\\t\\t\\tthis.y -= s;\\r\\n\\t\\t\\tthis.z -= s;\\r\\n\\t\\t\\tthis.w -= s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsubVectors: function ( a, b ) {\\r\\n\\r\\n\\t\\t\\tthis.x = a.x - b.x;\\r\\n\\t\\t\\tthis.y = a.y - b.y;\\r\\n\\t\\t\\tthis.z = a.z - b.z;\\r\\n\\t\\t\\tthis.w = a.w - b.w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\tthis.x *= scalar;\\r\\n\\t\\t\\tthis.y *= scalar;\\r\\n\\t\\t\\tthis.z *= scalar;\\r\\n\\t\\t\\tthis.w *= scalar;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyMatrix4: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar x = this.x, y = this.y, z = this.z, w = this.w;\\r\\n\\t\\t\\tvar e = m.elements;\\r\\n\\r\\n\\t\\t\\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\\r\\n\\t\\t\\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\\r\\n\\t\\t\\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\\r\\n\\t\\t\\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdivideScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\treturn this.multiplyScalar( 1 / scalar );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetAxisAngleFromQuaternion: function ( q ) {\\r\\n\\r\\n\\t\\t\\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\\r\\n\\r\\n\\t\\t\\t// q is assumed to be normalized\\r\\n\\r\\n\\t\\t\\tthis.w = 2 * Math.acos( q.w );\\r\\n\\r\\n\\t\\t\\tvar s = Math.sqrt( 1 - q.w * q.w );\\r\\n\\r\\n\\t\\t\\tif ( s < 0.0001 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.x = 1;\\r\\n\\t\\t\\t\\tthis.y = 0;\\r\\n\\t\\t\\t\\tthis.z = 0;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.x = q.x / s;\\r\\n\\t\\t\\t\\tthis.y = q.y / s;\\r\\n\\t\\t\\t\\tthis.z = q.z / s;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetAxisAngleFromRotationMatrix: function ( m ) {\\r\\n\\r\\n\\t\\t\\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\\r\\n\\r\\n\\t\\t\\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\\r\\n\\r\\n\\t\\t\\tvar angle, x, y, z,\\t\\t// variables for result\\r\\n\\t\\t\\t\\tepsilon = 0.01,\\t\\t// margin to allow for rounding errors\\r\\n\\t\\t\\t\\tepsilon2 = 0.1,\\t\\t// margin to distinguish between 0 and 180 degrees\\r\\n\\r\\n\\t\\t\\t\\tte = m.elements,\\r\\n\\r\\n\\t\\t\\t\\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\\r\\n\\t\\t\\t\\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\\r\\n\\t\\t\\t\\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\\r\\n\\r\\n\\t\\t\\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\\r\\n\\t\\t\\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\\r\\n\\t\\t\\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\\r\\n\\r\\n\\t\\t\\t\\t// singularity found\\r\\n\\t\\t\\t\\t// first check for identity matrix which must have +1 for all terms\\r\\n\\t\\t\\t\\t// in leading diagonal and zero in other terms\\r\\n\\r\\n\\t\\t\\t\\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\\r\\n\\t\\t\\t\\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\\r\\n\\t\\t\\t\\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\\r\\n\\t\\t\\t\\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// this singularity is identity matrix so angle = 0\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.set( 1, 0, 0, 0 );\\r\\n\\r\\n\\t\\t\\t\\t\\treturn this; // zero angle, arbitrary axis\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// otherwise this singularity is angle = 180\\r\\n\\r\\n\\t\\t\\t\\tangle = Math.PI;\\r\\n\\r\\n\\t\\t\\t\\tvar xx = ( m11 + 1 ) / 2;\\r\\n\\t\\t\\t\\tvar yy = ( m22 + 1 ) / 2;\\r\\n\\t\\t\\t\\tvar zz = ( m33 + 1 ) / 2;\\r\\n\\t\\t\\t\\tvar xy = ( m12 + m21 ) / 4;\\r\\n\\t\\t\\t\\tvar xz = ( m13 + m31 ) / 4;\\r\\n\\t\\t\\t\\tvar yz = ( m23 + m32 ) / 4;\\r\\n\\r\\n\\t\\t\\t\\tif ( ( xx > yy ) && ( xx > zz ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// m11 is the largest diagonal term\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( xx < epsilon ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tx = 0;\\r\\n\\t\\t\\t\\t\\t\\ty = 0.707106781;\\r\\n\\t\\t\\t\\t\\t\\tz = 0.707106781;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tx = Math.sqrt( xx );\\r\\n\\t\\t\\t\\t\\t\\ty = xy / x;\\r\\n\\t\\t\\t\\t\\t\\tz = xz / x;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( yy > zz ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// m22 is the largest diagonal term\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( yy < epsilon ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tx = 0.707106781;\\r\\n\\t\\t\\t\\t\\t\\ty = 0;\\r\\n\\t\\t\\t\\t\\t\\tz = 0.707106781;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ty = Math.sqrt( yy );\\r\\n\\t\\t\\t\\t\\t\\tx = xy / y;\\r\\n\\t\\t\\t\\t\\t\\tz = yz / y;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// m33 is the largest diagonal term so base result on this\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( zz < epsilon ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tx = 0.707106781;\\r\\n\\t\\t\\t\\t\\t\\ty = 0.707106781;\\r\\n\\t\\t\\t\\t\\t\\tz = 0;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tz = Math.sqrt( zz );\\r\\n\\t\\t\\t\\t\\t\\tx = xz / z;\\r\\n\\t\\t\\t\\t\\t\\ty = yz / z;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.set( x, y, z, angle );\\r\\n\\r\\n\\t\\t\\t\\treturn this; // return 180 deg rotation\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// as we have reached here there are no singularities so we can handle normally\\r\\n\\r\\n\\t\\t\\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\\r\\n\\t\\t\\t                   ( m13 - m31 ) * ( m13 - m31 ) +\\r\\n\\t\\t\\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\\r\\n\\r\\n\\t\\t\\tif ( Math.abs( s ) < 0.001 ) s = 1;\\r\\n\\r\\n\\t\\t\\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\\r\\n\\t\\t\\t// caught by singularity test above, but I've left it in just in case\\r\\n\\r\\n\\t\\t\\tthis.x = ( m32 - m23 ) / s;\\r\\n\\t\\t\\tthis.y = ( m13 - m31 ) / s;\\r\\n\\t\\t\\tthis.z = ( m21 - m12 ) / s;\\r\\n\\t\\t\\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmin: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.min( this.x, v.x );\\r\\n\\t\\t\\tthis.y = Math.min( this.y, v.y );\\r\\n\\t\\t\\tthis.z = Math.min( this.z, v.z );\\r\\n\\t\\t\\tthis.w = Math.min( this.w, v.w );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmax: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.max( this.x, v.x );\\r\\n\\t\\t\\tthis.y = Math.max( this.y, v.y );\\r\\n\\t\\t\\tthis.z = Math.max( this.z, v.z );\\r\\n\\t\\t\\tthis.w = Math.max( this.w, v.w );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclamp: function ( min, max ) {\\r\\n\\r\\n\\t\\t\\t// assumes min < max, componentwise\\r\\n\\r\\n\\t\\t\\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\\r\\n\\t\\t\\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\\r\\n\\t\\t\\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\\r\\n\\t\\t\\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclampScalar: function () {\\r\\n\\r\\n\\t\\t\\tvar min, max;\\r\\n\\r\\n\\t\\t\\treturn function clampScalar( minVal, maxVal ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( min === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmin = new Vector4();\\r\\n\\t\\t\\t\\t\\tmax = new Vector4();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tmin.set( minVal, minVal, minVal, minVal );\\r\\n\\t\\t\\t\\tmax.set( maxVal, maxVal, maxVal, maxVal );\\r\\n\\r\\n\\t\\t\\t\\treturn this.clamp( min, max );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tclampLength: function ( min, max ) {\\r\\n\\r\\n\\t\\t\\tvar length = this.length();\\r\\n\\r\\n\\t\\t\\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfloor: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.floor( this.x );\\r\\n\\t\\t\\tthis.y = Math.floor( this.y );\\r\\n\\t\\t\\tthis.z = Math.floor( this.z );\\r\\n\\t\\t\\tthis.w = Math.floor( this.w );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tceil: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.ceil( this.x );\\r\\n\\t\\t\\tthis.y = Math.ceil( this.y );\\r\\n\\t\\t\\tthis.z = Math.ceil( this.z );\\r\\n\\t\\t\\tthis.w = Math.ceil( this.w );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tround: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = Math.round( this.x );\\r\\n\\t\\t\\tthis.y = Math.round( this.y );\\r\\n\\t\\t\\tthis.z = Math.round( this.z );\\r\\n\\t\\t\\tthis.w = Math.round( this.w );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\troundToZero: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\\r\\n\\t\\t\\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\\r\\n\\t\\t\\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\\r\\n\\t\\t\\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnegate: function () {\\r\\n\\r\\n\\t\\t\\tthis.x = - this.x;\\r\\n\\t\\t\\tthis.y = - this.y;\\r\\n\\t\\t\\tthis.z = - this.z;\\r\\n\\t\\t\\tthis.w = - this.w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdot: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlengthSq: function () {\\r\\n\\r\\n\\t\\t\\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlength: function () {\\r\\n\\r\\n\\t\\t\\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmanhattanLength: function () {\\r\\n\\r\\n\\t\\t\\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormalize: function () {\\r\\n\\r\\n\\t\\t\\treturn this.divideScalar( this.length() || 1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetLength: function ( length ) {\\r\\n\\r\\n\\t\\t\\treturn this.normalize().multiplyScalar( length );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlerp: function ( v, alpha ) {\\r\\n\\r\\n\\t\\t\\tthis.x += ( v.x - this.x ) * alpha;\\r\\n\\t\\t\\tthis.y += ( v.y - this.y ) * alpha;\\r\\n\\t\\t\\tthis.z += ( v.z - this.z ) * alpha;\\r\\n\\t\\t\\tthis.w += ( v.w - this.w ) * alpha;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlerpVectors: function ( v1, v2, alpha ) {\\r\\n\\r\\n\\t\\t\\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( v ) {\\r\\n\\r\\n\\t\\t\\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tthis.x = array[ offset ];\\r\\n\\t\\t\\tthis.y = array[ offset + 1 ];\\r\\n\\t\\t\\tthis.z = array[ offset + 2 ];\\r\\n\\t\\t\\tthis.w = array[ offset + 3 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( array === undefined ) array = [];\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tarray[ offset ] = this.x;\\r\\n\\t\\t\\tarray[ offset + 1 ] = this.y;\\r\\n\\t\\t\\tarray[ offset + 2 ] = this.z;\\r\\n\\t\\t\\tarray[ offset + 3 ] = this.w;\\r\\n\\r\\n\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromBufferAttribute: function ( attribute, index, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.x = attribute.getX( index );\\r\\n\\t\\t\\tthis.y = attribute.getY( index );\\r\\n\\t\\t\\tthis.z = attribute.getZ( index );\\r\\n\\t\\t\\tthis.w = attribute.getW( index );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author szimek / https://github.com/szimek/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author Marius Kintel / https://github.com/kintel\\r\\n\\t */\\r\\n\\r\\n\\t/*\\r\\n\\t In options, we can specify:\\r\\n\\t * Texture parameters for an auto-generated target texture\\r\\n\\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\\r\\n\\t*/\\r\\n\\tfunction WebGLRenderTarget( width, height, options ) {\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\tthis.width = width;\\r\\n\\t\\tthis.height = height;\\r\\n\\r\\n\\t\\tthis.scissor = new Vector4( 0, 0, width, height );\\r\\n\\t\\tthis.scissorTest = false;\\r\\n\\r\\n\\t\\tthis.viewport = new Vector4( 0, 0, width, height );\\r\\n\\r\\n\\t\\toptions = options || {};\\r\\n\\r\\n\\t\\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\\r\\n\\r\\n\\t\\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\\r\\n\\r\\n\\t\\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\\r\\n\\t\\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\\r\\n\\t\\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: WebGLRenderTarget,\\r\\n\\r\\n\\t\\tisWebGLRenderTarget: true,\\r\\n\\r\\n\\t\\tsetSize: function ( width, height ) {\\r\\n\\r\\n\\t\\t\\tif ( this.width !== width || this.height !== height ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.width = width;\\r\\n\\t\\t\\t\\tthis.height = height;\\r\\n\\r\\n\\t\\t\\t\\tthis.dispose();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.viewport.set( 0, 0, width, height );\\r\\n\\t\\t\\tthis.scissor.set( 0, 0, width, height );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tthis.width = source.width;\\r\\n\\t\\t\\tthis.height = source.height;\\r\\n\\r\\n\\t\\t\\tthis.viewport.copy( source.viewport );\\r\\n\\r\\n\\t\\t\\tthis.texture = source.texture.clone();\\r\\n\\r\\n\\t\\t\\tthis.depthBuffer = source.depthBuffer;\\r\\n\\t\\t\\tthis.stencilBuffer = source.stencilBuffer;\\r\\n\\t\\t\\tthis.depthTexture = source.depthTexture;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdispose: function () {\\r\\n\\r\\n\\t\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLRenderTargetCube( width, height, options ) {\\r\\n\\r\\n\\t\\tWebGLRenderTarget.call( this, width, height, options );\\r\\n\\r\\n\\t\\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\\r\\n\\t\\tthis.activeMipMapLevel = 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\\r\\n\\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\\r\\n\\r\\n\\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\\r\\n\\r\\n\\t\\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\\r\\n\\r\\n\\t\\tthis.image = { data: data, width: width, height: height };\\r\\n\\r\\n\\t\\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\\r\\n\\t\\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\\r\\n\\r\\n\\t\\tthis.generateMipmaps = false;\\r\\n\\t\\tthis.flipY = false;\\r\\n\\t\\tthis.unpackAlignment = 1;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tDataTexture.prototype = Object.create( Texture.prototype );\\r\\n\\tDataTexture.prototype.constructor = DataTexture;\\r\\n\\r\\n\\tDataTexture.prototype.isDataTexture = true;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\\r\\n\\r\\n\\t\\timages = images !== undefined ? images : [];\\r\\n\\t\\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\\r\\n\\r\\n\\t\\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\\r\\n\\r\\n\\t\\tthis.flipY = false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCubeTexture.prototype = Object.create( Texture.prototype );\\r\\n\\tCubeTexture.prototype.constructor = CubeTexture;\\r\\n\\r\\n\\tCubeTexture.prototype.isCubeTexture = true;\\r\\n\\r\\n\\tObject.defineProperty( CubeTexture.prototype, 'images', {\\r\\n\\r\\n\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\treturn this.image;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.image = value;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author tschw\\r\\n\\t *\\r\\n\\t * Uniforms of a program.\\r\\n\\t * Those form a tree structure with a special top-level container for the root,\\r\\n\\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * Properties of inner nodes including the top-level container:\\r\\n\\t *\\r\\n\\t * .seq - array of nested uniforms\\r\\n\\t * .map - nested uniforms by name\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * Methods of all nodes except the top-level container:\\r\\n\\t *\\r\\n\\t * .setValue( gl, value, [renderer] )\\r\\n\\t *\\r\\n\\t * \\t\\tuploads a uniform value(s)\\r\\n\\t *  \\tthe 'renderer' parameter is needed for sampler uniforms\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * Static methods of the top-level container (renderer factorizations):\\r\\n\\t *\\r\\n\\t * .upload( gl, seq, values, renderer )\\r\\n\\t *\\r\\n\\t * \\t\\tsets uniforms in 'seq' to 'values[id].value'\\r\\n\\t *\\r\\n\\t * .seqWithValue( seq, values ) : filteredSeq\\r\\n\\t *\\r\\n\\t * \\t\\tfilters 'seq' entries with corresponding entry in values\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * Methods of the top-level container (renderer factorizations):\\r\\n\\t *\\r\\n\\t * .setValue( gl, name, value )\\r\\n\\t *\\r\\n\\t * \\t\\tsets uniform with  name 'name' to 'value'\\r\\n\\t *\\r\\n\\t * .set( gl, obj, prop )\\r\\n\\t *\\r\\n\\t * \\t\\tsets uniform from object and property with same name than uniform\\r\\n\\t *\\r\\n\\t * .setOptional( gl, obj, prop )\\r\\n\\t *\\r\\n\\t * \\t\\tlike .set for an optional property of the object\\r\\n\\t *\\r\\n\\t */\\r\\n\\r\\n\\tvar emptyTexture = new Texture();\\r\\n\\tvar emptyCubeTexture = new CubeTexture();\\r\\n\\r\\n\\t// --- Base for inner nodes (including the root) ---\\r\\n\\r\\n\\tfunction UniformContainer() {\\r\\n\\r\\n\\t\\tthis.seq = [];\\r\\n\\t\\tthis.map = {};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// --- Utilities ---\\r\\n\\r\\n\\t// Array Caches (provide typed arrays for temporary by size)\\r\\n\\r\\n\\tvar arrayCacheF32 = [];\\r\\n\\tvar arrayCacheI32 = [];\\r\\n\\r\\n\\t// Float32Array caches used for uploading Matrix uniforms\\r\\n\\r\\n\\tvar mat4array = new Float32Array( 16 );\\r\\n\\tvar mat3array = new Float32Array( 9 );\\r\\n\\r\\n\\t// Flattening for arrays of vectors and matrices\\r\\n\\r\\n\\tfunction flatten( array, nBlocks, blockSize ) {\\r\\n\\r\\n\\t\\tvar firstElem = array[ 0 ];\\r\\n\\r\\n\\t\\tif ( firstElem <= 0 || firstElem > 0 ) return array;\\r\\n\\t\\t// unoptimized: ! isNaN( firstElem )\\r\\n\\t\\t// see http://jacksondunstan.com/articles/983\\r\\n\\r\\n\\t\\tvar n = nBlocks * blockSize,\\r\\n\\t\\t\\tr = arrayCacheF32[ n ];\\r\\n\\r\\n\\t\\tif ( r === undefined ) {\\r\\n\\r\\n\\t\\t\\tr = new Float32Array( n );\\r\\n\\t\\t\\tarrayCacheF32[ n ] = r;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( nBlocks !== 0 ) {\\r\\n\\r\\n\\t\\t\\tfirstElem.toArray( r, 0 );\\r\\n\\r\\n\\t\\t\\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\toffset += blockSize;\\r\\n\\t\\t\\t\\tarray[ i ].toArray( r, offset );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn r;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Texture unit allocation\\r\\n\\r\\n\\tfunction allocTexUnits( renderer, n ) {\\r\\n\\r\\n\\t\\tvar r = arrayCacheI32[ n ];\\r\\n\\r\\n\\t\\tif ( r === undefined ) {\\r\\n\\r\\n\\t\\t\\tr = new Int32Array( n );\\r\\n\\t\\t\\tarrayCacheI32[ n ] = r;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor ( var i = 0; i !== n; ++ i )\\r\\n\\t\\t\\tr[ i ] = renderer.allocTextureUnit();\\r\\n\\r\\n\\t\\treturn r;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// --- Setters ---\\r\\n\\r\\n\\t// Note: Defining these methods externally, because they come in a bunch\\r\\n\\t// and this way their names minify.\\r\\n\\r\\n\\t// Single scalar\\r\\n\\r\\n\\tfunction setValue1f( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform1f( this.addr, v );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValue1i( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform1i( this.addr, v );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Single float vector (from flat array or THREE.VectorN)\\r\\n\\r\\n\\tfunction setValue2fv( gl, v ) {\\r\\n\\r\\n\\t\\tif ( v.x === undefined ) {\\r\\n\\r\\n\\t\\t\\tgl.uniform2fv( this.addr, v );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tgl.uniform2f( this.addr, v.x, v.y );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValue3fv( gl, v ) {\\r\\n\\r\\n\\t\\tif ( v.x !== undefined ) {\\r\\n\\r\\n\\t\\t\\tgl.uniform3f( this.addr, v.x, v.y, v.z );\\r\\n\\r\\n\\t\\t} else if ( v.r !== undefined ) {\\r\\n\\r\\n\\t\\t\\tgl.uniform3f( this.addr, v.r, v.g, v.b );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tgl.uniform3fv( this.addr, v );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValue4fv( gl, v ) {\\r\\n\\r\\n\\t\\tif ( v.x === undefined ) {\\r\\n\\r\\n\\t\\t\\tgl.uniform4fv( this.addr, v );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Single matrix (from flat array or MatrixN)\\r\\n\\r\\n\\tfunction setValue2fm( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValue3fm( gl, v ) {\\r\\n\\r\\n\\t\\tif ( v.elements === undefined ) {\\r\\n\\r\\n\\t\\t\\tgl.uniformMatrix3fv( this.addr, false, v );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tmat3array.set( v.elements );\\r\\n\\t\\t\\tgl.uniformMatrix3fv( this.addr, false, mat3array );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValue4fm( gl, v ) {\\r\\n\\r\\n\\t\\tif ( v.elements === undefined ) {\\r\\n\\r\\n\\t\\t\\tgl.uniformMatrix4fv( this.addr, false, v );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tmat4array.set( v.elements );\\r\\n\\t\\t\\tgl.uniformMatrix4fv( this.addr, false, mat4array );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Single texture (2D / Cube)\\r\\n\\r\\n\\tfunction setValueT1( gl, v, renderer ) {\\r\\n\\r\\n\\t\\tvar unit = renderer.allocTextureUnit();\\r\\n\\t\\tgl.uniform1i( this.addr, unit );\\r\\n\\t\\trenderer.setTexture2D( v || emptyTexture, unit );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValueT6( gl, v, renderer ) {\\r\\n\\r\\n\\t\\tvar unit = renderer.allocTextureUnit();\\r\\n\\t\\tgl.uniform1i( this.addr, unit );\\r\\n\\t\\trenderer.setTextureCube( v || emptyCubeTexture, unit );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\\r\\n\\r\\n\\tfunction setValue2iv( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform2iv( this.addr, v );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValue3iv( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform3iv( this.addr, v );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValue4iv( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform4iv( this.addr, v );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Helper to pick the right setter for the singular case\\r\\n\\r\\n\\tfunction getSingularSetter( type ) {\\r\\n\\r\\n\\t\\tswitch ( type ) {\\r\\n\\r\\n\\t\\t\\tcase 0x1406: return setValue1f; // FLOAT\\r\\n\\t\\t\\tcase 0x8b50: return setValue2fv; // _VEC2\\r\\n\\t\\t\\tcase 0x8b51: return setValue3fv; // _VEC3\\r\\n\\t\\t\\tcase 0x8b52: return setValue4fv; // _VEC4\\r\\n\\r\\n\\t\\t\\tcase 0x8b5a: return setValue2fm; // _MAT2\\r\\n\\t\\t\\tcase 0x8b5b: return setValue3fm; // _MAT3\\r\\n\\t\\t\\tcase 0x8b5c: return setValue4fm; // _MAT4\\r\\n\\r\\n\\t\\t\\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\\r\\n\\t\\t\\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\\r\\n\\r\\n\\t\\t\\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\\r\\n\\t\\t\\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\\r\\n\\t\\t\\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\\r\\n\\t\\t\\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Array of scalars\\r\\n\\r\\n\\tfunction setValue1fv( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform1fv( this.addr, v );\\r\\n\\r\\n\\t}\\r\\n\\tfunction setValue1iv( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform1iv( this.addr, v );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Array of vectors (flat or from THREE classes)\\r\\n\\r\\n\\tfunction setValueV2a( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValueV3a( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValueV4a( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Array of matrices (flat or from THREE clases)\\r\\n\\r\\n\\tfunction setValueM2a( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValueM3a( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValueM4a( gl, v ) {\\r\\n\\r\\n\\t\\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Array of textures (2D / Cube)\\r\\n\\r\\n\\tfunction setValueT1a( gl, v, renderer ) {\\r\\n\\r\\n\\t\\tvar n = v.length,\\r\\n\\t\\t\\tunits = allocTexUnits( renderer, n );\\r\\n\\r\\n\\t\\tgl.uniform1iv( this.addr, units );\\r\\n\\r\\n\\t\\tfor ( var i = 0; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction setValueT6a( gl, v, renderer ) {\\r\\n\\r\\n\\t\\tvar n = v.length,\\r\\n\\t\\t\\tunits = allocTexUnits( renderer, n );\\r\\n\\r\\n\\t\\tgl.uniform1iv( this.addr, units );\\r\\n\\r\\n\\t\\tfor ( var i = 0; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Helper to pick the right setter for a pure (bottom-level) array\\r\\n\\r\\n\\tfunction getPureArraySetter( type ) {\\r\\n\\r\\n\\t\\tswitch ( type ) {\\r\\n\\r\\n\\t\\t\\tcase 0x1406: return setValue1fv; // FLOAT\\r\\n\\t\\t\\tcase 0x8b50: return setValueV2a; // _VEC2\\r\\n\\t\\t\\tcase 0x8b51: return setValueV3a; // _VEC3\\r\\n\\t\\t\\tcase 0x8b52: return setValueV4a; // _VEC4\\r\\n\\r\\n\\t\\t\\tcase 0x8b5a: return setValueM2a; // _MAT2\\r\\n\\t\\t\\tcase 0x8b5b: return setValueM3a; // _MAT3\\r\\n\\t\\t\\tcase 0x8b5c: return setValueM4a; // _MAT4\\r\\n\\r\\n\\t\\t\\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\\r\\n\\t\\t\\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\\r\\n\\r\\n\\t\\t\\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\\r\\n\\t\\t\\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\\r\\n\\t\\t\\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\\r\\n\\t\\t\\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// --- Uniform Classes ---\\r\\n\\r\\n\\tfunction SingleUniform( id, activeInfo, addr ) {\\r\\n\\r\\n\\t\\tthis.id = id;\\r\\n\\t\\tthis.addr = addr;\\r\\n\\t\\tthis.setValue = getSingularSetter( activeInfo.type );\\r\\n\\r\\n\\t\\t// this.path = activeInfo.name; // DEBUG\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction PureArrayUniform( id, activeInfo, addr ) {\\r\\n\\r\\n\\t\\tthis.id = id;\\r\\n\\t\\tthis.addr = addr;\\r\\n\\t\\tthis.size = activeInfo.size;\\r\\n\\t\\tthis.setValue = getPureArraySetter( activeInfo.type );\\r\\n\\r\\n\\t\\t// this.path = activeInfo.name; // DEBUG\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction StructuredUniform( id ) {\\r\\n\\r\\n\\t\\tthis.id = id;\\r\\n\\r\\n\\t\\tUniformContainer.call( this ); // mix-in\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tStructuredUniform.prototype.setValue = function ( gl, value ) {\\r\\n\\r\\n\\t\\t// Note: Don't need an extra 'renderer' parameter, since samplers\\r\\n\\t\\t// are not allowed in structured uniforms.\\r\\n\\r\\n\\t\\tvar seq = this.seq;\\r\\n\\r\\n\\t\\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\tvar u = seq[ i ];\\r\\n\\t\\t\\tu.setValue( gl, value[ u.id ] );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t// --- Top-level ---\\r\\n\\r\\n\\t// Parser - builds up the property tree from the path strings\\r\\n\\r\\n\\tvar RePathPart = /([\\\\w\\\\d_]+)(\\\\])?(\\\\[|\\\\.)?/g;\\r\\n\\r\\n\\t// extracts\\r\\n\\t// \\t- the identifier (member name or array index)\\r\\n\\t//  - followed by an optional right bracket (found when array index)\\r\\n\\t//  - followed by an optional left bracket or dot (type of subscript)\\r\\n\\t//\\r\\n\\t// Note: These portions can be read in a non-overlapping fashion and\\r\\n\\t// allow straightforward parsing of the hierarchy that WebGL encodes\\r\\n\\t// in the uniform names.\\r\\n\\r\\n\\tfunction addUniform( container, uniformObject ) {\\r\\n\\r\\n\\t\\tcontainer.seq.push( uniformObject );\\r\\n\\t\\tcontainer.map[ uniformObject.id ] = uniformObject;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction parseUniform( activeInfo, addr, container ) {\\r\\n\\r\\n\\t\\tvar path = activeInfo.name,\\r\\n\\t\\t\\tpathLength = path.length;\\r\\n\\r\\n\\t\\t// reset RegExp object, because of the early exit of a previous run\\r\\n\\t\\tRePathPart.lastIndex = 0;\\r\\n\\r\\n\\t\\tfor ( ; ; ) {\\r\\n\\r\\n\\t\\t\\tvar match = RePathPart.exec( path ),\\r\\n\\t\\t\\t\\tmatchEnd = RePathPart.lastIndex,\\r\\n\\r\\n\\t\\t\\t\\tid = match[ 1 ],\\r\\n\\t\\t\\t\\tidIsIndex = match[ 2 ] === ']',\\r\\n\\t\\t\\t\\tsubscript = match[ 3 ];\\r\\n\\r\\n\\t\\t\\tif ( idIsIndex ) id = id | 0; // convert to integer\\r\\n\\r\\n\\t\\t\\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\\r\\n\\r\\n\\t\\t\\t\\t// bare name or \\\"pure\\\" bottom-level array \\\"[0]\\\" suffix\\r\\n\\r\\n\\t\\t\\t\\taddUniform( container, subscript === undefined ?\\r\\n\\t\\t\\t\\t\\tnew SingleUniform( id, activeInfo, addr ) :\\r\\n\\t\\t\\t\\t\\tnew PureArrayUniform( id, activeInfo, addr ) );\\r\\n\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// step into inner node / create it in case it doesn't exist\\r\\n\\r\\n\\t\\t\\t\\tvar map = container.map, next = map[ id ];\\r\\n\\r\\n\\t\\t\\t\\tif ( next === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tnext = new StructuredUniform( id );\\r\\n\\t\\t\\t\\t\\taddUniform( container, next );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tcontainer = next;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Root Container\\r\\n\\r\\n\\tfunction WebGLUniforms( gl, program, renderer ) {\\r\\n\\r\\n\\t\\tUniformContainer.call( this );\\r\\n\\r\\n\\t\\tthis.renderer = renderer;\\r\\n\\r\\n\\t\\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\\r\\n\\r\\n\\t\\tfor ( var i = 0; i < n; ++ i ) {\\r\\n\\r\\n\\t\\t\\tvar info = gl.getActiveUniform( program, i ),\\r\\n\\t\\t\\t\\tpath = info.name,\\r\\n\\t\\t\\t\\taddr = gl.getUniformLocation( program, path );\\r\\n\\r\\n\\t\\t\\tparseUniform( info, addr, this );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\\r\\n\\r\\n\\t\\tvar u = this.map[ name ];\\r\\n\\r\\n\\t\\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\\r\\n\\r\\n\\t\\tvar v = object[ name ];\\r\\n\\r\\n\\t\\tif ( v !== undefined ) this.setValue( gl, name, v );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\r\\n\\t// Static interface\\r\\n\\r\\n\\tWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\\r\\n\\r\\n\\t\\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\tvar u = seq[ i ],\\r\\n\\t\\t\\t\\tv = values[ u.id ];\\r\\n\\r\\n\\t\\t\\tif ( v.needsUpdate !== false ) {\\r\\n\\r\\n\\t\\t\\t\\t// note: always updating when .needsUpdate is undefined\\r\\n\\t\\t\\t\\tu.setValue( gl, v.value, renderer );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tWebGLUniforms.seqWithValue = function ( seq, values ) {\\r\\n\\r\\n\\t\\tvar r = [];\\r\\n\\r\\n\\t\\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\tvar u = seq[ i ];\\r\\n\\t\\t\\tif ( u.id in values ) r.push( u );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn r;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\\r\\n\\t\\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\\r\\n\\t\\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\\r\\n\\t\\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\\r\\n\\t\\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\\r\\n\\t\\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\\r\\n\\t\\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\\r\\n\\t\\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\\r\\n\\t\\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\\r\\n\\t\\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\\r\\n\\t\\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\\r\\n\\t\\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\\r\\n\\t\\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\\r\\n\\t\\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\\r\\n\\t\\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\\r\\n\\t\\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\\r\\n\\t\\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\\r\\n\\t\\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\\r\\n\\t\\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\\r\\n\\t\\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\\r\\n\\t\\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\\r\\n\\t\\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\\r\\n\\t\\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\\r\\n\\t\\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\\r\\n\\r\\n\\tfunction Color( r, g, b ) {\\r\\n\\r\\n\\t\\tif ( g === undefined && b === undefined ) {\\r\\n\\r\\n\\t\\t\\t// r is THREE.Color, hex or string\\r\\n\\t\\t\\treturn this.set( r );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn this.setRGB( r, g, b );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Color.prototype, {\\r\\n\\r\\n\\t\\tisColor: true,\\r\\n\\r\\n\\t\\tr: 1, g: 1, b: 1,\\r\\n\\r\\n\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( value && value.isColor ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.copy( value );\\r\\n\\r\\n\\t\\t\\t} else if ( typeof value === 'number' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.setHex( value );\\r\\n\\r\\n\\t\\t\\t} else if ( typeof value === 'string' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.setStyle( value );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\tthis.r = scalar;\\r\\n\\t\\t\\tthis.g = scalar;\\r\\n\\t\\t\\tthis.b = scalar;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetHex: function ( hex ) {\\r\\n\\r\\n\\t\\t\\thex = Math.floor( hex );\\r\\n\\r\\n\\t\\t\\tthis.r = ( hex >> 16 & 255 ) / 255;\\r\\n\\t\\t\\tthis.g = ( hex >> 8 & 255 ) / 255;\\r\\n\\t\\t\\tthis.b = ( hex & 255 ) / 255;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetRGB: function ( r, g, b ) {\\r\\n\\r\\n\\t\\t\\tthis.r = r;\\r\\n\\t\\t\\tthis.g = g;\\r\\n\\t\\t\\tthis.b = b;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetHSL: function () {\\r\\n\\r\\n\\t\\t\\tfunction hue2rgb( p, q, t ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( t < 0 ) t += 1;\\r\\n\\t\\t\\t\\tif ( t > 1 ) t -= 1;\\r\\n\\t\\t\\t\\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\\r\\n\\t\\t\\t\\tif ( t < 1 / 2 ) return q;\\r\\n\\t\\t\\t\\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\\r\\n\\t\\t\\t\\treturn p;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn function setHSL( h, s, l ) {\\r\\n\\r\\n\\t\\t\\t\\t// h,s,l ranges are in 0.0 - 1.0\\r\\n\\t\\t\\t\\th = _Math.euclideanModulo( h, 1 );\\r\\n\\t\\t\\t\\ts = _Math.clamp( s, 0, 1 );\\r\\n\\t\\t\\t\\tl = _Math.clamp( l, 0, 1 );\\r\\n\\r\\n\\t\\t\\t\\tif ( s === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.r = this.g = this.b = l;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\\r\\n\\t\\t\\t\\t\\tvar q = ( 2 * l ) - p;\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.r = hue2rgb( q, p, h + 1 / 3 );\\r\\n\\t\\t\\t\\t\\tthis.g = hue2rgb( q, p, h );\\r\\n\\t\\t\\t\\t\\tthis.b = hue2rgb( q, p, h - 1 / 3 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tsetStyle: function ( style ) {\\r\\n\\r\\n\\t\\t\\tfunction handleAlpha( string ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( string === undefined ) return;\\r\\n\\r\\n\\t\\t\\t\\tif ( parseFloat( string ) < 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\tvar m;\\r\\n\\r\\n\\t\\t\\tif ( m = /^((?:rgb|hsl)a?)\\\\(\\\\s*([^\\\\)]*)\\\\)/.exec( style ) ) {\\r\\n\\r\\n\\t\\t\\t\\t// rgb / hsl\\r\\n\\r\\n\\t\\t\\t\\tvar color;\\r\\n\\t\\t\\t\\tvar name = m[ 1 ];\\r\\n\\t\\t\\t\\tvar components = m[ 2 ];\\r\\n\\r\\n\\t\\t\\t\\tswitch ( name ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'rgb':\\r\\n\\t\\t\\t\\t\\tcase 'rgba':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( color = /^(\\\\d+)\\\\s*,\\\\s*(\\\\d+)\\\\s*,\\\\s*(\\\\d+)\\\\s*(,\\\\s*([0-9]*\\\\.?[0-9]+)\\\\s*)?$/.exec( components ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// rgb(255,0,0) rgba(255,0,0,0.5)\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\thandleAlpha( color[ 5 ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( color = /^(\\\\d+)\\\\%\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\s*(,\\\\s*([0-9]*\\\\.?[0-9]+)\\\\s*)?$/.exec( components ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\thandleAlpha( color[ 5 ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'hsl':\\r\\n\\t\\t\\t\\t\\tcase 'hsla':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( color = /^([0-9]*\\\\.?[0-9]+)\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\s*(,\\\\s*([0-9]*\\\\.?[0-9]+)\\\\s*)?$/.exec( components ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\\r\\n\\t\\t\\t\\t\\t\\t\\tvar h = parseFloat( color[ 1 ] ) / 360;\\r\\n\\t\\t\\t\\t\\t\\t\\tvar s = parseInt( color[ 2 ], 10 ) / 100;\\r\\n\\t\\t\\t\\t\\t\\t\\tvar l = parseInt( color[ 3 ], 10 ) / 100;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\thandleAlpha( color[ 5 ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\treturn this.setHSL( h, s, l );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( m = /^\\\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\\r\\n\\r\\n\\t\\t\\t\\t// hex color\\r\\n\\r\\n\\t\\t\\t\\tvar hex = m[ 1 ];\\r\\n\\t\\t\\t\\tvar size = hex.length;\\r\\n\\r\\n\\t\\t\\t\\tif ( size === 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// #ff0\\r\\n\\t\\t\\t\\t\\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\\r\\n\\t\\t\\t\\t\\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\\r\\n\\t\\t\\t\\t\\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\\r\\n\\r\\n\\t\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( size === 6 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// #ff0000\\r\\n\\t\\t\\t\\t\\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\\r\\n\\t\\t\\t\\t\\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\\r\\n\\t\\t\\t\\t\\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\\r\\n\\r\\n\\t\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( style && style.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t// color keywords\\r\\n\\t\\t\\t\\tvar hex = ColorKeywords[ style ];\\r\\n\\r\\n\\t\\t\\t\\tif ( hex !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// red\\r\\n\\t\\t\\t\\t\\tthis.setHex( hex );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// unknown color\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.Color: Unknown color ' + style );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.r, this.g, this.b );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( color ) {\\r\\n\\r\\n\\t\\t\\tthis.r = color.r;\\r\\n\\t\\t\\tthis.g = color.g;\\r\\n\\t\\t\\tthis.b = color.b;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyGammaToLinear: function ( color, gammaFactor ) {\\r\\n\\r\\n\\t\\t\\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\\r\\n\\r\\n\\t\\t\\tthis.r = Math.pow( color.r, gammaFactor );\\r\\n\\t\\t\\tthis.g = Math.pow( color.g, gammaFactor );\\r\\n\\t\\t\\tthis.b = Math.pow( color.b, gammaFactor );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyLinearToGamma: function ( color, gammaFactor ) {\\r\\n\\r\\n\\t\\t\\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\\r\\n\\r\\n\\t\\t\\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\\r\\n\\r\\n\\t\\t\\tthis.r = Math.pow( color.r, safeInverse );\\r\\n\\t\\t\\tthis.g = Math.pow( color.g, safeInverse );\\r\\n\\t\\t\\tthis.b = Math.pow( color.b, safeInverse );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tconvertGammaToLinear: function () {\\r\\n\\r\\n\\t\\t\\tvar r = this.r, g = this.g, b = this.b;\\r\\n\\r\\n\\t\\t\\tthis.r = r * r;\\r\\n\\t\\t\\tthis.g = g * g;\\r\\n\\t\\t\\tthis.b = b * b;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tconvertLinearToGamma: function () {\\r\\n\\r\\n\\t\\t\\tthis.r = Math.sqrt( this.r );\\r\\n\\t\\t\\tthis.g = Math.sqrt( this.g );\\r\\n\\t\\t\\tthis.b = Math.sqrt( this.b );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetHex: function () {\\r\\n\\r\\n\\t\\t\\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetHexString: function () {\\r\\n\\r\\n\\t\\t\\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetHSL: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t// h,s,l ranges are in 0.0 - 1.0\\r\\n\\r\\n\\t\\t\\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\\r\\n\\r\\n\\t\\t\\tvar r = this.r, g = this.g, b = this.b;\\r\\n\\r\\n\\t\\t\\tvar max = Math.max( r, g, b );\\r\\n\\t\\t\\tvar min = Math.min( r, g, b );\\r\\n\\r\\n\\t\\t\\tvar hue, saturation;\\r\\n\\t\\t\\tvar lightness = ( min + max ) / 2.0;\\r\\n\\r\\n\\t\\t\\tif ( min === max ) {\\r\\n\\r\\n\\t\\t\\t\\thue = 0;\\r\\n\\t\\t\\t\\tsaturation = 0;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tvar delta = max - min;\\r\\n\\r\\n\\t\\t\\t\\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\\r\\n\\r\\n\\t\\t\\t\\tswitch ( max ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\\r\\n\\t\\t\\t\\t\\tcase g: hue = ( b - r ) / delta + 2; break;\\r\\n\\t\\t\\t\\t\\tcase b: hue = ( r - g ) / delta + 4; break;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\thue /= 6;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\thsl.h = hue;\\r\\n\\t\\t\\thsl.s = saturation;\\r\\n\\t\\t\\thsl.l = lightness;\\r\\n\\r\\n\\t\\t\\treturn hsl;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetStyle: function () {\\r\\n\\r\\n\\t\\t\\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\toffsetHSL: function ( h, s, l ) {\\r\\n\\r\\n\\t\\t\\tvar hsl = this.getHSL();\\r\\n\\r\\n\\t\\t\\thsl.h += h; hsl.s += s; hsl.l += l;\\r\\n\\r\\n\\t\\t\\tthis.setHSL( hsl.h, hsl.s, hsl.l );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tadd: function ( color ) {\\r\\n\\r\\n\\t\\t\\tthis.r += color.r;\\r\\n\\t\\t\\tthis.g += color.g;\\r\\n\\t\\t\\tthis.b += color.b;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddColors: function ( color1, color2 ) {\\r\\n\\r\\n\\t\\t\\tthis.r = color1.r + color2.r;\\r\\n\\t\\t\\tthis.g = color1.g + color2.g;\\r\\n\\t\\t\\tthis.b = color1.b + color2.b;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tthis.r += s;\\r\\n\\t\\t\\tthis.g += s;\\r\\n\\t\\t\\tthis.b += s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsub: function ( color ) {\\r\\n\\r\\n\\t\\t\\tthis.r = Math.max( 0, this.r - color.r );\\r\\n\\t\\t\\tthis.g = Math.max( 0, this.g - color.g );\\r\\n\\t\\t\\tthis.b = Math.max( 0, this.b - color.b );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiply: function ( color ) {\\r\\n\\r\\n\\t\\t\\tthis.r *= color.r;\\r\\n\\t\\t\\tthis.g *= color.g;\\r\\n\\t\\t\\tthis.b *= color.b;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmultiplyScalar: function ( s ) {\\r\\n\\r\\n\\t\\t\\tthis.r *= s;\\r\\n\\t\\t\\tthis.g *= s;\\r\\n\\t\\t\\tthis.b *= s;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlerp: function ( color, alpha ) {\\r\\n\\r\\n\\t\\t\\tthis.r += ( color.r - this.r ) * alpha;\\r\\n\\t\\t\\tthis.g += ( color.g - this.g ) * alpha;\\r\\n\\t\\t\\tthis.b += ( color.b - this.b ) * alpha;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( c ) {\\r\\n\\r\\n\\t\\t\\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tthis.r = array[ offset ];\\r\\n\\t\\t\\tthis.g = array[ offset + 1 ];\\r\\n\\t\\t\\tthis.b = array[ offset + 2 ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( array === undefined ) array = [];\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tarray[ offset ] = this.r;\\r\\n\\t\\t\\tarray[ offset + 1 ] = this.g;\\r\\n\\t\\t\\tarray[ offset + 2 ] = this.b;\\r\\n\\r\\n\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function () {\\r\\n\\r\\n\\t\\t\\treturn this.getHex();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * Uniforms library for shared webgl shaders\\r\\n\\t */\\r\\n\\r\\n\\tvar UniformsLib = {\\r\\n\\r\\n\\t\\tcommon: {\\r\\n\\r\\n\\t\\t\\tdiffuse: { value: new Color( 0xeeeeee ) },\\r\\n\\t\\t\\topacity: { value: 1.0 },\\r\\n\\r\\n\\t\\t\\tmap: { value: null },\\r\\n\\t\\t\\tuvTransform: { value: new Matrix3() },\\r\\n\\r\\n\\t\\t\\talphaMap: { value: null },\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tspecularmap: {\\r\\n\\r\\n\\t\\t\\tspecularMap: { value: null },\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tenvmap: {\\r\\n\\r\\n\\t\\t\\tenvMap: { value: null },\\r\\n\\t\\t\\tflipEnvMap: { value: - 1 },\\r\\n\\t\\t\\treflectivity: { value: 1.0 },\\r\\n\\t\\t\\trefractionRatio: { value: 0.98 }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taomap: {\\r\\n\\r\\n\\t\\t\\taoMap: { value: null },\\r\\n\\t\\t\\taoMapIntensity: { value: 1 }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlightmap: {\\r\\n\\r\\n\\t\\t\\tlightMap: { value: null },\\r\\n\\t\\t\\tlightMapIntensity: { value: 1 }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\temissivemap: {\\r\\n\\r\\n\\t\\t\\temissiveMap: { value: null }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tbumpmap: {\\r\\n\\r\\n\\t\\t\\tbumpMap: { value: null },\\r\\n\\t\\t\\tbumpScale: { value: 1 }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormalmap: {\\r\\n\\r\\n\\t\\t\\tnormalMap: { value: null },\\r\\n\\t\\t\\tnormalScale: { value: new Vector2( 1, 1 ) }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdisplacementmap: {\\r\\n\\r\\n\\t\\t\\tdisplacementMap: { value: null },\\r\\n\\t\\t\\tdisplacementScale: { value: 1 },\\r\\n\\t\\t\\tdisplacementBias: { value: 0 }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\troughnessmap: {\\r\\n\\r\\n\\t\\t\\troughnessMap: { value: null }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmetalnessmap: {\\r\\n\\r\\n\\t\\t\\tmetalnessMap: { value: null }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgradientmap: {\\r\\n\\r\\n\\t\\t\\tgradientMap: { value: null }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfog: {\\r\\n\\r\\n\\t\\t\\tfogDensity: { value: 0.00025 },\\r\\n\\t\\t\\tfogNear: { value: 1 },\\r\\n\\t\\t\\tfogFar: { value: 2000 },\\r\\n\\t\\t\\tfogColor: { value: new Color( 0xffffff ) }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlights: {\\r\\n\\r\\n\\t\\t\\tambientLightColor: { value: [] },\\r\\n\\r\\n\\t\\t\\tdirectionalLights: { value: [], properties: {\\r\\n\\t\\t\\t\\tdirection: {},\\r\\n\\t\\t\\t\\tcolor: {},\\r\\n\\r\\n\\t\\t\\t\\tshadow: {},\\r\\n\\t\\t\\t\\tshadowBias: {},\\r\\n\\t\\t\\t\\tshadowRadius: {},\\r\\n\\t\\t\\t\\tshadowMapSize: {}\\r\\n\\t\\t\\t} },\\r\\n\\r\\n\\t\\t\\tdirectionalShadowMap: { value: [] },\\r\\n\\t\\t\\tdirectionalShadowMatrix: { value: [] },\\r\\n\\r\\n\\t\\t\\tspotLights: { value: [], properties: {\\r\\n\\t\\t\\t\\tcolor: {},\\r\\n\\t\\t\\t\\tposition: {},\\r\\n\\t\\t\\t\\tdirection: {},\\r\\n\\t\\t\\t\\tdistance: {},\\r\\n\\t\\t\\t\\tconeCos: {},\\r\\n\\t\\t\\t\\tpenumbraCos: {},\\r\\n\\t\\t\\t\\tdecay: {},\\r\\n\\r\\n\\t\\t\\t\\tshadow: {},\\r\\n\\t\\t\\t\\tshadowBias: {},\\r\\n\\t\\t\\t\\tshadowRadius: {},\\r\\n\\t\\t\\t\\tshadowMapSize: {}\\r\\n\\t\\t\\t} },\\r\\n\\r\\n\\t\\t\\tspotShadowMap: { value: [] },\\r\\n\\t\\t\\tspotShadowMatrix: { value: [] },\\r\\n\\r\\n\\t\\t\\tpointLights: { value: [], properties: {\\r\\n\\t\\t\\t\\tcolor: {},\\r\\n\\t\\t\\t\\tposition: {},\\r\\n\\t\\t\\t\\tdecay: {},\\r\\n\\t\\t\\t\\tdistance: {},\\r\\n\\r\\n\\t\\t\\t\\tshadow: {},\\r\\n\\t\\t\\t\\tshadowBias: {},\\r\\n\\t\\t\\t\\tshadowRadius: {},\\r\\n\\t\\t\\t\\tshadowMapSize: {},\\r\\n\\t\\t\\t\\tshadowCameraNear: {},\\r\\n\\t\\t\\t\\tshadowCameraFar: {}\\r\\n\\t\\t\\t} },\\r\\n\\r\\n\\t\\t\\tpointShadowMap: { value: [] },\\r\\n\\t\\t\\tpointShadowMatrix: { value: [] },\\r\\n\\r\\n\\t\\t\\themisphereLights: { value: [], properties: {\\r\\n\\t\\t\\t\\tdirection: {},\\r\\n\\t\\t\\t\\tskyColor: {},\\r\\n\\t\\t\\t\\tgroundColor: {}\\r\\n\\t\\t\\t} },\\r\\n\\r\\n\\t\\t\\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\\r\\n\\t\\t\\trectAreaLights: { value: [], properties: {\\r\\n\\t\\t\\t\\tcolor: {},\\r\\n\\t\\t\\t\\tposition: {},\\r\\n\\t\\t\\t\\twidth: {},\\r\\n\\t\\t\\t\\theight: {}\\r\\n\\t\\t\\t} }\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tpoints: {\\r\\n\\r\\n\\t\\t\\tdiffuse: { value: new Color( 0xeeeeee ) },\\r\\n\\t\\t\\topacity: { value: 1.0 },\\r\\n\\t\\t\\tsize: { value: 1.0 },\\r\\n\\t\\t\\tscale: { value: 1.0 },\\r\\n\\t\\t\\tmap: { value: null },\\r\\n\\t\\t\\tuvTransform: { value: new Matrix3() }\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * Uniform Utilities\\r\\n\\t */\\r\\n\\r\\n\\tvar UniformsUtils = {\\r\\n\\r\\n\\t\\tmerge: function ( uniforms ) {\\r\\n\\r\\n\\t\\t\\tvar merged = {};\\r\\n\\r\\n\\t\\t\\tfor ( var u = 0; u < uniforms.length; u ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar tmp = this.clone( uniforms[ u ] );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var p in tmp ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmerged[ p ] = tmp[ p ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn merged;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function ( uniforms_src ) {\\r\\n\\r\\n\\t\\t\\tvar uniforms_dst = {};\\r\\n\\r\\n\\t\\t\\tfor ( var u in uniforms_src ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms_dst[ u ] = {};\\r\\n\\r\\n\\t\\t\\t\\tfor ( var p in uniforms_src[ u ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar parameter_src = uniforms_src[ u ][ p ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( parameter_src && ( parameter_src.isColor ||\\r\\n\\t\\t\\t\\t\\t\\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\\r\\n\\t\\t\\t\\t\\t\\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\\r\\n\\t\\t\\t\\t\\t\\tparameter_src.isTexture ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuniforms_dst[ u ][ p ] = parameter_src.clone();\\r\\n\\r\\n\\t\\t\\t\\t\\t} else if ( Array.isArray( parameter_src ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuniforms_dst[ u ][ p ] = parameter_src.slice();\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuniforms_dst[ u ][ p ] = parameter_src;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn uniforms_dst;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tvar alphamap_fragment = \\\"#ifdef USE_ALPHAMAP\\\\n\\\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar alphamap_pars_fragment = \\\"#ifdef USE_ALPHAMAP\\\\n\\\\tuniform sampler2D alphaMap;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar alphatest_fragment = \\\"#ifdef ALPHATEST\\\\n\\\\tif ( diffuseColor.a < ALPHATEST ) discard;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar aomap_fragment = \\\"#ifdef USE_AOMAP\\\\n\\\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\\\n\\\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\\\n\\\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\\\n\\\\t\\\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\\\n\\\\t\\\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar aomap_pars_fragment = \\\"#ifdef USE_AOMAP\\\\n\\\\tuniform sampler2D aoMap;\\\\n\\\\tuniform float aoMapIntensity;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar begin_vertex = \\\"\\\\nvec3 transformed = vec3( position );\\\\n\\\";\\r\\n\\r\\n\\tvar beginnormal_vertex = \\\"\\\\nvec3 objectNormal = vec3( normal );\\\\n\\\";\\r\\n\\r\\n\\tvar bsdfs = \\\"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\\\n\\\\tif( decayExponent > 0.0 ) {\\\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\\\n\\\\t\\\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\\\n\\\\t\\\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\\\n\\\\t\\\\treturn distanceFalloff * maxDistanceCutoffFactor;\\\\n#else\\\\n\\\\t\\\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\\\n#endif\\\\n\\\\t}\\\\n\\\\treturn 1.0;\\\\n}\\\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\\\n\\\\treturn RECIPROCAL_PI * diffuseColor;\\\\n}\\\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\\\n\\\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\\\n\\\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\\\n}\\\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\\\n\\\\tfloat a2 = pow2( alpha );\\\\n\\\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\\\n\\\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\\\n\\\\treturn 1.0 / ( gl * gv );\\\\n}\\\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\\\n\\\\tfloat a2 = pow2( alpha );\\\\n\\\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\\\n\\\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\\\n\\\\treturn 0.5 / max( gv + gl, EPSILON );\\\\n}\\\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\\\n\\\\tfloat a2 = pow2( alpha );\\\\n\\\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\\\n\\\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\\\n}\\\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\\\n\\\\tfloat alpha = pow2( roughness );\\\\n\\\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\\\n\\\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\\\n\\\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\\\n\\\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\\\n\\\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\\\n\\\\tvec3 F = F_Schlick( specularColor, dotLH );\\\\n\\\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\\\n\\\\tfloat D = D_GGX( alpha, dotNH );\\\\n\\\\treturn F * ( G * D );\\\\n}\\\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\\\n\\\\tconst float LUT_SIZE  = 64.0;\\\\n\\\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\\\n\\\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\\\n\\\\tfloat theta = acos( dot( N, V ) );\\\\n\\\\tvec2 uv = vec2(\\\\n\\\\t\\\\tsqrt( saturate( roughness ) ),\\\\n\\\\t\\\\tsaturate( theta / ( 0.5 * PI ) ) );\\\\n\\\\tuv = uv * LUT_SCALE + LUT_BIAS;\\\\n\\\\treturn uv;\\\\n}\\\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\\\n\\\\tfloat l = length( f );\\\\n\\\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\\\n}\\\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\\\n\\\\tfloat x = dot( v1, v2 );\\\\n\\\\tfloat y = abs( x );\\\\n\\\\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\\\\n\\\\tfloat b = 3.45068 + (4.18814 + y) * y;\\\\n\\\\tfloat v = a / b;\\\\n\\\\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\\\\n\\\\treturn cross( v1, v2 ) * theta_sintheta;\\\\n}\\\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\\\n\\\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\\\n\\\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\\\n\\\\tvec3 lightNormal = cross( v1, v2 );\\\\n\\\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\\\n\\\\tvec3 T1, T2;\\\\n\\\\tT1 = normalize( V - N * dot( V, N ) );\\\\n\\\\tT2 = - cross( N, T1 );\\\\n\\\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\\\n\\\\tvec3 coords[ 4 ];\\\\n\\\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\\\n\\\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\\\n\\\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\\\n\\\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\\\n\\\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\\\n\\\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\\\n\\\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\\\n\\\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\\\n\\\\tvec3 vectorFormFactor = vec3( 0.0 );\\\\n\\\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\\\n\\\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\\\n\\\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\\\n\\\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\\\n\\\\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\\\\n\\\\treturn result;\\\\n}\\\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\\\n\\\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\\\n\\\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\\\n\\\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\\\n\\\\tvec4 r = roughness * c0 + c1;\\\\n\\\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\\\n\\\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\\\n\\\\treturn specularColor * AB.x + AB.y;\\\\n}\\\\nfloat G_BlinnPhong_Implicit( ) {\\\\n\\\\treturn 0.25;\\\\n}\\\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\\\n\\\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\\\n}\\\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\\\n\\\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\\\n\\\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\\\n\\\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\\\n\\\\tvec3 F = F_Schlick( specularColor, dotLH );\\\\n\\\\tfloat G = G_BlinnPhong_Implicit( );\\\\n\\\\tfloat D = D_BlinnPhong( shininess, dotNH );\\\\n\\\\treturn F * ( G * D );\\\\n}\\\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\\\n\\\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\\\n}\\\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\\\n\\\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar bumpmap_pars_fragment = \\\"#ifdef USE_BUMPMAP\\\\n\\\\tuniform sampler2D bumpMap;\\\\n\\\\tuniform float bumpScale;\\\\n\\\\tvec2 dHdxy_fwd() {\\\\n\\\\t\\\\tvec2 dSTdx = dFdx( vUv );\\\\n\\\\t\\\\tvec2 dSTdy = dFdy( vUv );\\\\n\\\\t\\\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\\\n\\\\t\\\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\\\n\\\\t\\\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\\\n\\\\t\\\\treturn vec2( dBx, dBy );\\\\n\\\\t}\\\\n\\\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\\\n\\\\t\\\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\\\n\\\\t\\\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\\\n\\\\t\\\\tvec3 vN = surf_norm;\\\\n\\\\t\\\\tvec3 R1 = cross( vSigmaY, vN );\\\\n\\\\t\\\\tvec3 R2 = cross( vN, vSigmaX );\\\\n\\\\t\\\\tfloat fDet = dot( vSigmaX, R1 );\\\\n\\\\t\\\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\\\n\\\\t\\\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\\\n\\\\t}\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar clipping_planes_fragment = \\\"#if NUM_CLIPPING_PLANES > 0\\\\n\\\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\\\\n\\\\t\\\\tvec4 plane = clippingPlanes[ i ];\\\\n\\\\t\\\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\\\n\\\\t}\\\\n\\\\t\\\\t\\\\n\\\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\\\n\\\\t\\\\tbool clipped = true;\\\\n\\\\t\\\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\\\\n\\\\t\\\\t\\\\tvec4 plane = clippingPlanes[ i ];\\\\n\\\\t\\\\t\\\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\\\n\\\\t\\\\t}\\\\n\\\\t\\\\tif ( clipped ) discard;\\\\n\\\\t\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar clipping_planes_pars_fragment = \\\"#if NUM_CLIPPING_PLANES > 0\\\\n\\\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\\\n\\\\t\\\\tvarying vec3 vViewPosition;\\\\n\\\\t#endif\\\\n\\\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar clipping_planes_pars_vertex = \\\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\\\n\\\\tvarying vec3 vViewPosition;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar clipping_planes_vertex = \\\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\\\n\\\\tvViewPosition = - mvPosition.xyz;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar color_fragment = \\\"#ifdef USE_COLOR\\\\n\\\\tdiffuseColor.rgb *= vColor;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar color_pars_fragment = \\\"#ifdef USE_COLOR\\\\n\\\\tvarying vec3 vColor;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar color_pars_vertex = \\\"#ifdef USE_COLOR\\\\n\\\\tvarying vec3 vColor;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar color_vertex = \\\"#ifdef USE_COLOR\\\\n\\\\tvColor.xyz = color.xyz;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar common = \\\"#define PI 3.14159265359\\\\n#define PI2 6.28318530718\\\\n#define PI_HALF 1.5707963267949\\\\n#define RECIPROCAL_PI 0.31830988618\\\\n#define RECIPROCAL_PI2 0.15915494\\\\n#define LOG2 1.442695\\\\n#define EPSILON 1e-6\\\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\\\nfloat pow2( const in float x ) { return x*x; }\\\\nfloat pow3( const in float x ) { return x*x*x; }\\\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\\\nhighp float rand( const in vec2 uv ) {\\\\n\\\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\\\n\\\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\\\n\\\\treturn fract(sin(sn) * c);\\\\n}\\\\nstruct IncidentLight {\\\\n\\\\tvec3 color;\\\\n\\\\tvec3 direction;\\\\n\\\\tbool visible;\\\\n};\\\\nstruct ReflectedLight {\\\\n\\\\tvec3 directDiffuse;\\\\n\\\\tvec3 directSpecular;\\\\n\\\\tvec3 indirectDiffuse;\\\\n\\\\tvec3 indirectSpecular;\\\\n};\\\\nstruct GeometricContext {\\\\n\\\\tvec3 position;\\\\n\\\\tvec3 normal;\\\\n\\\\tvec3 viewDir;\\\\n};\\\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\\\n\\\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\\\n}\\\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\\\n\\\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\\\n}\\\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\\\n\\\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\\\n\\\\treturn - distance * planeNormal + point;\\\\n}\\\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\\\n\\\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\\\n}\\\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\\\n\\\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\\\n}\\\\nmat3 transposeMat3( const in mat3 m ) {\\\\n\\\\tmat3 tmp;\\\\n\\\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\\\n\\\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\\\n\\\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\\\n\\\\treturn tmp;\\\\n}\\\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\\\n\\\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\\\n\\\\treturn dot( weights, color.rgb );\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar cube_uv_reflection_fragment = \\\"#ifdef ENVMAP_TYPE_CUBE_UV\\\\n#define cubeUV_textureSize (1024.0)\\\\nint getFaceFromDirection(vec3 direction) {\\\\n\\\\tvec3 absDirection = abs(direction);\\\\n\\\\tint face = -1;\\\\n\\\\tif( absDirection.x > absDirection.z ) {\\\\n\\\\t\\\\tif(absDirection.x > absDirection.y )\\\\n\\\\t\\\\t\\\\tface = direction.x > 0.0 ? 0 : 3;\\\\n\\\\t\\\\telse\\\\n\\\\t\\\\t\\\\tface = direction.y > 0.0 ? 1 : 4;\\\\n\\\\t}\\\\n\\\\telse {\\\\n\\\\t\\\\tif(absDirection.z > absDirection.y )\\\\n\\\\t\\\\t\\\\tface = direction.z > 0.0 ? 2 : 5;\\\\n\\\\t\\\\telse\\\\n\\\\t\\\\t\\\\tface = direction.y > 0.0 ? 1 : 4;\\\\n\\\\t}\\\\n\\\\treturn face;\\\\n}\\\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\\\n\\\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\\\n\\\\tfloat dxRoughness = dFdx(roughness);\\\\n\\\\tfloat dyRoughness = dFdy(roughness);\\\\n\\\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\\\n\\\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\\\n\\\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\\\n\\\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\\\n\\\\tfloat mipLevel = 0.5 * log2(d);\\\\n\\\\treturn vec2(floor(mipLevel), fract(mipLevel));\\\\n}\\\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\\\n\\\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\\\n\\\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\\\n\\\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\\\n\\\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\\\n\\\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\\\n\\\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\\\n\\\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\\\n\\\\tbool bRes = mipLevel == 0.0;\\\\n\\\\tscale =  bRes && (scale < a) ? a : scale;\\\\n\\\\tvec3 r;\\\\n\\\\tvec2 offset;\\\\n\\\\tint face = getFaceFromDirection(direction);\\\\n\\\\tfloat rcpPowScale = 1.0 / powScale;\\\\n\\\\tif( face == 0) {\\\\n\\\\t\\\\tr = vec3(direction.x, -direction.z, direction.y);\\\\n\\\\t\\\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\\\n\\\\t}\\\\n\\\\telse if( face == 1) {\\\\n\\\\t\\\\tr = vec3(direction.y, direction.x, direction.z);\\\\n\\\\t\\\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\\\n\\\\t}\\\\n\\\\telse if( face == 2) {\\\\n\\\\t\\\\tr = vec3(direction.z, direction.x, direction.y);\\\\n\\\\t\\\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\\\n\\\\t}\\\\n\\\\telse if( face == 3) {\\\\n\\\\t\\\\tr = vec3(direction.x, direction.z, direction.y);\\\\n\\\\t\\\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\\\n\\\\t}\\\\n\\\\telse if( face == 4) {\\\\n\\\\t\\\\tr = vec3(direction.y, direction.x, -direction.z);\\\\n\\\\t\\\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\\\n\\\\t}\\\\n\\\\telse {\\\\n\\\\t\\\\tr = vec3(direction.z, -direction.x, direction.y);\\\\n\\\\t\\\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\\\n\\\\t\\\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\\\n\\\\t}\\\\n\\\\tr = normalize(r);\\\\n\\\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\\\n\\\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\\\n\\\\tvec2 base = offset + vec2( texelOffset );\\\\n\\\\treturn base + s * ( scale - 2.0 * texelOffset );\\\\n}\\\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\\\n\\\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\\\n\\\\tfloat r1 = floor(roughnessVal);\\\\n\\\\tfloat r2 = r1 + 1.0;\\\\n\\\\tfloat t = fract(roughnessVal);\\\\n\\\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\\\n\\\\tfloat s = mipInfo.y;\\\\n\\\\tfloat level0 = mipInfo.x;\\\\n\\\\tfloat level1 = level0 + 1.0;\\\\n\\\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\\\n\\\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\\\n\\\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\\\n\\\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\\\n\\\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\\\n\\\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\\\n\\\\tvec4 result = mix(color10, color20, t);\\\\n\\\\treturn vec4(result.rgb, 1.0);\\\\n}\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar defaultnormal_vertex = \\\"vec3 transformedNormal = normalMatrix * objectNormal;\\\\n#ifdef FLIP_SIDED\\\\n\\\\ttransformedNormal = - transformedNormal;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar displacementmap_pars_vertex = \\\"#ifdef USE_DISPLACEMENTMAP\\\\n\\\\tuniform sampler2D displacementMap;\\\\n\\\\tuniform float displacementScale;\\\\n\\\\tuniform float displacementBias;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar displacementmap_vertex = \\\"#ifdef USE_DISPLACEMENTMAP\\\\n\\\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar emissivemap_fragment = \\\"#ifdef USE_EMISSIVEMAP\\\\n\\\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\\\n\\\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\\\n\\\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar emissivemap_pars_fragment = \\\"#ifdef USE_EMISSIVEMAP\\\\n\\\\tuniform sampler2D emissiveMap;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar encodings_fragment = \\\"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\\\n\\\";\\r\\n\\r\\n\\tvar encodings_pars_fragment = \\\"\\\\nvec4 LinearToLinear( in vec4 value ) {\\\\n\\\\treturn value;\\\\n}\\\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\\\n\\\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\\\n}\\\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\\\n\\\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\\\n}\\\\nvec4 sRGBToLinear( in vec4 value ) {\\\\n\\\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\\\n}\\\\nvec4 LinearTosRGB( in vec4 value ) {\\\\n\\\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\\\n}\\\\nvec4 RGBEToLinear( in vec4 value ) {\\\\n\\\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\\\n}\\\\nvec4 LinearToRGBE( in vec4 value ) {\\\\n\\\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\\\n\\\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\\\n\\\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\\\n}\\\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\\\n\\\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\\\n}\\\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\\\n\\\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\\\n\\\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\\\n\\\\tM            = ceil( M * 255.0 ) / 255.0;\\\\n\\\\treturn vec4( value.rgb / ( M * maxRange ), M );\\\\n}\\\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\\\n\\\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\\\n}\\\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\\\n\\\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\\\n\\\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\\\n\\\\tD            = min( floor( D ) / 255.0, 1.0 );\\\\n\\\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\\\n}\\\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\\\nvec4 LinearToLogLuv( in vec4 value )  {\\\\n\\\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\\\n\\\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\\\n\\\\tvec4 vResult;\\\\n\\\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\\\n\\\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\\\n\\\\tvResult.w = fract(Le);\\\\n\\\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\\\n\\\\treturn vResult;\\\\n}\\\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\\\nvec4 LogLuvToLinear( in vec4 value ) {\\\\n\\\\tfloat Le = value.z * 255.0 + value.w;\\\\n\\\\tvec3 Xp_Y_XYZp;\\\\n\\\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\\\n\\\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\\\n\\\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\\\n\\\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\\\n\\\\treturn vec4( max(vRGB, 0.0), 1.0 );\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar envmap_fragment = \\\"#ifdef USE_ENVMAP\\\\n\\\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\\\n\\\\t\\\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\\\n\\\\t\\\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\\\n\\\\t\\\\t#ifdef ENVMAP_MODE_REFLECTION\\\\n\\\\t\\\\t\\\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\\\n\\\\t\\\\t#endif\\\\n\\\\t#else\\\\n\\\\t\\\\tvec3 reflectVec = vReflect;\\\\n\\\\t#endif\\\\n\\\\t#ifdef ENVMAP_TYPE_CUBE\\\\n\\\\t\\\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\\\n\\\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\\\n\\\\t\\\\tvec2 sampleUV;\\\\n\\\\t\\\\treflectVec = normalize( reflectVec );\\\\n\\\\t\\\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\\\n\\\\t\\\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\\\n\\\\t\\\\tvec4 envColor = texture2D( envMap, sampleUV );\\\\n\\\\t#elif defined( ENVMAP_TYPE_SPHERE )\\\\n\\\\t\\\\treflectVec = normalize( reflectVec );\\\\n\\\\t\\\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\\\n\\\\t\\\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\\\n\\\\t#else\\\\n\\\\t\\\\tvec4 envColor = vec4( 0.0 );\\\\n\\\\t#endif\\\\n\\\\tenvColor = envMapTexelToLinear( envColor );\\\\n\\\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\\\n\\\\t\\\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\\\n\\\\t#elif defined( ENVMAP_BLENDING_MIX )\\\\n\\\\t\\\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\\\n\\\\t#elif defined( ENVMAP_BLENDING_ADD )\\\\n\\\\t\\\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar envmap_pars_fragment = \\\"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\\\n\\\\tuniform float reflectivity;\\\\n\\\\tuniform float envMapIntensity;\\\\n#endif\\\\n#ifdef USE_ENVMAP\\\\n\\\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\\\n\\\\t\\\\tvarying vec3 vWorldPosition;\\\\n\\\\t#endif\\\\n\\\\t#ifdef ENVMAP_TYPE_CUBE\\\\n\\\\t\\\\tuniform samplerCube envMap;\\\\n\\\\t#else\\\\n\\\\t\\\\tuniform sampler2D envMap;\\\\n\\\\t#endif\\\\n\\\\tuniform float flipEnvMap;\\\\n\\\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\\\n\\\\t\\\\tuniform float refractionRatio;\\\\n\\\\t#else\\\\n\\\\t\\\\tvarying vec3 vReflect;\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar envmap_pars_vertex = \\\"#ifdef USE_ENVMAP\\\\n\\\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\\\n\\\\t\\\\tvarying vec3 vWorldPosition;\\\\n\\\\t#else\\\\n\\\\t\\\\tvarying vec3 vReflect;\\\\n\\\\t\\\\tuniform float refractionRatio;\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar envmap_vertex = \\\"#ifdef USE_ENVMAP\\\\n\\\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\\\n\\\\t\\\\tvWorldPosition = worldPosition.xyz;\\\\n\\\\t#else\\\\n\\\\t\\\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\\\n\\\\t\\\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\\\n\\\\t\\\\t#ifdef ENVMAP_MODE_REFLECTION\\\\n\\\\t\\\\t\\\\tvReflect = reflect( cameraToVertex, worldNormal );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\\\n\\\\t\\\\t#endif\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar fog_vertex = \\\"\\\\n#ifdef USE_FOG\\\\nfogDepth = -mvPosition.z;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar fog_pars_vertex = \\\"#ifdef USE_FOG\\\\n  varying float fogDepth;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar fog_fragment = \\\"#ifdef USE_FOG\\\\n\\\\t#ifdef FOG_EXP2\\\\n\\\\t\\\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\\\n\\\\t#else\\\\n\\\\t\\\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\\\n\\\\t#endif\\\\n\\\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar fog_pars_fragment = \\\"#ifdef USE_FOG\\\\n\\\\tuniform vec3 fogColor;\\\\n\\\\tvarying float fogDepth;\\\\n\\\\t#ifdef FOG_EXP2\\\\n\\\\t\\\\tuniform float fogDensity;\\\\n\\\\t#else\\\\n\\\\t\\\\tuniform float fogNear;\\\\n\\\\t\\\\tuniform float fogFar;\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar gradientmap_pars_fragment = \\\"#ifdef TOON\\\\n\\\\tuniform sampler2D gradientMap;\\\\n\\\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\\\n\\\\t\\\\tfloat dotNL = dot( normal, lightDirection );\\\\n\\\\t\\\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\\\n\\\\t\\\\t#ifdef USE_GRADIENTMAP\\\\n\\\\t\\\\t\\\\treturn texture2D( gradientMap, coord ).rgb;\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar lightmap_fragment = \\\"#ifdef USE_LIGHTMAP\\\\n\\\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar lightmap_pars_fragment = \\\"#ifdef USE_LIGHTMAP\\\\n\\\\tuniform sampler2D lightMap;\\\\n\\\\tuniform float lightMapIntensity;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar lights_lambert_vertex = \\\"vec3 diffuse = vec3( 1.0 );\\\\nGeometricContext geometry;\\\\ngeometry.position = mvPosition.xyz;\\\\ngeometry.normal = normalize( transformedNormal );\\\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\\\nGeometricContext backGeometry;\\\\nbackGeometry.position = geometry.position;\\\\nbackGeometry.normal = -geometry.normal;\\\\nbackGeometry.viewDir = geometry.viewDir;\\\\nvLightFront = vec3( 0.0 );\\\\n#ifdef DOUBLE_SIDED\\\\n\\\\tvLightBack = vec3( 0.0 );\\\\n#endif\\\\nIncidentLight directLight;\\\\nfloat dotNL;\\\\nvec3 directLightColor_Diffuse;\\\\n#if NUM_POINT_LIGHTS > 0\\\\n\\\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\\\n\\\\t\\\\tdotNL = dot( geometry.normal, directLight.direction );\\\\n\\\\t\\\\tdirectLightColor_Diffuse = PI * directLight.color;\\\\n\\\\t\\\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\t\\\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_SPOT_LIGHTS > 0\\\\n\\\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\\\n\\\\t\\\\tdotNL = dot( geometry.normal, directLight.direction );\\\\n\\\\t\\\\tdirectLightColor_Diffuse = PI * directLight.color;\\\\n\\\\t\\\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\t\\\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_DIR_LIGHTS > 0\\\\n\\\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\\\n\\\\t\\\\tdotNL = dot( geometry.normal, directLight.direction );\\\\n\\\\t\\\\tdirectLightColor_Diffuse = PI * directLight.color;\\\\n\\\\t\\\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\t\\\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_HEMI_LIGHTS > 0\\\\n\\\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\\\n\\\\t\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\t\\\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar lights_pars = \\\"uniform vec3 ambientLightColor;\\\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\\\n\\\\tvec3 irradiance = ambientLightColor;\\\\n\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\tirradiance *= PI;\\\\n\\\\t#endif\\\\n\\\\treturn irradiance;\\\\n}\\\\n#if NUM_DIR_LIGHTS > 0\\\\n\\\\tstruct DirectionalLight {\\\\n\\\\t\\\\tvec3 direction;\\\\n\\\\t\\\\tvec3 color;\\\\n\\\\t\\\\tint shadow;\\\\n\\\\t\\\\tfloat shadowBias;\\\\n\\\\t\\\\tfloat shadowRadius;\\\\n\\\\t\\\\tvec2 shadowMapSize;\\\\n\\\\t};\\\\n\\\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\\\n\\\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\\\n\\\\t\\\\tdirectLight.color = directionalLight.color;\\\\n\\\\t\\\\tdirectLight.direction = directionalLight.direction;\\\\n\\\\t\\\\tdirectLight.visible = true;\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_POINT_LIGHTS > 0\\\\n\\\\tstruct PointLight {\\\\n\\\\t\\\\tvec3 position;\\\\n\\\\t\\\\tvec3 color;\\\\n\\\\t\\\\tfloat distance;\\\\n\\\\t\\\\tfloat decay;\\\\n\\\\t\\\\tint shadow;\\\\n\\\\t\\\\tfloat shadowBias;\\\\n\\\\t\\\\tfloat shadowRadius;\\\\n\\\\t\\\\tvec2 shadowMapSize;\\\\n\\\\t\\\\tfloat shadowCameraNear;\\\\n\\\\t\\\\tfloat shadowCameraFar;\\\\n\\\\t};\\\\n\\\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\\\n\\\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\\\n\\\\t\\\\tvec3 lVector = pointLight.position - geometry.position;\\\\n\\\\t\\\\tdirectLight.direction = normalize( lVector );\\\\n\\\\t\\\\tfloat lightDistance = length( lVector );\\\\n\\\\t\\\\tdirectLight.color = pointLight.color;\\\\n\\\\t\\\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\\\n\\\\t\\\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_SPOT_LIGHTS > 0\\\\n\\\\tstruct SpotLight {\\\\n\\\\t\\\\tvec3 position;\\\\n\\\\t\\\\tvec3 direction;\\\\n\\\\t\\\\tvec3 color;\\\\n\\\\t\\\\tfloat distance;\\\\n\\\\t\\\\tfloat decay;\\\\n\\\\t\\\\tfloat coneCos;\\\\n\\\\t\\\\tfloat penumbraCos;\\\\n\\\\t\\\\tint shadow;\\\\n\\\\t\\\\tfloat shadowBias;\\\\n\\\\t\\\\tfloat shadowRadius;\\\\n\\\\t\\\\tvec2 shadowMapSize;\\\\n\\\\t};\\\\n\\\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\\\n\\\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\\\n\\\\t\\\\tvec3 lVector = spotLight.position - geometry.position;\\\\n\\\\t\\\\tdirectLight.direction = normalize( lVector );\\\\n\\\\t\\\\tfloat lightDistance = length( lVector );\\\\n\\\\t\\\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\\\n\\\\t\\\\tif ( angleCos > spotLight.coneCos ) {\\\\n\\\\t\\\\t\\\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\\\n\\\\t\\\\t\\\\tdirectLight.color = spotLight.color;\\\\n\\\\t\\\\t\\\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\\\n\\\\t\\\\t\\\\tdirectLight.visible = true;\\\\n\\\\t\\\\t} else {\\\\n\\\\t\\\\t\\\\tdirectLight.color = vec3( 0.0 );\\\\n\\\\t\\\\t\\\\tdirectLight.visible = false;\\\\n\\\\t\\\\t}\\\\n\\\\t}\\\\n#endif\\\\n#if NUM_RECT_AREA_LIGHTS > 0\\\\n\\\\tstruct RectAreaLight {\\\\n\\\\t\\\\tvec3 color;\\\\n\\\\t\\\\tvec3 position;\\\\n\\\\t\\\\tvec3 halfWidth;\\\\n\\\\t\\\\tvec3 halfHeight;\\\\n\\\\t};\\\\n\\\\tuniform sampler2D ltcMat;\\\\tuniform sampler2D ltcMag;\\\\n\\\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\\\n#endif\\\\n#if NUM_HEMI_LIGHTS > 0\\\\n\\\\tstruct HemisphereLight {\\\\n\\\\t\\\\tvec3 direction;\\\\n\\\\t\\\\tvec3 skyColor;\\\\n\\\\t\\\\tvec3 groundColor;\\\\n\\\\t};\\\\n\\\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\\\n\\\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\\\n\\\\t\\\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\\\n\\\\t\\\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\\\n\\\\t\\\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\\\n\\\\t\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\t\\\\tirradiance *= PI;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\treturn irradiance;\\\\n\\\\t}\\\\n#endif\\\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\\\n\\\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\\\n\\\\t\\\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\\\n\\\\t\\\\t#ifdef ENVMAP_TYPE_CUBE\\\\n\\\\t\\\\t\\\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\\\n\\\\t\\\\t\\\\t#ifdef TEXTURE_LOD_EXT\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\\\n\\\\t\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\\\n\\\\t\\\\t\\\\t#endif\\\\n\\\\t\\\\t\\\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\\\n\\\\t\\\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\\\n\\\\t\\\\t\\\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\\\n\\\\t\\\\t\\\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tvec4 envMapColor = vec4( 0.0 );\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\treturn PI * envMapColor.rgb * envMapIntensity;\\\\n\\\\t}\\\\n\\\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\\\n\\\\t\\\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\\\n\\\\t\\\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\\\n\\\\t\\\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\\\n\\\\t}\\\\n\\\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\\\n\\\\t\\\\t#ifdef ENVMAP_MODE_REFLECTION\\\\n\\\\t\\\\t\\\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\\\n\\\\t\\\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\\\n\\\\t\\\\t#ifdef ENVMAP_TYPE_CUBE\\\\n\\\\t\\\\t\\\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\\\n\\\\t\\\\t\\\\t#ifdef TEXTURE_LOD_EXT\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#endif\\\\n\\\\t\\\\t\\\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\\\n\\\\t\\\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\\\n\\\\t\\\\t\\\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\\\n\\\\t\\\\t\\\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\\\n\\\\t\\\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\\\n\\\\t\\\\t\\\\tvec2 sampleUV;\\\\n\\\\t\\\\t\\\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\\\n\\\\t\\\\t\\\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\\\n\\\\t\\\\t\\\\t#ifdef TEXTURE_LOD_EXT\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#endif\\\\n\\\\t\\\\t\\\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\\\n\\\\t\\\\t#elif defined( ENVMAP_TYPE_SPHERE )\\\\n\\\\t\\\\t\\\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\\\n\\\\t\\\\t\\\\t#ifdef TEXTURE_LOD_EXT\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\t\\\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\\\n\\\\t\\\\t\\\\t#endif\\\\n\\\\t\\\\t\\\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\treturn envMapColor.rgb * envMapIntensity;\\\\n\\\\t}\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar lights_phong_fragment = \\\"BlinnPhongMaterial material;\\\\nmaterial.diffuseColor = diffuseColor.rgb;\\\\nmaterial.specularColor = specular;\\\\nmaterial.specularShininess = shininess;\\\\nmaterial.specularStrength = specularStrength;\\\\n\\\";\\r\\n\\r\\n\\tvar lights_phong_pars_fragment = \\\"varying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\nstruct BlinnPhongMaterial {\\\\n\\\\tvec3\\\\tdiffuseColor;\\\\n\\\\tvec3\\\\tspecularColor;\\\\n\\\\tfloat\\\\tspecularShininess;\\\\n\\\\tfloat\\\\tspecularStrength;\\\\n};\\\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\t#ifdef TOON\\\\n\\\\t\\\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\\\n\\\\t#else\\\\n\\\\t\\\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\\\n\\\\t\\\\tvec3 irradiance = dotNL * directLight.color;\\\\n\\\\t#endif\\\\n\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\tirradiance *= PI;\\\\n\\\\t#endif\\\\n\\\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\\\n\\\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\\\n}\\\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\\\n}\\\\n#define RE_Direct\\\\t\\\\t\\\\t\\\\tRE_Direct_BlinnPhong\\\\n#define RE_IndirectDiffuse\\\\t\\\\tRE_IndirectDiffuse_BlinnPhong\\\\n#define Material_LightProbeLOD( material )\\\\t(0)\\\\n\\\";\\r\\n\\r\\n\\tvar lights_physical_fragment = \\\"PhysicalMaterial material;\\\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\\\n#ifdef STANDARD\\\\n\\\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\\\n#else\\\\n\\\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\\\n\\\\tmaterial.clearCoat = saturate( clearCoat );\\\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar lights_physical_pars_fragment = \\\"struct PhysicalMaterial {\\\\n\\\\tvec3\\\\tdiffuseColor;\\\\n\\\\tfloat\\\\tspecularRoughness;\\\\n\\\\tvec3\\\\tspecularColor;\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\tfloat clearCoat;\\\\n\\\\t\\\\tfloat clearCoatRoughness;\\\\n\\\\t#endif\\\\n};\\\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\\\n\\\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\\\n}\\\\n#if NUM_RECT_AREA_LIGHTS > 0\\\\n\\\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\t\\\\tvec3 normal = geometry.normal;\\\\n\\\\t\\\\tvec3 viewDir = geometry.viewDir;\\\\n\\\\t\\\\tvec3 position = geometry.position;\\\\n\\\\t\\\\tvec3 lightPos = rectAreaLight.position;\\\\n\\\\t\\\\tvec3 halfWidth = rectAreaLight.halfWidth;\\\\n\\\\t\\\\tvec3 halfHeight = rectAreaLight.halfHeight;\\\\n\\\\t\\\\tvec3 lightColor = rectAreaLight.color;\\\\n\\\\t\\\\tfloat roughness = material.specularRoughness;\\\\n\\\\t\\\\tvec3 rectCoords[ 4 ];\\\\n\\\\t\\\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\\\t\\\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\\\n\\\\t\\\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\\\n\\\\t\\\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\\\n\\\\t\\\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\\\n\\\\t\\\\tfloat norm = texture2D( ltcMag, uv ).a;\\\\n\\\\t\\\\tvec4 t = texture2D( ltcMat, uv );\\\\n\\\\t\\\\tmat3 mInv = mat3(\\\\n\\\\t\\\\t\\\\tvec3(   1,   0, t.y ),\\\\n\\\\t\\\\t\\\\tvec3(   0, t.z,   0 ),\\\\n\\\\t\\\\t\\\\tvec3( t.w,   0, t.x )\\\\n\\\\t\\\\t);\\\\n\\\\t\\\\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\\\n\\\\t\\\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\\\\n\\\\t}\\\\n#endif\\\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\\\n\\\\tvec3 irradiance = dotNL * directLight.color;\\\\n\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\tirradiance *= PI;\\\\n\\\\t#endif\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\\\n\\\\t#else\\\\n\\\\t\\\\tfloat clearCoatDHR = 0.0;\\\\n\\\\t#endif\\\\n\\\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\\\n\\\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\\\n\\\\t#endif\\\\n}\\\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\\\n}\\\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\\\n\\\\t\\\\tfloat dotNL = dotNV;\\\\n\\\\t\\\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\\\n\\\\t#else\\\\n\\\\t\\\\tfloat clearCoatDHR = 0.0;\\\\n\\\\t#endif\\\\n\\\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\\\n\\\\t#endif\\\\n}\\\\n#define RE_Direct\\\\t\\\\t\\\\t\\\\tRE_Direct_Physical\\\\n#define RE_Direct_RectArea\\\\t\\\\tRE_Direct_RectArea_Physical\\\\n#define RE_IndirectDiffuse\\\\t\\\\tRE_IndirectDiffuse_Physical\\\\n#define RE_IndirectSpecular\\\\t\\\\tRE_IndirectSpecular_Physical\\\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\\\n\\\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar lights_template = \\\"\\\\nGeometricContext geometry;\\\\ngeometry.position = - vViewPosition;\\\\ngeometry.normal = normal;\\\\ngeometry.viewDir = normalize( vViewPosition );\\\\nIncidentLight directLight;\\\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\\\n\\\\tPointLight pointLight;\\\\n\\\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tpointLight = pointLights[ i ];\\\\n\\\\t\\\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\\\n\\\\t\\\\t#ifdef USE_SHADOWMAP\\\\n\\\\t\\\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\tRE_Direct( directLight, geometry, material, reflectedLight );\\\\n\\\\t}\\\\n#endif\\\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\\\n\\\\tSpotLight spotLight;\\\\n\\\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tspotLight = spotLights[ i ];\\\\n\\\\t\\\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\\\n\\\\t\\\\t#ifdef USE_SHADOWMAP\\\\n\\\\t\\\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\tRE_Direct( directLight, geometry, material, reflectedLight );\\\\n\\\\t}\\\\n#endif\\\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\\\n\\\\tDirectionalLight directionalLight;\\\\n\\\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tdirectionalLight = directionalLights[ i ];\\\\n\\\\t\\\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\\\n\\\\t\\\\t#ifdef USE_SHADOWMAP\\\\n\\\\t\\\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\tRE_Direct( directLight, geometry, material, reflectedLight );\\\\n\\\\t}\\\\n#endif\\\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\\\n\\\\tRectAreaLight rectAreaLight;\\\\n\\\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\\\n\\\\t\\\\trectAreaLight = rectAreaLights[ i ];\\\\n\\\\t\\\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\\\n\\\\t}\\\\n#endif\\\\n#if defined( RE_IndirectDiffuse )\\\\n\\\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\\\n\\\\t#ifdef USE_LIGHTMAP\\\\n\\\\t\\\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\\\n\\\\t\\\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\\\n\\\\t\\\\t\\\\tlightMapIrradiance *= PI;\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\tirradiance += lightMapIrradiance;\\\\n\\\\t#endif\\\\n\\\\t#if ( NUM_HEMI_LIGHTS > 0 )\\\\n\\\\t\\\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\\\n\\\\t\\\\t\\\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\\\n\\\\t\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\\\n\\\\t\\\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\\\n\\\\t#endif\\\\n\\\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\\\n#endif\\\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\\\n\\\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\\\n\\\\t#ifndef STANDARD\\\\n\\\\t\\\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\\\n\\\\t#else\\\\n\\\\t\\\\tvec3 clearCoatRadiance = vec3( 0.0 );\\\\n\\\\t#endif\\\\n\\\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar logdepthbuf_fragment = \\\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\\\n\\\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar logdepthbuf_pars_fragment = \\\"#ifdef USE_LOGDEPTHBUF\\\\n\\\\tuniform float logDepthBufFC;\\\\n\\\\t#ifdef USE_LOGDEPTHBUF_EXT\\\\n\\\\t\\\\tvarying float vFragDepth;\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar logdepthbuf_pars_vertex = \\\"#ifdef USE_LOGDEPTHBUF\\\\n\\\\t#ifdef USE_LOGDEPTHBUF_EXT\\\\n\\\\t\\\\tvarying float vFragDepth;\\\\n\\\\t#endif\\\\n\\\\tuniform float logDepthBufFC;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar logdepthbuf_vertex = \\\"#ifdef USE_LOGDEPTHBUF\\\\n\\\\t#ifdef USE_LOGDEPTHBUF_EXT\\\\n\\\\t\\\\tvFragDepth = 1.0 + gl_Position.w;\\\\n\\\\t#else\\\\n\\\\t\\\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\\\n\\\\t\\\\tgl_Position.z *= gl_Position.w;\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar map_fragment = \\\"#ifdef USE_MAP\\\\n\\\\tvec4 texelColor = texture2D( map, vUv );\\\\n\\\\ttexelColor = mapTexelToLinear( texelColor );\\\\n\\\\tdiffuseColor *= texelColor;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar map_pars_fragment = \\\"#ifdef USE_MAP\\\\n\\\\tuniform sampler2D map;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar map_particle_fragment = \\\"#ifdef USE_MAP\\\\n\\\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\\\n\\\\tvec4 mapTexel = texture2D( map, uv );\\\\n\\\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar map_particle_pars_fragment = \\\"#ifdef USE_MAP\\\\n\\\\tuniform mat3 uvTransform;\\\\n\\\\tuniform sampler2D map;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar metalnessmap_fragment = \\\"float metalnessFactor = metalness;\\\\n#ifdef USE_METALNESSMAP\\\\n\\\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\\\n\\\\tmetalnessFactor *= texelMetalness.b;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar metalnessmap_pars_fragment = \\\"#ifdef USE_METALNESSMAP\\\\n\\\\tuniform sampler2D metalnessMap;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar morphnormal_vertex = \\\"#ifdef USE_MORPHNORMALS\\\\n\\\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\\\n\\\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\\\n\\\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\\\n\\\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar morphtarget_pars_vertex = \\\"#ifdef USE_MORPHTARGETS\\\\n\\\\t#ifndef USE_MORPHNORMALS\\\\n\\\\tuniform float morphTargetInfluences[ 8 ];\\\\n\\\\t#else\\\\n\\\\tuniform float morphTargetInfluences[ 4 ];\\\\n\\\\t#endif\\\\n#endif\\\";\\r\\n\\r\\n\\tvar morphtarget_vertex = \\\"#ifdef USE_MORPHTARGETS\\\\n\\\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\\\n\\\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\\\n\\\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\\\n\\\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\\\n\\\\t#ifndef USE_MORPHNORMALS\\\\n\\\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\\\n\\\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\\\n\\\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\\\n\\\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar normal_fragment = \\\"#ifdef FLAT_SHADED\\\\n\\\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\\\n\\\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\\\n\\\\tvec3 normal = normalize( cross( fdx, fdy ) );\\\\n#else\\\\n\\\\tvec3 normal = normalize( vNormal );\\\\n\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\\\n\\\\t#endif\\\\n#endif\\\\n#ifdef USE_NORMALMAP\\\\n\\\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\\\n#elif defined( USE_BUMPMAP )\\\\n\\\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar normalmap_pars_fragment = \\\"#ifdef USE_NORMALMAP\\\\n\\\\tuniform sampler2D normalMap;\\\\n\\\\tuniform vec2 normalScale;\\\\n\\\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\\\n\\\\t\\\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\\\n\\\\t\\\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\\\n\\\\t\\\\tvec2 st0 = dFdx( vUv.st );\\\\n\\\\t\\\\tvec2 st1 = dFdy( vUv.st );\\\\n\\\\t\\\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\\\n\\\\t\\\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\\\n\\\\t\\\\tvec3 N = normalize( surf_norm );\\\\n\\\\t\\\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\\\n\\\\t\\\\tmapN.xy = normalScale * mapN.xy;\\\\n\\\\t\\\\tmat3 tsn = mat3( S, T, N );\\\\n\\\\t\\\\treturn normalize( tsn * mapN );\\\\n\\\\t}\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar packing = \\\"vec3 packNormalToRGB( const in vec3 normal ) {\\\\n\\\\treturn normalize( normal ) * 0.5 + 0.5;\\\\n}\\\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\\\n\\\\treturn 2.0 * rgb.xyz - 1.0;\\\\n}\\\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\\\nconst float ShiftRight8 = 1. / 256.;\\\\nvec4 packDepthToRGBA( const in float v ) {\\\\n\\\\tvec4 r = vec4( fract( v * PackFactors ), v );\\\\n\\\\tr.yzw -= r.xyz * ShiftRight8;\\\\treturn r * PackUpscale;\\\\n}\\\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\\\n\\\\treturn dot( v, UnpackFactors );\\\\n}\\\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\\\n\\\\treturn ( viewZ + near ) / ( near - far );\\\\n}\\\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\\\n\\\\treturn linearClipZ * ( near - far ) - near;\\\\n}\\\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\\\n\\\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\\\n}\\\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\\\n\\\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar premultiplied_alpha_fragment = \\\"#ifdef PREMULTIPLIED_ALPHA\\\\n\\\\tgl_FragColor.rgb *= gl_FragColor.a;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar project_vertex = \\\"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\\\ngl_Position = projectionMatrix * mvPosition;\\\\n\\\";\\r\\n\\r\\n\\tvar dithering_fragment = \\\"#if defined( DITHERING )\\\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar dithering_pars_fragment = \\\"#if defined( DITHERING )\\\\n\\\\tvec3 dithering( vec3 color ) {\\\\n\\\\t\\\\tfloat grid_position = rand( gl_FragCoord.xy );\\\\n\\\\t\\\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\\\n\\\\t\\\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\\\n\\\\t\\\\treturn color + dither_shift_RGB;\\\\n\\\\t}\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar roughnessmap_fragment = \\\"float roughnessFactor = roughness;\\\\n#ifdef USE_ROUGHNESSMAP\\\\n\\\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\\\n\\\\troughnessFactor *= texelRoughness.g;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar roughnessmap_pars_fragment = \\\"#ifdef USE_ROUGHNESSMAP\\\\n\\\\tuniform sampler2D roughnessMap;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar shadowmap_pars_fragment = \\\"#ifdef USE_SHADOWMAP\\\\n\\\\t#if NUM_DIR_LIGHTS > 0\\\\n\\\\t\\\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\t#if NUM_SPOT_LIGHTS > 0\\\\n\\\\t\\\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\t#if NUM_POINT_LIGHTS > 0\\\\n\\\\t\\\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\\\n\\\\t\\\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\\\n\\\\t}\\\\n\\\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\\\n\\\\t\\\\tconst vec2 offset = vec2( 0.0, 1.0 );\\\\n\\\\t\\\\tvec2 texelSize = vec2( 1.0 ) / size;\\\\n\\\\t\\\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\\\n\\\\t\\\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\\\n\\\\t\\\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\\\n\\\\t\\\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\\\n\\\\t\\\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\\\n\\\\t\\\\tvec2 f = fract( uv * size + 0.5 );\\\\n\\\\t\\\\tfloat a = mix( lb, lt, f.y );\\\\n\\\\t\\\\tfloat b = mix( rb, rt, f.y );\\\\n\\\\t\\\\tfloat c = mix( a, b, f.x );\\\\n\\\\t\\\\treturn c;\\\\n\\\\t}\\\\n\\\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\\\n\\\\t\\\\tfloat shadow = 1.0;\\\\n\\\\t\\\\tshadowCoord.xyz /= shadowCoord.w;\\\\n\\\\t\\\\tshadowCoord.z += shadowBias;\\\\n\\\\t\\\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\\\n\\\\t\\\\tbool inFrustum = all( inFrustumVec );\\\\n\\\\t\\\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\\\n\\\\t\\\\tbool frustumTest = all( frustumTestVec );\\\\n\\\\t\\\\tif ( frustumTest ) {\\\\n\\\\t\\\\t#if defined( SHADOWMAP_TYPE_PCF )\\\\n\\\\t\\\\t\\\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\\\n\\\\t\\\\t\\\\tfloat dx0 = - texelSize.x * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dy0 = - texelSize.y * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dx1 = + texelSize.x * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dy1 = + texelSize.y * shadowRadius;\\\\n\\\\t\\\\t\\\\tshadow = (\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\\\n\\\\t\\\\t\\\\t) * ( 1.0 / 9.0 );\\\\n\\\\t\\\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\\\n\\\\t\\\\t\\\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\\\n\\\\t\\\\t\\\\tfloat dx0 = - texelSize.x * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dy0 = - texelSize.y * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dx1 = + texelSize.x * shadowRadius;\\\\n\\\\t\\\\t\\\\tfloat dy1 = + texelSize.y * shadowRadius;\\\\n\\\\t\\\\t\\\\tshadow = (\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\\\n\\\\t\\\\t\\\\t) * ( 1.0 / 9.0 );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\\\n\\\\t\\\\t#endif\\\\n\\\\t\\\\t}\\\\n\\\\t\\\\treturn shadow;\\\\n\\\\t}\\\\n\\\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\\\n\\\\t\\\\tvec3 absV = abs( v );\\\\n\\\\t\\\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\\\n\\\\t\\\\tabsV *= scaleToCube;\\\\n\\\\t\\\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\\\n\\\\t\\\\tvec2 planar = v.xy;\\\\n\\\\t\\\\tfloat almostATexel = 1.5 * texelSizeY;\\\\n\\\\t\\\\tfloat almostOne = 1.0 - almostATexel;\\\\n\\\\t\\\\tif ( absV.z >= almostOne ) {\\\\n\\\\t\\\\t\\\\tif ( v.z > 0.0 )\\\\n\\\\t\\\\t\\\\t\\\\tplanar.x = 4.0 - v.x;\\\\n\\\\t\\\\t} else if ( absV.x >= almostOne ) {\\\\n\\\\t\\\\t\\\\tfloat signX = sign( v.x );\\\\n\\\\t\\\\t\\\\tplanar.x = v.z * signX + 2.0 * signX;\\\\n\\\\t\\\\t} else if ( absV.y >= almostOne ) {\\\\n\\\\t\\\\t\\\\tfloat signY = sign( v.y );\\\\n\\\\t\\\\t\\\\tplanar.x = v.x + 2.0 * signY + 2.0;\\\\n\\\\t\\\\t\\\\tplanar.y = v.z * signY - 2.0;\\\\n\\\\t\\\\t}\\\\n\\\\t\\\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\\\n\\\\t}\\\\n\\\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\\\n\\\\t\\\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\\\n\\\\t\\\\tvec3 lightToPosition = shadowCoord.xyz;\\\\n\\\\t\\\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\\\t\\\\tdp += shadowBias;\\\\n\\\\t\\\\tvec3 bd3D = normalize( lightToPosition );\\\\n\\\\t\\\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\\\n\\\\t\\\\t\\\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\\\n\\\\t\\\\t\\\\treturn (\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\\\n\\\\t\\\\t\\\\t\\\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\\\n\\\\t\\\\t\\\\t) * ( 1.0 / 9.0 );\\\\n\\\\t\\\\t#else\\\\n\\\\t\\\\t\\\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\\\n\\\\t\\\\t#endif\\\\n\\\\t}\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar shadowmap_pars_vertex = \\\"#ifdef USE_SHADOWMAP\\\\n\\\\t#if NUM_DIR_LIGHTS > 0\\\\n\\\\t\\\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\t#if NUM_SPOT_LIGHTS > 0\\\\n\\\\t\\\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\\\n\\\\t#endif\\\\n\\\\t#if NUM_POINT_LIGHTS > 0\\\\n\\\\t\\\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\\\n\\\\t\\\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar shadowmap_vertex = \\\"#ifdef USE_SHADOWMAP\\\\n\\\\t#if NUM_DIR_LIGHTS > 0\\\\n\\\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#if NUM_SPOT_LIGHTS > 0\\\\n\\\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#if NUM_POINT_LIGHTS > 0\\\\n\\\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar shadowmask_pars_fragment = \\\"float getShadowMask() {\\\\n\\\\tfloat shadow = 1.0;\\\\n\\\\t#ifdef USE_SHADOWMAP\\\\n\\\\t#if NUM_DIR_LIGHTS > 0\\\\n\\\\tDirectionalLight directionalLight;\\\\n\\\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tdirectionalLight = directionalLights[ i ];\\\\n\\\\t\\\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#if NUM_SPOT_LIGHTS > 0\\\\n\\\\tSpotLight spotLight;\\\\n\\\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tspotLight = spotLights[ i ];\\\\n\\\\t\\\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#if NUM_POINT_LIGHTS > 0\\\\n\\\\tPointLight pointLight;\\\\n\\\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\\\n\\\\t\\\\tpointLight = pointLights[ i ];\\\\n\\\\t\\\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\\\n\\\\t}\\\\n\\\\t#endif\\\\n\\\\t#endif\\\\n\\\\treturn shadow;\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar skinbase_vertex = \\\"#ifdef USE_SKINNING\\\\n\\\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\\\n\\\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\\\n\\\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\\\n\\\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\\\n#endif\\\";\\r\\n\\r\\n\\tvar skinning_pars_vertex = \\\"#ifdef USE_SKINNING\\\\n\\\\tuniform mat4 bindMatrix;\\\\n\\\\tuniform mat4 bindMatrixInverse;\\\\n\\\\t#ifdef BONE_TEXTURE\\\\n\\\\t\\\\tuniform sampler2D boneTexture;\\\\n\\\\t\\\\tuniform int boneTextureSize;\\\\n\\\\t\\\\tmat4 getBoneMatrix( const in float i ) {\\\\n\\\\t\\\\t\\\\tfloat j = i * 4.0;\\\\n\\\\t\\\\t\\\\tfloat x = mod( j, float( boneTextureSize ) );\\\\n\\\\t\\\\t\\\\tfloat y = floor( j / float( boneTextureSize ) );\\\\n\\\\t\\\\t\\\\tfloat dx = 1.0 / float( boneTextureSize );\\\\n\\\\t\\\\t\\\\tfloat dy = 1.0 / float( boneTextureSize );\\\\n\\\\t\\\\t\\\\ty = dy * ( y + 0.5 );\\\\n\\\\t\\\\t\\\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\\\n\\\\t\\\\t\\\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\\\n\\\\t\\\\t\\\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\\\n\\\\t\\\\t\\\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\\\n\\\\t\\\\t\\\\tmat4 bone = mat4( v1, v2, v3, v4 );\\\\n\\\\t\\\\t\\\\treturn bone;\\\\n\\\\t\\\\t}\\\\n\\\\t#else\\\\n\\\\t\\\\tuniform mat4 boneMatrices[ MAX_BONES ];\\\\n\\\\t\\\\tmat4 getBoneMatrix( const in float i ) {\\\\n\\\\t\\\\t\\\\tmat4 bone = boneMatrices[ int(i) ];\\\\n\\\\t\\\\t\\\\treturn bone;\\\\n\\\\t\\\\t}\\\\n\\\\t#endif\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar skinning_vertex = \\\"#ifdef USE_SKINNING\\\\n\\\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\\\n\\\\tvec4 skinned = vec4( 0.0 );\\\\n\\\\tskinned += boneMatX * skinVertex * skinWeight.x;\\\\n\\\\tskinned += boneMatY * skinVertex * skinWeight.y;\\\\n\\\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\\\n\\\\tskinned += boneMatW * skinVertex * skinWeight.w;\\\\n\\\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar skinnormal_vertex = \\\"#ifdef USE_SKINNING\\\\n\\\\tmat4 skinMatrix = mat4( 0.0 );\\\\n\\\\tskinMatrix += skinWeight.x * boneMatX;\\\\n\\\\tskinMatrix += skinWeight.y * boneMatY;\\\\n\\\\tskinMatrix += skinWeight.z * boneMatZ;\\\\n\\\\tskinMatrix += skinWeight.w * boneMatW;\\\\n\\\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\\\n\\\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar specularmap_fragment = \\\"float specularStrength;\\\\n#ifdef USE_SPECULARMAP\\\\n\\\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\\\n\\\\tspecularStrength = texelSpecular.r;\\\\n#else\\\\n\\\\tspecularStrength = 1.0;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar specularmap_pars_fragment = \\\"#ifdef USE_SPECULARMAP\\\\n\\\\tuniform sampler2D specularMap;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar tonemapping_fragment = \\\"#if defined( TONE_MAPPING )\\\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar tonemapping_pars_fragment = \\\"#ifndef saturate\\\\n\\\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\\\n#endif\\\\nuniform float toneMappingExposure;\\\\nuniform float toneMappingWhitePoint;\\\\nvec3 LinearToneMapping( vec3 color ) {\\\\n\\\\treturn toneMappingExposure * color;\\\\n}\\\\nvec3 ReinhardToneMapping( vec3 color ) {\\\\n\\\\tcolor *= toneMappingExposure;\\\\n\\\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\\\n}\\\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\\\n\\\\tcolor *= toneMappingExposure;\\\\n\\\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\\\n}\\\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\\\n\\\\tcolor *= toneMappingExposure;\\\\n\\\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\\\n\\\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar uv_pars_fragment = \\\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\\\n\\\\tvarying vec2 vUv;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar uv_pars_vertex = \\\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\\\n\\\\tvarying vec2 vUv;\\\\n\\\\tuniform mat3 uvTransform;\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar uv_vertex = \\\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\\\n\\\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar uv2_pars_fragment = \\\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\\\n\\\\tvarying vec2 vUv2;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar uv2_pars_vertex = \\\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\\\n\\\\tattribute vec2 uv2;\\\\n\\\\tvarying vec2 vUv2;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar uv2_vertex = \\\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\\\n\\\\tvUv2 = uv2;\\\\n#endif\\\";\\r\\n\\r\\n\\tvar worldpos_vertex = \\\"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\\\n\\\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\\\n#endif\\\\n\\\";\\r\\n\\r\\n\\tvar cube_frag = \\\"uniform samplerCube tCube;\\\\nuniform float tFlip;\\\\nuniform float opacity;\\\\nvarying vec3 vWorldPosition;\\\\nvoid main() {\\\\n\\\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\\\n\\\\tgl_FragColor.a *= opacity;\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar cube_vert = \\\"varying vec3 vWorldPosition;\\\\n#include <common>\\\\nvoid main() {\\\\n\\\\tvWorldPosition = transformDirection( position, modelMatrix );\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\tgl_Position.z = gl_Position.w;\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar depth_frag = \\\"#if DEPTH_PACKING == 3200\\\\n\\\\tuniform float opacity;\\\\n#endif\\\\n#include <common>\\\\n#include <packing>\\\\n#include <uv_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( 1.0 );\\\\n\\\\t#if DEPTH_PACKING == 3200\\\\n\\\\t\\\\tdiffuseColor.a = opacity;\\\\n\\\\t#endif\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#if DEPTH_PACKING == 3200\\\\n\\\\t\\\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\\\n\\\\t#elif DEPTH_PACKING == 3201\\\\n\\\\t\\\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\\\n\\\\t#endif\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar depth_vert = \\\"#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#ifdef USE_DISPLACEMENTMAP\\\\n\\\\t\\\\t#include <beginnormal_vertex>\\\\n\\\\t\\\\t#include <morphnormal_vertex>\\\\n\\\\t\\\\t#include <skinnormal_vertex>\\\\n\\\\t#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar distanceRGBA_frag = \\\"#define DISTANCE\\\\nuniform vec3 referencePosition;\\\\nuniform float nearDistance;\\\\nuniform float farDistance;\\\\nvarying vec3 vWorldPosition;\\\\n#include <common>\\\\n#include <packing>\\\\n#include <uv_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main () {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( 1.0 );\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\tfloat dist = length( vWorldPosition - referencePosition );\\\\n\\\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\\\n\\\\tdist = saturate( dist );\\\\n\\\\tgl_FragColor = packDepthToRGBA( dist );\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar distanceRGBA_vert = \\\"#define DISTANCE\\\\nvarying vec3 vWorldPosition;\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#ifdef USE_DISPLACEMENTMAP\\\\n\\\\t\\\\t#include <beginnormal_vertex>\\\\n\\\\t\\\\t#include <morphnormal_vertex>\\\\n\\\\t\\\\t#include <skinnormal_vertex>\\\\n\\\\t#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\tvWorldPosition = worldPosition.xyz;\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar equirect_frag = \\\"uniform sampler2D tEquirect;\\\\nvarying vec3 vWorldPosition;\\\\n#include <common>\\\\nvoid main() {\\\\n\\\\tvec3 direction = normalize( vWorldPosition );\\\\n\\\\tvec2 sampleUV;\\\\n\\\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\\\n\\\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\\\n\\\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar equirect_vert = \\\"varying vec3 vWorldPosition;\\\\n#include <common>\\\\nvoid main() {\\\\n\\\\tvWorldPosition = transformDirection( position, modelMatrix );\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <project_vertex>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar linedashed_frag = \\\"uniform vec3 diffuse;\\\\nuniform float opacity;\\\\nuniform float dashSize;\\\\nuniform float totalSize;\\\\nvarying float vLineDistance;\\\\n#include <common>\\\\n#include <color_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\\\n\\\\t\\\\tdiscard;\\\\n\\\\t}\\\\n\\\\tvec3 outgoingLight = vec3( 0.0 );\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\toutgoingLight = diffuseColor.rgb;\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar linedashed_vert = \\\"uniform float scale;\\\\nattribute float lineDistance;\\\\nvarying float vLineDistance;\\\\n#include <common>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <color_vertex>\\\\n\\\\tvLineDistance = scale * lineDistance;\\\\n\\\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\\\n\\\\tgl_Position = projectionMatrix * mvPosition;\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar meshbasic_frag = \\\"uniform vec3 diffuse;\\\\nuniform float opacity;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <color_pars_fragment>\\\\n#include <uv_pars_fragment>\\\\n#include <uv2_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <aomap_pars_fragment>\\\\n#include <lightmap_pars_fragment>\\\\n#include <envmap_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <specularmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <specularmap_fragment>\\\\n\\\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\\\n\\\\t#ifdef USE_LIGHTMAP\\\\n\\\\t\\\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\\\n\\\\t#else\\\\n\\\\t\\\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\\\n\\\\t#endif\\\\n\\\\t#include <aomap_fragment>\\\\n\\\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\\\n\\\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\\\n\\\\t#include <envmap_fragment>\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar meshbasic_vert = \\\"#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <uv2_pars_vertex>\\\\n#include <envmap_pars_vertex>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <uv2_vertex>\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#ifdef USE_ENVMAP\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n\\\\t#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <envmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar meshlambert_frag = \\\"uniform vec3 diffuse;\\\\nuniform vec3 emissive;\\\\nuniform float opacity;\\\\nvarying vec3 vLightFront;\\\\n#ifdef DOUBLE_SIDED\\\\n\\\\tvarying vec3 vLightBack;\\\\n#endif\\\\n#include <common>\\\\n#include <packing>\\\\n#include <dithering_pars_fragment>\\\\n#include <color_pars_fragment>\\\\n#include <uv_pars_fragment>\\\\n#include <uv2_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <aomap_pars_fragment>\\\\n#include <lightmap_pars_fragment>\\\\n#include <emissivemap_pars_fragment>\\\\n#include <envmap_pars_fragment>\\\\n#include <bsdfs>\\\\n#include <lights_pars>\\\\n#include <fog_pars_fragment>\\\\n#include <shadowmap_pars_fragment>\\\\n#include <shadowmask_pars_fragment>\\\\n#include <specularmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\\\n\\\\tvec3 totalEmissiveRadiance = emissive;\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <specularmap_fragment>\\\\n\\\\t#include <emissivemap_fragment>\\\\n\\\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\\\n\\\\t#include <lightmap_fragment>\\\\n\\\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\\\n\\\\t#ifdef DOUBLE_SIDED\\\\n\\\\t\\\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\\\n\\\\t#else\\\\n\\\\t\\\\treflectedLight.directDiffuse = vLightFront;\\\\n\\\\t#endif\\\\n\\\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\\\n\\\\t#include <aomap_fragment>\\\\n\\\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\\\n\\\\t#include <envmap_fragment>\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <dithering_fragment>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar meshlambert_vert = \\\"#define LAMBERT\\\\nvarying vec3 vLightFront;\\\\n#ifdef DOUBLE_SIDED\\\\n\\\\tvarying vec3 vLightBack;\\\\n#endif\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <uv2_pars_vertex>\\\\n#include <envmap_pars_vertex>\\\\n#include <bsdfs>\\\\n#include <lights_pars>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <shadowmap_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <uv2_vertex>\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <envmap_vertex>\\\\n\\\\t#include <lights_lambert_vertex>\\\\n\\\\t#include <shadowmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar meshphong_frag = \\\"#define PHONG\\\\nuniform vec3 diffuse;\\\\nuniform vec3 emissive;\\\\nuniform vec3 specular;\\\\nuniform float shininess;\\\\nuniform float opacity;\\\\n#include <common>\\\\n#include <packing>\\\\n#include <dithering_pars_fragment>\\\\n#include <color_pars_fragment>\\\\n#include <uv_pars_fragment>\\\\n#include <uv2_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <aomap_pars_fragment>\\\\n#include <lightmap_pars_fragment>\\\\n#include <emissivemap_pars_fragment>\\\\n#include <envmap_pars_fragment>\\\\n#include <gradientmap_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <bsdfs>\\\\n#include <lights_pars>\\\\n#include <lights_phong_pars_fragment>\\\\n#include <shadowmap_pars_fragment>\\\\n#include <bumpmap_pars_fragment>\\\\n#include <normalmap_pars_fragment>\\\\n#include <specularmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\\\n\\\\tvec3 totalEmissiveRadiance = emissive;\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <specularmap_fragment>\\\\n\\\\t#include <normal_fragment>\\\\n\\\\t#include <emissivemap_fragment>\\\\n\\\\t#include <lights_phong_fragment>\\\\n\\\\t#include <lights_template>\\\\n\\\\t#include <aomap_fragment>\\\\n\\\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\\\n\\\\t#include <envmap_fragment>\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <dithering_fragment>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar meshphong_vert = \\\"#define PHONG\\\\nvarying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <uv2_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <envmap_pars_vertex>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <shadowmap_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <uv2_vertex>\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvNormal = normalize( transformedNormal );\\\\n#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\tvViewPosition = - mvPosition.xyz;\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <envmap_vertex>\\\\n\\\\t#include <shadowmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar meshphysical_frag = \\\"#define PHYSICAL\\\\nuniform vec3 diffuse;\\\\nuniform vec3 emissive;\\\\nuniform float roughness;\\\\nuniform float metalness;\\\\nuniform float opacity;\\\\n#ifndef STANDARD\\\\n\\\\tuniform float clearCoat;\\\\n\\\\tuniform float clearCoatRoughness;\\\\n#endif\\\\nvarying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <packing>\\\\n#include <dithering_pars_fragment>\\\\n#include <color_pars_fragment>\\\\n#include <uv_pars_fragment>\\\\n#include <uv2_pars_fragment>\\\\n#include <map_pars_fragment>\\\\n#include <alphamap_pars_fragment>\\\\n#include <aomap_pars_fragment>\\\\n#include <lightmap_pars_fragment>\\\\n#include <emissivemap_pars_fragment>\\\\n#include <envmap_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <bsdfs>\\\\n#include <cube_uv_reflection_fragment>\\\\n#include <lights_pars>\\\\n#include <lights_physical_pars_fragment>\\\\n#include <shadowmap_pars_fragment>\\\\n#include <bumpmap_pars_fragment>\\\\n#include <normalmap_pars_fragment>\\\\n#include <roughnessmap_pars_fragment>\\\\n#include <metalnessmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\\\n\\\\tvec3 totalEmissiveRadiance = emissive;\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphamap_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\t#include <roughnessmap_fragment>\\\\n\\\\t#include <metalnessmap_fragment>\\\\n\\\\t#include <normal_fragment>\\\\n\\\\t#include <emissivemap_fragment>\\\\n\\\\t#include <lights_physical_fragment>\\\\n\\\\t#include <lights_template>\\\\n\\\\t#include <aomap_fragment>\\\\n\\\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <dithering_fragment>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar meshphysical_vert = \\\"#define PHYSICAL\\\\nvarying vec3 vViewPosition;\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <common>\\\\n#include <uv_pars_vertex>\\\\n#include <uv2_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <shadowmap_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <uv2_vertex>\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvNormal = normalize( transformedNormal );\\\\n#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\tvViewPosition = - mvPosition.xyz;\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <shadowmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar normal_frag = \\\"#define NORMAL\\\\nuniform float opacity;\\\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\\\n\\\\tvarying vec3 vViewPosition;\\\\n#endif\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <packing>\\\\n#include <uv_pars_fragment>\\\\n#include <bumpmap_pars_fragment>\\\\n#include <normalmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <normal_fragment>\\\\n\\\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar normal_vert = \\\"#define NORMAL\\\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\\\n\\\\tvarying vec3 vViewPosition;\\\\n#endif\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvarying vec3 vNormal;\\\\n#endif\\\\n#include <uv_pars_vertex>\\\\n#include <displacementmap_pars_vertex>\\\\n#include <morphtarget_pars_vertex>\\\\n#include <skinning_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <uv_vertex>\\\\n\\\\t#include <beginnormal_vertex>\\\\n\\\\t#include <morphnormal_vertex>\\\\n\\\\t#include <skinbase_vertex>\\\\n\\\\t#include <skinnormal_vertex>\\\\n\\\\t#include <defaultnormal_vertex>\\\\n#ifndef FLAT_SHADED\\\\n\\\\tvNormal = normalize( transformedNormal );\\\\n#endif\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <morphtarget_vertex>\\\\n\\\\t#include <skinning_vertex>\\\\n\\\\t#include <displacementmap_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\\\n\\\\tvViewPosition = - mvPosition.xyz;\\\\n#endif\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar points_frag = \\\"uniform vec3 diffuse;\\\\nuniform float opacity;\\\\n#include <common>\\\\n#include <packing>\\\\n#include <color_pars_fragment>\\\\n#include <map_particle_pars_fragment>\\\\n#include <fog_pars_fragment>\\\\n#include <shadowmap_pars_fragment>\\\\n#include <logdepthbuf_pars_fragment>\\\\n#include <clipping_planes_pars_fragment>\\\\nvoid main() {\\\\n\\\\t#include <clipping_planes_fragment>\\\\n\\\\tvec3 outgoingLight = vec3( 0.0 );\\\\n\\\\tvec4 diffuseColor = vec4( diffuse, opacity );\\\\n\\\\t#include <logdepthbuf_fragment>\\\\n\\\\t#include <map_particle_fragment>\\\\n\\\\t#include <color_fragment>\\\\n\\\\t#include <alphatest_fragment>\\\\n\\\\toutgoingLight = diffuseColor.rgb;\\\\n\\\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\\\n\\\\t#include <premultiplied_alpha_fragment>\\\\n\\\\t#include <tonemapping_fragment>\\\\n\\\\t#include <encodings_fragment>\\\\n\\\\t#include <fog_fragment>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar points_vert = \\\"uniform float size;\\\\nuniform float scale;\\\\n#include <common>\\\\n#include <color_pars_vertex>\\\\n#include <fog_pars_vertex>\\\\n#include <shadowmap_pars_vertex>\\\\n#include <logdepthbuf_pars_vertex>\\\\n#include <clipping_planes_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <color_vertex>\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#ifdef USE_SIZEATTENUATION\\\\n\\\\t\\\\tgl_PointSize = size * ( scale / - mvPosition.z );\\\\n\\\\t#else\\\\n\\\\t\\\\tgl_PointSize = size;\\\\n\\\\t#endif\\\\n\\\\t#include <logdepthbuf_vertex>\\\\n\\\\t#include <clipping_planes_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <shadowmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar shadow_frag = \\\"uniform vec3 color;\\\\nuniform float opacity;\\\\n#include <common>\\\\n#include <packing>\\\\n#include <fog_pars_fragment>\\\\n#include <bsdfs>\\\\n#include <lights_pars>\\\\n#include <shadowmap_pars_fragment>\\\\n#include <shadowmask_pars_fragment>\\\\nvoid main() {\\\\n\\\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\\\n\\\\t#include <fog_fragment>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar shadow_vert = \\\"#include <fog_pars_vertex>\\\\n#include <shadowmap_pars_vertex>\\\\nvoid main() {\\\\n\\\\t#include <begin_vertex>\\\\n\\\\t#include <project_vertex>\\\\n\\\\t#include <worldpos_vertex>\\\\n\\\\t#include <shadowmap_vertex>\\\\n\\\\t#include <fog_vertex>\\\\n}\\\\n\\\";\\r\\n\\r\\n\\tvar ShaderChunk = {\\r\\n\\t\\talphamap_fragment: alphamap_fragment,\\r\\n\\t\\talphamap_pars_fragment: alphamap_pars_fragment,\\r\\n\\t\\talphatest_fragment: alphatest_fragment,\\r\\n\\t\\taomap_fragment: aomap_fragment,\\r\\n\\t\\taomap_pars_fragment: aomap_pars_fragment,\\r\\n\\t\\tbegin_vertex: begin_vertex,\\r\\n\\t\\tbeginnormal_vertex: beginnormal_vertex,\\r\\n\\t\\tbsdfs: bsdfs,\\r\\n\\t\\tbumpmap_pars_fragment: bumpmap_pars_fragment,\\r\\n\\t\\tclipping_planes_fragment: clipping_planes_fragment,\\r\\n\\t\\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\\r\\n\\t\\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\\r\\n\\t\\tclipping_planes_vertex: clipping_planes_vertex,\\r\\n\\t\\tcolor_fragment: color_fragment,\\r\\n\\t\\tcolor_pars_fragment: color_pars_fragment,\\r\\n\\t\\tcolor_pars_vertex: color_pars_vertex,\\r\\n\\t\\tcolor_vertex: color_vertex,\\r\\n\\t\\tcommon: common,\\r\\n\\t\\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\\r\\n\\t\\tdefaultnormal_vertex: defaultnormal_vertex,\\r\\n\\t\\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\\r\\n\\t\\tdisplacementmap_vertex: displacementmap_vertex,\\r\\n\\t\\temissivemap_fragment: emissivemap_fragment,\\r\\n\\t\\temissivemap_pars_fragment: emissivemap_pars_fragment,\\r\\n\\t\\tencodings_fragment: encodings_fragment,\\r\\n\\t\\tencodings_pars_fragment: encodings_pars_fragment,\\r\\n\\t\\tenvmap_fragment: envmap_fragment,\\r\\n\\t\\tenvmap_pars_fragment: envmap_pars_fragment,\\r\\n\\t\\tenvmap_pars_vertex: envmap_pars_vertex,\\r\\n\\t\\tenvmap_vertex: envmap_vertex,\\r\\n\\t\\tfog_vertex: fog_vertex,\\r\\n\\t\\tfog_pars_vertex: fog_pars_vertex,\\r\\n\\t\\tfog_fragment: fog_fragment,\\r\\n\\t\\tfog_pars_fragment: fog_pars_fragment,\\r\\n\\t\\tgradientmap_pars_fragment: gradientmap_pars_fragment,\\r\\n\\t\\tlightmap_fragment: lightmap_fragment,\\r\\n\\t\\tlightmap_pars_fragment: lightmap_pars_fragment,\\r\\n\\t\\tlights_lambert_vertex: lights_lambert_vertex,\\r\\n\\t\\tlights_pars: lights_pars,\\r\\n\\t\\tlights_phong_fragment: lights_phong_fragment,\\r\\n\\t\\tlights_phong_pars_fragment: lights_phong_pars_fragment,\\r\\n\\t\\tlights_physical_fragment: lights_physical_fragment,\\r\\n\\t\\tlights_physical_pars_fragment: lights_physical_pars_fragment,\\r\\n\\t\\tlights_template: lights_template,\\r\\n\\t\\tlogdepthbuf_fragment: logdepthbuf_fragment,\\r\\n\\t\\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\\r\\n\\t\\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\\r\\n\\t\\tlogdepthbuf_vertex: logdepthbuf_vertex,\\r\\n\\t\\tmap_fragment: map_fragment,\\r\\n\\t\\tmap_pars_fragment: map_pars_fragment,\\r\\n\\t\\tmap_particle_fragment: map_particle_fragment,\\r\\n\\t\\tmap_particle_pars_fragment: map_particle_pars_fragment,\\r\\n\\t\\tmetalnessmap_fragment: metalnessmap_fragment,\\r\\n\\t\\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\\r\\n\\t\\tmorphnormal_vertex: morphnormal_vertex,\\r\\n\\t\\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\\r\\n\\t\\tmorphtarget_vertex: morphtarget_vertex,\\r\\n\\t\\tnormal_fragment: normal_fragment,\\r\\n\\t\\tnormalmap_pars_fragment: normalmap_pars_fragment,\\r\\n\\t\\tpacking: packing,\\r\\n\\t\\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\\r\\n\\t\\tproject_vertex: project_vertex,\\r\\n\\t\\tdithering_fragment: dithering_fragment,\\r\\n\\t\\tdithering_pars_fragment: dithering_pars_fragment,\\r\\n\\t\\troughnessmap_fragment: roughnessmap_fragment,\\r\\n\\t\\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\\r\\n\\t\\tshadowmap_pars_fragment: shadowmap_pars_fragment,\\r\\n\\t\\tshadowmap_pars_vertex: shadowmap_pars_vertex,\\r\\n\\t\\tshadowmap_vertex: shadowmap_vertex,\\r\\n\\t\\tshadowmask_pars_fragment: shadowmask_pars_fragment,\\r\\n\\t\\tskinbase_vertex: skinbase_vertex,\\r\\n\\t\\tskinning_pars_vertex: skinning_pars_vertex,\\r\\n\\t\\tskinning_vertex: skinning_vertex,\\r\\n\\t\\tskinnormal_vertex: skinnormal_vertex,\\r\\n\\t\\tspecularmap_fragment: specularmap_fragment,\\r\\n\\t\\tspecularmap_pars_fragment: specularmap_pars_fragment,\\r\\n\\t\\ttonemapping_fragment: tonemapping_fragment,\\r\\n\\t\\ttonemapping_pars_fragment: tonemapping_pars_fragment,\\r\\n\\t\\tuv_pars_fragment: uv_pars_fragment,\\r\\n\\t\\tuv_pars_vertex: uv_pars_vertex,\\r\\n\\t\\tuv_vertex: uv_vertex,\\r\\n\\t\\tuv2_pars_fragment: uv2_pars_fragment,\\r\\n\\t\\tuv2_pars_vertex: uv2_pars_vertex,\\r\\n\\t\\tuv2_vertex: uv2_vertex,\\r\\n\\t\\tworldpos_vertex: worldpos_vertex,\\r\\n\\r\\n\\t\\tcube_frag: cube_frag,\\r\\n\\t\\tcube_vert: cube_vert,\\r\\n\\t\\tdepth_frag: depth_frag,\\r\\n\\t\\tdepth_vert: depth_vert,\\r\\n\\t\\tdistanceRGBA_frag: distanceRGBA_frag,\\r\\n\\t\\tdistanceRGBA_vert: distanceRGBA_vert,\\r\\n\\t\\tequirect_frag: equirect_frag,\\r\\n\\t\\tequirect_vert: equirect_vert,\\r\\n\\t\\tlinedashed_frag: linedashed_frag,\\r\\n\\t\\tlinedashed_vert: linedashed_vert,\\r\\n\\t\\tmeshbasic_frag: meshbasic_frag,\\r\\n\\t\\tmeshbasic_vert: meshbasic_vert,\\r\\n\\t\\tmeshlambert_frag: meshlambert_frag,\\r\\n\\t\\tmeshlambert_vert: meshlambert_vert,\\r\\n\\t\\tmeshphong_frag: meshphong_frag,\\r\\n\\t\\tmeshphong_vert: meshphong_vert,\\r\\n\\t\\tmeshphysical_frag: meshphysical_frag,\\r\\n\\t\\tmeshphysical_vert: meshphysical_vert,\\r\\n\\t\\tnormal_frag: normal_frag,\\r\\n\\t\\tnormal_vert: normal_vert,\\r\\n\\t\\tpoints_frag: points_frag,\\r\\n\\t\\tpoints_vert: points_vert,\\r\\n\\t\\tshadow_frag: shadow_frag,\\r\\n\\t\\tshadow_vert: shadow_vert\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t */\\r\\n\\r\\n\\tvar ShaderLib = {\\r\\n\\r\\n\\t\\tbasic: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.common,\\r\\n\\t\\t\\t\\tUniformsLib.specularmap,\\r\\n\\t\\t\\t\\tUniformsLib.envmap,\\r\\n\\t\\t\\t\\tUniformsLib.aomap,\\r\\n\\t\\t\\t\\tUniformsLib.lightmap,\\r\\n\\t\\t\\t\\tUniformsLib.fog\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.meshbasic_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.meshbasic_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlambert: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.common,\\r\\n\\t\\t\\t\\tUniformsLib.specularmap,\\r\\n\\t\\t\\t\\tUniformsLib.envmap,\\r\\n\\t\\t\\t\\tUniformsLib.aomap,\\r\\n\\t\\t\\t\\tUniformsLib.lightmap,\\r\\n\\t\\t\\t\\tUniformsLib.emissivemap,\\r\\n\\t\\t\\t\\tUniformsLib.fog,\\r\\n\\t\\t\\t\\tUniformsLib.lights,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\temissive: { value: new Color( 0x000000 ) }\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.meshlambert_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.meshlambert_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tphong: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.common,\\r\\n\\t\\t\\t\\tUniformsLib.specularmap,\\r\\n\\t\\t\\t\\tUniformsLib.envmap,\\r\\n\\t\\t\\t\\tUniformsLib.aomap,\\r\\n\\t\\t\\t\\tUniformsLib.lightmap,\\r\\n\\t\\t\\t\\tUniformsLib.emissivemap,\\r\\n\\t\\t\\t\\tUniformsLib.bumpmap,\\r\\n\\t\\t\\t\\tUniformsLib.normalmap,\\r\\n\\t\\t\\t\\tUniformsLib.displacementmap,\\r\\n\\t\\t\\t\\tUniformsLib.gradientmap,\\r\\n\\t\\t\\t\\tUniformsLib.fog,\\r\\n\\t\\t\\t\\tUniformsLib.lights,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\temissive: { value: new Color( 0x000000 ) },\\r\\n\\t\\t\\t\\t\\tspecular: { value: new Color( 0x111111 ) },\\r\\n\\t\\t\\t\\t\\tshininess: { value: 30 }\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.meshphong_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.meshphong_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tstandard: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.common,\\r\\n\\t\\t\\t\\tUniformsLib.envmap,\\r\\n\\t\\t\\t\\tUniformsLib.aomap,\\r\\n\\t\\t\\t\\tUniformsLib.lightmap,\\r\\n\\t\\t\\t\\tUniformsLib.emissivemap,\\r\\n\\t\\t\\t\\tUniformsLib.bumpmap,\\r\\n\\t\\t\\t\\tUniformsLib.normalmap,\\r\\n\\t\\t\\t\\tUniformsLib.displacementmap,\\r\\n\\t\\t\\t\\tUniformsLib.roughnessmap,\\r\\n\\t\\t\\t\\tUniformsLib.metalnessmap,\\r\\n\\t\\t\\t\\tUniformsLib.fog,\\r\\n\\t\\t\\t\\tUniformsLib.lights,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\temissive: { value: new Color( 0x000000 ) },\\r\\n\\t\\t\\t\\t\\troughness: { value: 0.5 },\\r\\n\\t\\t\\t\\t\\tmetalness: { value: 0.5 },\\r\\n\\t\\t\\t\\t\\tenvMapIntensity: { value: 1 } // temporary\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.meshphysical_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.meshphysical_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tpoints: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.points,\\r\\n\\t\\t\\t\\tUniformsLib.fog\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.points_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.points_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdashed: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.common,\\r\\n\\t\\t\\t\\tUniformsLib.fog,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tscale: { value: 1 },\\r\\n\\t\\t\\t\\t\\tdashSize: { value: 1 },\\r\\n\\t\\t\\t\\t\\ttotalSize: { value: 2 }\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.linedashed_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.linedashed_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdepth: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.common,\\r\\n\\t\\t\\t\\tUniformsLib.displacementmap\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.depth_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.depth_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormal: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.common,\\r\\n\\t\\t\\t\\tUniformsLib.bumpmap,\\r\\n\\t\\t\\t\\tUniformsLib.normalmap,\\r\\n\\t\\t\\t\\tUniformsLib.displacementmap,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\topacity: { value: 1.0 }\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.normal_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.normal_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t/* -------------------------------------------------------------------------\\r\\n\\t\\t//\\tCube map shader\\r\\n\\t\\t ------------------------------------------------------------------------- */\\r\\n\\r\\n\\t\\tcube: {\\r\\n\\r\\n\\t\\t\\tuniforms: {\\r\\n\\t\\t\\t\\ttCube: { value: null },\\r\\n\\t\\t\\t\\ttFlip: { value: - 1 },\\r\\n\\t\\t\\t\\topacity: { value: 1.0 }\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.cube_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.cube_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequirect: {\\r\\n\\r\\n\\t\\t\\tuniforms: {\\r\\n\\t\\t\\t\\ttEquirect: { value: null },\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.equirect_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.equirect_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceRGBA: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.common,\\r\\n\\t\\t\\t\\tUniformsLib.displacementmap,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\treferencePosition: { value: new Vector3() },\\r\\n\\t\\t\\t\\t\\tnearDistance: { value: 1 },\\r\\n\\t\\t\\t\\t\\tfarDistance: { value: 1000 }\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.distanceRGBA_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.distanceRGBA_frag\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tshadow: {\\r\\n\\r\\n\\t\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\t\\tUniformsLib.lights,\\r\\n\\t\\t\\t\\tUniformsLib.fog,\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tcolor: { value: new Color( 0x00000 ) },\\r\\n\\t\\t\\t\\t\\topacity: { value: 1.0 }\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t] ),\\r\\n\\r\\n\\t\\t\\tvertexShader: ShaderChunk.shadow_vert,\\r\\n\\t\\t\\tfragmentShader: ShaderChunk.shadow_frag\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tShaderLib.physical = {\\r\\n\\r\\n\\t\\tuniforms: UniformsUtils.merge( [\\r\\n\\t\\t\\tShaderLib.standard.uniforms,\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tclearCoat: { value: 0 },\\r\\n\\t\\t\\t\\tclearCoatRoughness: { value: 0 }\\r\\n\\t\\t\\t}\\r\\n\\t\\t] ),\\r\\n\\r\\n\\t\\tvertexShader: ShaderChunk.meshphysical_vert,\\r\\n\\t\\tfragmentShader: ShaderChunk.meshphysical_frag\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t */\\r\\n\\r\\n\\tfunction Box2( min, max ) {\\r\\n\\r\\n\\t\\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\\r\\n\\t\\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Box2.prototype, {\\r\\n\\r\\n\\t\\tset: function ( min, max ) {\\r\\n\\r\\n\\t\\t\\tthis.min.copy( min );\\r\\n\\t\\t\\tthis.max.copy( max );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromPoints: function ( points ) {\\r\\n\\r\\n\\t\\t\\tthis.makeEmpty();\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.expandByPoint( points[ i ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromCenterAndSize: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector2();\\r\\n\\r\\n\\t\\t\\treturn function setFromCenterAndSize( center, size ) {\\r\\n\\r\\n\\t\\t\\t\\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\\r\\n\\t\\t\\t\\tthis.min.copy( center ).sub( halfSize );\\r\\n\\t\\t\\t\\tthis.max.copy( center ).add( halfSize );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( box ) {\\r\\n\\r\\n\\t\\t\\tthis.min.copy( box.min );\\r\\n\\t\\t\\tthis.max.copy( box.max );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeEmpty: function () {\\r\\n\\r\\n\\t\\t\\tthis.min.x = this.min.y = + Infinity;\\r\\n\\t\\t\\tthis.max.x = this.max.y = - Infinity;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tisEmpty: function () {\\r\\n\\r\\n\\t\\t\\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\\r\\n\\r\\n\\t\\t\\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetCenter: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector2();\\r\\n\\t\\t\\treturn this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetSize: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector2();\\r\\n\\t\\t\\treturn this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\texpandByPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\tthis.min.min( point );\\r\\n\\t\\t\\tthis.max.max( point );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\texpandByVector: function ( vector ) {\\r\\n\\r\\n\\t\\t\\tthis.min.sub( vector );\\r\\n\\t\\t\\tthis.max.add( vector );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\texpandByScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\tthis.min.addScalar( - scalar );\\r\\n\\t\\t\\tthis.max.addScalar( scalar );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcontainsPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\treturn point.x < this.min.x || point.x > this.max.x ||\\r\\n\\t\\t\\t\\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcontainsBox: function ( box ) {\\r\\n\\r\\n\\t\\t\\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\\r\\n\\t\\t\\t\\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetParameter: function ( point, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t// This can potentially have a divide by zero if the box\\r\\n\\t\\t\\t// has a size dimension of 0.\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector2();\\r\\n\\r\\n\\t\\t\\treturn result.set(\\r\\n\\t\\t\\t\\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\\r\\n\\t\\t\\t\\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsBox: function ( box ) {\\r\\n\\r\\n\\t\\t\\t// using 4 splitting planes to rule out intersections\\r\\n\\r\\n\\t\\t\\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\\r\\n\\t\\t\\t\\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclampPoint: function ( point, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector2();\\r\\n\\t\\t\\treturn result.copy( point ).clamp( this.min, this.max );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceToPoint: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector2();\\r\\n\\r\\n\\t\\t\\treturn function distanceToPoint( point ) {\\r\\n\\r\\n\\t\\t\\t\\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\\r\\n\\t\\t\\t\\treturn clampedPoint.sub( point ).length();\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tintersect: function ( box ) {\\r\\n\\r\\n\\t\\t\\tthis.min.max( box.min );\\r\\n\\t\\t\\tthis.max.min( box.max );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tunion: function ( box ) {\\r\\n\\r\\n\\t\\t\\tthis.min.min( box.min );\\r\\n\\t\\t\\tthis.max.max( box.max );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttranslate: function ( offset ) {\\r\\n\\r\\n\\t\\t\\tthis.min.add( offset );\\r\\n\\t\\t\\tthis.max.add( offset );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( box ) {\\r\\n\\r\\n\\t\\t\\treturn box.min.equals( this.min ) && box.max.equals( this.max );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLFlareRenderer( renderer, gl, state, textures, capabilities ) {\\r\\n\\r\\n\\t\\tvar vertexBuffer, elementBuffer;\\r\\n\\t\\tvar shader, program, attributes, uniforms;\\r\\n\\r\\n\\t\\tvar tempTexture, occlusionTexture;\\r\\n\\r\\n\\t\\tfunction init() {\\r\\n\\r\\n\\t\\t\\tvar vertices = new Float32Array( [\\r\\n\\t\\t\\t\\t- 1, - 1, 0, 0,\\r\\n\\t\\t\\t\\t  1, - 1, 1, 0,\\r\\n\\t\\t\\t\\t  1, 1, 1, 1,\\r\\n\\t\\t\\t\\t- 1, 1, 0, 1\\r\\n\\t\\t\\t] );\\r\\n\\r\\n\\t\\t\\tvar faces = new Uint16Array( [\\r\\n\\t\\t\\t\\t0, 1, 2,\\r\\n\\t\\t\\t\\t0, 2, 3\\r\\n\\t\\t\\t] );\\r\\n\\r\\n\\t\\t\\t// buffers\\r\\n\\r\\n\\t\\t\\tvertexBuffer = gl.createBuffer();\\r\\n\\t\\t\\telementBuffer = gl.createBuffer();\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\\r\\n\\t\\t\\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\\r\\n\\t\\t\\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\\r\\n\\r\\n\\t\\t\\t// textures\\r\\n\\r\\n\\t\\t\\ttempTexture = gl.createTexture();\\r\\n\\t\\t\\tocclusionTexture = gl.createTexture();\\r\\n\\r\\n\\t\\t\\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\\r\\n\\t\\t\\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\\r\\n\\t\\t\\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\\r\\n\\t\\t\\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\\r\\n\\t\\t\\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\\r\\n\\t\\t\\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\\r\\n\\r\\n\\t\\t\\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\\r\\n\\t\\t\\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\\r\\n\\t\\t\\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\\r\\n\\t\\t\\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\\r\\n\\t\\t\\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\\r\\n\\t\\t\\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\\r\\n\\r\\n\\t\\t\\tshader = {\\r\\n\\r\\n\\t\\t\\t\\tvertexShader: [\\r\\n\\r\\n\\t\\t\\t\\t\\t'uniform lowp int renderType;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'uniform vec3 screenPosition;',\\r\\n\\t\\t\\t\\t\\t'uniform vec2 scale;',\\r\\n\\t\\t\\t\\t\\t'uniform float rotation;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'uniform sampler2D occlusionMap;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'attribute vec2 position;',\\r\\n\\t\\t\\t\\t\\t'attribute vec2 uv;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'varying vec2 vUV;',\\r\\n\\t\\t\\t\\t\\t'varying float vVisibility;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'void main() {',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\tvUV = uv;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\tvec2 pos = position;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\tif ( renderType == 2 ) {',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t\\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t\\tvVisibility =        visibility.r / 9.0;',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvVisibility *= 1.0 - visibility.g / 9.0;',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvVisibility *=       visibility.b / 9.0;',\\r\\n\\t\\t\\t\\t\\t'\\t\\tvVisibility *= 1.0 - visibility.a / 9.0;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t\\tpos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;',\\r\\n\\t\\t\\t\\t\\t'\\t\\tpos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t}',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',\\r\\n\\r\\n\\t\\t\\t\\t\\t'}'\\r\\n\\r\\n\\t\\t\\t\\t].join( '\\\\n' ),\\r\\n\\r\\n\\t\\t\\t\\tfragmentShader: [\\r\\n\\r\\n\\t\\t\\t\\t\\t'uniform lowp int renderType;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'uniform sampler2D map;',\\r\\n\\t\\t\\t\\t\\t'uniform float opacity;',\\r\\n\\t\\t\\t\\t\\t'uniform vec3 color;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'varying vec2 vUV;',\\r\\n\\t\\t\\t\\t\\t'varying float vVisibility;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'void main() {',\\r\\n\\r\\n\\t\\t\\t\\t\\t// pink square\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\tif ( renderType == 0 ) {',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );',\\r\\n\\r\\n\\t\\t\\t\\t\\t// restore\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t} else if ( renderType == 1 ) {',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t\\tgl_FragColor = texture2D( map, vUV );',\\r\\n\\r\\n\\t\\t\\t\\t\\t// flare\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t} else {',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t\\tvec4 texture = texture2D( map, vUV );',\\r\\n\\t\\t\\t\\t\\t'\\t\\ttexture.a *= opacity * vVisibility;',\\r\\n\\t\\t\\t\\t\\t'\\t\\tgl_FragColor = texture;',\\r\\n\\t\\t\\t\\t\\t'\\t\\tgl_FragColor.rgb *= color;',\\r\\n\\r\\n\\t\\t\\t\\t\\t'\\t}',\\r\\n\\r\\n\\t\\t\\t\\t\\t'}'\\r\\n\\r\\n\\t\\t\\t\\t].join( '\\\\n' )\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tprogram = createProgram( shader );\\r\\n\\r\\n\\t\\t\\tattributes = {\\r\\n\\t\\t\\t\\tvertex: gl.getAttribLocation( program, 'position' ),\\r\\n\\t\\t\\t\\tuv: gl.getAttribLocation( program, 'uv' )\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tuniforms = {\\r\\n\\t\\t\\t\\trenderType: gl.getUniformLocation( program, 'renderType' ),\\r\\n\\t\\t\\t\\tmap: gl.getUniformLocation( program, 'map' ),\\r\\n\\t\\t\\t\\tocclusionMap: gl.getUniformLocation( program, 'occlusionMap' ),\\r\\n\\t\\t\\t\\topacity: gl.getUniformLocation( program, 'opacity' ),\\r\\n\\t\\t\\t\\tcolor: gl.getUniformLocation( program, 'color' ),\\r\\n\\t\\t\\t\\tscale: gl.getUniformLocation( program, 'scale' ),\\r\\n\\t\\t\\t\\trotation: gl.getUniformLocation( program, 'rotation' ),\\r\\n\\t\\t\\t\\tscreenPosition: gl.getUniformLocation( program, 'screenPosition' )\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * Render lens flares\\r\\n\\t\\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\\r\\n\\t\\t *         reads these back and calculates occlusion.\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tthis.render = function ( flares, scene, camera, viewport ) {\\r\\n\\r\\n\\t\\t\\tif ( flares.length === 0 ) return;\\r\\n\\r\\n\\t\\t\\tvar tempPosition = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar invAspect = viewport.w / viewport.z,\\r\\n\\t\\t\\t\\thalfViewportWidth = viewport.z * 0.5,\\r\\n\\t\\t\\t\\thalfViewportHeight = viewport.w * 0.5;\\r\\n\\r\\n\\t\\t\\tvar size = 16 / viewport.w,\\r\\n\\t\\t\\t\\tscale = new Vector2( size * invAspect, size );\\r\\n\\r\\n\\t\\t\\tvar screenPosition = new Vector3( 1, 1, 0 ),\\r\\n\\t\\t\\t\\tscreenPositionPixels = new Vector2( 1, 1 );\\r\\n\\r\\n\\t\\t\\tvar validArea = new Box2();\\r\\n\\r\\n\\t\\t\\tvalidArea.min.set( viewport.x, viewport.y );\\r\\n\\t\\t\\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\\r\\n\\r\\n\\t\\t\\tif ( program === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tinit();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.useProgram( program );\\r\\n\\r\\n\\t\\t\\tstate.initAttributes();\\r\\n\\t\\t\\tstate.enableAttribute( attributes.vertex );\\r\\n\\t\\t\\tstate.enableAttribute( attributes.uv );\\r\\n\\t\\t\\tstate.disableUnusedAttributes();\\r\\n\\r\\n\\t\\t\\t// loop through all lens flares to update their occlusion and positions\\r\\n\\t\\t\\t// setup gl and common used attribs/uniforms\\r\\n\\r\\n\\t\\t\\tgl.uniform1i( uniforms.occlusionMap, 0 );\\r\\n\\t\\t\\tgl.uniform1i( uniforms.map, 1 );\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\\r\\n\\t\\t\\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\\r\\n\\t\\t\\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\\r\\n\\r\\n\\t\\t\\tstate.disable( gl.CULL_FACE );\\r\\n\\t\\t\\tstate.buffers.depth.setMask( false );\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tsize = 16 / viewport.w;\\r\\n\\t\\t\\t\\tscale.set( size * invAspect, size );\\r\\n\\r\\n\\t\\t\\t\\t// calc object screen position\\r\\n\\r\\n\\t\\t\\t\\tvar flare = flares[ i ];\\r\\n\\r\\n\\t\\t\\t\\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\\r\\n\\r\\n\\t\\t\\t\\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\\r\\n\\t\\t\\t\\ttempPosition.applyMatrix4( camera.projectionMatrix );\\r\\n\\r\\n\\t\\t\\t\\t// setup arrays for gl programs\\r\\n\\r\\n\\t\\t\\t\\tscreenPosition.copy( tempPosition );\\r\\n\\r\\n\\t\\t\\t\\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\\r\\n\\r\\n\\t\\t\\t\\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\\r\\n\\t\\t\\t\\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\\r\\n\\r\\n\\t\\t\\t\\t// screen cull\\r\\n\\r\\n\\t\\t\\t\\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// save current RGB to temp texture\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.activeTexture( gl.TEXTURE0 );\\r\\n\\t\\t\\t\\t\\tstate.bindTexture( gl.TEXTURE_2D, null );\\r\\n\\t\\t\\t\\t\\tstate.activeTexture( gl.TEXTURE1 );\\r\\n\\t\\t\\t\\t\\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\\r\\n\\t\\t\\t\\t\\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t// render pink quad\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform1i( uniforms.renderType, 0 );\\r\\n\\t\\t\\t\\t\\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\\r\\n\\t\\t\\t\\t\\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.disable( gl.BLEND );\\r\\n\\t\\t\\t\\t\\tstate.enable( gl.DEPTH_TEST );\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t// copy result to occlusionMap\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.activeTexture( gl.TEXTURE0 );\\r\\n\\t\\t\\t\\t\\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\\r\\n\\t\\t\\t\\t\\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t// restore graphics\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform1i( uniforms.renderType, 1 );\\r\\n\\t\\t\\t\\t\\tstate.disable( gl.DEPTH_TEST );\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.activeTexture( gl.TEXTURE1 );\\r\\n\\t\\t\\t\\t\\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\\r\\n\\t\\t\\t\\t\\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t// update object positions\\r\\n\\r\\n\\t\\t\\t\\t\\tflare.positionScreen.copy( screenPosition );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( flare.customUpdateCallback ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tflare.customUpdateCallback( flare );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tflare.updateLensFlares();\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t// render flares\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform1i( uniforms.renderType, 2 );\\r\\n\\t\\t\\t\\t\\tstate.enable( gl.BLEND );\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar sprite = flare.lensFlares[ j ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tscreenPosition.x = sprite.x;\\r\\n\\t\\t\\t\\t\\t\\t\\tscreenPosition.y = sprite.y;\\r\\n\\t\\t\\t\\t\\t\\t\\tscreenPosition.z = sprite.z;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tsize = sprite.size * sprite.scale / viewport.w;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tscale.x = size * invAspect;\\r\\n\\t\\t\\t\\t\\t\\t\\tscale.y = size;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\\r\\n\\t\\t\\t\\t\\t\\t\\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\\r\\n\\t\\t\\t\\t\\t\\t\\tgl.uniform1f( uniforms.rotation, sprite.rotation );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgl.uniform1f( uniforms.opacity, sprite.opacity );\\r\\n\\t\\t\\t\\t\\t\\t\\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ttextures.setTexture2D( sprite.texture, 1 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// restore gl\\r\\n\\r\\n\\t\\t\\tstate.enable( gl.CULL_FACE );\\r\\n\\t\\t\\tstate.enable( gl.DEPTH_TEST );\\r\\n\\t\\t\\tstate.buffers.depth.setMask( true );\\r\\n\\r\\n\\t\\t\\tstate.reset();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfunction createProgram( shader ) {\\r\\n\\r\\n\\t\\t\\tvar program = gl.createProgram();\\r\\n\\r\\n\\t\\t\\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\\r\\n\\t\\t\\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\\r\\n\\r\\n\\t\\t\\tvar prefix = 'precision ' + capabilities.precision + ' float;\\\\n';\\r\\n\\r\\n\\t\\t\\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\\r\\n\\t\\t\\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\\r\\n\\r\\n\\t\\t\\tgl.compileShader( fragmentShader );\\r\\n\\t\\t\\tgl.compileShader( vertexShader );\\r\\n\\r\\n\\t\\t\\tgl.attachShader( program, fragmentShader );\\r\\n\\t\\t\\tgl.attachShader( program, vertexShader );\\r\\n\\r\\n\\t\\t\\tgl.linkProgram( program );\\r\\n\\r\\n\\t\\t\\treturn program;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\\r\\n\\r\\n\\t\\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\\r\\n\\r\\n\\t\\tthis.needsUpdate = true;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCanvasTexture.prototype = Object.create( Texture.prototype );\\r\\n\\tCanvasTexture.prototype.constructor = CanvasTexture;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {\\r\\n\\r\\n\\t\\tvar vertexBuffer, elementBuffer;\\r\\n\\t\\tvar program, attributes, uniforms;\\r\\n\\r\\n\\t\\tvar texture;\\r\\n\\r\\n\\t\\t// decompose matrixWorld\\r\\n\\r\\n\\t\\tvar spritePosition = new Vector3();\\r\\n\\t\\tvar spriteRotation = new Quaternion();\\r\\n\\t\\tvar spriteScale = new Vector3();\\r\\n\\r\\n\\t\\tfunction init() {\\r\\n\\r\\n\\t\\t\\tvar vertices = new Float32Array( [\\r\\n\\t\\t\\t\\t- 0.5, - 0.5, 0, 0,\\r\\n\\t\\t\\t\\t  0.5, - 0.5, 1, 0,\\r\\n\\t\\t\\t\\t  0.5, 0.5, 1, 1,\\r\\n\\t\\t\\t\\t- 0.5, 0.5, 0, 1\\r\\n\\t\\t\\t] );\\r\\n\\r\\n\\t\\t\\tvar faces = new Uint16Array( [\\r\\n\\t\\t\\t\\t0, 1, 2,\\r\\n\\t\\t\\t\\t0, 2, 3\\r\\n\\t\\t\\t] );\\r\\n\\r\\n\\t\\t\\tvertexBuffer = gl.createBuffer();\\r\\n\\t\\t\\telementBuffer = gl.createBuffer();\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\\r\\n\\t\\t\\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\\r\\n\\t\\t\\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\\r\\n\\r\\n\\t\\t\\tprogram = createProgram();\\r\\n\\r\\n\\t\\t\\tattributes = {\\r\\n\\t\\t\\t\\tposition: gl.getAttribLocation( program, 'position' ),\\r\\n\\t\\t\\t\\tuv: gl.getAttribLocation( program, 'uv' )\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tuniforms = {\\r\\n\\t\\t\\t\\tuvOffset: gl.getUniformLocation( program, 'uvOffset' ),\\r\\n\\t\\t\\t\\tuvScale: gl.getUniformLocation( program, 'uvScale' ),\\r\\n\\r\\n\\t\\t\\t\\trotation: gl.getUniformLocation( program, 'rotation' ),\\r\\n\\t\\t\\t\\tscale: gl.getUniformLocation( program, 'scale' ),\\r\\n\\r\\n\\t\\t\\t\\tcolor: gl.getUniformLocation( program, 'color' ),\\r\\n\\t\\t\\t\\tmap: gl.getUniformLocation( program, 'map' ),\\r\\n\\t\\t\\t\\topacity: gl.getUniformLocation( program, 'opacity' ),\\r\\n\\r\\n\\t\\t\\t\\tmodelViewMatrix: gl.getUniformLocation( program, 'modelViewMatrix' ),\\r\\n\\t\\t\\t\\tprojectionMatrix: gl.getUniformLocation( program, 'projectionMatrix' ),\\r\\n\\r\\n\\t\\t\\t\\tfogType: gl.getUniformLocation( program, 'fogType' ),\\r\\n\\t\\t\\t\\tfogDensity: gl.getUniformLocation( program, 'fogDensity' ),\\r\\n\\t\\t\\t\\tfogNear: gl.getUniformLocation( program, 'fogNear' ),\\r\\n\\t\\t\\t\\tfogFar: gl.getUniformLocation( program, 'fogFar' ),\\r\\n\\t\\t\\t\\tfogColor: gl.getUniformLocation( program, 'fogColor' ),\\r\\n\\t\\t\\t\\tfogDepth: gl.getUniformLocation( program, 'fogDepth' ),\\r\\n\\r\\n\\t\\t\\t\\talphaTest: gl.getUniformLocation( program, 'alphaTest' )\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\\r\\n\\t\\t\\tcanvas.width = 8;\\r\\n\\t\\t\\tcanvas.height = 8;\\r\\n\\r\\n\\t\\t\\tvar context = canvas.getContext( '2d' );\\r\\n\\t\\t\\tcontext.fillStyle = 'white';\\r\\n\\t\\t\\tcontext.fillRect( 0, 0, 8, 8 );\\r\\n\\r\\n\\t\\t\\ttexture = new CanvasTexture( canvas );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.render = function ( sprites, scene, camera ) {\\r\\n\\r\\n\\t\\t\\tif ( sprites.length === 0 ) return;\\r\\n\\r\\n\\t\\t\\t// setup gl\\r\\n\\r\\n\\t\\t\\tif ( program === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tinit();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.useProgram( program );\\r\\n\\r\\n\\t\\t\\tstate.initAttributes();\\r\\n\\t\\t\\tstate.enableAttribute( attributes.position );\\r\\n\\t\\t\\tstate.enableAttribute( attributes.uv );\\r\\n\\t\\t\\tstate.disableUnusedAttributes();\\r\\n\\r\\n\\t\\t\\tstate.disable( gl.CULL_FACE );\\r\\n\\t\\t\\tstate.enable( gl.BLEND );\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\\r\\n\\t\\t\\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\\r\\n\\t\\t\\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\\r\\n\\r\\n\\t\\t\\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\\r\\n\\r\\n\\t\\t\\tstate.activeTexture( gl.TEXTURE0 );\\r\\n\\t\\t\\tgl.uniform1i( uniforms.map, 0 );\\r\\n\\r\\n\\t\\t\\tvar oldFogType = 0;\\r\\n\\t\\t\\tvar sceneFogType = 0;\\r\\n\\t\\t\\tvar fog = scene.fog;\\r\\n\\r\\n\\t\\t\\tif ( fog ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\\r\\n\\r\\n\\t\\t\\t\\tif ( fog.isFog ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform1f( uniforms.fogNear, fog.near );\\r\\n\\t\\t\\t\\t\\tgl.uniform1f( uniforms.fogFar, fog.far );\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform1i( uniforms.fogType, 1 );\\r\\n\\t\\t\\t\\t\\toldFogType = 1;\\r\\n\\t\\t\\t\\t\\tsceneFogType = 1;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( fog.isFogExp2 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform1f( uniforms.fogDensity, fog.density );\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform1i( uniforms.fogType, 2 );\\r\\n\\t\\t\\t\\t\\toldFogType = 2;\\r\\n\\t\\t\\t\\t\\tsceneFogType = 2;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tgl.uniform1i( uniforms.fogType, 0 );\\r\\n\\t\\t\\t\\toldFogType = 0;\\r\\n\\t\\t\\t\\tsceneFogType = 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t// update positions and sort\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar sprite = sprites[ i ];\\r\\n\\r\\n\\t\\t\\t\\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\\r\\n\\t\\t\\t\\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tsprites.sort( painterSortStable );\\r\\n\\r\\n\\t\\t\\t// render all sprites\\r\\n\\r\\n\\t\\t\\tvar scale = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar sprite = sprites[ i ];\\r\\n\\t\\t\\t\\tvar material = sprite.material;\\r\\n\\r\\n\\t\\t\\t\\tif ( material.visible === false ) continue;\\r\\n\\r\\n\\t\\t\\t\\tsprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );\\r\\n\\r\\n\\t\\t\\t\\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\\r\\n\\t\\t\\t\\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\\r\\n\\r\\n\\t\\t\\t\\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\\r\\n\\r\\n\\t\\t\\t\\tscale[ 0 ] = spriteScale.x;\\r\\n\\t\\t\\t\\tscale[ 1 ] = spriteScale.y;\\r\\n\\r\\n\\t\\t\\t\\tvar fogType = 0;\\r\\n\\r\\n\\t\\t\\t\\tif ( scene.fog && material.fog ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfogType = sceneFogType;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( oldFogType !== fogType ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform1i( uniforms.fogType, fogType );\\r\\n\\t\\t\\t\\t\\toldFogType = fogType;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( material.map !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\\r\\n\\t\\t\\t\\t\\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\\r\\n\\t\\t\\t\\t\\tgl.uniform2f( uniforms.uvScale, 1, 1 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgl.uniform1f( uniforms.opacity, material.opacity );\\r\\n\\t\\t\\t\\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\\r\\n\\r\\n\\t\\t\\t\\tgl.uniform1f( uniforms.rotation, material.rotation );\\r\\n\\t\\t\\t\\tgl.uniform2fv( uniforms.scale, scale );\\r\\n\\r\\n\\t\\t\\t\\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\\r\\n\\t\\t\\t\\tstate.buffers.depth.setTest( material.depthTest );\\r\\n\\t\\t\\t\\tstate.buffers.depth.setMask( material.depthWrite );\\r\\n\\t\\t\\t\\tstate.buffers.color.setMask( material.colorWrite );\\r\\n\\r\\n\\t\\t\\t\\ttextures.setTexture2D( material.map || texture, 0 );\\r\\n\\r\\n\\t\\t\\t\\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\\r\\n\\r\\n\\t\\t\\t\\tsprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// restore gl\\r\\n\\r\\n\\t\\t\\tstate.enable( gl.CULL_FACE );\\r\\n\\r\\n\\t\\t\\tstate.reset();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfunction createProgram() {\\r\\n\\r\\n\\t\\t\\tvar program = gl.createProgram();\\r\\n\\r\\n\\t\\t\\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\\r\\n\\t\\t\\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\\r\\n\\r\\n\\t\\t\\tgl.shaderSource( vertexShader, [\\r\\n\\r\\n\\t\\t\\t\\t'precision ' + capabilities.precision + ' float;',\\r\\n\\r\\n\\t\\t\\t\\t'#define SHADER_NAME ' + 'SpriteMaterial',\\r\\n\\r\\n\\t\\t\\t\\t'uniform mat4 modelViewMatrix;',\\r\\n\\t\\t\\t\\t'uniform mat4 projectionMatrix;',\\r\\n\\t\\t\\t\\t'uniform float rotation;',\\r\\n\\t\\t\\t\\t'uniform vec2 scale;',\\r\\n\\t\\t\\t\\t'uniform vec2 uvOffset;',\\r\\n\\t\\t\\t\\t'uniform vec2 uvScale;',\\r\\n\\r\\n\\t\\t\\t\\t'attribute vec2 position;',\\r\\n\\t\\t\\t\\t'attribute vec2 uv;',\\r\\n\\r\\n\\t\\t\\t\\t'varying vec2 vUV;',\\r\\n\\t\\t\\t\\t'varying float fogDepth;',\\r\\n\\r\\n\\t\\t\\t\\t'void main() {',\\r\\n\\r\\n\\t\\t\\t\\t'\\tvUV = uvOffset + uv * uvScale;',\\r\\n\\r\\n\\t\\t\\t\\t'\\tvec2 alignedPosition = position * scale;',\\r\\n\\r\\n\\t\\t\\t\\t'\\tvec2 rotatedPosition;',\\r\\n\\t\\t\\t\\t'\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\\r\\n\\t\\t\\t\\t'\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\\r\\n\\r\\n\\t\\t\\t\\t'\\tvec4 mvPosition;',\\r\\n\\r\\n\\t\\t\\t\\t'\\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\\r\\n\\t\\t\\t\\t'\\tmvPosition.xy += rotatedPosition;',\\r\\n\\r\\n\\t\\t\\t\\t'\\tgl_Position = projectionMatrix * mvPosition;',\\r\\n\\r\\n\\t\\t\\t\\t'\\tfogDepth = - mvPosition.z;',\\r\\n\\r\\n\\t\\t\\t\\t'}'\\r\\n\\r\\n\\t\\t\\t].join( '\\\\n' ) );\\r\\n\\r\\n\\t\\t\\tgl.shaderSource( fragmentShader, [\\r\\n\\r\\n\\t\\t\\t\\t'precision ' + capabilities.precision + ' float;',\\r\\n\\r\\n\\t\\t\\t\\t'#define SHADER_NAME ' + 'SpriteMaterial',\\r\\n\\r\\n\\t\\t\\t\\t'uniform vec3 color;',\\r\\n\\t\\t\\t\\t'uniform sampler2D map;',\\r\\n\\t\\t\\t\\t'uniform float opacity;',\\r\\n\\r\\n\\t\\t\\t\\t'uniform int fogType;',\\r\\n\\t\\t\\t\\t'uniform vec3 fogColor;',\\r\\n\\t\\t\\t\\t'uniform float fogDensity;',\\r\\n\\t\\t\\t\\t'uniform float fogNear;',\\r\\n\\t\\t\\t\\t'uniform float fogFar;',\\r\\n\\t\\t\\t\\t'uniform float alphaTest;',\\r\\n\\r\\n\\t\\t\\t\\t'varying vec2 vUV;',\\r\\n\\t\\t\\t\\t'varying float fogDepth;',\\r\\n\\r\\n\\t\\t\\t\\t'void main() {',\\r\\n\\r\\n\\t\\t\\t\\t'\\tvec4 texture = texture2D( map, vUV );',\\r\\n\\r\\n\\t\\t\\t\\t'\\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\\r\\n\\r\\n\\t\\t\\t\\t'\\tif ( gl_FragColor.a < alphaTest ) discard;',\\r\\n\\r\\n\\t\\t\\t\\t'\\tif ( fogType > 0 ) {',\\r\\n\\r\\n\\t\\t\\t\\t'\\t\\tfloat fogFactor = 0.0;',\\r\\n\\r\\n\\t\\t\\t\\t'\\t\\tif ( fogType == 1 ) {',\\r\\n\\r\\n\\t\\t\\t\\t'\\t\\t\\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );',\\r\\n\\r\\n\\t\\t\\t\\t'\\t\\t} else {',\\r\\n\\r\\n\\t\\t\\t\\t'\\t\\t\\tconst float LOG2 = 1.442695;',\\r\\n\\t\\t\\t\\t'\\t\\t\\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',\\r\\n\\t\\t\\t\\t'\\t\\t\\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\\r\\n\\r\\n\\t\\t\\t\\t'\\t\\t}',\\r\\n\\r\\n\\t\\t\\t\\t'\\t\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',\\r\\n\\r\\n\\t\\t\\t\\t'\\t}',\\r\\n\\r\\n\\t\\t\\t\\t'}'\\r\\n\\r\\n\\t\\t\\t].join( '\\\\n' ) );\\r\\n\\r\\n\\t\\t\\tgl.compileShader( vertexShader );\\r\\n\\t\\t\\tgl.compileShader( fragmentShader );\\r\\n\\r\\n\\t\\t\\tgl.attachShader( program, vertexShader );\\r\\n\\t\\t\\tgl.attachShader( program, fragmentShader );\\r\\n\\r\\n\\t\\t\\tgl.linkProgram( program );\\r\\n\\r\\n\\t\\t\\treturn program;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction painterSortStable( a, b ) {\\r\\n\\r\\n\\t\\t\\tif ( a.renderOrder !== b.renderOrder ) {\\r\\n\\r\\n\\t\\t\\t\\treturn a.renderOrder - b.renderOrder;\\r\\n\\r\\n\\t\\t\\t} else if ( a.z !== b.z ) {\\r\\n\\r\\n\\t\\t\\t\\treturn b.z - a.z;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\treturn b.id - a.id;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tvar materialId = 0;\\r\\n\\r\\n\\tfunction Material() {\\r\\n\\r\\n\\t\\tObject.defineProperty( this, 'id', { value: materialId ++ } );\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\tthis.name = '';\\r\\n\\t\\tthis.type = 'Material';\\r\\n\\r\\n\\t\\tthis.fog = true;\\r\\n\\t\\tthis.lights = true;\\r\\n\\r\\n\\t\\tthis.blending = NormalBlending;\\r\\n\\t\\tthis.side = FrontSide;\\r\\n\\t\\tthis.flatShading = false;\\r\\n\\t\\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\\r\\n\\r\\n\\t\\tthis.opacity = 1;\\r\\n\\t\\tthis.transparent = false;\\r\\n\\r\\n\\t\\tthis.blendSrc = SrcAlphaFactor;\\r\\n\\t\\tthis.blendDst = OneMinusSrcAlphaFactor;\\r\\n\\t\\tthis.blendEquation = AddEquation;\\r\\n\\t\\tthis.blendSrcAlpha = null;\\r\\n\\t\\tthis.blendDstAlpha = null;\\r\\n\\t\\tthis.blendEquationAlpha = null;\\r\\n\\r\\n\\t\\tthis.depthFunc = LessEqualDepth;\\r\\n\\t\\tthis.depthTest = true;\\r\\n\\t\\tthis.depthWrite = true;\\r\\n\\r\\n\\t\\tthis.clippingPlanes = null;\\r\\n\\t\\tthis.clipIntersection = false;\\r\\n\\t\\tthis.clipShadows = false;\\r\\n\\r\\n\\t\\tthis.colorWrite = true;\\r\\n\\r\\n\\t\\tthis.precision = null; // override the renderer's default precision for this material\\r\\n\\r\\n\\t\\tthis.polygonOffset = false;\\r\\n\\t\\tthis.polygonOffsetFactor = 0;\\r\\n\\t\\tthis.polygonOffsetUnits = 0;\\r\\n\\r\\n\\t\\tthis.dithering = false;\\r\\n\\r\\n\\t\\tthis.alphaTest = 0;\\r\\n\\t\\tthis.premultipliedAlpha = false;\\r\\n\\r\\n\\t\\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\\r\\n\\r\\n\\t\\tthis.visible = true;\\r\\n\\r\\n\\t\\tthis.userData = {};\\r\\n\\r\\n\\t\\tthis.needsUpdate = true;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Material,\\r\\n\\r\\n\\t\\tisMaterial: true,\\r\\n\\r\\n\\t\\tonBeforeCompile: function () {},\\r\\n\\r\\n\\t\\tsetValues: function ( values ) {\\r\\n\\r\\n\\t\\t\\tif ( values === undefined ) return;\\r\\n\\r\\n\\t\\t\\tfor ( var key in values ) {\\r\\n\\r\\n\\t\\t\\t\\tvar newValue = values[ key ];\\r\\n\\r\\n\\t\\t\\t\\tif ( newValue === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( \\\"THREE.Material: '\\\" + key + \\\"' parameter is undefined.\\\" );\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// for backward compatability if shading is set in the constructor\\r\\n\\t\\t\\t\\tif ( key === 'shading' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\\r\\n\\t\\t\\t\\t\\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar currentValue = this[ key ];\\r\\n\\r\\n\\t\\t\\t\\tif ( currentValue === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( \\\"THREE.\\\" + this.type + \\\": '\\\" + key + \\\"' is not a property of this material.\\\" );\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( currentValue && currentValue.isColor ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcurrentValue.set( newValue );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcurrentValue.copy( newValue );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( key === 'overdraw' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// ensure overdraw is backwards-compatible with legacy boolean type\\r\\n\\t\\t\\t\\t\\tthis[ key ] = Number( newValue );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis[ key ] = newValue;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( meta ) {\\r\\n\\r\\n\\t\\t\\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\\r\\n\\r\\n\\t\\t\\tif ( isRoot ) {\\r\\n\\r\\n\\t\\t\\t\\tmeta = {\\r\\n\\t\\t\\t\\t\\ttextures: {},\\r\\n\\t\\t\\t\\t\\timages: {}\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar data = {\\r\\n\\t\\t\\t\\tmetadata: {\\r\\n\\t\\t\\t\\t\\tversion: 4.5,\\r\\n\\t\\t\\t\\t\\ttype: 'Material',\\r\\n\\t\\t\\t\\t\\tgenerator: 'Material.toJSON'\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t// standard Material serialization\\r\\n\\t\\t\\tdata.uuid = this.uuid;\\r\\n\\t\\t\\tdata.type = this.type;\\r\\n\\r\\n\\t\\t\\tif ( this.name !== '' ) data.name = this.name;\\r\\n\\r\\n\\t\\t\\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\\r\\n\\r\\n\\t\\t\\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\\r\\n\\t\\t\\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\\r\\n\\r\\n\\t\\t\\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\\r\\n\\t\\t\\tif ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\\r\\n\\r\\n\\t\\t\\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\\r\\n\\t\\t\\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\\r\\n\\t\\t\\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\\r\\n\\t\\t\\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\\r\\n\\r\\n\\t\\t\\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\\r\\n\\t\\t\\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\\r\\n\\t\\t\\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\\r\\n\\t\\t\\tif ( this.bumpMap && this.bumpMap.isTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\\r\\n\\t\\t\\t\\tdata.bumpScale = this.bumpScale;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif ( this.normalMap && this.normalMap.isTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\\r\\n\\t\\t\\t\\tdata.normalScale = this.normalScale.toArray();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif ( this.displacementMap && this.displacementMap.isTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\\r\\n\\t\\t\\t\\tdata.displacementScale = this.displacementScale;\\r\\n\\t\\t\\t\\tdata.displacementBias = this.displacementBias;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\\r\\n\\t\\t\\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\\r\\n\\r\\n\\t\\t\\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\\r\\n\\t\\t\\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\\r\\n\\r\\n\\t\\t\\tif ( this.envMap && this.envMap.isTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tdata.envMap = this.envMap.toJSON( meta ).uuid;\\r\\n\\t\\t\\t\\tdata.reflectivity = this.reflectivity; // Scale behind envMap\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.gradientMap && this.gradientMap.isTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.size !== undefined ) data.size = this.size;\\r\\n\\t\\t\\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\\r\\n\\r\\n\\t\\t\\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\\r\\n\\t\\t\\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\\r\\n\\t\\t\\tif ( this.side !== FrontSide ) data.side = this.side;\\r\\n\\t\\t\\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\\r\\n\\r\\n\\t\\t\\tif ( this.opacity < 1 ) data.opacity = this.opacity;\\r\\n\\t\\t\\tif ( this.transparent === true ) data.transparent = this.transparent;\\r\\n\\r\\n\\t\\t\\tdata.depthFunc = this.depthFunc;\\r\\n\\t\\t\\tdata.depthTest = this.depthTest;\\r\\n\\t\\t\\tdata.depthWrite = this.depthWrite;\\r\\n\\r\\n\\t\\t\\t// rotation (SpriteMaterial)\\r\\n\\t\\t\\tif ( this.rotation !== 0 ) data.rotation = this.rotation;\\r\\n\\r\\n\\t\\t\\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\\r\\n\\t\\t\\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\\r\\n\\t\\t\\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\\r\\n\\t\\t\\tif ( this.scale !== undefined ) data.scale = this.scale;\\r\\n\\r\\n\\t\\t\\tif ( this.dithering === true ) data.dithering = true;\\r\\n\\r\\n\\t\\t\\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\\r\\n\\t\\t\\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\\r\\n\\r\\n\\t\\t\\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\\r\\n\\t\\t\\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\\r\\n\\t\\t\\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\\r\\n\\t\\t\\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\\r\\n\\r\\n\\t\\t\\tif ( this.morphTargets === true ) data.morphTargets = true;\\r\\n\\t\\t\\tif ( this.skinning === true ) data.skinning = true;\\r\\n\\r\\n\\t\\t\\tif ( this.visible === false ) data.visible = false;\\r\\n\\t\\t\\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\\r\\n\\r\\n\\t\\t\\t// TODO: Copied from Object3D.toJSON\\r\\n\\r\\n\\t\\t\\tfunction extractFromCache( cache ) {\\r\\n\\r\\n\\t\\t\\t\\tvar values = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var key in cache ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar data = cache[ key ];\\r\\n\\t\\t\\t\\t\\tdelete data.metadata;\\r\\n\\t\\t\\t\\t\\tvalues.push( data );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn values;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( isRoot ) {\\r\\n\\r\\n\\t\\t\\t\\tvar textures = extractFromCache( meta.textures );\\r\\n\\t\\t\\t\\tvar images = extractFromCache( meta.images );\\r\\n\\r\\n\\t\\t\\t\\tif ( textures.length > 0 ) data.textures = textures;\\r\\n\\t\\t\\t\\tif ( images.length > 0 ) data.images = images;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tthis.name = source.name;\\r\\n\\r\\n\\t\\t\\tthis.fog = source.fog;\\r\\n\\t\\t\\tthis.lights = source.lights;\\r\\n\\r\\n\\t\\t\\tthis.blending = source.blending;\\r\\n\\t\\t\\tthis.side = source.side;\\r\\n\\t\\t\\tthis.flatShading = source.flatShading;\\r\\n\\t\\t\\tthis.vertexColors = source.vertexColors;\\r\\n\\r\\n\\t\\t\\tthis.opacity = source.opacity;\\r\\n\\t\\t\\tthis.transparent = source.transparent;\\r\\n\\r\\n\\t\\t\\tthis.blendSrc = source.blendSrc;\\r\\n\\t\\t\\tthis.blendDst = source.blendDst;\\r\\n\\t\\t\\tthis.blendEquation = source.blendEquation;\\r\\n\\t\\t\\tthis.blendSrcAlpha = source.blendSrcAlpha;\\r\\n\\t\\t\\tthis.blendDstAlpha = source.blendDstAlpha;\\r\\n\\t\\t\\tthis.blendEquationAlpha = source.blendEquationAlpha;\\r\\n\\r\\n\\t\\t\\tthis.depthFunc = source.depthFunc;\\r\\n\\t\\t\\tthis.depthTest = source.depthTest;\\r\\n\\t\\t\\tthis.depthWrite = source.depthWrite;\\r\\n\\r\\n\\t\\t\\tthis.colorWrite = source.colorWrite;\\r\\n\\r\\n\\t\\t\\tthis.precision = source.precision;\\r\\n\\r\\n\\t\\t\\tthis.polygonOffset = source.polygonOffset;\\r\\n\\t\\t\\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\\r\\n\\t\\t\\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\\r\\n\\r\\n\\t\\t\\tthis.dithering = source.dithering;\\r\\n\\r\\n\\t\\t\\tthis.alphaTest = source.alphaTest;\\r\\n\\t\\t\\tthis.premultipliedAlpha = source.premultipliedAlpha;\\r\\n\\r\\n\\t\\t\\tthis.overdraw = source.overdraw;\\r\\n\\r\\n\\t\\t\\tthis.visible = source.visible;\\r\\n\\t\\t\\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\\r\\n\\r\\n\\t\\t\\tthis.clipShadows = source.clipShadows;\\r\\n\\t\\t\\tthis.clipIntersection = source.clipIntersection;\\r\\n\\r\\n\\t\\t\\tvar srcPlanes = source.clippingPlanes,\\r\\n\\t\\t\\t\\tdstPlanes = null;\\r\\n\\r\\n\\t\\t\\tif ( srcPlanes !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tvar n = srcPlanes.length;\\r\\n\\t\\t\\t\\tdstPlanes = new Array( n );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i !== n; ++ i )\\r\\n\\t\\t\\t\\t\\tdstPlanes[ i ] = srcPlanes[ i ].clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.clippingPlanes = dstPlanes;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdispose: function () {\\r\\n\\r\\n\\t\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author bhouston / https://clara.io\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *\\r\\n\\t *  opacity: <float>,\\r\\n\\t *\\r\\n\\t *  map: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  alphaMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  displacementMap: new THREE.Texture( <Image> ),\\r\\n\\t *  displacementScale: <float>,\\r\\n\\t *  displacementBias: <float>,\\r\\n\\t *\\r\\n\\t *  wireframe: <boolean>,\\r\\n\\t *  wireframeLinewidth: <float>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction MeshDepthMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'MeshDepthMaterial';\\r\\n\\r\\n\\t\\tthis.depthPacking = BasicDepthPacking;\\r\\n\\r\\n\\t\\tthis.skinning = false;\\r\\n\\t\\tthis.morphTargets = false;\\r\\n\\r\\n\\t\\tthis.map = null;\\r\\n\\r\\n\\t\\tthis.alphaMap = null;\\r\\n\\r\\n\\t\\tthis.displacementMap = null;\\r\\n\\t\\tthis.displacementScale = 1;\\r\\n\\t\\tthis.displacementBias = 0;\\r\\n\\r\\n\\t\\tthis.wireframe = false;\\r\\n\\t\\tthis.wireframeLinewidth = 1;\\r\\n\\r\\n\\t\\tthis.fog = false;\\r\\n\\t\\tthis.lights = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\\r\\n\\r\\n\\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\\r\\n\\r\\n\\tMeshDepthMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.depthPacking = source.depthPacking;\\r\\n\\r\\n\\t\\tthis.skinning = source.skinning;\\r\\n\\t\\tthis.morphTargets = source.morphTargets;\\r\\n\\r\\n\\t\\tthis.map = source.map;\\r\\n\\r\\n\\t\\tthis.alphaMap = source.alphaMap;\\r\\n\\r\\n\\t\\tthis.displacementMap = source.displacementMap;\\r\\n\\t\\tthis.displacementScale = source.displacementScale;\\r\\n\\t\\tthis.displacementBias = source.displacementBias;\\r\\n\\r\\n\\t\\tthis.wireframe = source.wireframe;\\r\\n\\t\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *\\r\\n\\t *  referencePosition: <float>,\\r\\n\\t *  nearDistance: <float>,\\r\\n\\t *  farDistance: <float>,\\r\\n\\t *\\r\\n\\t *  skinning: <bool>,\\r\\n\\t *  morphTargets: <bool>,\\r\\n\\t *\\r\\n\\t *  map: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  alphaMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  displacementMap: new THREE.Texture( <Image> ),\\r\\n\\t *  displacementScale: <float>,\\r\\n\\t *  displacementBias: <float>\\r\\n\\t *\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction MeshDistanceMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'MeshDistanceMaterial';\\r\\n\\r\\n\\t\\tthis.referencePosition = new Vector3();\\r\\n\\t\\tthis.nearDistance = 1;\\r\\n\\t\\tthis.farDistance = 1000;\\r\\n\\r\\n\\t\\tthis.skinning = false;\\r\\n\\t\\tthis.morphTargets = false;\\r\\n\\r\\n\\t\\tthis.map = null;\\r\\n\\r\\n\\t\\tthis.alphaMap = null;\\r\\n\\r\\n\\t\\tthis.displacementMap = null;\\r\\n\\t\\tthis.displacementScale = 1;\\r\\n\\t\\tthis.displacementBias = 0;\\r\\n\\r\\n\\t\\tthis.fog = false;\\r\\n\\t\\tthis.lights = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\\r\\n\\r\\n\\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\\r\\n\\r\\n\\tMeshDistanceMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.referencePosition.copy( source.referencePosition );\\r\\n\\t\\tthis.nearDistance = source.nearDistance;\\r\\n\\t\\tthis.farDistance = source.farDistance;\\r\\n\\r\\n\\t\\tthis.skinning = source.skinning;\\r\\n\\t\\tthis.morphTargets = source.morphTargets;\\r\\n\\r\\n\\t\\tthis.map = source.map;\\r\\n\\r\\n\\t\\tthis.alphaMap = source.alphaMap;\\r\\n\\r\\n\\t\\tthis.displacementMap = source.displacementMap;\\r\\n\\t\\tthis.displacementScale = source.displacementScale;\\r\\n\\t\\tthis.displacementBias = source.displacementBias;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction Box3( min, max ) {\\r\\n\\r\\n\\t\\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\\r\\n\\t\\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Box3.prototype, {\\r\\n\\r\\n\\t\\tisBox3: true,\\r\\n\\r\\n\\t\\tset: function ( min, max ) {\\r\\n\\r\\n\\t\\t\\tthis.min.copy( min );\\r\\n\\t\\t\\tthis.max.copy( max );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromArray: function ( array ) {\\r\\n\\r\\n\\t\\t\\tvar minX = + Infinity;\\r\\n\\t\\t\\tvar minY = + Infinity;\\r\\n\\t\\t\\tvar minZ = + Infinity;\\r\\n\\r\\n\\t\\t\\tvar maxX = - Infinity;\\r\\n\\t\\t\\tvar maxY = - Infinity;\\r\\n\\t\\t\\tvar maxZ = - Infinity;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar x = array[ i ];\\r\\n\\t\\t\\t\\tvar y = array[ i + 1 ];\\r\\n\\t\\t\\t\\tvar z = array[ i + 2 ];\\r\\n\\r\\n\\t\\t\\t\\tif ( x < minX ) minX = x;\\r\\n\\t\\t\\t\\tif ( y < minY ) minY = y;\\r\\n\\t\\t\\t\\tif ( z < minZ ) minZ = z;\\r\\n\\r\\n\\t\\t\\t\\tif ( x > maxX ) maxX = x;\\r\\n\\t\\t\\t\\tif ( y > maxY ) maxY = y;\\r\\n\\t\\t\\t\\tif ( z > maxZ ) maxZ = z;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.min.set( minX, minY, minZ );\\r\\n\\t\\t\\tthis.max.set( maxX, maxY, maxZ );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromBufferAttribute: function ( attribute ) {\\r\\n\\r\\n\\t\\t\\tvar minX = + Infinity;\\r\\n\\t\\t\\tvar minY = + Infinity;\\r\\n\\t\\t\\tvar minZ = + Infinity;\\r\\n\\r\\n\\t\\t\\tvar maxX = - Infinity;\\r\\n\\t\\t\\tvar maxY = - Infinity;\\r\\n\\t\\t\\tvar maxZ = - Infinity;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar x = attribute.getX( i );\\r\\n\\t\\t\\t\\tvar y = attribute.getY( i );\\r\\n\\t\\t\\t\\tvar z = attribute.getZ( i );\\r\\n\\r\\n\\t\\t\\t\\tif ( x < minX ) minX = x;\\r\\n\\t\\t\\t\\tif ( y < minY ) minY = y;\\r\\n\\t\\t\\t\\tif ( z < minZ ) minZ = z;\\r\\n\\r\\n\\t\\t\\t\\tif ( x > maxX ) maxX = x;\\r\\n\\t\\t\\t\\tif ( y > maxY ) maxY = y;\\r\\n\\t\\t\\t\\tif ( z > maxZ ) maxZ = z;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.min.set( minX, minY, minZ );\\r\\n\\t\\t\\tthis.max.set( maxX, maxY, maxZ );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromPoints: function ( points ) {\\r\\n\\r\\n\\t\\t\\tthis.makeEmpty();\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.expandByPoint( points[ i ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromCenterAndSize: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function setFromCenterAndSize( center, size ) {\\r\\n\\r\\n\\t\\t\\t\\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\\r\\n\\r\\n\\t\\t\\t\\tthis.min.copy( center ).sub( halfSize );\\r\\n\\t\\t\\t\\tthis.max.copy( center ).add( halfSize );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tsetFromObject: function ( object ) {\\r\\n\\r\\n\\t\\t\\tthis.makeEmpty();\\r\\n\\r\\n\\t\\t\\treturn this.expandByObject( object );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( box ) {\\r\\n\\r\\n\\t\\t\\tthis.min.copy( box.min );\\r\\n\\t\\t\\tthis.max.copy( box.max );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmakeEmpty: function () {\\r\\n\\r\\n\\t\\t\\tthis.min.x = this.min.y = this.min.z = + Infinity;\\r\\n\\t\\t\\tthis.max.x = this.max.y = this.max.z = - Infinity;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tisEmpty: function () {\\r\\n\\r\\n\\t\\t\\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\\r\\n\\r\\n\\t\\t\\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetCenter: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\t\\t\\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetSize: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\t\\t\\treturn this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\texpandByPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\tthis.min.min( point );\\r\\n\\t\\t\\tthis.max.max( point );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\texpandByVector: function ( vector ) {\\r\\n\\r\\n\\t\\t\\tthis.min.sub( vector );\\r\\n\\t\\t\\tthis.max.add( vector );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\texpandByScalar: function ( scalar ) {\\r\\n\\r\\n\\t\\t\\tthis.min.addScalar( - scalar );\\r\\n\\t\\t\\tthis.max.addScalar( scalar );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\texpandByObject: function () {\\r\\n\\r\\n\\t\\t\\t// Computes the world-axis-aligned bounding box of an object (including its children),\\r\\n\\t\\t\\t// accounting for both the object's, and children's, world transforms\\r\\n\\r\\n\\t\\t\\tvar scope, i, l;\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\tfunction traverse( node ) {\\r\\n\\r\\n\\t\\t\\t\\tvar geometry = node.geometry;\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( geometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar vertices = geometry.vertices;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tv1.copy( vertices[ i ] );\\r\\n\\t\\t\\t\\t\\t\\t\\tv1.applyMatrix4( node.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tscope.expandByPoint( v1 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else if ( geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar attribute = geometry.attributes.position;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( attribute !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tscope.expandByPoint( v1 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn function expandByObject( object ) {\\r\\n\\r\\n\\t\\t\\t\\tscope = this;\\r\\n\\r\\n\\t\\t\\t\\tobject.updateMatrixWorld( true );\\r\\n\\r\\n\\t\\t\\t\\tobject.traverse( traverse );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tcontainsPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\treturn point.x < this.min.x || point.x > this.max.x ||\\r\\n\\t\\t\\t\\tpoint.y < this.min.y || point.y > this.max.y ||\\r\\n\\t\\t\\t\\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcontainsBox: function ( box ) {\\r\\n\\r\\n\\t\\t\\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\\r\\n\\t\\t\\t\\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\\r\\n\\t\\t\\t\\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetParameter: function ( point, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t// This can potentially have a divide by zero if the box\\r\\n\\t\\t\\t// has a size dimension of 0.\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\treturn result.set(\\r\\n\\t\\t\\t\\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\\r\\n\\t\\t\\t\\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\\r\\n\\t\\t\\t\\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsBox: function ( box ) {\\r\\n\\r\\n\\t\\t\\t// using 6 splitting planes to rule out intersections.\\r\\n\\t\\t\\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\\r\\n\\t\\t\\t\\tbox.max.y < this.min.y || box.min.y > this.max.y ||\\r\\n\\t\\t\\t\\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsSphere: ( function () {\\r\\n\\r\\n\\t\\t\\tvar closestPoint = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function intersectsSphere( sphere ) {\\r\\n\\r\\n\\t\\t\\t\\t// Find the point on the AABB closest to the sphere center.\\r\\n\\t\\t\\t\\tthis.clampPoint( sphere.center, closestPoint );\\r\\n\\r\\n\\t\\t\\t\\t// If that point is inside the sphere, the AABB and sphere intersect.\\r\\n\\t\\t\\t\\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )(),\\r\\n\\r\\n\\t\\tintersectsPlane: function ( plane ) {\\r\\n\\r\\n\\t\\t\\t// We compute the minimum and maximum dot product values. If those values\\r\\n\\t\\t\\t// are on the same side (back or front) of the plane, then there is no intersection.\\r\\n\\r\\n\\t\\t\\tvar min, max;\\r\\n\\r\\n\\t\\t\\tif ( plane.normal.x > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tmin = plane.normal.x * this.min.x;\\r\\n\\t\\t\\t\\tmax = plane.normal.x * this.max.x;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tmin = plane.normal.x * this.max.x;\\r\\n\\t\\t\\t\\tmax = plane.normal.x * this.min.x;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( plane.normal.y > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tmin += plane.normal.y * this.min.y;\\r\\n\\t\\t\\t\\tmax += plane.normal.y * this.max.y;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tmin += plane.normal.y * this.max.y;\\r\\n\\t\\t\\t\\tmax += plane.normal.y * this.min.y;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( plane.normal.z > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tmin += plane.normal.z * this.min.z;\\r\\n\\t\\t\\t\\tmax += plane.normal.z * this.max.z;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tmin += plane.normal.z * this.max.z;\\r\\n\\t\\t\\t\\tmax += plane.normal.z * this.min.z;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn ( min <= plane.constant && max >= plane.constant );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclampPoint: function ( point, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\t\\t\\treturn result.copy( point ).clamp( this.min, this.max );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceToPoint: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function distanceToPoint( point ) {\\r\\n\\r\\n\\t\\t\\t\\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\\r\\n\\t\\t\\t\\treturn clampedPoint.sub( point ).length();\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tgetBoundingSphere: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function getBoundingSphere( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Sphere();\\r\\n\\r\\n\\t\\t\\t\\tthis.getCenter( result.center );\\r\\n\\r\\n\\t\\t\\t\\tresult.radius = this.getSize( v1 ).length() * 0.5;\\r\\n\\r\\n\\t\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tintersect: function ( box ) {\\r\\n\\r\\n\\t\\t\\tthis.min.max( box.min );\\r\\n\\t\\t\\tthis.max.min( box.max );\\r\\n\\r\\n\\t\\t\\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\\r\\n\\t\\t\\tif ( this.isEmpty() ) this.makeEmpty();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tunion: function ( box ) {\\r\\n\\r\\n\\t\\t\\tthis.min.min( box.min );\\r\\n\\t\\t\\tthis.max.max( box.max );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyMatrix4: function () {\\r\\n\\r\\n\\t\\t\\tvar points = [\\r\\n\\t\\t\\t\\tnew Vector3(),\\r\\n\\t\\t\\t\\tnew Vector3(),\\r\\n\\t\\t\\t\\tnew Vector3(),\\r\\n\\t\\t\\t\\tnew Vector3(),\\r\\n\\t\\t\\t\\tnew Vector3(),\\r\\n\\t\\t\\t\\tnew Vector3(),\\r\\n\\t\\t\\t\\tnew Vector3(),\\r\\n\\t\\t\\t\\tnew Vector3()\\r\\n\\t\\t\\t];\\r\\n\\r\\n\\t\\t\\treturn function applyMatrix4( matrix ) {\\r\\n\\r\\n\\t\\t\\t\\t// transform of empty box is an empty box.\\r\\n\\t\\t\\t\\tif ( this.isEmpty() ) return this;\\r\\n\\r\\n\\t\\t\\t\\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\\r\\n\\t\\t\\t\\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\\r\\n\\t\\t\\t\\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\\r\\n\\t\\t\\t\\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\\r\\n\\t\\t\\t\\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\\r\\n\\t\\t\\t\\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\\r\\n\\t\\t\\t\\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\\r\\n\\t\\t\\t\\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\\r\\n\\t\\t\\t\\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\\t// 111\\r\\n\\r\\n\\t\\t\\t\\tthis.setFromPoints( points );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttranslate: function ( offset ) {\\r\\n\\r\\n\\t\\t\\tthis.min.add( offset );\\r\\n\\t\\t\\tthis.max.add( offset );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( box ) {\\r\\n\\r\\n\\t\\t\\treturn box.min.equals( this.min ) && box.max.equals( this.max );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Sphere( center, radius ) {\\r\\n\\r\\n\\t\\tthis.center = ( center !== undefined ) ? center : new Vector3();\\r\\n\\t\\tthis.radius = ( radius !== undefined ) ? radius : 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Sphere.prototype, {\\r\\n\\r\\n\\t\\tset: function ( center, radius ) {\\r\\n\\r\\n\\t\\t\\tthis.center.copy( center );\\r\\n\\t\\t\\tthis.radius = radius;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromPoints: function () {\\r\\n\\r\\n\\t\\t\\tvar box = new Box3();\\r\\n\\r\\n\\t\\t\\treturn function setFromPoints( points, optionalCenter ) {\\r\\n\\r\\n\\t\\t\\t\\tvar center = this.center;\\r\\n\\r\\n\\t\\t\\t\\tif ( optionalCenter !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcenter.copy( optionalCenter );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tbox.setFromPoints( points ).getCenter( center );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar maxRadiusSq = 0;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.radius = Math.sqrt( maxRadiusSq );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( sphere ) {\\r\\n\\r\\n\\t\\t\\tthis.center.copy( sphere.center );\\r\\n\\t\\t\\tthis.radius = sphere.radius;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tempty: function () {\\r\\n\\r\\n\\t\\t\\treturn ( this.radius <= 0 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcontainsPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceToPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\treturn ( point.distanceTo( this.center ) - this.radius );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsSphere: function ( sphere ) {\\r\\n\\r\\n\\t\\t\\tvar radiusSum = this.radius + sphere.radius;\\r\\n\\r\\n\\t\\t\\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsBox: function ( box ) {\\r\\n\\r\\n\\t\\t\\treturn box.intersectsSphere( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsPlane: function ( plane ) {\\r\\n\\r\\n\\t\\t\\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclampPoint: function ( point, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar deltaLengthSq = this.center.distanceToSquared( point );\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\tresult.copy( point );\\r\\n\\r\\n\\t\\t\\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\\r\\n\\r\\n\\t\\t\\t\\tresult.sub( this.center ).normalize();\\r\\n\\t\\t\\t\\tresult.multiplyScalar( this.radius ).add( this.center );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetBoundingBox: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar box = optionalTarget || new Box3();\\r\\n\\r\\n\\t\\t\\tbox.set( this.center, this.center );\\r\\n\\t\\t\\tbox.expandByScalar( this.radius );\\r\\n\\r\\n\\t\\t\\treturn box;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyMatrix4: function ( matrix ) {\\r\\n\\r\\n\\t\\t\\tthis.center.applyMatrix4( matrix );\\r\\n\\t\\t\\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttranslate: function ( offset ) {\\r\\n\\r\\n\\t\\t\\tthis.center.add( offset );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( sphere ) {\\r\\n\\r\\n\\t\\t\\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t */\\r\\n\\r\\n\\tfunction Plane( normal, constant ) {\\r\\n\\r\\n\\t\\t// normal is assumed to be normalized\\r\\n\\r\\n\\t\\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\\r\\n\\t\\tthis.constant = ( constant !== undefined ) ? constant : 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Plane.prototype, {\\r\\n\\r\\n\\t\\tset: function ( normal, constant ) {\\r\\n\\r\\n\\t\\t\\tthis.normal.copy( normal );\\r\\n\\t\\t\\tthis.constant = constant;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetComponents: function ( x, y, z, w ) {\\r\\n\\r\\n\\t\\t\\tthis.normal.set( x, y, z );\\r\\n\\t\\t\\tthis.constant = w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\\r\\n\\r\\n\\t\\t\\tthis.normal.copy( normal );\\r\\n\\t\\t\\tthis.constant = - point.dot( this.normal );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromCoplanarPoints: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\t\\t\\tvar v2 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function setFromCoplanarPoints( a, b, c ) {\\r\\n\\r\\n\\t\\t\\t\\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\\r\\n\\r\\n\\t\\t\\t\\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\\r\\n\\r\\n\\t\\t\\t\\tthis.setFromNormalAndCoplanarPoint( normal, a );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( plane ) {\\r\\n\\r\\n\\t\\t\\tthis.normal.copy( plane.normal );\\r\\n\\t\\t\\tthis.constant = plane.constant;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormalize: function () {\\r\\n\\r\\n\\t\\t\\t// Note: will lead to a divide by zero if the plane is invalid.\\r\\n\\r\\n\\t\\t\\tvar inverseNormalLength = 1.0 / this.normal.length();\\r\\n\\t\\t\\tthis.normal.multiplyScalar( inverseNormalLength );\\r\\n\\t\\t\\tthis.constant *= inverseNormalLength;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnegate: function () {\\r\\n\\r\\n\\t\\t\\tthis.constant *= - 1;\\r\\n\\t\\t\\tthis.normal.negate();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceToPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\treturn this.normal.dot( point ) + this.constant;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceToSphere: function ( sphere ) {\\r\\n\\r\\n\\t\\t\\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tprojectPoint: function ( point, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\treturn result.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectLine: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function intersectLine( line, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\t\\tvar direction = line.delta( v1 );\\r\\n\\r\\n\\t\\t\\t\\tvar denominator = this.normal.dot( direction );\\r\\n\\r\\n\\t\\t\\t\\tif ( denominator === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// line is coplanar, return origin\\r\\n\\t\\t\\t\\t\\tif ( this.distanceToPoint( line.start ) === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\treturn result.copy( line.start );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t// Unsure if this is the correct method to handle this case.\\r\\n\\t\\t\\t\\t\\treturn undefined;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\\r\\n\\r\\n\\t\\t\\t\\tif ( t < 0 || t > 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn undefined;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tintersectsLine: function ( line ) {\\r\\n\\r\\n\\t\\t\\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\\r\\n\\r\\n\\t\\t\\tvar startSign = this.distanceToPoint( line.start );\\r\\n\\t\\t\\tvar endSign = this.distanceToPoint( line.end );\\r\\n\\r\\n\\t\\t\\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsBox: function ( box ) {\\r\\n\\r\\n\\t\\t\\treturn box.intersectsPlane( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsSphere: function ( sphere ) {\\r\\n\\r\\n\\t\\t\\treturn sphere.intersectsPlane( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcoplanarPoint: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyMatrix4: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\t\\t\\tvar m1 = new Matrix3();\\r\\n\\r\\n\\t\\t\\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\\r\\n\\r\\n\\t\\t\\t\\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\\r\\n\\r\\n\\t\\t\\t\\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\\r\\n\\r\\n\\t\\t\\t\\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\\r\\n\\r\\n\\t\\t\\t\\tthis.constant = - referencePoint.dot( normal );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttranslate: function ( offset ) {\\r\\n\\r\\n\\t\\t\\tthis.constant -= offset.dot( this.normal );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( plane ) {\\r\\n\\r\\n\\t\\t\\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t */\\r\\n\\r\\n\\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\\r\\n\\r\\n\\t\\tthis.planes = [\\r\\n\\r\\n\\t\\t\\t( p0 !== undefined ) ? p0 : new Plane(),\\r\\n\\t\\t\\t( p1 !== undefined ) ? p1 : new Plane(),\\r\\n\\t\\t\\t( p2 !== undefined ) ? p2 : new Plane(),\\r\\n\\t\\t\\t( p3 !== undefined ) ? p3 : new Plane(),\\r\\n\\t\\t\\t( p4 !== undefined ) ? p4 : new Plane(),\\r\\n\\t\\t\\t( p5 !== undefined ) ? p5 : new Plane()\\r\\n\\r\\n\\t\\t];\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Frustum.prototype, {\\r\\n\\r\\n\\t\\tset: function ( p0, p1, p2, p3, p4, p5 ) {\\r\\n\\r\\n\\t\\t\\tvar planes = this.planes;\\r\\n\\r\\n\\t\\t\\tplanes[ 0 ].copy( p0 );\\r\\n\\t\\t\\tplanes[ 1 ].copy( p1 );\\r\\n\\t\\t\\tplanes[ 2 ].copy( p2 );\\r\\n\\t\\t\\tplanes[ 3 ].copy( p3 );\\r\\n\\t\\t\\tplanes[ 4 ].copy( p4 );\\r\\n\\t\\t\\tplanes[ 5 ].copy( p5 );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( frustum ) {\\r\\n\\r\\n\\t\\t\\tvar planes = this.planes;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tplanes[ i ].copy( frustum.planes[ i ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromMatrix: function ( m ) {\\r\\n\\r\\n\\t\\t\\tvar planes = this.planes;\\r\\n\\t\\t\\tvar me = m.elements;\\r\\n\\t\\t\\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\\r\\n\\t\\t\\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\\r\\n\\t\\t\\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\\r\\n\\t\\t\\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\\r\\n\\r\\n\\t\\t\\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\\r\\n\\t\\t\\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\\r\\n\\t\\t\\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\\r\\n\\t\\t\\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\\r\\n\\t\\t\\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\\r\\n\\t\\t\\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsObject: function () {\\r\\n\\r\\n\\t\\t\\tvar sphere = new Sphere();\\r\\n\\r\\n\\t\\t\\treturn function intersectsObject( object ) {\\r\\n\\r\\n\\t\\t\\t\\tvar geometry = object.geometry;\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.boundingSphere === null )\\r\\n\\t\\t\\t\\t\\tgeometry.computeBoundingSphere();\\r\\n\\r\\n\\t\\t\\t\\tsphere.copy( geometry.boundingSphere )\\r\\n\\t\\t\\t\\t\\t.applyMatrix4( object.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\treturn this.intersectsSphere( sphere );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tintersectsSprite: function () {\\r\\n\\r\\n\\t\\t\\tvar sphere = new Sphere();\\r\\n\\r\\n\\t\\t\\treturn function intersectsSprite( sprite ) {\\r\\n\\r\\n\\t\\t\\t\\tsphere.center.set( 0, 0, 0 );\\r\\n\\t\\t\\t\\tsphere.radius = 0.7071067811865476;\\r\\n\\t\\t\\t\\tsphere.applyMatrix4( sprite.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\treturn this.intersectsSphere( sphere );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tintersectsSphere: function ( sphere ) {\\r\\n\\r\\n\\t\\t\\tvar planes = this.planes;\\r\\n\\t\\t\\tvar center = sphere.center;\\r\\n\\t\\t\\tvar negRadius = - sphere.radius;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar distance = planes[ i ].distanceToPoint( center );\\r\\n\\r\\n\\t\\t\\t\\tif ( distance < negRadius ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn false;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsBox: function () {\\r\\n\\r\\n\\t\\t\\tvar p1 = new Vector3(),\\r\\n\\t\\t\\t\\tp2 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function intersectsBox( box ) {\\r\\n\\r\\n\\t\\t\\t\\tvar planes = this.planes;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar plane = planes[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\\r\\n\\t\\t\\t\\t\\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\\r\\n\\t\\t\\t\\t\\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\\r\\n\\t\\t\\t\\t\\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\\r\\n\\t\\t\\t\\t\\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\\r\\n\\t\\t\\t\\t\\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\\r\\n\\r\\n\\t\\t\\t\\t\\tvar d1 = plane.distanceToPoint( p1 );\\r\\n\\t\\t\\t\\t\\tvar d2 = plane.distanceToPoint( p2 );\\r\\n\\r\\n\\t\\t\\t\\t\\t// if both outside plane, no intersection\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( d1 < 0 && d2 < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\treturn false;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tcontainsPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\tvar planes = this.planes;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn false;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\\r\\n\\r\\n\\t\\tvar _frustum = new Frustum(),\\r\\n\\t\\t\\t_projScreenMatrix = new Matrix4(),\\r\\n\\r\\n\\t\\t\\t_shadowMapSize = new Vector2(),\\r\\n\\t\\t\\t_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),\\r\\n\\r\\n\\t\\t\\t_lookTarget = new Vector3(),\\r\\n\\t\\t\\t_lightPositionWorld = new Vector3(),\\r\\n\\r\\n\\t\\t\\t_MorphingFlag = 1,\\r\\n\\t\\t\\t_SkinningFlag = 2,\\r\\n\\r\\n\\t\\t\\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\\r\\n\\r\\n\\t\\t\\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\\r\\n\\t\\t\\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\\r\\n\\r\\n\\t\\t\\t_materialCache = {};\\r\\n\\r\\n\\t\\tvar cubeDirections = [\\r\\n\\t\\t\\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\\r\\n\\t\\t\\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tvar cubeUps = [\\r\\n\\t\\t\\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\\r\\n\\t\\t\\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\\tnew Vector3( 0, 0, - 1 )\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tvar cube2DViewPorts = [\\r\\n\\t\\t\\tnew Vector4(), new Vector4(), new Vector4(),\\r\\n\\t\\t\\tnew Vector4(), new Vector4(), new Vector4()\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\t// init\\r\\n\\r\\n\\t\\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\\r\\n\\r\\n\\t\\t\\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\\r\\n\\t\\t\\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\\r\\n\\r\\n\\t\\t\\tvar depthMaterial = new MeshDepthMaterial( {\\r\\n\\r\\n\\t\\t\\t\\tdepthPacking: RGBADepthPacking,\\r\\n\\r\\n\\t\\t\\t\\tmorphTargets: useMorphing,\\r\\n\\t\\t\\t\\tskinning: useSkinning\\r\\n\\r\\n\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t_depthMaterials[ i ] = depthMaterial;\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tvar distanceMaterial = new MeshDistanceMaterial( {\\r\\n\\r\\n\\t\\t\\t\\tmorphTargets: useMorphing,\\r\\n\\t\\t\\t\\tskinning: useSkinning\\r\\n\\r\\n\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t_distanceMaterials[ i ] = distanceMaterial;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\tthis.enabled = false;\\r\\n\\r\\n\\t\\tthis.autoUpdate = true;\\r\\n\\t\\tthis.needsUpdate = false;\\r\\n\\r\\n\\t\\tthis.type = PCFShadowMap;\\r\\n\\r\\n\\t\\tthis.renderReverseSided = true;\\r\\n\\t\\tthis.renderSingleSided = true;\\r\\n\\r\\n\\t\\tthis.render = function ( lights, scene, camera ) {\\r\\n\\r\\n\\t\\t\\tif ( scope.enabled === false ) return;\\r\\n\\t\\t\\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\\r\\n\\r\\n\\t\\t\\tif ( lights.length === 0 ) return;\\r\\n\\r\\n\\t\\t\\t// TODO Clean up (needed in case of contextlost)\\r\\n\\t\\t\\tvar _gl = _renderer.context;\\r\\n\\t\\t\\tvar _state = _renderer.state;\\r\\n\\r\\n\\t\\t\\t// Set GL state for depth map.\\r\\n\\t\\t\\t_state.disable( _gl.BLEND );\\r\\n\\t\\t\\t_state.buffers.color.setClear( 1, 1, 1, 1 );\\r\\n\\t\\t\\t_state.buffers.depth.setTest( true );\\r\\n\\t\\t\\t_state.setScissorTest( false );\\r\\n\\r\\n\\t\\t\\t// render depth map\\r\\n\\r\\n\\t\\t\\tvar faceCount;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar light = lights[ i ];\\r\\n\\t\\t\\t\\tvar shadow = light.shadow;\\r\\n\\t\\t\\t\\tvar isPointLight = light && light.isPointLight;\\r\\n\\r\\n\\t\\t\\t\\tif ( shadow === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar shadowCamera = shadow.camera;\\r\\n\\r\\n\\t\\t\\t\\t_shadowMapSize.copy( shadow.mapSize );\\r\\n\\t\\t\\t\\t_shadowMapSize.min( _maxShadowMapSize );\\r\\n\\r\\n\\t\\t\\t\\tif ( isPointLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar vpWidth = _shadowMapSize.x;\\r\\n\\t\\t\\t\\t\\tvar vpHeight = _shadowMapSize.y;\\r\\n\\r\\n\\t\\t\\t\\t\\t// These viewports map a cube-map onto a 2D texture with the\\r\\n\\t\\t\\t\\t\\t// following orientation:\\r\\n\\t\\t\\t\\t\\t//\\r\\n\\t\\t\\t\\t\\t//  xzXZ\\r\\n\\t\\t\\t\\t\\t//   y Y\\r\\n\\t\\t\\t\\t\\t//\\r\\n\\t\\t\\t\\t\\t// X - Positive x direction\\r\\n\\t\\t\\t\\t\\t// x - Negative x direction\\r\\n\\t\\t\\t\\t\\t// Y - Positive y direction\\r\\n\\t\\t\\t\\t\\t// y - Negative y direction\\r\\n\\t\\t\\t\\t\\t// Z - Positive z direction\\r\\n\\t\\t\\t\\t\\t// z - Negative z direction\\r\\n\\r\\n\\t\\t\\t\\t\\t// positive X\\r\\n\\t\\t\\t\\t\\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\\r\\n\\t\\t\\t\\t\\t// negative X\\r\\n\\t\\t\\t\\t\\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\\r\\n\\t\\t\\t\\t\\t// positive Z\\r\\n\\t\\t\\t\\t\\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\\r\\n\\t\\t\\t\\t\\t// negative Z\\r\\n\\t\\t\\t\\t\\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\\r\\n\\t\\t\\t\\t\\t// positive Y\\r\\n\\t\\t\\t\\t\\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\\r\\n\\t\\t\\t\\t\\t// negative Y\\r\\n\\t\\t\\t\\t\\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\\r\\n\\r\\n\\t\\t\\t\\t\\t_shadowMapSize.x *= 4.0;\\r\\n\\t\\t\\t\\t\\t_shadowMapSize.y *= 2.0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( shadow.map === null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\\r\\n\\r\\n\\t\\t\\t\\t\\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\\r\\n\\t\\t\\t\\t\\tshadow.map.texture.name = light.name + \\\".shadowMap\\\";\\r\\n\\r\\n\\t\\t\\t\\t\\tshadowCamera.updateProjectionMatrix();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( shadow.isSpotLightShadow ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tshadow.update( light );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar shadowMap = shadow.map;\\r\\n\\t\\t\\t\\tvar shadowMatrix = shadow.matrix;\\r\\n\\r\\n\\t\\t\\t\\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\\r\\n\\t\\t\\t\\tshadowCamera.position.copy( _lightPositionWorld );\\r\\n\\r\\n\\t\\t\\t\\tif ( isPointLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfaceCount = 6;\\r\\n\\r\\n\\t\\t\\t\\t\\t// for point lights we set the shadow matrix to be a translation-only matrix\\r\\n\\t\\t\\t\\t\\t// equal to inverse of the light's position\\r\\n\\r\\n\\t\\t\\t\\t\\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tfaceCount = 1;\\r\\n\\r\\n\\t\\t\\t\\t\\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\\r\\n\\t\\t\\t\\t\\tshadowCamera.lookAt( _lookTarget );\\r\\n\\t\\t\\t\\t\\tshadowCamera.updateMatrixWorld();\\r\\n\\r\\n\\t\\t\\t\\t\\t// compute shadow matrix\\r\\n\\r\\n\\t\\t\\t\\t\\tshadowMatrix.set(\\r\\n\\t\\t\\t\\t\\t\\t0.5, 0.0, 0.0, 0.5,\\r\\n\\t\\t\\t\\t\\t\\t0.0, 0.5, 0.0, 0.5,\\r\\n\\t\\t\\t\\t\\t\\t0.0, 0.0, 0.5, 0.5,\\r\\n\\t\\t\\t\\t\\t\\t0.0, 0.0, 0.0, 1.0\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\\r\\n\\t\\t\\t\\t\\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t_renderer.setRenderTarget( shadowMap );\\r\\n\\t\\t\\t\\t_renderer.clear();\\r\\n\\r\\n\\t\\t\\t\\t// render shadow map for each cube face (if omni-directional) or\\r\\n\\t\\t\\t\\t// run a single pass if not\\r\\n\\r\\n\\t\\t\\t\\tfor ( var face = 0; face < faceCount; face ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( isPointLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t_lookTarget.copy( shadowCamera.position );\\r\\n\\t\\t\\t\\t\\t\\t_lookTarget.add( cubeDirections[ face ] );\\r\\n\\t\\t\\t\\t\\t\\tshadowCamera.up.copy( cubeUps[ face ] );\\r\\n\\t\\t\\t\\t\\t\\tshadowCamera.lookAt( _lookTarget );\\r\\n\\t\\t\\t\\t\\t\\tshadowCamera.updateMatrixWorld();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar vpDimensions = cube2DViewPorts[ face ];\\r\\n\\t\\t\\t\\t\\t\\t_state.viewport( vpDimensions );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t// update camera matrices and frustum\\r\\n\\r\\n\\t\\t\\t\\t\\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\\r\\n\\t\\t\\t\\t\\t_frustum.setFromMatrix( _projScreenMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\t// set object matrices & frustum culling\\r\\n\\r\\n\\t\\t\\t\\t\\trenderObject( scene, camera, shadowCamera, isPointLight );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tscope.needsUpdate = false;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {\\r\\n\\r\\n\\t\\t\\tvar geometry = object.geometry;\\r\\n\\r\\n\\t\\t\\tvar result = null;\\r\\n\\r\\n\\t\\t\\tvar materialVariants = _depthMaterials;\\r\\n\\t\\t\\tvar customMaterial = object.customDepthMaterial;\\r\\n\\r\\n\\t\\t\\tif ( isPointLight ) {\\r\\n\\r\\n\\t\\t\\t\\tmaterialVariants = _distanceMaterials;\\r\\n\\t\\t\\t\\tcustomMaterial = object.customDistanceMaterial;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( ! customMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\tvar useMorphing = false;\\r\\n\\r\\n\\t\\t\\t\\tif ( material.morphTargets ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( geometry && geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else if ( geometry && geometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( object.isSkinnedMesh && material.skinning === false ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar useSkinning = object.isSkinnedMesh && material.skinning;\\r\\n\\r\\n\\t\\t\\t\\tvar variantIndex = 0;\\r\\n\\r\\n\\t\\t\\t\\tif ( useMorphing ) variantIndex |= _MorphingFlag;\\r\\n\\t\\t\\t\\tif ( useSkinning ) variantIndex |= _SkinningFlag;\\r\\n\\r\\n\\t\\t\\t\\tresult = materialVariants[ variantIndex ];\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tresult = customMaterial;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( _renderer.localClippingEnabled &&\\r\\n\\t\\t\\t\\t\\tmaterial.clipShadows === true &&\\r\\n\\t\\t\\t\\t\\tmaterial.clippingPlanes.length !== 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t// in this case we need a unique material instance reflecting the\\r\\n\\t\\t\\t\\t// appropriate state\\r\\n\\r\\n\\t\\t\\t\\tvar keyA = result.uuid, keyB = material.uuid;\\r\\n\\r\\n\\t\\t\\t\\tvar materialsForVariant = _materialCache[ keyA ];\\r\\n\\r\\n\\t\\t\\t\\tif ( materialsForVariant === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmaterialsForVariant = {};\\r\\n\\t\\t\\t\\t\\t_materialCache[ keyA ] = materialsForVariant;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar cachedMaterial = materialsForVariant[ keyB ];\\r\\n\\r\\n\\t\\t\\t\\tif ( cachedMaterial === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcachedMaterial = result.clone();\\r\\n\\t\\t\\t\\t\\tmaterialsForVariant[ keyB ] = cachedMaterial;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tresult = cachedMaterial;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tresult.visible = material.visible;\\r\\n\\t\\t\\tresult.wireframe = material.wireframe;\\r\\n\\r\\n\\t\\t\\tvar side = material.side;\\r\\n\\r\\n\\t\\t\\tif ( scope.renderSingleSided && side == DoubleSide ) {\\r\\n\\r\\n\\t\\t\\t\\tside = FrontSide;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( scope.renderReverseSided ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( side === FrontSide ) side = BackSide;\\r\\n\\t\\t\\t\\telse if ( side === BackSide ) side = FrontSide;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tresult.side = side;\\r\\n\\r\\n\\t\\t\\tresult.clipShadows = material.clipShadows;\\r\\n\\t\\t\\tresult.clippingPlanes = material.clippingPlanes;\\r\\n\\t\\t\\tresult.clipIntersection = material.clipIntersection;\\r\\n\\r\\n\\t\\t\\tresult.wireframeLinewidth = material.wireframeLinewidth;\\r\\n\\t\\t\\tresult.linewidth = material.linewidth;\\r\\n\\r\\n\\t\\t\\tif ( isPointLight && result.isMeshDistanceMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\tresult.referencePosition.copy( lightPositionWorld );\\r\\n\\t\\t\\t\\tresult.nearDistance = shadowCameraNear;\\r\\n\\t\\t\\t\\tresult.farDistance = shadowCameraFar;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\\r\\n\\r\\n\\t\\t\\tif ( object.visible === false ) return;\\r\\n\\r\\n\\t\\t\\tvar visible = object.layers.test( camera.layers );\\r\\n\\r\\n\\t\\t\\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar geometry = _objects.update( object );\\r\\n\\t\\t\\t\\t\\tvar material = object.material;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( Array.isArray( material ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar groups = geometry.groups;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar group = groups[ k ];\\r\\n\\t\\t\\t\\t\\t\\t\\tvar groupMaterial = material[ group.materialIndex ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( groupMaterial && groupMaterial.visible ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else if ( material.visible ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\\r\\n\\t\\t\\t\\t\\t\\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar children = object.children;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLAttributes( gl ) {\\r\\n\\r\\n\\t\\tvar buffers = {};\\r\\n\\r\\n\\t\\tfunction createBuffer( attribute, bufferType ) {\\r\\n\\r\\n\\t\\t\\tvar array = attribute.array;\\r\\n\\t\\t\\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\\r\\n\\r\\n\\t\\t\\tvar buffer = gl.createBuffer();\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( bufferType, buffer );\\r\\n\\t\\t\\tgl.bufferData( bufferType, array, usage );\\r\\n\\r\\n\\t\\t\\tattribute.onUploadCallback();\\r\\n\\r\\n\\t\\t\\tvar type = gl.FLOAT;\\r\\n\\r\\n\\t\\t\\tif ( array instanceof Float32Array ) {\\r\\n\\r\\n\\t\\t\\t\\ttype = gl.FLOAT;\\r\\n\\r\\n\\t\\t\\t} else if ( array instanceof Float64Array ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\\r\\n\\r\\n\\t\\t\\t} else if ( array instanceof Uint16Array ) {\\r\\n\\r\\n\\t\\t\\t\\ttype = gl.UNSIGNED_SHORT;\\r\\n\\r\\n\\t\\t\\t} else if ( array instanceof Int16Array ) {\\r\\n\\r\\n\\t\\t\\t\\ttype = gl.SHORT;\\r\\n\\r\\n\\t\\t\\t} else if ( array instanceof Uint32Array ) {\\r\\n\\r\\n\\t\\t\\t\\ttype = gl.UNSIGNED_INT;\\r\\n\\r\\n\\t\\t\\t} else if ( array instanceof Int32Array ) {\\r\\n\\r\\n\\t\\t\\t\\ttype = gl.INT;\\r\\n\\r\\n\\t\\t\\t} else if ( array instanceof Int8Array ) {\\r\\n\\r\\n\\t\\t\\t\\ttype = gl.BYTE;\\r\\n\\r\\n\\t\\t\\t} else if ( array instanceof Uint8Array ) {\\r\\n\\r\\n\\t\\t\\t\\ttype = gl.UNSIGNED_BYTE;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn {\\r\\n\\t\\t\\t\\tbuffer: buffer,\\r\\n\\t\\t\\t\\ttype: type,\\r\\n\\t\\t\\t\\tbytesPerElement: array.BYTES_PER_ELEMENT,\\r\\n\\t\\t\\t\\tversion: attribute.version\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction updateBuffer( buffer, attribute, bufferType ) {\\r\\n\\r\\n\\t\\t\\tvar array = attribute.array;\\r\\n\\t\\t\\tvar updateRange = attribute.updateRange;\\r\\n\\r\\n\\t\\t\\tgl.bindBuffer( bufferType, buffer );\\r\\n\\r\\n\\t\\t\\tif ( attribute.dynamic === false ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\\r\\n\\r\\n\\t\\t\\t} else if ( updateRange.count === - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t// Not using update ranges\\r\\n\\r\\n\\t\\t\\t\\tgl.bufferSubData( bufferType, 0, array );\\r\\n\\r\\n\\t\\t\\t} else if ( updateRange.count === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\\r\\n\\t\\t\\t\\t\\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\\r\\n\\r\\n\\t\\t\\t\\tupdateRange.count = - 1; // reset range\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tfunction get( attribute ) {\\r\\n\\r\\n\\t\\t\\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\\r\\n\\r\\n\\t\\t\\treturn buffers[ attribute.uuid ];\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction remove( attribute ) {\\r\\n\\r\\n\\t\\t\\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\\r\\n\\r\\n\\t\\t\\tvar data = buffers[ attribute.uuid ];\\r\\n\\r\\n\\t\\t\\tif ( data ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.deleteBuffer( data.buffer );\\r\\n\\r\\n\\t\\t\\t\\tdelete buffers[ attribute.uuid ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction update( attribute, bufferType ) {\\r\\n\\r\\n\\t\\t\\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\\r\\n\\r\\n\\t\\t\\tvar data = buffers[ attribute.uuid ];\\r\\n\\r\\n\\t\\t\\tif ( data === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tbuffers[ attribute.uuid ] = createBuffer( attribute, bufferType );\\r\\n\\r\\n\\t\\t\\t} else if ( data.version < attribute.version ) {\\r\\n\\r\\n\\t\\t\\t\\tupdateBuffer( data.buffer, attribute, bufferType );\\r\\n\\r\\n\\t\\t\\t\\tdata.version = attribute.version;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tget: get,\\r\\n\\t\\t\\tremove: remove,\\r\\n\\t\\t\\tupdate: update\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t */\\r\\n\\r\\n\\tfunction Euler( x, y, z, order ) {\\r\\n\\r\\n\\t\\tthis._x = x || 0;\\r\\n\\t\\tthis._y = y || 0;\\r\\n\\t\\tthis._z = z || 0;\\r\\n\\t\\tthis._order = order || Euler.DefaultOrder;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\\r\\n\\r\\n\\tEuler.DefaultOrder = 'XYZ';\\r\\n\\r\\n\\tObject.defineProperties( Euler.prototype, {\\r\\n\\r\\n\\t\\tx: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this._x;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = value;\\r\\n\\t\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ty: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this._y;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._y = value;\\r\\n\\t\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tz: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this._z;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._z = value;\\r\\n\\t\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\torder: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this._order;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._order = value;\\r\\n\\t\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Euler.prototype, {\\r\\n\\r\\n\\t\\tisEuler: true,\\r\\n\\r\\n\\t\\tset: function ( x, y, z, order ) {\\r\\n\\r\\n\\t\\t\\tthis._x = x;\\r\\n\\t\\t\\tthis._y = y;\\r\\n\\t\\t\\tthis._z = z;\\r\\n\\t\\t\\tthis._order = order || this._order;\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this._x, this._y, this._z, this._order );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( euler ) {\\r\\n\\r\\n\\t\\t\\tthis._x = euler._x;\\r\\n\\t\\t\\tthis._y = euler._y;\\r\\n\\t\\t\\tthis._z = euler._z;\\r\\n\\t\\t\\tthis._order = euler._order;\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromRotationMatrix: function ( m, order, update ) {\\r\\n\\r\\n\\t\\t\\tvar clamp = _Math.clamp;\\r\\n\\r\\n\\t\\t\\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\\r\\n\\r\\n\\t\\t\\tvar te = m.elements;\\r\\n\\t\\t\\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\\r\\n\\t\\t\\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\\r\\n\\t\\t\\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\\r\\n\\r\\n\\t\\t\\torder = order || this._order;\\r\\n\\r\\n\\t\\t\\tif ( order === 'XYZ' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\\r\\n\\r\\n\\t\\t\\t\\tif ( Math.abs( m13 ) < 0.99999 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._x = Math.atan2( - m23, m33 );\\r\\n\\t\\t\\t\\t\\tthis._z = Math.atan2( - m12, m11 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._x = Math.atan2( m32, m22 );\\r\\n\\t\\t\\t\\t\\tthis._z = 0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'YXZ' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\\r\\n\\r\\n\\t\\t\\t\\tif ( Math.abs( m23 ) < 0.99999 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._y = Math.atan2( m13, m33 );\\r\\n\\t\\t\\t\\t\\tthis._z = Math.atan2( m21, m22 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._y = Math.atan2( - m31, m11 );\\r\\n\\t\\t\\t\\t\\tthis._z = 0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'ZXY' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\\r\\n\\r\\n\\t\\t\\t\\tif ( Math.abs( m32 ) < 0.99999 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._y = Math.atan2( - m31, m33 );\\r\\n\\t\\t\\t\\t\\tthis._z = Math.atan2( - m12, m22 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._y = 0;\\r\\n\\t\\t\\t\\t\\tthis._z = Math.atan2( m21, m11 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'ZYX' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\\r\\n\\r\\n\\t\\t\\t\\tif ( Math.abs( m31 ) < 0.99999 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._x = Math.atan2( m32, m33 );\\r\\n\\t\\t\\t\\t\\tthis._z = Math.atan2( m21, m11 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._x = 0;\\r\\n\\t\\t\\t\\t\\tthis._z = Math.atan2( - m12, m22 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'YZX' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\\r\\n\\r\\n\\t\\t\\t\\tif ( Math.abs( m21 ) < 0.99999 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._x = Math.atan2( - m23, m22 );\\r\\n\\t\\t\\t\\t\\tthis._y = Math.atan2( - m31, m11 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._x = 0;\\r\\n\\t\\t\\t\\t\\tthis._y = Math.atan2( m13, m33 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( order === 'XZY' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\\r\\n\\r\\n\\t\\t\\t\\tif ( Math.abs( m12 ) < 0.99999 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._x = Math.atan2( m32, m22 );\\r\\n\\t\\t\\t\\t\\tthis._y = Math.atan2( m13, m11 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._x = Math.atan2( - m23, m33 );\\r\\n\\t\\t\\t\\t\\tthis._y = 0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis._order = order;\\r\\n\\r\\n\\t\\t\\tif ( update !== false ) this.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromQuaternion: function () {\\r\\n\\r\\n\\t\\t\\tvar matrix = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function setFromQuaternion( q, order, update ) {\\r\\n\\r\\n\\t\\t\\t\\tmatrix.makeRotationFromQuaternion( q );\\r\\n\\r\\n\\t\\t\\t\\treturn this.setFromRotationMatrix( matrix, order, update );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tsetFromVector3: function ( v, order ) {\\r\\n\\r\\n\\t\\t\\treturn this.set( v.x, v.y, v.z, order || this._order );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\treorder: function () {\\r\\n\\r\\n\\t\\t\\t// WARNING: this discards revolution information -bhouston\\r\\n\\r\\n\\t\\t\\tvar q = new Quaternion();\\r\\n\\r\\n\\t\\t\\treturn function reorder( newOrder ) {\\r\\n\\r\\n\\t\\t\\t\\tq.setFromEuler( this );\\r\\n\\r\\n\\t\\t\\t\\treturn this.setFromQuaternion( q, newOrder );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tequals: function ( euler ) {\\r\\n\\r\\n\\t\\t\\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromArray: function ( array ) {\\r\\n\\r\\n\\t\\t\\tthis._x = array[ 0 ];\\r\\n\\t\\t\\tthis._y = array[ 1 ];\\r\\n\\t\\t\\tthis._z = array[ 2 ];\\r\\n\\t\\t\\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoArray: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( array === undefined ) array = [];\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tarray[ offset ] = this._x;\\r\\n\\t\\t\\tarray[ offset + 1 ] = this._y;\\r\\n\\t\\t\\tarray[ offset + 2 ] = this._z;\\r\\n\\t\\t\\tarray[ offset + 3 ] = this._order;\\r\\n\\r\\n\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoVector3: function ( optionalResult ) {\\r\\n\\r\\n\\t\\t\\tif ( optionalResult ) {\\r\\n\\r\\n\\t\\t\\t\\treturn optionalResult.set( this._x, this._y, this._z );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\treturn new Vector3( this._x, this._y, this._z );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tonChange: function ( callback ) {\\r\\n\\r\\n\\t\\t\\tthis.onChangeCallback = callback;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tonChangeCallback: function () {}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Layers() {\\r\\n\\r\\n\\t\\tthis.mask = 1 | 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Layers.prototype, {\\r\\n\\r\\n\\t\\tset: function ( channel ) {\\r\\n\\r\\n\\t\\t\\tthis.mask = 1 << channel | 0;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tenable: function ( channel ) {\\r\\n\\r\\n\\t\\t\\tthis.mask |= 1 << channel | 0;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoggle: function ( channel ) {\\r\\n\\r\\n\\t\\t\\tthis.mask ^= 1 << channel | 0;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdisable: function ( channel ) {\\r\\n\\r\\n\\t\\t\\tthis.mask &= ~ ( 1 << channel | 0 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttest: function ( layers ) {\\r\\n\\r\\n\\t\\t\\treturn ( this.mask & layers.mask ) !== 0;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t * @author elephantatwork / www.elephantatwork.ch\\r\\n\\t */\\r\\n\\r\\n\\tvar object3DId = 0;\\r\\n\\r\\n\\tfunction Object3D() {\\r\\n\\r\\n\\t\\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\tthis.name = '';\\r\\n\\t\\tthis.type = 'Object3D';\\r\\n\\r\\n\\t\\tthis.parent = null;\\r\\n\\t\\tthis.children = [];\\r\\n\\r\\n\\t\\tthis.up = Object3D.DefaultUp.clone();\\r\\n\\r\\n\\t\\tvar position = new Vector3();\\r\\n\\t\\tvar rotation = new Euler();\\r\\n\\t\\tvar quaternion = new Quaternion();\\r\\n\\t\\tvar scale = new Vector3( 1, 1, 1 );\\r\\n\\r\\n\\t\\tfunction onRotationChange() {\\r\\n\\r\\n\\t\\t\\tquaternion.setFromEuler( rotation, false );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction onQuaternionChange() {\\r\\n\\r\\n\\t\\t\\trotation.setFromQuaternion( quaternion, undefined, false );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trotation.onChange( onRotationChange );\\r\\n\\t\\tquaternion.onChange( onQuaternionChange );\\r\\n\\r\\n\\t\\tObject.defineProperties( this, {\\r\\n\\t\\t\\tposition: {\\r\\n\\t\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\t\\tvalue: position\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\trotation: {\\r\\n\\t\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\t\\tvalue: rotation\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tquaternion: {\\r\\n\\t\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\t\\tvalue: quaternion\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tscale: {\\r\\n\\t\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\t\\tvalue: scale\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tmodelViewMatrix: {\\r\\n\\t\\t\\t\\tvalue: new Matrix4()\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tnormalMatrix: {\\r\\n\\t\\t\\t\\tvalue: new Matrix3()\\r\\n\\t\\t\\t}\\r\\n\\t\\t} );\\r\\n\\r\\n\\t\\tthis.matrix = new Matrix4();\\r\\n\\t\\tthis.matrixWorld = new Matrix4();\\r\\n\\r\\n\\t\\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\\r\\n\\t\\tthis.matrixWorldNeedsUpdate = false;\\r\\n\\r\\n\\t\\tthis.layers = new Layers();\\r\\n\\t\\tthis.visible = true;\\r\\n\\r\\n\\t\\tthis.castShadow = false;\\r\\n\\t\\tthis.receiveShadow = false;\\r\\n\\r\\n\\t\\tthis.frustumCulled = true;\\r\\n\\t\\tthis.renderOrder = 0;\\r\\n\\r\\n\\t\\tthis.userData = {};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\\r\\n\\tObject3D.DefaultMatrixAutoUpdate = true;\\r\\n\\r\\n\\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Object3D,\\r\\n\\r\\n\\t\\tisObject3D: true,\\r\\n\\r\\n\\t\\tonBeforeRender: function () {},\\r\\n\\t\\tonAfterRender: function () {},\\r\\n\\r\\n\\t\\tapplyMatrix: function ( matrix ) {\\r\\n\\r\\n\\t\\t\\tthis.matrix.multiplyMatrices( matrix, this.matrix );\\r\\n\\r\\n\\t\\t\\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyQuaternion: function ( q ) {\\r\\n\\r\\n\\t\\t\\tthis.quaternion.premultiply( q );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetRotationFromAxisAngle: function ( axis, angle ) {\\r\\n\\r\\n\\t\\t\\t// assumes axis is normalized\\r\\n\\r\\n\\t\\t\\tthis.quaternion.setFromAxisAngle( axis, angle );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetRotationFromEuler: function ( euler ) {\\r\\n\\r\\n\\t\\t\\tthis.quaternion.setFromEuler( euler, true );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetRotationFromMatrix: function ( m ) {\\r\\n\\r\\n\\t\\t\\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\\r\\n\\r\\n\\t\\t\\tthis.quaternion.setFromRotationMatrix( m );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetRotationFromQuaternion: function ( q ) {\\r\\n\\r\\n\\t\\t\\t// assumes q is normalized\\r\\n\\r\\n\\t\\t\\tthis.quaternion.copy( q );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\trotateOnAxis: function () {\\r\\n\\r\\n\\t\\t\\t// rotate object on axis in object space\\r\\n\\t\\t\\t// axis is assumed to be normalized\\r\\n\\r\\n\\t\\t\\tvar q1 = new Quaternion();\\r\\n\\r\\n\\t\\t\\treturn function rotateOnAxis( axis, angle ) {\\r\\n\\r\\n\\t\\t\\t\\tq1.setFromAxisAngle( axis, angle );\\r\\n\\r\\n\\t\\t\\t\\tthis.quaternion.multiply( q1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\trotateOnWorldAxis: function () {\\r\\n\\r\\n\\t\\t\\t// rotate object on axis in world space\\r\\n\\t\\t\\t// axis is assumed to be normalized\\r\\n\\t\\t\\t// method assumes no rotated parent\\r\\n\\r\\n\\t\\t\\tvar q1 = new Quaternion();\\r\\n\\r\\n\\t\\t\\treturn function rotateOnWorldAxis( axis, angle ) {\\r\\n\\r\\n\\t\\t\\t\\tq1.setFromAxisAngle( axis, angle );\\r\\n\\r\\n\\t\\t\\t\\tthis.quaternion.premultiply( q1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\trotateX: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3( 1, 0, 0 );\\r\\n\\r\\n\\t\\t\\treturn function rotateX( angle ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.rotateOnAxis( v1, angle );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\trotateY: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3( 0, 1, 0 );\\r\\n\\r\\n\\t\\t\\treturn function rotateY( angle ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.rotateOnAxis( v1, angle );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\trotateZ: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3( 0, 0, 1 );\\r\\n\\r\\n\\t\\t\\treturn function rotateZ( angle ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.rotateOnAxis( v1, angle );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttranslateOnAxis: function () {\\r\\n\\r\\n\\t\\t\\t// translate object by distance along axis in object space\\r\\n\\t\\t\\t// axis is assumed to be normalized\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function translateOnAxis( axis, distance ) {\\r\\n\\r\\n\\t\\t\\t\\tv1.copy( axis ).applyQuaternion( this.quaternion );\\r\\n\\r\\n\\t\\t\\t\\tthis.position.add( v1.multiplyScalar( distance ) );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttranslateX: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3( 1, 0, 0 );\\r\\n\\r\\n\\t\\t\\treturn function translateX( distance ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.translateOnAxis( v1, distance );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttranslateY: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3( 0, 1, 0 );\\r\\n\\r\\n\\t\\t\\treturn function translateY( distance ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.translateOnAxis( v1, distance );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttranslateZ: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3( 0, 0, 1 );\\r\\n\\r\\n\\t\\t\\treturn function translateZ( distance ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.translateOnAxis( v1, distance );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tlocalToWorld: function ( vector ) {\\r\\n\\r\\n\\t\\t\\treturn vector.applyMatrix4( this.matrixWorld );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tworldToLocal: function () {\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function worldToLocal( vector ) {\\r\\n\\r\\n\\t\\t\\t\\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tlookAt: function () {\\r\\n\\r\\n\\t\\t\\t// This method does not support objects with rotated and/or translated parent(s)\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\t\\t\\tvar vector = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function lookAt( x, y, z ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( x.isVector3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvector.copy( x );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tvector.set( x, y, z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( this.isCamera ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tm1.lookAt( this.position, vector, this.up );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tm1.lookAt( vector, this.position, this.up );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.quaternion.setFromRotationMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tadd: function ( object ) {\\r\\n\\r\\n\\t\\t\\tif ( arguments.length > 1 ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < arguments.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.add( arguments[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( object === this ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( \\\"THREE.Object3D.add: object can't be added as a child of itself.\\\", object );\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( ( object && object.isObject3D ) ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( object.parent !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tobject.parent.remove( object );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tobject.parent = this;\\r\\n\\t\\t\\t\\tobject.dispatchEvent( { type: 'added' } );\\r\\n\\r\\n\\t\\t\\t\\tthis.children.push( object );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( \\\"THREE.Object3D.add: object not an instance of THREE.Object3D.\\\", object );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tremove: function ( object ) {\\r\\n\\r\\n\\t\\t\\tif ( arguments.length > 1 ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < arguments.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.remove( arguments[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar index = this.children.indexOf( object );\\r\\n\\r\\n\\t\\t\\tif ( index !== - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\tobject.parent = null;\\r\\n\\r\\n\\t\\t\\t\\tobject.dispatchEvent( { type: 'removed' } );\\r\\n\\r\\n\\t\\t\\t\\tthis.children.splice( index, 1 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetObjectById: function ( id ) {\\r\\n\\r\\n\\t\\t\\treturn this.getObjectByProperty( 'id', id );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetObjectByName: function ( name ) {\\r\\n\\r\\n\\t\\t\\treturn this.getObjectByProperty( 'name', name );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetObjectByProperty: function ( name, value ) {\\r\\n\\r\\n\\t\\t\\tif ( this[ name ] === value ) return this;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar child = this.children[ i ];\\r\\n\\t\\t\\t\\tvar object = child.getObjectByProperty( name, value );\\r\\n\\r\\n\\t\\t\\t\\tif ( object !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn object;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn undefined;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetWorldPosition: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\tthis.updateMatrixWorld( true );\\r\\n\\r\\n\\t\\t\\treturn result.setFromMatrixPosition( this.matrixWorld );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetWorldQuaternion: function () {\\r\\n\\r\\n\\t\\t\\tvar position = new Vector3();\\r\\n\\t\\t\\tvar scale = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function getWorldQuaternion( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Quaternion();\\r\\n\\r\\n\\t\\t\\t\\tthis.updateMatrixWorld( true );\\r\\n\\r\\n\\t\\t\\t\\tthis.matrixWorld.decompose( position, result, scale );\\r\\n\\r\\n\\t\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tgetWorldRotation: function () {\\r\\n\\r\\n\\t\\t\\tvar quaternion = new Quaternion();\\r\\n\\r\\n\\t\\t\\treturn function getWorldRotation( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Euler();\\r\\n\\r\\n\\t\\t\\t\\tthis.getWorldQuaternion( quaternion );\\r\\n\\r\\n\\t\\t\\t\\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tgetWorldScale: function () {\\r\\n\\r\\n\\t\\t\\tvar position = new Vector3();\\r\\n\\t\\t\\tvar quaternion = new Quaternion();\\r\\n\\r\\n\\t\\t\\treturn function getWorldScale( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\t\\tthis.updateMatrixWorld( true );\\r\\n\\r\\n\\t\\t\\t\\tthis.matrixWorld.decompose( position, quaternion, result );\\r\\n\\r\\n\\t\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tgetWorldDirection: function () {\\r\\n\\r\\n\\t\\t\\tvar quaternion = new Quaternion();\\r\\n\\r\\n\\t\\t\\treturn function getWorldDirection( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\t\\tthis.getWorldQuaternion( quaternion );\\r\\n\\r\\n\\t\\t\\t\\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\traycast: function () {},\\r\\n\\r\\n\\t\\ttraverse: function ( callback ) {\\r\\n\\r\\n\\t\\t\\tcallback( this );\\r\\n\\r\\n\\t\\t\\tvar children = this.children;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tchildren[ i ].traverse( callback );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttraverseVisible: function ( callback ) {\\r\\n\\r\\n\\t\\t\\tif ( this.visible === false ) return;\\r\\n\\r\\n\\t\\t\\tcallback( this );\\r\\n\\r\\n\\t\\t\\tvar children = this.children;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tchildren[ i ].traverseVisible( callback );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttraverseAncestors: function ( callback ) {\\r\\n\\r\\n\\t\\t\\tvar parent = this.parent;\\r\\n\\r\\n\\t\\t\\tif ( parent !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tcallback( parent );\\r\\n\\r\\n\\t\\t\\t\\tparent.traverseAncestors( callback );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateMatrix: function () {\\r\\n\\r\\n\\t\\t\\tthis.matrix.compose( this.position, this.quaternion, this.scale );\\r\\n\\r\\n\\t\\t\\tthis.matrixWorldNeedsUpdate = true;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateMatrixWorld: function ( force ) {\\r\\n\\r\\n\\t\\t\\tif ( this.matrixAutoUpdate ) this.updateMatrix();\\r\\n\\r\\n\\t\\t\\tif ( this.matrixWorldNeedsUpdate || force ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( this.parent === null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.matrixWorld.copy( this.matrix );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.matrixWorldNeedsUpdate = false;\\r\\n\\r\\n\\t\\t\\t\\tforce = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// update children\\r\\n\\r\\n\\t\\t\\tvar children = this.children;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tchildren[ i ].updateMatrixWorld( force );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( meta ) {\\r\\n\\r\\n\\t\\t\\t// meta is a string when called from JSON.stringify\\r\\n\\t\\t\\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\\r\\n\\r\\n\\t\\t\\tvar output = {};\\r\\n\\r\\n\\t\\t\\t// meta is a hash used to collect geometries, materials.\\r\\n\\t\\t\\t// not providing it implies that this is the root object\\r\\n\\t\\t\\t// being serialized.\\r\\n\\t\\t\\tif ( isRootObject ) {\\r\\n\\r\\n\\t\\t\\t\\t// initialize meta obj\\r\\n\\t\\t\\t\\tmeta = {\\r\\n\\t\\t\\t\\t\\tgeometries: {},\\r\\n\\t\\t\\t\\t\\tmaterials: {},\\r\\n\\t\\t\\t\\t\\ttextures: {},\\r\\n\\t\\t\\t\\t\\timages: {},\\r\\n\\t\\t\\t\\t\\tshapes: {}\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\toutput.metadata = {\\r\\n\\t\\t\\t\\t\\tversion: 4.5,\\r\\n\\t\\t\\t\\t\\ttype: 'Object',\\r\\n\\t\\t\\t\\t\\tgenerator: 'Object3D.toJSON'\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// standard Object3D serialization\\r\\n\\r\\n\\t\\t\\tvar object = {};\\r\\n\\r\\n\\t\\t\\tobject.uuid = this.uuid;\\r\\n\\t\\t\\tobject.type = this.type;\\r\\n\\r\\n\\t\\t\\tif ( this.name !== '' ) object.name = this.name;\\r\\n\\t\\t\\tif ( this.castShadow === true ) object.castShadow = true;\\r\\n\\t\\t\\tif ( this.receiveShadow === true ) object.receiveShadow = true;\\r\\n\\t\\t\\tif ( this.visible === false ) object.visible = false;\\r\\n\\t\\t\\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\\r\\n\\r\\n\\t\\t\\tobject.matrix = this.matrix.toArray();\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tfunction serialize( library, element ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( library[ element.uuid ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tlibrary[ element.uuid ] = element.toJSON( meta );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn element.uuid;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.geometry !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tobject.geometry = serialize( meta.geometries, this.geometry );\\r\\n\\r\\n\\t\\t\\t\\tvar parameters = this.geometry.parameters;\\r\\n\\r\\n\\t\\t\\t\\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar shapes = parameters.shapes;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( Array.isArray( shapes ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar shape = shapes[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tserialize( meta.shapes, shape );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tserialize( meta.shapes, shapes );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.material !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( Array.isArray( this.material ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar uuids = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tobject.material = uuids;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tobject.material = serialize( meta.materials, this.material );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tif ( this.children.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tobject.children = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < this.children.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tobject.children.push( this.children[ i ].toJSON( meta ).object );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( isRootObject ) {\\r\\n\\r\\n\\t\\t\\t\\tvar geometries = extractFromCache( meta.geometries );\\r\\n\\t\\t\\t\\tvar materials = extractFromCache( meta.materials );\\r\\n\\t\\t\\t\\tvar textures = extractFromCache( meta.textures );\\r\\n\\t\\t\\t\\tvar images = extractFromCache( meta.images );\\r\\n\\t\\t\\t\\tvar shapes = extractFromCache( meta.shapes );\\r\\n\\r\\n\\t\\t\\t\\tif ( geometries.length > 0 ) output.geometries = geometries;\\r\\n\\t\\t\\t\\tif ( materials.length > 0 ) output.materials = materials;\\r\\n\\t\\t\\t\\tif ( textures.length > 0 ) output.textures = textures;\\r\\n\\t\\t\\t\\tif ( images.length > 0 ) output.images = images;\\r\\n\\t\\t\\t\\tif ( shapes.length > 0 ) output.shapes = shapes;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\toutput.object = object;\\r\\n\\r\\n\\t\\t\\treturn output;\\r\\n\\r\\n\\t\\t\\t// extract data from the cache hash\\r\\n\\t\\t\\t// remove metadata on each item\\r\\n\\t\\t\\t// and return as array\\r\\n\\t\\t\\tfunction extractFromCache( cache ) {\\r\\n\\r\\n\\t\\t\\t\\tvar values = [];\\r\\n\\t\\t\\t\\tfor ( var key in cache ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar data = cache[ key ];\\r\\n\\t\\t\\t\\t\\tdelete data.metadata;\\r\\n\\t\\t\\t\\t\\tvalues.push( data );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\treturn values;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function ( recursive ) {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this, recursive );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source, recursive ) {\\r\\n\\r\\n\\t\\t\\tif ( recursive === undefined ) recursive = true;\\r\\n\\r\\n\\t\\t\\tthis.name = source.name;\\r\\n\\r\\n\\t\\t\\tthis.up.copy( source.up );\\r\\n\\r\\n\\t\\t\\tthis.position.copy( source.position );\\r\\n\\t\\t\\tthis.quaternion.copy( source.quaternion );\\r\\n\\t\\t\\tthis.scale.copy( source.scale );\\r\\n\\r\\n\\t\\t\\tthis.matrix.copy( source.matrix );\\r\\n\\t\\t\\tthis.matrixWorld.copy( source.matrixWorld );\\r\\n\\r\\n\\t\\t\\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\\r\\n\\t\\t\\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\\r\\n\\r\\n\\t\\t\\tthis.layers.mask = source.layers.mask;\\r\\n\\t\\t\\tthis.visible = source.visible;\\r\\n\\r\\n\\t\\t\\tthis.castShadow = source.castShadow;\\r\\n\\t\\t\\tthis.receiveShadow = source.receiveShadow;\\r\\n\\r\\n\\t\\t\\tthis.frustumCulled = source.frustumCulled;\\r\\n\\t\\t\\tthis.renderOrder = source.renderOrder;\\r\\n\\r\\n\\t\\t\\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\\r\\n\\r\\n\\t\\t\\tif ( recursive === true ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < source.children.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar child = source.children[ i ];\\r\\n\\t\\t\\t\\t\\tthis.add( child.clone() );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t*/\\r\\n\\r\\n\\tfunction Camera() {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Camera';\\r\\n\\r\\n\\t\\tthis.matrixWorldInverse = new Matrix4();\\r\\n\\t\\tthis.projectionMatrix = new Matrix4();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Camera,\\r\\n\\r\\n\\t\\tisCamera: true,\\r\\n\\r\\n\\t\\tcopy: function ( source, recursive ) {\\r\\n\\r\\n\\t\\t\\tObject3D.prototype.copy.call( this, source, recursive );\\r\\n\\r\\n\\t\\t\\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\\r\\n\\t\\t\\tthis.projectionMatrix.copy( source.projectionMatrix );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetWorldDirection: function () {\\r\\n\\r\\n\\t\\t\\tvar quaternion = new Quaternion();\\r\\n\\r\\n\\t\\t\\treturn function getWorldDirection( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\t\\tthis.getWorldQuaternion( quaternion );\\r\\n\\r\\n\\t\\t\\t\\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tupdateMatrixWorld: function ( force ) {\\r\\n\\r\\n\\t\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\r\\n\\r\\n\\t\\t\\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author arose / http://github.com/arose\\r\\n\\t */\\r\\n\\r\\n\\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\\r\\n\\r\\n\\t\\tCamera.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'OrthographicCamera';\\r\\n\\r\\n\\t\\tthis.zoom = 1;\\r\\n\\t\\tthis.view = null;\\r\\n\\r\\n\\t\\tthis.left = left;\\r\\n\\t\\tthis.right = right;\\r\\n\\t\\tthis.top = top;\\r\\n\\t\\tthis.bottom = bottom;\\r\\n\\r\\n\\t\\tthis.near = ( near !== undefined ) ? near : 0.1;\\r\\n\\t\\tthis.far = ( far !== undefined ) ? far : 2000;\\r\\n\\r\\n\\t\\tthis.updateProjectionMatrix();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: OrthographicCamera,\\r\\n\\r\\n\\t\\tisOrthographicCamera: true,\\r\\n\\r\\n\\t\\tcopy: function ( source, recursive ) {\\r\\n\\r\\n\\t\\t\\tCamera.prototype.copy.call( this, source, recursive );\\r\\n\\r\\n\\t\\t\\tthis.left = source.left;\\r\\n\\t\\t\\tthis.right = source.right;\\r\\n\\t\\t\\tthis.top = source.top;\\r\\n\\t\\t\\tthis.bottom = source.bottom;\\r\\n\\t\\t\\tthis.near = source.near;\\r\\n\\t\\t\\tthis.far = source.far;\\r\\n\\r\\n\\t\\t\\tthis.zoom = source.zoom;\\r\\n\\t\\t\\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\\r\\n\\r\\n\\t\\t\\tif ( this.view === null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.view = {\\r\\n\\t\\t\\t\\t\\tenabled: true,\\r\\n\\t\\t\\t\\t\\tfullWidth: 1,\\r\\n\\t\\t\\t\\t\\tfullHeight: 1,\\r\\n\\t\\t\\t\\t\\toffsetX: 0,\\r\\n\\t\\t\\t\\t\\toffsetY: 0,\\r\\n\\t\\t\\t\\t\\twidth: 1,\\r\\n\\t\\t\\t\\t\\theight: 1\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.view.enabled = true;\\r\\n\\t\\t\\tthis.view.fullWidth = fullWidth;\\r\\n\\t\\t\\tthis.view.fullHeight = fullHeight;\\r\\n\\t\\t\\tthis.view.offsetX = x;\\r\\n\\t\\t\\tthis.view.offsetY = y;\\r\\n\\t\\t\\tthis.view.width = width;\\r\\n\\t\\t\\tthis.view.height = height;\\r\\n\\r\\n\\t\\t\\tthis.updateProjectionMatrix();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclearViewOffset: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.view !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.view.enabled = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.updateProjectionMatrix();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateProjectionMatrix: function () {\\r\\n\\r\\n\\t\\t\\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\\r\\n\\t\\t\\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\\r\\n\\t\\t\\tvar cx = ( this.right + this.left ) / 2;\\r\\n\\t\\t\\tvar cy = ( this.top + this.bottom ) / 2;\\r\\n\\r\\n\\t\\t\\tvar left = cx - dx;\\r\\n\\t\\t\\tvar right = cx + dx;\\r\\n\\t\\t\\tvar top = cy + dy;\\r\\n\\t\\t\\tvar bottom = cy - dy;\\r\\n\\r\\n\\t\\t\\tif ( this.view !== null && this.view.enabled ) {\\r\\n\\r\\n\\t\\t\\t\\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\\r\\n\\t\\t\\t\\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\\r\\n\\t\\t\\t\\tvar scaleW = ( this.right - this.left ) / this.view.width;\\r\\n\\t\\t\\t\\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\\r\\n\\r\\n\\t\\t\\t\\tleft += scaleW * ( this.view.offsetX / zoomW );\\r\\n\\t\\t\\t\\tright = left + scaleW * ( this.view.width / zoomW );\\r\\n\\t\\t\\t\\ttop -= scaleH * ( this.view.offsetY / zoomH );\\r\\n\\t\\t\\t\\tbottom = top - scaleH * ( this.view.height / zoomH );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( meta ) {\\r\\n\\r\\n\\t\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\r\\n\\r\\n\\t\\t\\tdata.object.zoom = this.zoom;\\r\\n\\t\\t\\tdata.object.left = this.left;\\r\\n\\t\\t\\tdata.object.right = this.right;\\r\\n\\t\\t\\tdata.object.top = this.top;\\r\\n\\t\\t\\tdata.object.bottom = this.bottom;\\r\\n\\t\\t\\tdata.object.near = this.near;\\r\\n\\t\\t\\tdata.object.far = this.far;\\r\\n\\r\\n\\t\\t\\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Face3( a, b, c, normal, color, materialIndex ) {\\r\\n\\r\\n\\t\\tthis.a = a;\\r\\n\\t\\tthis.b = b;\\r\\n\\t\\tthis.c = c;\\r\\n\\r\\n\\t\\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\\r\\n\\t\\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\\r\\n\\r\\n\\t\\tthis.color = ( color && color.isColor ) ? color : new Color();\\r\\n\\t\\tthis.vertexColors = Array.isArray( color ) ? color : [];\\r\\n\\r\\n\\t\\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Face3.prototype, {\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tthis.a = source.a;\\r\\n\\t\\t\\tthis.b = source.b;\\r\\n\\t\\t\\tthis.c = source.c;\\r\\n\\r\\n\\t\\t\\tthis.normal.copy( source.normal );\\r\\n\\t\\t\\tthis.color.copy( source.color );\\r\\n\\r\\n\\t\\t\\tthis.materialIndex = source.materialIndex;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author kile / http://kile.stravaganza.org/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t */\\r\\n\\r\\n\\tvar geometryId = 0; // Geometry uses even numbers as Id\\r\\n\\r\\n\\tfunction Geometry() {\\r\\n\\r\\n\\t\\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\tthis.name = '';\\r\\n\\t\\tthis.type = 'Geometry';\\r\\n\\r\\n\\t\\tthis.vertices = [];\\r\\n\\t\\tthis.colors = [];\\r\\n\\t\\tthis.faces = [];\\r\\n\\t\\tthis.faceVertexUvs = [[]];\\r\\n\\r\\n\\t\\tthis.morphTargets = [];\\r\\n\\t\\tthis.morphNormals = [];\\r\\n\\r\\n\\t\\tthis.skinWeights = [];\\r\\n\\t\\tthis.skinIndices = [];\\r\\n\\r\\n\\t\\tthis.lineDistances = [];\\r\\n\\r\\n\\t\\tthis.boundingBox = null;\\r\\n\\t\\tthis.boundingSphere = null;\\r\\n\\r\\n\\t\\t// update flags\\r\\n\\r\\n\\t\\tthis.elementsNeedUpdate = false;\\r\\n\\t\\tthis.verticesNeedUpdate = false;\\r\\n\\t\\tthis.uvsNeedUpdate = false;\\r\\n\\t\\tthis.normalsNeedUpdate = false;\\r\\n\\t\\tthis.colorsNeedUpdate = false;\\r\\n\\t\\tthis.lineDistancesNeedUpdate = false;\\r\\n\\t\\tthis.groupsNeedUpdate = false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Geometry,\\r\\n\\r\\n\\t\\tisGeometry: true,\\r\\n\\r\\n\\t\\tapplyMatrix: function ( matrix ) {\\r\\n\\r\\n\\t\\t\\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vertex = this.vertices[ i ];\\r\\n\\t\\t\\t\\tvertex.applyMatrix4( matrix );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar face = this.faces[ i ];\\r\\n\\t\\t\\t\\tface.normal.applyMatrix3( normalMatrix ).normalize();\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.boundingBox !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.computeBoundingBox();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.boundingSphere !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.computeBoundingSphere();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.verticesNeedUpdate = true;\\r\\n\\t\\t\\tthis.normalsNeedUpdate = true;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\trotateX: function () {\\r\\n\\r\\n\\t\\t\\t// rotate geometry around world x-axis\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function rotateX( angle ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeRotationX( angle );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\trotateY: function () {\\r\\n\\r\\n\\t\\t\\t// rotate geometry around world y-axis\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function rotateY( angle ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeRotationY( angle );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\trotateZ: function () {\\r\\n\\r\\n\\t\\t\\t// rotate geometry around world z-axis\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function rotateZ( angle ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeRotationZ( angle );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttranslate: function () {\\r\\n\\r\\n\\t\\t\\t// translate geometry\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function translate( x, y, z ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeTranslation( x, y, z );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tscale: function () {\\r\\n\\r\\n\\t\\t\\t// scale geometry\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function scale( x, y, z ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeScale( x, y, z );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tlookAt: function () {\\r\\n\\r\\n\\t\\t\\tvar obj = new Object3D();\\r\\n\\r\\n\\t\\t\\treturn function lookAt( vector ) {\\r\\n\\r\\n\\t\\t\\t\\tobj.lookAt( vector );\\r\\n\\r\\n\\t\\t\\t\\tobj.updateMatrix();\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( obj.matrix );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tfromBufferGeometry: function ( geometry ) {\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\\r\\n\\t\\t\\tvar attributes = geometry.attributes;\\r\\n\\r\\n\\t\\t\\tvar positions = attributes.position.array;\\r\\n\\t\\t\\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\\r\\n\\t\\t\\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\\r\\n\\t\\t\\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\\r\\n\\t\\t\\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\\r\\n\\r\\n\\t\\t\\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\\r\\n\\r\\n\\t\\t\\tvar tempNormals = [];\\r\\n\\t\\t\\tvar tempUVs = [];\\r\\n\\t\\t\\tvar tempUVs2 = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\\r\\n\\r\\n\\t\\t\\t\\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\\r\\n\\r\\n\\t\\t\\t\\tif ( normals !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( colors !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( uvs !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( uvs2 !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction addFace( a, b, c, materialIndex ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\\r\\n\\t\\t\\t\\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\\r\\n\\r\\n\\t\\t\\t\\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\\r\\n\\r\\n\\t\\t\\t\\tscope.faces.push( face );\\r\\n\\r\\n\\t\\t\\t\\tif ( uvs !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( uvs2 !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar groups = geometry.groups;\\r\\n\\r\\n\\t\\t\\tif ( groups.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < groups.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar group = groups[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tvar start = group.start;\\r\\n\\t\\t\\t\\t\\tvar count = group.count;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( indices !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\taddFace( j, j + 1, j + 2, group.materialIndex );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tif ( indices !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < indices.length; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\taddFace( i, i + 1, i + 2 );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.computeFaceNormals();\\r\\n\\r\\n\\t\\t\\tif ( geometry.boundingBox !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingBox = geometry.boundingBox.clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.boundingSphere !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingSphere = geometry.boundingSphere.clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcenter: function () {\\r\\n\\r\\n\\t\\t\\tthis.computeBoundingBox();\\r\\n\\r\\n\\t\\t\\tvar offset = this.boundingBox.getCenter().negate();\\r\\n\\r\\n\\t\\t\\tthis.translate( offset.x, offset.y, offset.z );\\r\\n\\r\\n\\t\\t\\treturn offset;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormalize: function () {\\r\\n\\r\\n\\t\\t\\tthis.computeBoundingSphere();\\r\\n\\r\\n\\t\\t\\tvar center = this.boundingSphere.center;\\r\\n\\t\\t\\tvar radius = this.boundingSphere.radius;\\r\\n\\r\\n\\t\\t\\tvar s = radius === 0 ? 1 : 1.0 / radius;\\r\\n\\r\\n\\t\\t\\tvar matrix = new Matrix4();\\r\\n\\t\\t\\tmatrix.set(\\r\\n\\t\\t\\t\\ts, 0, 0, - s * center.x,\\r\\n\\t\\t\\t\\t0, s, 0, - s * center.y,\\r\\n\\t\\t\\t\\t0, 0, s, - s * center.z,\\r\\n\\t\\t\\t\\t0, 0, 0, 1\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tthis.applyMatrix( matrix );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeFaceNormals: function () {\\r\\n\\r\\n\\t\\t\\tvar cb = new Vector3(), ab = new Vector3();\\r\\n\\r\\n\\t\\t\\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar face = this.faces[ f ];\\r\\n\\r\\n\\t\\t\\t\\tvar vA = this.vertices[ face.a ];\\r\\n\\t\\t\\t\\tvar vB = this.vertices[ face.b ];\\r\\n\\t\\t\\t\\tvar vC = this.vertices[ face.c ];\\r\\n\\r\\n\\t\\t\\t\\tcb.subVectors( vC, vB );\\r\\n\\t\\t\\t\\tab.subVectors( vA, vB );\\r\\n\\t\\t\\t\\tcb.cross( ab );\\r\\n\\r\\n\\t\\t\\t\\tcb.normalize();\\r\\n\\r\\n\\t\\t\\t\\tface.normal.copy( cb );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeVertexNormals: function ( areaWeighted ) {\\r\\n\\r\\n\\t\\t\\tif ( areaWeighted === undefined ) areaWeighted = true;\\r\\n\\r\\n\\t\\t\\tvar v, vl, f, fl, face, vertices;\\r\\n\\r\\n\\t\\t\\tvertices = new Array( this.vertices.length );\\r\\n\\r\\n\\t\\t\\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvertices[ v ] = new Vector3();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( areaWeighted ) {\\r\\n\\r\\n\\t\\t\\t\\t// vertex normals weighted by triangle areas\\r\\n\\t\\t\\t\\t// http://www.iquilezles.org/www/articles/normals/normals.htm\\r\\n\\r\\n\\t\\t\\t\\tvar vA, vB, vC;\\r\\n\\t\\t\\t\\tvar cb = new Vector3(), ab = new Vector3();\\r\\n\\r\\n\\t\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tface = this.faces[ f ];\\r\\n\\r\\n\\t\\t\\t\\t\\tvA = this.vertices[ face.a ];\\r\\n\\t\\t\\t\\t\\tvB = this.vertices[ face.b ];\\r\\n\\t\\t\\t\\t\\tvC = this.vertices[ face.c ];\\r\\n\\r\\n\\t\\t\\t\\t\\tcb.subVectors( vC, vB );\\r\\n\\t\\t\\t\\t\\tab.subVectors( vA, vB );\\r\\n\\t\\t\\t\\t\\tcb.cross( ab );\\r\\n\\r\\n\\t\\t\\t\\t\\tvertices[ face.a ].add( cb );\\r\\n\\t\\t\\t\\t\\tvertices[ face.b ].add( cb );\\r\\n\\t\\t\\t\\t\\tvertices[ face.c ].add( cb );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.computeFaceNormals();\\r\\n\\r\\n\\t\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tface = this.faces[ f ];\\r\\n\\r\\n\\t\\t\\t\\t\\tvertices[ face.a ].add( face.normal );\\r\\n\\t\\t\\t\\t\\tvertices[ face.b ].add( face.normal );\\r\\n\\t\\t\\t\\t\\tvertices[ face.c ].add( face.normal );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvertices[ v ].normalize();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tface = this.faces[ f ];\\r\\n\\r\\n\\t\\t\\t\\tvar vertexNormals = face.vertexNormals;\\r\\n\\r\\n\\t\\t\\t\\tif ( vertexNormals.length === 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.faces.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.normalsNeedUpdate = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeFlatVertexNormals: function () {\\r\\n\\r\\n\\t\\t\\tvar f, fl, face;\\r\\n\\r\\n\\t\\t\\tthis.computeFaceNormals();\\r\\n\\r\\n\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tface = this.faces[ f ];\\r\\n\\r\\n\\t\\t\\t\\tvar vertexNormals = face.vertexNormals;\\r\\n\\r\\n\\t\\t\\t\\tif ( vertexNormals.length === 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 0 ].copy( face.normal );\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 1 ].copy( face.normal );\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 2 ].copy( face.normal );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 0 ] = face.normal.clone();\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 1 ] = face.normal.clone();\\r\\n\\t\\t\\t\\t\\tvertexNormals[ 2 ] = face.normal.clone();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.faces.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.normalsNeedUpdate = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeMorphNormals: function () {\\r\\n\\r\\n\\t\\t\\tvar i, il, f, fl, face;\\r\\n\\r\\n\\t\\t\\t// save original normals\\r\\n\\t\\t\\t// - create temp variables on first access\\r\\n\\t\\t\\t//   otherwise just copy (for faster repeated calls)\\r\\n\\r\\n\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tface = this.faces[ f ];\\r\\n\\r\\n\\t\\t\\t\\tif ( ! face.__originalFaceNormal ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tface.__originalFaceNormal = face.normal.clone();\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tface.__originalFaceNormal.copy( face.normal );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ! face.__originalVertexNormals[ i ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// use temp geometry to compute face and vertex normals for each morph\\r\\n\\r\\n\\t\\t\\tvar tmpGeo = new Geometry();\\r\\n\\t\\t\\ttmpGeo.faces = this.faces;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t// create on first access\\r\\n\\r\\n\\t\\t\\t\\tif ( ! this.morphNormals[ i ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.morphNormals[ i ] = {};\\r\\n\\t\\t\\t\\t\\tthis.morphNormals[ i ].faceNormals = [];\\r\\n\\t\\t\\t\\t\\tthis.morphNormals[ i ].vertexNormals = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\\r\\n\\t\\t\\t\\t\\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\\r\\n\\r\\n\\t\\t\\t\\t\\tvar faceNormal, vertexNormals;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfaceNormal = new Vector3();\\r\\n\\t\\t\\t\\t\\t\\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdstNormalsFace.push( faceNormal );\\r\\n\\t\\t\\t\\t\\t\\tdstNormalsVertex.push( vertexNormals );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar morphNormals = this.morphNormals[ i ];\\r\\n\\r\\n\\t\\t\\t\\t// set vertices to morph target\\r\\n\\r\\n\\t\\t\\t\\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\\r\\n\\r\\n\\t\\t\\t\\t// compute morph normals\\r\\n\\r\\n\\t\\t\\t\\ttmpGeo.computeFaceNormals();\\r\\n\\t\\t\\t\\ttmpGeo.computeVertexNormals();\\r\\n\\r\\n\\t\\t\\t\\t// store morph normals\\r\\n\\r\\n\\t\\t\\t\\tvar faceNormal, vertexNormals;\\r\\n\\r\\n\\t\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tface = this.faces[ f ];\\r\\n\\r\\n\\t\\t\\t\\t\\tfaceNormal = morphNormals.faceNormals[ f ];\\r\\n\\t\\t\\t\\t\\tvertexNormals = morphNormals.vertexNormals[ f ];\\r\\n\\r\\n\\t\\t\\t\\t\\tfaceNormal.copy( face.normal );\\r\\n\\r\\n\\t\\t\\t\\t\\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\\r\\n\\t\\t\\t\\t\\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\\r\\n\\t\\t\\t\\t\\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// restore original normals\\r\\n\\r\\n\\t\\t\\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tface = this.faces[ f ];\\r\\n\\r\\n\\t\\t\\t\\tface.normal = face.__originalFaceNormal;\\r\\n\\t\\t\\t\\tface.vertexNormals = face.__originalVertexNormals;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeLineDistances: function () {\\r\\n\\r\\n\\t\\t\\tvar d = 0;\\r\\n\\t\\t\\tvar vertices = this.vertices;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( i > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.lineDistances[ i ] = d;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeBoundingBox: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.boundingBox === null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingBox = new Box3();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.boundingBox.setFromPoints( this.vertices );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeBoundingSphere: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.boundingSphere === null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingSphere = new Sphere();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.boundingSphere.setFromPoints( this.vertices );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmerge: function ( geometry, matrix, materialIndexOffset ) {\\r\\n\\r\\n\\t\\t\\tif ( ! ( geometry && geometry.isGeometry ) ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar normalMatrix,\\r\\n\\t\\t\\t\\tvertexOffset = this.vertices.length,\\r\\n\\t\\t\\t\\tvertices1 = this.vertices,\\r\\n\\t\\t\\t\\tvertices2 = geometry.vertices,\\r\\n\\t\\t\\t\\tfaces1 = this.faces,\\r\\n\\t\\t\\t\\tfaces2 = geometry.faces,\\r\\n\\t\\t\\t\\tuvs1 = this.faceVertexUvs[ 0 ],\\r\\n\\t\\t\\t\\tuvs2 = geometry.faceVertexUvs[ 0 ],\\r\\n\\t\\t\\t\\tcolors1 = this.colors,\\r\\n\\t\\t\\t\\tcolors2 = geometry.colors;\\r\\n\\r\\n\\t\\t\\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\\r\\n\\r\\n\\t\\t\\tif ( matrix !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// vertices\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vertex = vertices2[ i ];\\r\\n\\r\\n\\t\\t\\t\\tvar vertexCopy = vertex.clone();\\r\\n\\r\\n\\t\\t\\t\\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\\r\\n\\r\\n\\t\\t\\t\\tvertices1.push( vertexCopy );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// colors\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tcolors1.push( colors2[ i ].clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar face = faces2[ i ], faceCopy, normal, color,\\r\\n\\t\\t\\t\\t\\tfaceVertexNormals = face.vertexNormals,\\r\\n\\t\\t\\t\\t\\tfaceVertexColors = face.vertexColors;\\r\\n\\r\\n\\t\\t\\t\\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\\r\\n\\t\\t\\t\\tfaceCopy.normal.copy( face.normal );\\r\\n\\r\\n\\t\\t\\t\\tif ( normalMatrix !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tnormal = faceVertexNormals[ j ].clone();\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( normalMatrix !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tnormal.applyMatrix3( normalMatrix ).normalize();\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tfaceCopy.vertexNormals.push( normal );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfaceCopy.color.copy( face.color );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcolor = faceVertexColors[ j ];\\r\\n\\t\\t\\t\\t\\tfaceCopy.vertexColors.push( color.clone() );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\\r\\n\\r\\n\\t\\t\\t\\tfaces1.push( faceCopy );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// uvs\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar uv = uvs2[ i ], uvCopy = [];\\r\\n\\r\\n\\t\\t\\t\\tif ( uv === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tuvCopy.push( uv[ j ].clone() );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tuvs1.push( uvCopy );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmergeMesh: function ( mesh ) {\\r\\n\\r\\n\\t\\t\\tif ( ! ( mesh && mesh.isMesh ) ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tmesh.matrixAutoUpdate && mesh.updateMatrix();\\r\\n\\r\\n\\t\\t\\tthis.merge( mesh.geometry, mesh.matrix );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * Checks for duplicate vertices with hashmap.\\r\\n\\t\\t * Duplicated vertices are removed\\r\\n\\t\\t * and faces' vertices are updated.\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tmergeVertices: function () {\\r\\n\\r\\n\\t\\t\\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\\r\\n\\t\\t\\tvar unique = [], changes = [];\\r\\n\\r\\n\\t\\t\\tvar v, key;\\r\\n\\t\\t\\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\\r\\n\\t\\t\\tvar precision = Math.pow( 10, precisionPoints );\\r\\n\\t\\t\\tvar i, il, face;\\r\\n\\t\\t\\tvar indices, j, jl;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tv = this.vertices[ i ];\\r\\n\\t\\t\\t\\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\\r\\n\\r\\n\\t\\t\\t\\tif ( verticesMap[ key ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tverticesMap[ key ] = i;\\r\\n\\t\\t\\t\\t\\tunique.push( this.vertices[ i ] );\\r\\n\\t\\t\\t\\t\\tchanges[ i ] = unique.length - 1;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\\r\\n\\t\\t\\t\\t\\tchanges[ i ] = changes[ verticesMap[ key ] ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t// if faces are completely degenerate after merging vertices, we\\r\\n\\t\\t\\t// have to remove them from the geometry.\\r\\n\\t\\t\\tvar faceIndicesToRemove = [];\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tface = this.faces[ i ];\\r\\n\\r\\n\\t\\t\\t\\tface.a = changes[ face.a ];\\r\\n\\t\\t\\t\\tface.b = changes[ face.b ];\\r\\n\\t\\t\\t\\tface.c = changes[ face.c ];\\r\\n\\r\\n\\t\\t\\t\\tindices = [ face.a, face.b, face.c ];\\r\\n\\r\\n\\t\\t\\t\\t// if any duplicate vertices are found in a Face3\\r\\n\\t\\t\\t\\t// we have to remove the face as nothing can be saved\\r\\n\\t\\t\\t\\tfor ( var n = 0; n < 3; n ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfaceIndicesToRemove.push( i );\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\\r\\n\\r\\n\\t\\t\\t\\tvar idx = faceIndicesToRemove[ i ];\\r\\n\\r\\n\\t\\t\\t\\tthis.faces.splice( idx, 1 );\\r\\n\\r\\n\\t\\t\\t\\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.faceVertexUvs[ j ].splice( idx, 1 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Use unique set of vertices\\r\\n\\r\\n\\t\\t\\tvar diff = this.vertices.length - unique.length;\\r\\n\\t\\t\\tthis.vertices = unique;\\r\\n\\t\\t\\treturn diff;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromPoints: function ( points ) {\\r\\n\\r\\n\\t\\t\\tthis.vertices = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar point = points[ i ];\\r\\n\\t\\t\\t\\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsortFacesByMaterialIndex: function () {\\r\\n\\r\\n\\t\\t\\tvar faces = this.faces;\\r\\n\\t\\t\\tvar length = faces.length;\\r\\n\\r\\n\\t\\t\\t// tag faces\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tfaces[ i ]._id = i;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// sort faces\\r\\n\\r\\n\\t\\t\\tfunction materialIndexSort( a, b ) {\\r\\n\\r\\n\\t\\t\\t\\treturn a.materialIndex - b.materialIndex;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfaces.sort( materialIndexSort );\\r\\n\\r\\n\\t\\t\\t// sort uvs\\r\\n\\r\\n\\t\\t\\tvar uvs1 = this.faceVertexUvs[ 0 ];\\r\\n\\t\\t\\tvar uvs2 = this.faceVertexUvs[ 1 ];\\r\\n\\r\\n\\t\\t\\tvar newUvs1, newUvs2;\\r\\n\\r\\n\\t\\t\\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\\r\\n\\t\\t\\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar id = faces[ i ]._id;\\r\\n\\r\\n\\t\\t\\t\\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\\r\\n\\t\\t\\t\\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\\r\\n\\t\\t\\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function () {\\r\\n\\r\\n\\t\\t\\tvar data = {\\r\\n\\t\\t\\t\\tmetadata: {\\r\\n\\t\\t\\t\\t\\tversion: 4.5,\\r\\n\\t\\t\\t\\t\\ttype: 'Geometry',\\r\\n\\t\\t\\t\\t\\tgenerator: 'Geometry.toJSON'\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t// standard Geometry serialization\\r\\n\\r\\n\\t\\t\\tdata.uuid = this.uuid;\\r\\n\\t\\t\\tdata.type = this.type;\\r\\n\\t\\t\\tif ( this.name !== '' ) data.name = this.name;\\r\\n\\r\\n\\t\\t\\tif ( this.parameters !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar parameters = this.parameters;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var key in parameters ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar vertices = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vertex = this.vertices[ i ];\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar faces = [];\\r\\n\\t\\t\\tvar normals = [];\\r\\n\\t\\t\\tvar normalsHash = {};\\r\\n\\t\\t\\tvar colors = [];\\r\\n\\t\\t\\tvar colorsHash = {};\\r\\n\\t\\t\\tvar uvs = [];\\r\\n\\t\\t\\tvar uvsHash = {};\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < this.faces.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar face = this.faces[ i ];\\r\\n\\r\\n\\t\\t\\t\\tvar hasMaterial = true;\\r\\n\\t\\t\\t\\tvar hasFaceUv = false; // deprecated\\r\\n\\t\\t\\t\\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\\r\\n\\t\\t\\t\\tvar hasFaceNormal = face.normal.length() > 0;\\r\\n\\t\\t\\t\\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\\r\\n\\t\\t\\t\\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\\r\\n\\t\\t\\t\\tvar hasFaceVertexColor = face.vertexColors.length > 0;\\r\\n\\r\\n\\t\\t\\t\\tvar faceType = 0;\\r\\n\\r\\n\\t\\t\\t\\tfaceType = setBit( faceType, 0, 0 ); // isQuad\\r\\n\\t\\t\\t\\tfaceType = setBit( faceType, 1, hasMaterial );\\r\\n\\t\\t\\t\\tfaceType = setBit( faceType, 2, hasFaceUv );\\r\\n\\t\\t\\t\\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\\r\\n\\t\\t\\t\\tfaceType = setBit( faceType, 4, hasFaceNormal );\\r\\n\\t\\t\\t\\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\\r\\n\\t\\t\\t\\tfaceType = setBit( faceType, 6, hasFaceColor );\\r\\n\\t\\t\\t\\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\\r\\n\\r\\n\\t\\t\\t\\tfaces.push( faceType );\\r\\n\\t\\t\\t\\tfaces.push( face.a, face.b, face.c );\\r\\n\\t\\t\\t\\tfaces.push( face.materialIndex );\\r\\n\\r\\n\\t\\t\\t\\tif ( hasFaceVertexUv ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tfaces.push(\\r\\n\\t\\t\\t\\t\\t\\tgetUvIndex( faceVertexUvs[ 0 ] ),\\r\\n\\t\\t\\t\\t\\t\\tgetUvIndex( faceVertexUvs[ 1 ] ),\\r\\n\\t\\t\\t\\t\\t\\tgetUvIndex( faceVertexUvs[ 2 ] )\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( hasFaceNormal ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfaces.push( getNormalIndex( face.normal ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( hasFaceVertexNormal ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar vertexNormals = face.vertexNormals;\\r\\n\\r\\n\\t\\t\\t\\t\\tfaces.push(\\r\\n\\t\\t\\t\\t\\t\\tgetNormalIndex( vertexNormals[ 0 ] ),\\r\\n\\t\\t\\t\\t\\t\\tgetNormalIndex( vertexNormals[ 1 ] ),\\r\\n\\t\\t\\t\\t\\t\\tgetNormalIndex( vertexNormals[ 2 ] )\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( hasFaceColor ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfaces.push( getColorIndex( face.color ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( hasFaceVertexColor ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar vertexColors = face.vertexColors;\\r\\n\\r\\n\\t\\t\\t\\t\\tfaces.push(\\r\\n\\t\\t\\t\\t\\t\\tgetColorIndex( vertexColors[ 0 ] ),\\r\\n\\t\\t\\t\\t\\t\\tgetColorIndex( vertexColors[ 1 ] ),\\r\\n\\t\\t\\t\\t\\t\\tgetColorIndex( vertexColors[ 2 ] )\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction setBit( value, position, enabled ) {\\r\\n\\r\\n\\t\\t\\t\\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction getNormalIndex( normal ) {\\r\\n\\r\\n\\t\\t\\t\\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\\r\\n\\r\\n\\t\\t\\t\\tif ( normalsHash[ hash ] !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn normalsHash[ hash ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tnormalsHash[ hash ] = normals.length / 3;\\r\\n\\t\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\r\\n\\r\\n\\t\\t\\t\\treturn normalsHash[ hash ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction getColorIndex( color ) {\\r\\n\\r\\n\\t\\t\\t\\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\\r\\n\\r\\n\\t\\t\\t\\tif ( colorsHash[ hash ] !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn colorsHash[ hash ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tcolorsHash[ hash ] = colors.length;\\r\\n\\t\\t\\t\\tcolors.push( color.getHex() );\\r\\n\\r\\n\\t\\t\\t\\treturn colorsHash[ hash ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction getUvIndex( uv ) {\\r\\n\\r\\n\\t\\t\\t\\tvar hash = uv.x.toString() + uv.y.toString();\\r\\n\\r\\n\\t\\t\\t\\tif ( uvsHash[ hash ] !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn uvsHash[ hash ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tuvsHash[ hash ] = uvs.length / 2;\\r\\n\\t\\t\\t\\tuvs.push( uv.x, uv.y );\\r\\n\\r\\n\\t\\t\\t\\treturn uvsHash[ hash ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tdata.data = {};\\r\\n\\r\\n\\t\\t\\tdata.data.vertices = vertices;\\r\\n\\t\\t\\tdata.data.normals = normals;\\r\\n\\t\\t\\tif ( colors.length > 0 ) data.data.colors = colors;\\r\\n\\t\\t\\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\\r\\n\\t\\t\\tdata.data.faces = faces;\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t // Handle primitives\\r\\n\\r\\n\\t\\t\\t var parameters = this.parameters;\\r\\n\\r\\n\\t\\t\\t if ( parameters !== undefined ) {\\r\\n\\r\\n\\t\\t\\t var values = [];\\r\\n\\r\\n\\t\\t\\t for ( var key in parameters ) {\\r\\n\\r\\n\\t\\t\\t values.push( parameters[ key ] );\\r\\n\\r\\n\\t\\t\\t }\\r\\n\\r\\n\\t\\t\\t var geometry = Object.create( this.constructor.prototype );\\r\\n\\t\\t\\t this.constructor.apply( geometry, values );\\r\\n\\t\\t\\t return geometry;\\r\\n\\r\\n\\t\\t\\t }\\r\\n\\r\\n\\t\\t\\t return new this.constructor().copy( this );\\r\\n\\t\\t\\t */\\r\\n\\r\\n\\t\\t\\treturn new Geometry().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tvar i, il, j, jl, k, kl;\\r\\n\\r\\n\\t\\t\\t// reset\\r\\n\\r\\n\\t\\t\\tthis.vertices = [];\\r\\n\\t\\t\\tthis.colors = [];\\r\\n\\t\\t\\tthis.faces = [];\\r\\n\\t\\t\\tthis.faceVertexUvs = [[]];\\r\\n\\t\\t\\tthis.morphTargets = [];\\r\\n\\t\\t\\tthis.morphNormals = [];\\r\\n\\t\\t\\tthis.skinWeights = [];\\r\\n\\t\\t\\tthis.skinIndices = [];\\r\\n\\t\\t\\tthis.lineDistances = [];\\r\\n\\t\\t\\tthis.boundingBox = null;\\r\\n\\t\\t\\tthis.boundingSphere = null;\\r\\n\\r\\n\\t\\t\\t// name\\r\\n\\r\\n\\t\\t\\tthis.name = source.name;\\r\\n\\r\\n\\t\\t\\t// vertices\\r\\n\\r\\n\\t\\t\\tvar vertices = source.vertices;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.vertices.push( vertices[ i ].clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// colors\\r\\n\\r\\n\\t\\t\\tvar colors = source.colors;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.colors.push( colors[ i ].clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\tvar faces = source.faces;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.faces.push( faces[ i ].clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// face vertex uvs\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar faceVertexUvs = source.faceVertexUvs[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( this.faceVertexUvs[ i ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.faceVertexUvs[ i ] = [];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar uv = uvs[ k ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuvsCopy.push( uv.clone() );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.faceVertexUvs[ i ].push( uvsCopy );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// morph targets\\r\\n\\r\\n\\t\\t\\tvar morphTargets = source.morphTargets;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar morphTarget = {};\\r\\n\\t\\t\\t\\tmorphTarget.name = morphTargets[ i ].name;\\r\\n\\r\\n\\t\\t\\t\\t// vertices\\r\\n\\r\\n\\t\\t\\t\\tif ( morphTargets[ i ].vertices !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmorphTarget.vertices = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// normals\\r\\n\\r\\n\\t\\t\\t\\tif ( morphTargets[ i ].normals !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmorphTarget.normals = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.morphTargets.push( morphTarget );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// morph normals\\r\\n\\r\\n\\t\\t\\tvar morphNormals = source.morphNormals;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar morphNormal = {};\\r\\n\\r\\n\\t\\t\\t\\t// vertex normals\\r\\n\\r\\n\\t\\t\\t\\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmorphNormal.vertexNormals = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\\r\\n\\t\\t\\t\\t\\t\\tvar destVertexNormal = {};\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdestVertexNormal.a = srcVertexNormal.a.clone();\\r\\n\\t\\t\\t\\t\\t\\tdestVertexNormal.b = srcVertexNormal.b.clone();\\r\\n\\t\\t\\t\\t\\t\\tdestVertexNormal.c = srcVertexNormal.c.clone();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmorphNormal.vertexNormals.push( destVertexNormal );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// face normals\\r\\n\\r\\n\\t\\t\\t\\tif ( morphNormals[ i ].faceNormals !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmorphNormal.faceNormals = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.morphNormals.push( morphNormal );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// skin weights\\r\\n\\r\\n\\t\\t\\tvar skinWeights = source.skinWeights;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.skinWeights.push( skinWeights[ i ].clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// skin indices\\r\\n\\r\\n\\t\\t\\tvar skinIndices = source.skinIndices;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.skinIndices.push( skinIndices[ i ].clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// line distances\\r\\n\\r\\n\\t\\t\\tvar lineDistances = source.lineDistances;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.lineDistances.push( lineDistances[ i ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// bounding box\\r\\n\\r\\n\\t\\t\\tvar boundingBox = source.boundingBox;\\r\\n\\r\\n\\t\\t\\tif ( boundingBox !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingBox = boundingBox.clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// bounding sphere\\r\\n\\r\\n\\t\\t\\tvar boundingSphere = source.boundingSphere;\\r\\n\\r\\n\\t\\t\\tif ( boundingSphere !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingSphere = boundingSphere.clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// update flags\\r\\n\\r\\n\\t\\t\\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\\r\\n\\t\\t\\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\\r\\n\\t\\t\\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\\r\\n\\t\\t\\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\\r\\n\\t\\t\\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\\r\\n\\t\\t\\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\\r\\n\\t\\t\\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdispose: function () {\\r\\n\\r\\n\\t\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction BufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tif ( Array.isArray( array ) ) {\\r\\n\\r\\n\\t\\t\\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\t\\tthis.name = '';\\r\\n\\r\\n\\t\\tthis.array = array;\\r\\n\\t\\tthis.itemSize = itemSize;\\r\\n\\t\\tthis.count = array !== undefined ? array.length / itemSize : 0;\\r\\n\\t\\tthis.normalized = normalized === true;\\r\\n\\r\\n\\t\\tthis.dynamic = false;\\r\\n\\t\\tthis.updateRange = { offset: 0, count: - 1 };\\r\\n\\r\\n\\t\\tthis.onUploadCallback = function () {};\\r\\n\\r\\n\\t\\tthis.version = 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\\r\\n\\r\\n\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( value === true ) this.version ++;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( BufferAttribute.prototype, {\\r\\n\\r\\n\\t\\tisBufferAttribute: true,\\r\\n\\r\\n\\t\\tsetArray: function ( array ) {\\r\\n\\r\\n\\t\\t\\tif ( Array.isArray( array ) ) {\\r\\n\\r\\n\\t\\t\\t\\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\\r\\n\\t\\t\\tthis.array = array;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetDynamic: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.dynamic = value;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tthis.array = new source.array.constructor( source.array );\\r\\n\\t\\t\\tthis.itemSize = source.itemSize;\\r\\n\\t\\t\\tthis.count = source.count;\\r\\n\\t\\t\\tthis.normalized = source.normalized;\\r\\n\\r\\n\\t\\t\\tthis.dynamic = source.dynamic;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyAt: function ( index1, attribute, index2 ) {\\r\\n\\r\\n\\t\\t\\tindex1 *= this.itemSize;\\r\\n\\t\\t\\tindex2 *= attribute.itemSize;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyArray: function ( array ) {\\r\\n\\r\\n\\t\\t\\tthis.array.set( array );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyColorsArray: function ( colors ) {\\r\\n\\r\\n\\t\\t\\tvar array = this.array, offset = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar color = colors[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( color === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\\r\\n\\t\\t\\t\\t\\tcolor = new Color();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = color.r;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = color.g;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = color.b;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyIndicesArray: function ( indices ) {\\r\\n\\r\\n\\t\\t\\tvar array = this.array, offset = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar index = indices[ i ];\\r\\n\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = index.a;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = index.b;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = index.c;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyVector2sArray: function ( vectors ) {\\r\\n\\r\\n\\t\\t\\tvar array = this.array, offset = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vector = vectors[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( vector === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\\r\\n\\t\\t\\t\\t\\tvector = new Vector2();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = vector.x;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = vector.y;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyVector3sArray: function ( vectors ) {\\r\\n\\r\\n\\t\\t\\tvar array = this.array, offset = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vector = vectors[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( vector === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\\r\\n\\t\\t\\t\\t\\tvector = new Vector3();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = vector.x;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = vector.y;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = vector.z;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyVector4sArray: function ( vectors ) {\\r\\n\\r\\n\\t\\t\\tvar array = this.array, offset = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vector = vectors[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( vector === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\\r\\n\\t\\t\\t\\t\\tvector = new Vector4();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = vector.x;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = vector.y;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = vector.z;\\r\\n\\t\\t\\t\\tarray[ offset ++ ] = vector.w;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tset: function ( value, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tthis.array.set( value, offset );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetX: function ( index ) {\\r\\n\\r\\n\\t\\t\\treturn this.array[ index * this.itemSize ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetX: function ( index, x ) {\\r\\n\\r\\n\\t\\t\\tthis.array[ index * this.itemSize ] = x;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetY: function ( index ) {\\r\\n\\r\\n\\t\\t\\treturn this.array[ index * this.itemSize + 1 ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetY: function ( index, y ) {\\r\\n\\r\\n\\t\\t\\tthis.array[ index * this.itemSize + 1 ] = y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetZ: function ( index ) {\\r\\n\\r\\n\\t\\t\\treturn this.array[ index * this.itemSize + 2 ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetZ: function ( index, z ) {\\r\\n\\r\\n\\t\\t\\tthis.array[ index * this.itemSize + 2 ] = z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetW: function ( index ) {\\r\\n\\r\\n\\t\\t\\treturn this.array[ index * this.itemSize + 3 ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetW: function ( index, w ) {\\r\\n\\r\\n\\t\\t\\tthis.array[ index * this.itemSize + 3 ] = w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetXY: function ( index, x, y ) {\\r\\n\\r\\n\\t\\t\\tindex *= this.itemSize;\\r\\n\\r\\n\\t\\t\\tthis.array[ index + 0 ] = x;\\r\\n\\t\\t\\tthis.array[ index + 1 ] = y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetXYZ: function ( index, x, y, z ) {\\r\\n\\r\\n\\t\\t\\tindex *= this.itemSize;\\r\\n\\r\\n\\t\\t\\tthis.array[ index + 0 ] = x;\\r\\n\\t\\t\\tthis.array[ index + 1 ] = y;\\r\\n\\t\\t\\tthis.array[ index + 2 ] = z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetXYZW: function ( index, x, y, z, w ) {\\r\\n\\r\\n\\t\\t\\tindex *= this.itemSize;\\r\\n\\r\\n\\t\\t\\tthis.array[ index + 0 ] = x;\\r\\n\\t\\t\\tthis.array[ index + 1 ] = y;\\r\\n\\t\\t\\tthis.array[ index + 2 ] = z;\\r\\n\\t\\t\\tthis.array[ index + 3 ] = w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tonUpload: function ( callback ) {\\r\\n\\r\\n\\t\\t\\tthis.onUploadCallback = callback;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.array, this.itemSize ).copy( this );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\r\\n\\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\\r\\n\\r\\n\\r\\n\\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\r\\n\\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\\r\\n\\r\\n\\r\\n\\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\r\\n\\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\\r\\n\\r\\n\\r\\n\\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\r\\n\\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\\r\\n\\r\\n\\r\\n\\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\r\\n\\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\\r\\n\\r\\n\\r\\n\\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\r\\n\\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\\r\\n\\r\\n\\r\\n\\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\r\\n\\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\\r\\n\\r\\n\\r\\n\\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\r\\n\\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\\r\\n\\r\\n\\r\\n\\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\\r\\n\\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction DirectGeometry() {\\r\\n\\r\\n\\t\\tthis.indices = [];\\r\\n\\t\\tthis.vertices = [];\\r\\n\\t\\tthis.normals = [];\\r\\n\\t\\tthis.colors = [];\\r\\n\\t\\tthis.uvs = [];\\r\\n\\t\\tthis.uvs2 = [];\\r\\n\\r\\n\\t\\tthis.groups = [];\\r\\n\\r\\n\\t\\tthis.morphTargets = {};\\r\\n\\r\\n\\t\\tthis.skinWeights = [];\\r\\n\\t\\tthis.skinIndices = [];\\r\\n\\r\\n\\t\\t// this.lineDistances = [];\\r\\n\\r\\n\\t\\tthis.boundingBox = null;\\r\\n\\t\\tthis.boundingSphere = null;\\r\\n\\r\\n\\t\\t// update flags\\r\\n\\r\\n\\t\\tthis.verticesNeedUpdate = false;\\r\\n\\t\\tthis.normalsNeedUpdate = false;\\r\\n\\t\\tthis.colorsNeedUpdate = false;\\r\\n\\t\\tthis.uvsNeedUpdate = false;\\r\\n\\t\\tthis.groupsNeedUpdate = false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( DirectGeometry.prototype, {\\r\\n\\r\\n\\t\\tcomputeGroups: function ( geometry ) {\\r\\n\\r\\n\\t\\t\\tvar group;\\r\\n\\t\\t\\tvar groups = [];\\r\\n\\t\\t\\tvar materialIndex = undefined;\\r\\n\\r\\n\\t\\t\\tvar faces = geometry.faces;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < faces.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar face = faces[ i ];\\r\\n\\r\\n\\t\\t\\t\\t// materials\\r\\n\\r\\n\\t\\t\\t\\tif ( face.materialIndex !== materialIndex ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmaterialIndex = face.materialIndex;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( group !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgroup.count = ( i * 3 ) - group.start;\\r\\n\\t\\t\\t\\t\\t\\tgroups.push( group );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tgroup = {\\r\\n\\t\\t\\t\\t\\t\\tstart: i * 3,\\r\\n\\t\\t\\t\\t\\t\\tmaterialIndex: materialIndex\\r\\n\\t\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( group !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tgroup.count = ( i * 3 ) - group.start;\\r\\n\\t\\t\\t\\tgroups.push( group );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.groups = groups;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromGeometry: function ( geometry ) {\\r\\n\\r\\n\\t\\t\\tvar faces = geometry.faces;\\r\\n\\t\\t\\tvar vertices = geometry.vertices;\\r\\n\\t\\t\\tvar faceVertexUvs = geometry.faceVertexUvs;\\r\\n\\r\\n\\t\\t\\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\\r\\n\\t\\t\\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\\r\\n\\r\\n\\t\\t\\t// morphs\\r\\n\\r\\n\\t\\t\\tvar morphTargets = geometry.morphTargets;\\r\\n\\t\\t\\tvar morphTargetsLength = morphTargets.length;\\r\\n\\r\\n\\t\\t\\tvar morphTargetsPosition;\\r\\n\\r\\n\\t\\t\\tif ( morphTargetsLength > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tmorphTargetsPosition = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmorphTargetsPosition[ i ] = [];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.morphTargets.position = morphTargetsPosition;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar morphNormals = geometry.morphNormals;\\r\\n\\t\\t\\tvar morphNormalsLength = morphNormals.length;\\r\\n\\r\\n\\t\\t\\tvar morphTargetsNormal;\\r\\n\\r\\n\\t\\t\\tif ( morphNormalsLength > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tmorphTargetsNormal = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmorphTargetsNormal[ i ] = [];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.morphTargets.normal = morphTargetsNormal;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// skins\\r\\n\\r\\n\\t\\t\\tvar skinIndices = geometry.skinIndices;\\r\\n\\t\\t\\tvar skinWeights = geometry.skinWeights;\\r\\n\\r\\n\\t\\t\\tvar hasSkinIndices = skinIndices.length === vertices.length;\\r\\n\\t\\t\\tvar hasSkinWeights = skinWeights.length === vertices.length;\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < faces.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar face = faces[ i ];\\r\\n\\r\\n\\t\\t\\t\\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\\r\\n\\r\\n\\t\\t\\t\\tvar vertexNormals = face.vertexNormals;\\r\\n\\r\\n\\t\\t\\t\\tif ( vertexNormals.length === 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar normal = face.normal;\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.normals.push( normal, normal, normal );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar vertexColors = face.vertexColors;\\r\\n\\r\\n\\t\\t\\t\\tif ( vertexColors.length === 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar color = face.color;\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.colors.push( color, color, color );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( hasFaceVertexUv === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( vertexUvs !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( hasFaceVertexUv2 === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( vertexUvs !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// morphs\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar morphTarget = morphTargets[ j ].vertices;\\r\\n\\r\\n\\t\\t\\t\\t\\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// skins\\r\\n\\r\\n\\t\\t\\t\\tif ( hasSkinIndices ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( hasSkinWeights ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.computeGroups( geometry );\\r\\n\\r\\n\\t\\t\\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\\r\\n\\t\\t\\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\\r\\n\\t\\t\\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\\r\\n\\t\\t\\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\\r\\n\\t\\t\\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction arrayMax( array ) {\\r\\n\\r\\n\\t\\tif ( array.length === 0 ) return - Infinity;\\r\\n\\r\\n\\t\\tvar max = array[ 0 ];\\r\\n\\r\\n\\t\\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\\r\\n\\r\\n\\t\\t\\tif ( array[ i ] > max ) max = array[ i ];\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn max;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\\r\\n\\r\\n\\tfunction BufferGeometry() {\\r\\n\\r\\n\\t\\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\tthis.name = '';\\r\\n\\t\\tthis.type = 'BufferGeometry';\\r\\n\\r\\n\\t\\tthis.index = null;\\r\\n\\t\\tthis.attributes = {};\\r\\n\\r\\n\\t\\tthis.morphAttributes = {};\\r\\n\\r\\n\\t\\tthis.groups = [];\\r\\n\\r\\n\\t\\tthis.boundingBox = null;\\r\\n\\t\\tthis.boundingSphere = null;\\r\\n\\r\\n\\t\\tthis.drawRange = { start: 0, count: Infinity };\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: BufferGeometry,\\r\\n\\r\\n\\t\\tisBufferGeometry: true,\\r\\n\\r\\n\\t\\tgetIndex: function () {\\r\\n\\r\\n\\t\\t\\treturn this.index;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetIndex: function ( index ) {\\r\\n\\r\\n\\t\\t\\tif ( Array.isArray( index ) ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.index = index;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddAttribute: function ( name, attribute ) {\\r\\n\\r\\n\\t\\t\\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\\r\\n\\r\\n\\t\\t\\t\\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\\r\\n\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( name === 'index' ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\\r\\n\\t\\t\\t\\tthis.setIndex( attribute );\\r\\n\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.attributes[ name ] = attribute;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetAttribute: function ( name ) {\\r\\n\\r\\n\\t\\t\\treturn this.attributes[ name ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tremoveAttribute: function ( name ) {\\r\\n\\r\\n\\t\\t\\tdelete this.attributes[ name ];\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddGroup: function ( start, count, materialIndex ) {\\r\\n\\r\\n\\t\\t\\tthis.groups.push( {\\r\\n\\r\\n\\t\\t\\t\\tstart: start,\\r\\n\\t\\t\\t\\tcount: count,\\r\\n\\t\\t\\t\\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\\r\\n\\r\\n\\t\\t\\t} );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclearGroups: function () {\\r\\n\\r\\n\\t\\t\\tthis.groups = [];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetDrawRange: function ( start, count ) {\\r\\n\\r\\n\\t\\t\\tthis.drawRange.start = start;\\r\\n\\t\\t\\tthis.drawRange.count = count;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyMatrix: function ( matrix ) {\\r\\n\\r\\n\\t\\t\\tvar position = this.attributes.position;\\r\\n\\r\\n\\t\\t\\tif ( position !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tmatrix.applyToBufferAttribute( position );\\r\\n\\t\\t\\t\\tposition.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar normal = this.attributes.normal;\\r\\n\\r\\n\\t\\t\\tif ( normal !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\\r\\n\\r\\n\\t\\t\\t\\tnormalMatrix.applyToBufferAttribute( normal );\\r\\n\\t\\t\\t\\tnormal.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.boundingBox !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.computeBoundingBox();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.boundingSphere !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.computeBoundingSphere();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\trotateX: function () {\\r\\n\\r\\n\\t\\t\\t// rotate geometry around world x-axis\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function rotateX( angle ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeRotationX( angle );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\trotateY: function () {\\r\\n\\r\\n\\t\\t\\t// rotate geometry around world y-axis\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function rotateY( angle ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeRotationY( angle );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\trotateZ: function () {\\r\\n\\r\\n\\t\\t\\t// rotate geometry around world z-axis\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function rotateZ( angle ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeRotationZ( angle );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttranslate: function () {\\r\\n\\r\\n\\t\\t\\t// translate geometry\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function translate( x, y, z ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeTranslation( x, y, z );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tscale: function () {\\r\\n\\r\\n\\t\\t\\t// scale geometry\\r\\n\\r\\n\\t\\t\\tvar m1 = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function scale( x, y, z ) {\\r\\n\\r\\n\\t\\t\\t\\tm1.makeScale( x, y, z );\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( m1 );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tlookAt: function () {\\r\\n\\r\\n\\t\\t\\tvar obj = new Object3D();\\r\\n\\r\\n\\t\\t\\treturn function lookAt( vector ) {\\r\\n\\r\\n\\t\\t\\t\\tobj.lookAt( vector );\\r\\n\\r\\n\\t\\t\\t\\tobj.updateMatrix();\\r\\n\\r\\n\\t\\t\\t\\tthis.applyMatrix( obj.matrix );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tcenter: function () {\\r\\n\\r\\n\\t\\t\\tthis.computeBoundingBox();\\r\\n\\r\\n\\t\\t\\tvar offset = this.boundingBox.getCenter().negate();\\r\\n\\r\\n\\t\\t\\tthis.translate( offset.x, offset.y, offset.z );\\r\\n\\r\\n\\t\\t\\treturn offset;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromObject: function ( object ) {\\r\\n\\r\\n\\t\\t\\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\\r\\n\\r\\n\\t\\t\\tvar geometry = object.geometry;\\r\\n\\r\\n\\t\\t\\tif ( object.isPoints || object.isLine ) {\\r\\n\\r\\n\\t\\t\\t\\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\\r\\n\\t\\t\\t\\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\\r\\n\\r\\n\\t\\t\\t\\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\\r\\n\\t\\t\\t\\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.boundingSphere !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.boundingSphere = geometry.boundingSphere.clone();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.boundingBox !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.boundingBox = geometry.boundingBox.clone();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( object.isMesh ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry && geometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.fromGeometry( geometry );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromPoints: function ( points ) {\\r\\n\\r\\n\\t\\t\\tvar position = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar point = points[ i ];\\r\\n\\t\\t\\t\\tposition.push( point.x, point.y, point.z || 0 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateFromObject: function ( object ) {\\r\\n\\r\\n\\t\\t\\tvar geometry = object.geometry;\\r\\n\\r\\n\\t\\t\\tif ( object.isMesh ) {\\r\\n\\r\\n\\t\\t\\t\\tvar direct = geometry.__directGeometry;\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.elementsNeedUpdate === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tdirect = undefined;\\r\\n\\t\\t\\t\\t\\tgeometry.elementsNeedUpdate = false;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( direct === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn this.fromGeometry( geometry );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\\r\\n\\t\\t\\t\\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\\r\\n\\t\\t\\t\\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\\r\\n\\t\\t\\t\\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\\r\\n\\t\\t\\t\\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\\r\\n\\r\\n\\t\\t\\t\\tgeometry.verticesNeedUpdate = false;\\r\\n\\t\\t\\t\\tgeometry.normalsNeedUpdate = false;\\r\\n\\t\\t\\t\\tgeometry.colorsNeedUpdate = false;\\r\\n\\t\\t\\t\\tgeometry.uvsNeedUpdate = false;\\r\\n\\t\\t\\t\\tgeometry.groupsNeedUpdate = false;\\r\\n\\r\\n\\t\\t\\t\\tgeometry = direct;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar attribute;\\r\\n\\r\\n\\t\\t\\tif ( geometry.verticesNeedUpdate === true ) {\\r\\n\\r\\n\\t\\t\\t\\tattribute = this.attributes.position;\\r\\n\\r\\n\\t\\t\\t\\tif ( attribute !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tattribute.copyVector3sArray( geometry.vertices );\\r\\n\\t\\t\\t\\t\\tattribute.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgeometry.verticesNeedUpdate = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.normalsNeedUpdate === true ) {\\r\\n\\r\\n\\t\\t\\t\\tattribute = this.attributes.normal;\\r\\n\\r\\n\\t\\t\\t\\tif ( attribute !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tattribute.copyVector3sArray( geometry.normals );\\r\\n\\t\\t\\t\\t\\tattribute.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgeometry.normalsNeedUpdate = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.colorsNeedUpdate === true ) {\\r\\n\\r\\n\\t\\t\\t\\tattribute = this.attributes.color;\\r\\n\\r\\n\\t\\t\\t\\tif ( attribute !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tattribute.copyColorsArray( geometry.colors );\\r\\n\\t\\t\\t\\t\\tattribute.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgeometry.colorsNeedUpdate = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.uvsNeedUpdate ) {\\r\\n\\r\\n\\t\\t\\t\\tattribute = this.attributes.uv;\\r\\n\\r\\n\\t\\t\\t\\tif ( attribute !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tattribute.copyVector2sArray( geometry.uvs );\\r\\n\\t\\t\\t\\t\\tattribute.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgeometry.uvsNeedUpdate = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.lineDistancesNeedUpdate ) {\\r\\n\\r\\n\\t\\t\\t\\tattribute = this.attributes.lineDistance;\\r\\n\\r\\n\\t\\t\\t\\tif ( attribute !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tattribute.copyArray( geometry.lineDistances );\\r\\n\\t\\t\\t\\t\\tattribute.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgeometry.lineDistancesNeedUpdate = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.groupsNeedUpdate ) {\\r\\n\\r\\n\\t\\t\\t\\tgeometry.computeGroups( object.geometry );\\r\\n\\t\\t\\t\\tthis.groups = geometry.groups;\\r\\n\\r\\n\\t\\t\\t\\tgeometry.groupsNeedUpdate = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromGeometry: function ( geometry ) {\\r\\n\\r\\n\\t\\t\\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\\r\\n\\r\\n\\t\\t\\treturn this.fromDirectGeometry( geometry.__directGeometry );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromDirectGeometry: function ( geometry ) {\\r\\n\\r\\n\\t\\t\\tvar positions = new Float32Array( geometry.vertices.length * 3 );\\r\\n\\t\\t\\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\\r\\n\\r\\n\\t\\t\\tif ( geometry.normals.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar normals = new Float32Array( geometry.normals.length * 3 );\\r\\n\\t\\t\\t\\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.colors.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar colors = new Float32Array( geometry.colors.length * 3 );\\r\\n\\t\\t\\t\\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.uvs.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\\r\\n\\t\\t\\t\\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.uvs2.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\\r\\n\\t\\t\\t\\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.indices.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;\\r\\n\\t\\t\\t\\tvar indices = new TypeArray( geometry.indices.length * 3 );\\r\\n\\t\\t\\t\\tthis.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// groups\\r\\n\\r\\n\\t\\t\\tthis.groups = geometry.groups;\\r\\n\\r\\n\\t\\t\\t// morphs\\r\\n\\r\\n\\t\\t\\tfor ( var name in geometry.morphTargets ) {\\r\\n\\r\\n\\t\\t\\t\\tvar array = [];\\r\\n\\t\\t\\t\\tvar morphTargets = geometry.morphTargets[ name ];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar morphTarget = morphTargets[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tvar attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );\\r\\n\\r\\n\\t\\t\\t\\t\\tarray.push( attribute.copyVector3sArray( morphTarget ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.morphAttributes[ name ] = array;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// skinning\\r\\n\\r\\n\\t\\t\\tif ( geometry.skinIndices.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\\r\\n\\t\\t\\t\\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.skinWeights.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\\r\\n\\t\\t\\t\\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tif ( geometry.boundingSphere !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingSphere = geometry.boundingSphere.clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry.boundingBox !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingBox = geometry.boundingBox.clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeBoundingBox: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.boundingBox === null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingBox = new Box3();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar position = this.attributes.position;\\r\\n\\r\\n\\t\\t\\tif ( position !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingBox.setFromBufferAttribute( position );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingBox.makeEmpty();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \\\"position\\\" attribute is likely to have NaN values.', this );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeBoundingSphere: function () {\\r\\n\\r\\n\\t\\t\\tvar box = new Box3();\\r\\n\\t\\t\\tvar vector = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function computeBoundingSphere() {\\r\\n\\r\\n\\t\\t\\t\\tif ( this.boundingSphere === null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.boundingSphere = new Sphere();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar position = this.attributes.position;\\r\\n\\r\\n\\t\\t\\t\\tif ( position ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar center = this.boundingSphere.center;\\r\\n\\r\\n\\t\\t\\t\\t\\tbox.setFromBufferAttribute( position );\\r\\n\\t\\t\\t\\t\\tbox.getCenter( center );\\r\\n\\r\\n\\t\\t\\t\\t\\t// hoping to find a boundingSphere with a radius smaller than the\\r\\n\\t\\t\\t\\t\\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\\r\\n\\r\\n\\t\\t\\t\\t\\tvar maxRadiusSq = 0;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvector.x = position.getX( i );\\r\\n\\t\\t\\t\\t\\t\\tvector.y = position.getY( i );\\r\\n\\t\\t\\t\\t\\t\\tvector.z = position.getZ( i );\\r\\n\\t\\t\\t\\t\\t\\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( isNaN( this.boundingSphere.radius ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \\\"position\\\" attribute is likely to have NaN values.', this );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tcomputeFaceNormals: function () {\\r\\n\\r\\n\\t\\t\\t// backwards compatibility\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeVertexNormals: function () {\\r\\n\\r\\n\\t\\t\\tvar index = this.index;\\r\\n\\t\\t\\tvar attributes = this.attributes;\\r\\n\\t\\t\\tvar groups = this.groups;\\r\\n\\r\\n\\t\\t\\tif ( attributes.position ) {\\r\\n\\r\\n\\t\\t\\t\\tvar positions = attributes.position.array;\\r\\n\\r\\n\\t\\t\\t\\tif ( attributes.normal === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// reset existing normals to zero\\r\\n\\r\\n\\t\\t\\t\\t\\tvar array = attributes.normal.array;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tarray[ i ] = 0;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar normals = attributes.normal.array;\\r\\n\\r\\n\\t\\t\\t\\tvar vA, vB, vC;\\r\\n\\t\\t\\t\\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\\r\\n\\t\\t\\t\\tvar cb = new Vector3(), ab = new Vector3();\\r\\n\\r\\n\\t\\t\\t\\t// indexed elements\\r\\n\\r\\n\\t\\t\\t\\tif ( index ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar indices = index.array;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( groups.length === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.addGroup( 0, indices.length );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar group = groups[ j ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar start = group.start;\\r\\n\\t\\t\\t\\t\\t\\tvar count = group.count;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvA = indices[ i + 0 ] * 3;\\r\\n\\t\\t\\t\\t\\t\\t\\tvB = indices[ i + 1 ] * 3;\\r\\n\\t\\t\\t\\t\\t\\t\\tvC = indices[ i + 2 ] * 3;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tpA.fromArray( positions, vA );\\r\\n\\t\\t\\t\\t\\t\\t\\tpB.fromArray( positions, vB );\\r\\n\\t\\t\\t\\t\\t\\t\\tpC.fromArray( positions, vC );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcb.subVectors( pC, pB );\\r\\n\\t\\t\\t\\t\\t\\t\\tab.subVectors( pA, pB );\\r\\n\\t\\t\\t\\t\\t\\t\\tcb.cross( ab );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tnormals[ vA ] += cb.x;\\r\\n\\t\\t\\t\\t\\t\\t\\tnormals[ vA + 1 ] += cb.y;\\r\\n\\t\\t\\t\\t\\t\\t\\tnormals[ vA + 2 ] += cb.z;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tnormals[ vB ] += cb.x;\\r\\n\\t\\t\\t\\t\\t\\t\\tnormals[ vB + 1 ] += cb.y;\\r\\n\\t\\t\\t\\t\\t\\t\\tnormals[ vB + 2 ] += cb.z;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tnormals[ vC ] += cb.x;\\r\\n\\t\\t\\t\\t\\t\\t\\tnormals[ vC + 1 ] += cb.y;\\r\\n\\t\\t\\t\\t\\t\\t\\tnormals[ vC + 2 ] += cb.z;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// non-indexed elements (unconnected triangle soup)\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tpA.fromArray( positions, i );\\r\\n\\t\\t\\t\\t\\t\\tpB.fromArray( positions, i + 3 );\\r\\n\\t\\t\\t\\t\\t\\tpC.fromArray( positions, i + 6 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcb.subVectors( pC, pB );\\r\\n\\t\\t\\t\\t\\t\\tab.subVectors( pA, pB );\\r\\n\\t\\t\\t\\t\\t\\tcb.cross( ab );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tnormals[ i ] = cb.x;\\r\\n\\t\\t\\t\\t\\t\\tnormals[ i + 1 ] = cb.y;\\r\\n\\t\\t\\t\\t\\t\\tnormals[ i + 2 ] = cb.z;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tnormals[ i + 3 ] = cb.x;\\r\\n\\t\\t\\t\\t\\t\\tnormals[ i + 4 ] = cb.y;\\r\\n\\t\\t\\t\\t\\t\\tnormals[ i + 5 ] = cb.z;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tnormals[ i + 6 ] = cb.x;\\r\\n\\t\\t\\t\\t\\t\\tnormals[ i + 7 ] = cb.y;\\r\\n\\t\\t\\t\\t\\t\\tnormals[ i + 8 ] = cb.z;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.normalizeNormals();\\r\\n\\r\\n\\t\\t\\t\\tattributes.normal.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmerge: function ( geometry, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tvar attributes = this.attributes;\\r\\n\\r\\n\\t\\t\\tfor ( var key in attributes ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.attributes[ key ] === undefined ) continue;\\r\\n\\r\\n\\t\\t\\t\\tvar attribute1 = attributes[ key ];\\r\\n\\t\\t\\t\\tvar attributeArray1 = attribute1.array;\\r\\n\\r\\n\\t\\t\\t\\tvar attribute2 = geometry.attributes[ key ];\\r\\n\\t\\t\\t\\tvar attributeArray2 = attribute2.array;\\r\\n\\r\\n\\t\\t\\t\\tvar attributeSize = attribute2.itemSize;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tattributeArray1[ j ] = attributeArray2[ i ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormalizeNormals: function () {\\r\\n\\r\\n\\t\\t\\tvar vector = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function normalizeNormals() {\\r\\n\\r\\n\\t\\t\\t\\tvar normals = this.attributes.normal;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvector.x = normals.getX( i );\\r\\n\\t\\t\\t\\t\\tvector.y = normals.getY( i );\\r\\n\\t\\t\\t\\t\\tvector.z = normals.getZ( i );\\r\\n\\r\\n\\t\\t\\t\\t\\tvector.normalize();\\r\\n\\r\\n\\t\\t\\t\\t\\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttoNonIndexed: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.index === null ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar geometry2 = new BufferGeometry();\\r\\n\\r\\n\\t\\t\\tvar indices = this.index.array;\\r\\n\\t\\t\\tvar attributes = this.attributes;\\r\\n\\r\\n\\t\\t\\tfor ( var name in attributes ) {\\r\\n\\r\\n\\t\\t\\t\\tvar attribute = attributes[ name ];\\r\\n\\r\\n\\t\\t\\t\\tvar array = attribute.array;\\r\\n\\t\\t\\t\\tvar itemSize = attribute.itemSize;\\r\\n\\r\\n\\t\\t\\t\\tvar array2 = new array.constructor( indices.length * itemSize );\\r\\n\\r\\n\\t\\t\\t\\tvar index = 0, index2 = 0;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tindex = indices[ i ] * itemSize;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var j = 0; j < itemSize; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tarray2[ index2 ++ ] = array[ index ++ ];\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn geometry2;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function () {\\r\\n\\r\\n\\t\\t\\tvar data = {\\r\\n\\t\\t\\t\\tmetadata: {\\r\\n\\t\\t\\t\\t\\tversion: 4.5,\\r\\n\\t\\t\\t\\t\\ttype: 'BufferGeometry',\\r\\n\\t\\t\\t\\t\\tgenerator: 'BufferGeometry.toJSON'\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t// standard BufferGeometry serialization\\r\\n\\r\\n\\t\\t\\tdata.uuid = this.uuid;\\r\\n\\t\\t\\tdata.type = this.type;\\r\\n\\t\\t\\tif ( this.name !== '' ) data.name = this.name;\\r\\n\\r\\n\\t\\t\\tif ( this.parameters !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar parameters = this.parameters;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var key in parameters ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tdata.data = { attributes: {} };\\r\\n\\r\\n\\t\\t\\tvar index = this.index;\\r\\n\\r\\n\\t\\t\\tif ( index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tvar array = Array.prototype.slice.call( index.array );\\r\\n\\r\\n\\t\\t\\t\\tdata.data.index = {\\r\\n\\t\\t\\t\\t\\ttype: index.array.constructor.name,\\r\\n\\t\\t\\t\\t\\tarray: array\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar attributes = this.attributes;\\r\\n\\r\\n\\t\\t\\tfor ( var key in attributes ) {\\r\\n\\r\\n\\t\\t\\t\\tvar attribute = attributes[ key ];\\r\\n\\r\\n\\t\\t\\t\\tvar array = Array.prototype.slice.call( attribute.array );\\r\\n\\r\\n\\t\\t\\t\\tdata.data.attributes[ key ] = {\\r\\n\\t\\t\\t\\t\\titemSize: attribute.itemSize,\\r\\n\\t\\t\\t\\t\\ttype: attribute.array.constructor.name,\\r\\n\\t\\t\\t\\t\\tarray: array,\\r\\n\\t\\t\\t\\t\\tnormalized: attribute.normalized\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar groups = this.groups;\\r\\n\\r\\n\\t\\t\\tif ( groups.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar boundingSphere = this.boundingSphere;\\r\\n\\r\\n\\t\\t\\tif ( boundingSphere !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tdata.data.boundingSphere = {\\r\\n\\t\\t\\t\\t\\tcenter: boundingSphere.center.toArray(),\\r\\n\\t\\t\\t\\t\\tradius: boundingSphere.radius\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t // Handle primitives\\r\\n\\r\\n\\t\\t\\t var parameters = this.parameters;\\r\\n\\r\\n\\t\\t\\t if ( parameters !== undefined ) {\\r\\n\\r\\n\\t\\t\\t var values = [];\\r\\n\\r\\n\\t\\t\\t for ( var key in parameters ) {\\r\\n\\r\\n\\t\\t\\t values.push( parameters[ key ] );\\r\\n\\r\\n\\t\\t\\t }\\r\\n\\r\\n\\t\\t\\t var geometry = Object.create( this.constructor.prototype );\\r\\n\\t\\t\\t this.constructor.apply( geometry, values );\\r\\n\\t\\t\\t return geometry;\\r\\n\\r\\n\\t\\t\\t }\\r\\n\\r\\n\\t\\t\\t return new this.constructor().copy( this );\\r\\n\\t\\t\\t */\\r\\n\\r\\n\\t\\t\\treturn new BufferGeometry().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tvar name, i, l;\\r\\n\\r\\n\\t\\t\\t// reset\\r\\n\\r\\n\\t\\t\\tthis.index = null;\\r\\n\\t\\t\\tthis.attributes = {};\\r\\n\\t\\t\\tthis.morphAttributes = {};\\r\\n\\t\\t\\tthis.groups = [];\\r\\n\\t\\t\\tthis.boundingBox = null;\\r\\n\\t\\t\\tthis.boundingSphere = null;\\r\\n\\r\\n\\t\\t\\t// name\\r\\n\\r\\n\\t\\t\\tthis.name = source.name;\\r\\n\\r\\n\\t\\t\\t// index\\r\\n\\r\\n\\t\\t\\tvar index = source.index;\\r\\n\\r\\n\\t\\t\\tif ( index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.setIndex( index.clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// attributes\\r\\n\\r\\n\\t\\t\\tvar attributes = source.attributes;\\r\\n\\r\\n\\t\\t\\tfor ( name in attributes ) {\\r\\n\\r\\n\\t\\t\\t\\tvar attribute = attributes[ name ];\\r\\n\\t\\t\\t\\tthis.addAttribute( name, attribute.clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// morph attributes\\r\\n\\r\\n\\t\\t\\tvar morphAttributes = source.morphAttributes;\\r\\n\\r\\n\\t\\t\\tfor ( name in morphAttributes ) {\\r\\n\\r\\n\\t\\t\\t\\tvar array = [];\\r\\n\\t\\t\\t\\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tarray.push( morphAttribute[ i ].clone() );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.morphAttributes[ name ] = array;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// groups\\r\\n\\r\\n\\t\\t\\tvar groups = source.groups;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar group = groups[ i ];\\r\\n\\t\\t\\t\\tthis.addGroup( group.start, group.count, group.materialIndex );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// bounding box\\r\\n\\r\\n\\t\\t\\tvar boundingBox = source.boundingBox;\\r\\n\\r\\n\\t\\t\\tif ( boundingBox !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingBox = boundingBox.clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// bounding sphere\\r\\n\\r\\n\\t\\t\\tvar boundingSphere = source.boundingSphere;\\r\\n\\r\\n\\t\\t\\tif ( boundingSphere !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boundingSphere = boundingSphere.clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// draw range\\r\\n\\r\\n\\t\\t\\tthis.drawRange.start = source.drawRange.start;\\r\\n\\t\\t\\tthis.drawRange.count = source.drawRange.count;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdispose: function () {\\r\\n\\r\\n\\t\\t\\tthis.dispatchEvent( { type: 'dispose' } );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// BoxGeometry\\r\\n\\r\\n\\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'BoxGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\twidth: width,\\r\\n\\t\\t\\theight: height,\\r\\n\\t\\t\\tdepth: depth,\\r\\n\\t\\t\\twidthSegments: widthSegments,\\r\\n\\t\\t\\theightSegments: heightSegments,\\r\\n\\t\\t\\tdepthSegments: depthSegments\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tBoxGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tBoxGeometry.prototype.constructor = BoxGeometry;\\r\\n\\r\\n\\t// BoxBufferGeometry\\r\\n\\r\\n\\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'BoxBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\twidth: width,\\r\\n\\t\\t\\theight: height,\\r\\n\\t\\t\\tdepth: depth,\\r\\n\\t\\t\\twidthSegments: widthSegments,\\r\\n\\t\\t\\theightSegments: heightSegments,\\r\\n\\t\\t\\tdepthSegments: depthSegments\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\twidth = width || 1;\\r\\n\\t\\theight = height || 1;\\r\\n\\t\\tdepth = depth || 1;\\r\\n\\r\\n\\t\\t// segments\\r\\n\\r\\n\\t\\twidthSegments = Math.floor( widthSegments ) || 1;\\r\\n\\t\\theightSegments = Math.floor( heightSegments ) || 1;\\r\\n\\t\\tdepthSegments = Math.floor( depthSegments ) || 1;\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar numberOfVertices = 0;\\r\\n\\t\\tvar groupStart = 0;\\r\\n\\r\\n\\t\\t// build each side of the box geometry\\r\\n\\r\\n\\t\\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\\r\\n\\t\\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\\r\\n\\t\\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\\r\\n\\t\\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\\r\\n\\t\\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\\r\\n\\t\\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t\\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\\r\\n\\r\\n\\t\\t\\tvar segmentWidth = width / gridX;\\r\\n\\t\\t\\tvar segmentHeight = height / gridY;\\r\\n\\r\\n\\t\\t\\tvar widthHalf = width / 2;\\r\\n\\t\\t\\tvar heightHalf = height / 2;\\r\\n\\t\\t\\tvar depthHalf = depth / 2;\\r\\n\\r\\n\\t\\t\\tvar gridX1 = gridX + 1;\\r\\n\\t\\t\\tvar gridY1 = gridY + 1;\\r\\n\\r\\n\\t\\t\\tvar vertexCounter = 0;\\r\\n\\t\\t\\tvar groupCount = 0;\\r\\n\\r\\n\\t\\t\\tvar ix, iy;\\r\\n\\r\\n\\t\\t\\tvar vector = new Vector3();\\r\\n\\r\\n\\t\\t\\t// generate vertices, normals and uvs\\r\\n\\r\\n\\t\\t\\tfor ( iy = 0; iy < gridY1; iy ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar y = iy * segmentHeight - heightHalf;\\r\\n\\r\\n\\t\\t\\t\\tfor ( ix = 0; ix < gridX1; ix ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar x = ix * segmentWidth - widthHalf;\\r\\n\\r\\n\\t\\t\\t\\t\\t// set values to correct vector component\\r\\n\\r\\n\\t\\t\\t\\t\\tvector[ u ] = x * udir;\\r\\n\\t\\t\\t\\t\\tvector[ v ] = y * vdir;\\r\\n\\t\\t\\t\\t\\tvector[ w ] = depthHalf;\\r\\n\\r\\n\\t\\t\\t\\t\\t// now apply vector to vertex buffer\\r\\n\\r\\n\\t\\t\\t\\t\\tvertices.push( vector.x, vector.y, vector.z );\\r\\n\\r\\n\\t\\t\\t\\t\\t// set values to correct vector component\\r\\n\\r\\n\\t\\t\\t\\t\\tvector[ u ] = 0;\\r\\n\\t\\t\\t\\t\\tvector[ v ] = 0;\\r\\n\\t\\t\\t\\t\\tvector[ w ] = depth > 0 ? 1 : - 1;\\r\\n\\r\\n\\t\\t\\t\\t\\t// now apply vector to normal buffer\\r\\n\\r\\n\\t\\t\\t\\t\\tnormals.push( vector.x, vector.y, vector.z );\\r\\n\\r\\n\\t\\t\\t\\t\\t// uvs\\r\\n\\r\\n\\t\\t\\t\\t\\tuvs.push( ix / gridX );\\r\\n\\t\\t\\t\\t\\tuvs.push( 1 - ( iy / gridY ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t// counters\\r\\n\\r\\n\\t\\t\\t\\t\\tvertexCounter += 1;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// indices\\r\\n\\r\\n\\t\\t\\t// 1. you need three indices to draw a single face\\r\\n\\t\\t\\t// 2. a single segment consists of two faces\\r\\n\\t\\t\\t// 3. so we need to generate six (2*3) indices per segment\\r\\n\\r\\n\\t\\t\\tfor ( iy = 0; iy < gridY; iy ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( ix = 0; ix < gridX; ix ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar a = numberOfVertices + ix + gridX1 * iy;\\r\\n\\t\\t\\t\\t\\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\\r\\n\\t\\t\\t\\t\\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\\r\\n\\t\\t\\t\\t\\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\\r\\n\\r\\n\\t\\t\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\t\\t\\tindices.push( a, b, d );\\r\\n\\t\\t\\t\\t\\tindices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t\\t\\t// increase counter\\r\\n\\r\\n\\t\\t\\t\\t\\tgroupCount += 6;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// add a group to the geometry. this will ensure multi material support\\r\\n\\r\\n\\t\\t\\tscope.addGroup( groupStart, groupCount, materialIndex );\\r\\n\\r\\n\\t\\t\\t// calculate new start value for groups\\r\\n\\r\\n\\t\\t\\tgroupStart += groupCount;\\r\\n\\r\\n\\t\\t\\t// update total number of vertices\\r\\n\\r\\n\\t\\t\\tnumberOfVertices += vertexCounter;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// PlaneGeometry\\r\\n\\r\\n\\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'PlaneGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\twidth: width,\\r\\n\\t\\t\\theight: height,\\r\\n\\t\\t\\twidthSegments: widthSegments,\\r\\n\\t\\t\\theightSegments: heightSegments\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tPlaneGeometry.prototype.constructor = PlaneGeometry;\\r\\n\\r\\n\\t// PlaneBufferGeometry\\r\\n\\r\\n\\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'PlaneBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\twidth: width,\\r\\n\\t\\t\\theight: height,\\r\\n\\t\\t\\twidthSegments: widthSegments,\\r\\n\\t\\t\\theightSegments: heightSegments\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\twidth = width || 1;\\r\\n\\t\\theight = height || 1;\\r\\n\\r\\n\\t\\tvar width_half = width / 2;\\r\\n\\t\\tvar height_half = height / 2;\\r\\n\\r\\n\\t\\tvar gridX = Math.floor( widthSegments ) || 1;\\r\\n\\t\\tvar gridY = Math.floor( heightSegments ) || 1;\\r\\n\\r\\n\\t\\tvar gridX1 = gridX + 1;\\r\\n\\t\\tvar gridY1 = gridY + 1;\\r\\n\\r\\n\\t\\tvar segment_width = width / gridX;\\r\\n\\t\\tvar segment_height = height / gridY;\\r\\n\\r\\n\\t\\tvar ix, iy;\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// generate vertices, normals and uvs\\r\\n\\r\\n\\t\\tfor ( iy = 0; iy < gridY1; iy ++ ) {\\r\\n\\r\\n\\t\\t\\tvar y = iy * segment_height - height_half;\\r\\n\\r\\n\\t\\t\\tfor ( ix = 0; ix < gridX1; ix ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar x = ix * segment_width - width_half;\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( x, - y, 0 );\\r\\n\\r\\n\\t\\t\\t\\tnormals.push( 0, 0, 1 );\\r\\n\\r\\n\\t\\t\\t\\tuvs.push( ix / gridX );\\r\\n\\t\\t\\t\\tuvs.push( 1 - ( iy / gridY ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// indices\\r\\n\\r\\n\\t\\tfor ( iy = 0; iy < gridY; iy ++ ) {\\r\\n\\r\\n\\t\\t\\tfor ( ix = 0; ix < gridX; ix ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar a = ix + gridX1 * iy;\\r\\n\\t\\t\\t\\tvar b = ix + gridX1 * ( iy + 1 );\\r\\n\\t\\t\\t\\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\\r\\n\\t\\t\\t\\tvar d = ( ix + 1 ) + gridX1 * iy;\\r\\n\\r\\n\\t\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\t\\tindices.push( a, b, d );\\r\\n\\t\\t\\t\\tindices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  color: <hex>,\\r\\n\\t *  opacity: <float>,\\r\\n\\t *  map: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  lightMap: new THREE.Texture( <Image> ),\\r\\n\\t *  lightMapIntensity: <float>\\r\\n\\t *\\r\\n\\t *  aoMap: new THREE.Texture( <Image> ),\\r\\n\\t *  aoMapIntensity: <float>\\r\\n\\t *\\r\\n\\t *  specularMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  alphaMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\\r\\n\\t *  combine: THREE.Multiply,\\r\\n\\t *  reflectivity: <float>,\\r\\n\\t *  refractionRatio: <float>,\\r\\n\\t *\\r\\n\\t *  depthTest: <bool>,\\r\\n\\t *  depthWrite: <bool>,\\r\\n\\t *\\r\\n\\t *  wireframe: <boolean>,\\r\\n\\t *  wireframeLinewidth: <float>,\\r\\n\\t *\\r\\n\\t *  skinning: <bool>,\\r\\n\\t *  morphTargets: <bool>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction MeshBasicMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'MeshBasicMaterial';\\r\\n\\r\\n\\t\\tthis.color = new Color( 0xffffff ); // emissive\\r\\n\\r\\n\\t\\tthis.map = null;\\r\\n\\r\\n\\t\\tthis.lightMap = null;\\r\\n\\t\\tthis.lightMapIntensity = 1.0;\\r\\n\\r\\n\\t\\tthis.aoMap = null;\\r\\n\\t\\tthis.aoMapIntensity = 1.0;\\r\\n\\r\\n\\t\\tthis.specularMap = null;\\r\\n\\r\\n\\t\\tthis.alphaMap = null;\\r\\n\\r\\n\\t\\tthis.envMap = null;\\r\\n\\t\\tthis.combine = MultiplyOperation;\\r\\n\\t\\tthis.reflectivity = 1;\\r\\n\\t\\tthis.refractionRatio = 0.98;\\r\\n\\r\\n\\t\\tthis.wireframe = false;\\r\\n\\t\\tthis.wireframeLinewidth = 1;\\r\\n\\t\\tthis.wireframeLinecap = 'round';\\r\\n\\t\\tthis.wireframeLinejoin = 'round';\\r\\n\\r\\n\\t\\tthis.skinning = false;\\r\\n\\t\\tthis.morphTargets = false;\\r\\n\\r\\n\\t\\tthis.lights = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\\r\\n\\r\\n\\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\\r\\n\\r\\n\\tMeshBasicMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.color.copy( source.color );\\r\\n\\r\\n\\t\\tthis.map = source.map;\\r\\n\\r\\n\\t\\tthis.lightMap = source.lightMap;\\r\\n\\t\\tthis.lightMapIntensity = source.lightMapIntensity;\\r\\n\\r\\n\\t\\tthis.aoMap = source.aoMap;\\r\\n\\t\\tthis.aoMapIntensity = source.aoMapIntensity;\\r\\n\\r\\n\\t\\tthis.specularMap = source.specularMap;\\r\\n\\r\\n\\t\\tthis.alphaMap = source.alphaMap;\\r\\n\\r\\n\\t\\tthis.envMap = source.envMap;\\r\\n\\t\\tthis.combine = source.combine;\\r\\n\\t\\tthis.reflectivity = source.reflectivity;\\r\\n\\t\\tthis.refractionRatio = source.refractionRatio;\\r\\n\\r\\n\\t\\tthis.wireframe = source.wireframe;\\r\\n\\t\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\r\\n\\t\\tthis.wireframeLinecap = source.wireframeLinecap;\\r\\n\\t\\tthis.wireframeLinejoin = source.wireframeLinejoin;\\r\\n\\r\\n\\t\\tthis.skinning = source.skinning;\\r\\n\\t\\tthis.morphTargets = source.morphTargets;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  defines: { \\\"label\\\" : \\\"value\\\" },\\r\\n\\t *  uniforms: { \\\"parameter1\\\": { value: 1.0 }, \\\"parameter2\\\": { value2: 2 } },\\r\\n\\t *\\r\\n\\t *  fragmentShader: <string>,\\r\\n\\t *  vertexShader: <string>,\\r\\n\\t *\\r\\n\\t *  wireframe: <boolean>,\\r\\n\\t *  wireframeLinewidth: <float>,\\r\\n\\t *\\r\\n\\t *  lights: <bool>,\\r\\n\\t *\\r\\n\\t *  skinning: <bool>,\\r\\n\\t *  morphTargets: <bool>,\\r\\n\\t *  morphNormals: <bool>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction ShaderMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'ShaderMaterial';\\r\\n\\r\\n\\t\\tthis.defines = {};\\r\\n\\t\\tthis.uniforms = {};\\r\\n\\r\\n\\t\\tthis.vertexShader = 'void main() {\\\\n\\\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\\\n}';\\r\\n\\t\\tthis.fragmentShader = 'void main() {\\\\n\\\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\\\n}';\\r\\n\\r\\n\\t\\tthis.linewidth = 1;\\r\\n\\r\\n\\t\\tthis.wireframe = false;\\r\\n\\t\\tthis.wireframeLinewidth = 1;\\r\\n\\r\\n\\t\\tthis.fog = false; // set to use scene fog\\r\\n\\t\\tthis.lights = false; // set to use scene lights\\r\\n\\t\\tthis.clipping = false; // set to use user-defined clipping planes\\r\\n\\r\\n\\t\\tthis.skinning = false; // set to use skinning attribute streams\\r\\n\\t\\tthis.morphTargets = false; // set to use morph targets\\r\\n\\t\\tthis.morphNormals = false; // set to use morph normals\\r\\n\\r\\n\\t\\tthis.extensions = {\\r\\n\\t\\t\\tderivatives: false, // set to use derivatives\\r\\n\\t\\t\\tfragDepth: false, // set to use fragment depth values\\r\\n\\t\\t\\tdrawBuffers: false, // set to use draw buffers\\r\\n\\t\\t\\tshaderTextureLOD: false // set to use shader texture LOD\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// When rendered geometry doesn't include these attributes but the material does,\\r\\n\\t\\t// use these default values in WebGL. This avoids errors when buffer data is missing.\\r\\n\\t\\tthis.defaultAttributeValues = {\\r\\n\\t\\t\\t'color': [ 1, 1, 1 ],\\r\\n\\t\\t\\t'uv': [ 0, 0 ],\\r\\n\\t\\t\\t'uv2': [ 0, 0 ]\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.index0AttributeName = undefined;\\r\\n\\r\\n\\t\\tif ( parameters !== undefined ) {\\r\\n\\r\\n\\t\\t\\tif ( parameters.attributes !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tShaderMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tShaderMaterial.prototype.constructor = ShaderMaterial;\\r\\n\\r\\n\\tShaderMaterial.prototype.isShaderMaterial = true;\\r\\n\\r\\n\\tShaderMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.fragmentShader = source.fragmentShader;\\r\\n\\t\\tthis.vertexShader = source.vertexShader;\\r\\n\\r\\n\\t\\tthis.uniforms = UniformsUtils.clone( source.uniforms );\\r\\n\\r\\n\\t\\tthis.defines = source.defines;\\r\\n\\r\\n\\t\\tthis.wireframe = source.wireframe;\\r\\n\\t\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\r\\n\\r\\n\\t\\tthis.lights = source.lights;\\r\\n\\t\\tthis.clipping = source.clipping;\\r\\n\\r\\n\\t\\tthis.skinning = source.skinning;\\r\\n\\r\\n\\t\\tthis.morphTargets = source.morphTargets;\\r\\n\\t\\tthis.morphNormals = source.morphNormals;\\r\\n\\r\\n\\t\\tthis.extensions = source.extensions;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tShaderMaterial.prototype.toJSON = function ( meta ) {\\r\\n\\r\\n\\t\\tvar data = Material.prototype.toJSON.call( this, meta );\\r\\n\\r\\n\\t\\tdata.uniforms = this.uniforms;\\r\\n\\t\\tdata.vertexShader = this.vertexShader;\\r\\n\\t\\tdata.fragmentShader = this.fragmentShader;\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t */\\r\\n\\r\\n\\tfunction Ray( origin, direction ) {\\r\\n\\r\\n\\t\\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\\r\\n\\t\\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Ray.prototype, {\\r\\n\\r\\n\\t\\tset: function ( origin, direction ) {\\r\\n\\r\\n\\t\\t\\tthis.origin.copy( origin );\\r\\n\\t\\t\\tthis.direction.copy( direction );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( ray ) {\\r\\n\\r\\n\\t\\t\\tthis.origin.copy( ray.origin );\\r\\n\\t\\t\\tthis.direction.copy( ray.direction );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tat: function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlookAt: function ( v ) {\\r\\n\\r\\n\\t\\t\\tthis.direction.copy( v ).sub( this.origin ).normalize();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\trecast: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function recast( t ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.origin.copy( this.at( t, v1 ) );\\r\\n\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tclosestPointToPoint: function ( point, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\t\\t\\tresult.subVectors( point, this.origin );\\r\\n\\t\\t\\tvar directionDistance = result.dot( this.direction );\\r\\n\\r\\n\\t\\t\\tif ( directionDistance < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\treturn result.copy( this.origin );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceToPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\treturn Math.sqrt( this.distanceSqToPoint( point ) );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceSqToPoint: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function distanceSqToPoint( point ) {\\r\\n\\r\\n\\t\\t\\t\\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\\r\\n\\r\\n\\t\\t\\t\\t// point behind the ray\\r\\n\\r\\n\\t\\t\\t\\tif ( directionDistance < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn this.origin.distanceToSquared( point );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\\r\\n\\r\\n\\t\\t\\t\\treturn v1.distanceToSquared( point );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tdistanceSqToSegment: function () {\\r\\n\\r\\n\\t\\t\\tvar segCenter = new Vector3();\\r\\n\\t\\t\\tvar segDir = new Vector3();\\r\\n\\t\\t\\tvar diff = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\\r\\n\\r\\n\\t\\t\\t\\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\\r\\n\\t\\t\\t\\t// It returns the min distance between the ray and the segment\\r\\n\\t\\t\\t\\t// defined by v0 and v1\\r\\n\\t\\t\\t\\t// It can also set two optional targets :\\r\\n\\t\\t\\t\\t// - The closest point on the ray\\r\\n\\t\\t\\t\\t// - The closest point on the segment\\r\\n\\r\\n\\t\\t\\t\\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\\r\\n\\t\\t\\t\\tsegDir.copy( v1 ).sub( v0 ).normalize();\\r\\n\\t\\t\\t\\tdiff.copy( this.origin ).sub( segCenter );\\r\\n\\r\\n\\t\\t\\t\\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\\r\\n\\t\\t\\t\\tvar a01 = - this.direction.dot( segDir );\\r\\n\\t\\t\\t\\tvar b0 = diff.dot( this.direction );\\r\\n\\t\\t\\t\\tvar b1 = - diff.dot( segDir );\\r\\n\\t\\t\\t\\tvar c = diff.lengthSq();\\r\\n\\t\\t\\t\\tvar det = Math.abs( 1 - a01 * a01 );\\r\\n\\t\\t\\t\\tvar s0, s1, sqrDist, extDet;\\r\\n\\r\\n\\t\\t\\t\\tif ( det > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// The ray and segment are not parallel.\\r\\n\\r\\n\\t\\t\\t\\t\\ts0 = a01 * b1 - b0;\\r\\n\\t\\t\\t\\t\\ts1 = a01 * b0 - b1;\\r\\n\\t\\t\\t\\t\\textDet = segExtent * det;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( s0 >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( s1 >= - extDet ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( s1 <= extDet ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// region 0\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// Minimum at interior points of ray and segment.\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvar invDet = 1 / det;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ts0 *= invDet;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ts1 *= invDet;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// region 1\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ts1 = segExtent;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// region 5\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ts1 = - segExtent;\\r\\n\\t\\t\\t\\t\\t\\t\\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\\r\\n\\t\\t\\t\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( s1 <= - extDet ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// region 4\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\\r\\n\\t\\t\\t\\t\\t\\t\\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\\r\\n\\t\\t\\t\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else if ( s1 <= extDet ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// region 3\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ts0 = 0;\\r\\n\\t\\t\\t\\t\\t\\t\\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\\r\\n\\t\\t\\t\\t\\t\\t\\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// region 2\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\\r\\n\\t\\t\\t\\t\\t\\t\\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\\r\\n\\t\\t\\t\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// Ray and segment are parallel.\\r\\n\\r\\n\\t\\t\\t\\t\\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\\r\\n\\t\\t\\t\\t\\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\\r\\n\\t\\t\\t\\t\\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( optionalPointOnRay ) {\\r\\n\\r\\n\\t\\t\\t\\t\\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( optionalPointOnSegment ) {\\r\\n\\r\\n\\t\\t\\t\\t\\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn sqrDist;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tintersectSphere: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function intersectSphere( sphere, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tv1.subVectors( sphere.center, this.origin );\\r\\n\\t\\t\\t\\tvar tca = v1.dot( this.direction );\\r\\n\\t\\t\\t\\tvar d2 = v1.dot( v1 ) - tca * tca;\\r\\n\\t\\t\\t\\tvar radius2 = sphere.radius * sphere.radius;\\r\\n\\r\\n\\t\\t\\t\\tif ( d2 > radius2 ) return null;\\r\\n\\r\\n\\t\\t\\t\\tvar thc = Math.sqrt( radius2 - d2 );\\r\\n\\r\\n\\t\\t\\t\\t// t0 = first intersect point - entrance on front of sphere\\r\\n\\t\\t\\t\\tvar t0 = tca - thc;\\r\\n\\r\\n\\t\\t\\t\\t// t1 = second intersect point - exit point on back of sphere\\r\\n\\t\\t\\t\\tvar t1 = tca + thc;\\r\\n\\r\\n\\t\\t\\t\\t// test to see if both t0 and t1 are behind the ray - if so, return null\\r\\n\\t\\t\\t\\tif ( t0 < 0 && t1 < 0 ) return null;\\r\\n\\r\\n\\t\\t\\t\\t// test to see if t0 is behind the ray:\\r\\n\\t\\t\\t\\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\\r\\n\\t\\t\\t\\t// in order to always return an intersect point that is in front of the ray.\\r\\n\\t\\t\\t\\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\\r\\n\\r\\n\\t\\t\\t\\t// else t0 is in front of the ray, so return the first collision point scaled by t0\\r\\n\\t\\t\\t\\treturn this.at( t0, optionalTarget );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tintersectsSphere: function ( sphere ) {\\r\\n\\r\\n\\t\\t\\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceToPlane: function ( plane ) {\\r\\n\\r\\n\\t\\t\\tvar denominator = plane.normal.dot( this.direction );\\r\\n\\r\\n\\t\\t\\tif ( denominator === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t// line is coplanar, return origin\\r\\n\\t\\t\\t\\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn 0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// Null is preferable to undefined since undefined means.... it is undefined\\r\\n\\r\\n\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\\r\\n\\r\\n\\t\\t\\t// Return if the ray never intersects the plane\\r\\n\\r\\n\\t\\t\\treturn t >= 0 ? t : null;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectPlane: function ( plane, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar t = this.distanceToPlane( plane );\\r\\n\\r\\n\\t\\t\\tif ( t === null ) {\\r\\n\\r\\n\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this.at( t, optionalTarget );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsPlane: function ( plane ) {\\r\\n\\r\\n\\t\\t\\t// check if the ray lies on the plane first\\r\\n\\r\\n\\t\\t\\tvar distToPoint = plane.distanceToPoint( this.origin );\\r\\n\\r\\n\\t\\t\\tif ( distToPoint === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar denominator = plane.normal.dot( this.direction );\\r\\n\\r\\n\\t\\t\\tif ( denominator * distToPoint < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// ray origin is behind the plane (and is pointing behind it)\\r\\n\\r\\n\\t\\t\\treturn false;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectBox: function ( box, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\\r\\n\\r\\n\\t\\t\\tvar invdirx = 1 / this.direction.x,\\r\\n\\t\\t\\t\\tinvdiry = 1 / this.direction.y,\\r\\n\\t\\t\\t\\tinvdirz = 1 / this.direction.z;\\r\\n\\r\\n\\t\\t\\tvar origin = this.origin;\\r\\n\\r\\n\\t\\t\\tif ( invdirx >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\ttmin = ( box.min.x - origin.x ) * invdirx;\\r\\n\\t\\t\\t\\ttmax = ( box.max.x - origin.x ) * invdirx;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\ttmin = ( box.max.x - origin.x ) * invdirx;\\r\\n\\t\\t\\t\\ttmax = ( box.min.x - origin.x ) * invdirx;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( invdiry >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\ttymin = ( box.min.y - origin.y ) * invdiry;\\r\\n\\t\\t\\t\\ttymax = ( box.max.y - origin.y ) * invdiry;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\ttymin = ( box.max.y - origin.y ) * invdiry;\\r\\n\\t\\t\\t\\ttymax = ( box.min.y - origin.y ) * invdiry;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\\r\\n\\r\\n\\t\\t\\t// These lines also handle the case where tmin or tmax is NaN\\r\\n\\t\\t\\t// (result of 0 * Infinity). x !== x returns true if x is NaN\\r\\n\\r\\n\\t\\t\\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\\r\\n\\r\\n\\t\\t\\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\\r\\n\\r\\n\\t\\t\\tif ( invdirz >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\ttzmin = ( box.min.z - origin.z ) * invdirz;\\r\\n\\t\\t\\t\\ttzmax = ( box.max.z - origin.z ) * invdirz;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\ttzmin = ( box.max.z - origin.z ) * invdirz;\\r\\n\\t\\t\\t\\ttzmax = ( box.min.z - origin.z ) * invdirz;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\\r\\n\\r\\n\\t\\t\\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\\r\\n\\r\\n\\t\\t\\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\\r\\n\\r\\n\\t\\t\\t//return point closest to the ray (positive side)\\r\\n\\r\\n\\t\\t\\tif ( tmax < 0 ) return null;\\r\\n\\r\\n\\t\\t\\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectsBox: ( function () {\\r\\n\\r\\n\\t\\t\\tvar v = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function intersectsBox( box ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.intersectBox( box, v ) !== null;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )(),\\r\\n\\r\\n\\t\\tintersectTriangle: function () {\\r\\n\\r\\n\\t\\t\\t// Compute the offset origin, edges, and normal.\\r\\n\\t\\t\\tvar diff = new Vector3();\\r\\n\\t\\t\\tvar edge1 = new Vector3();\\r\\n\\t\\t\\tvar edge2 = new Vector3();\\r\\n\\t\\t\\tvar normal = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\\r\\n\\r\\n\\t\\t\\t\\tedge1.subVectors( b, a );\\r\\n\\t\\t\\t\\tedge2.subVectors( c, a );\\r\\n\\t\\t\\t\\tnormal.crossVectors( edge1, edge2 );\\r\\n\\r\\n\\t\\t\\t\\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\\r\\n\\t\\t\\t\\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\\r\\n\\t\\t\\t\\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\\r\\n\\t\\t\\t\\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\\r\\n\\t\\t\\t\\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\\r\\n\\t\\t\\t\\tvar DdN = this.direction.dot( normal );\\r\\n\\t\\t\\t\\tvar sign;\\r\\n\\r\\n\\t\\t\\t\\tif ( DdN > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( backfaceCulling ) return null;\\r\\n\\t\\t\\t\\t\\tsign = 1;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( DdN < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tsign = - 1;\\r\\n\\t\\t\\t\\t\\tDdN = - DdN;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tdiff.subVectors( this.origin, a );\\r\\n\\t\\t\\t\\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\\r\\n\\r\\n\\t\\t\\t\\t// b1 < 0, no intersection\\r\\n\\t\\t\\t\\tif ( DdQxE2 < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\\r\\n\\r\\n\\t\\t\\t\\t// b2 < 0, no intersection\\r\\n\\t\\t\\t\\tif ( DdE1xQ < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// b1+b2 > 1, no intersection\\r\\n\\t\\t\\t\\tif ( DdQxE2 + DdE1xQ > DdN ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// Line intersects triangle, check if ray does.\\r\\n\\t\\t\\t\\tvar QdN = - sign * diff.dot( normal );\\r\\n\\r\\n\\t\\t\\t\\t// t < 0, no intersection\\r\\n\\t\\t\\t\\tif ( QdN < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// Ray intersects triangle.\\r\\n\\t\\t\\t\\treturn this.at( QdN / DdN, optionalTarget );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tapplyMatrix4: function ( matrix4 ) {\\r\\n\\r\\n\\t\\t\\tthis.origin.applyMatrix4( matrix4 );\\r\\n\\t\\t\\tthis.direction.transformDirection( matrix4 );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( ray ) {\\r\\n\\r\\n\\t\\t\\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t */\\r\\n\\r\\n\\tfunction Line3( start, end ) {\\r\\n\\r\\n\\t\\tthis.start = ( start !== undefined ) ? start : new Vector3();\\r\\n\\t\\tthis.end = ( end !== undefined ) ? end : new Vector3();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Line3.prototype, {\\r\\n\\r\\n\\t\\tset: function ( start, end ) {\\r\\n\\r\\n\\t\\t\\tthis.start.copy( start );\\r\\n\\t\\t\\tthis.end.copy( end );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( line ) {\\r\\n\\r\\n\\t\\t\\tthis.start.copy( line.start );\\r\\n\\t\\t\\tthis.end.copy( line.end );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetCenter: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\t\\t\\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdelta: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\t\\t\\treturn result.subVectors( this.end, this.start );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistanceSq: function () {\\r\\n\\r\\n\\t\\t\\treturn this.start.distanceToSquared( this.end );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdistance: function () {\\r\\n\\r\\n\\t\\t\\treturn this.start.distanceTo( this.end );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tat: function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclosestPointToPointParameter: function () {\\r\\n\\r\\n\\t\\t\\tvar startP = new Vector3();\\r\\n\\t\\t\\tvar startEnd = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function closestPointToPointParameter( point, clampToLine ) {\\r\\n\\r\\n\\t\\t\\t\\tstartP.subVectors( point, this.start );\\r\\n\\t\\t\\t\\tstartEnd.subVectors( this.end, this.start );\\r\\n\\r\\n\\t\\t\\t\\tvar startEnd2 = startEnd.dot( startEnd );\\r\\n\\t\\t\\t\\tvar startEnd_startP = startEnd.dot( startP );\\r\\n\\r\\n\\t\\t\\t\\tvar t = startEnd_startP / startEnd2;\\r\\n\\r\\n\\t\\t\\t\\tif ( clampToLine ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tt = _Math.clamp( t, 0, 1 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn t;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar t = this.closestPointToPointParameter( point, clampToLine );\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tapplyMatrix4: function ( matrix ) {\\r\\n\\r\\n\\t\\t\\tthis.start.applyMatrix4( matrix );\\r\\n\\t\\t\\tthis.end.applyMatrix4( matrix );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tequals: function ( line ) {\\r\\n\\r\\n\\t\\t\\treturn line.start.equals( this.start ) && line.end.equals( this.end );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Triangle( a, b, c ) {\\r\\n\\r\\n\\t\\tthis.a = ( a !== undefined ) ? a : new Vector3();\\r\\n\\t\\tthis.b = ( b !== undefined ) ? b : new Vector3();\\r\\n\\t\\tthis.c = ( c !== undefined ) ? c : new Vector3();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Triangle, {\\r\\n\\r\\n\\t\\tnormal: function () {\\r\\n\\r\\n\\t\\t\\tvar v0 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function normal( a, b, c, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\t\\tresult.subVectors( c, b );\\r\\n\\t\\t\\t\\tv0.subVectors( a, b );\\r\\n\\t\\t\\t\\tresult.cross( v0 );\\r\\n\\r\\n\\t\\t\\t\\tvar resultLengthSq = result.lengthSq();\\r\\n\\t\\t\\t\\tif ( resultLengthSq > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn result.set( 0, 0, 0 );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\t// static/instance method to calculate barycentric coordinates\\r\\n\\t\\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\\r\\n\\t\\tbarycoordFromPoint: function () {\\r\\n\\r\\n\\t\\t\\tvar v0 = new Vector3();\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\t\\t\\tvar v2 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tv0.subVectors( c, a );\\r\\n\\t\\t\\t\\tv1.subVectors( b, a );\\r\\n\\t\\t\\t\\tv2.subVectors( point, a );\\r\\n\\r\\n\\t\\t\\t\\tvar dot00 = v0.dot( v0 );\\r\\n\\t\\t\\t\\tvar dot01 = v0.dot( v1 );\\r\\n\\t\\t\\t\\tvar dot02 = v0.dot( v2 );\\r\\n\\t\\t\\t\\tvar dot11 = v1.dot( v1 );\\r\\n\\t\\t\\t\\tvar dot12 = v1.dot( v2 );\\r\\n\\r\\n\\t\\t\\t\\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\t\\t\\t// collinear or singular triangle\\r\\n\\t\\t\\t\\tif ( denom === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// arbitrary location outside of triangle?\\r\\n\\t\\t\\t\\t\\t// not sure if this is the best idea, maybe should be returning undefined\\r\\n\\t\\t\\t\\t\\treturn result.set( - 2, - 1, - 1 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar invDenom = 1 / denom;\\r\\n\\t\\t\\t\\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\\r\\n\\t\\t\\t\\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\\r\\n\\r\\n\\t\\t\\t\\t// barycentric coordinates must always sum to 1\\r\\n\\t\\t\\t\\treturn result.set( 1 - u - v, v, u );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tcontainsPoint: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function containsPoint( point, a, b, c ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = Triangle.barycoordFromPoint( point, a, b, c, v1 );\\r\\n\\r\\n\\t\\t\\t\\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}()\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Triangle.prototype, {\\r\\n\\r\\n\\t\\tset: function ( a, b, c ) {\\r\\n\\r\\n\\t\\t\\tthis.a.copy( a );\\r\\n\\t\\t\\tthis.b.copy( b );\\r\\n\\t\\t\\tthis.c.copy( c );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\\r\\n\\r\\n\\t\\t\\tthis.a.copy( points[ i0 ] );\\r\\n\\t\\t\\tthis.b.copy( points[ i1 ] );\\r\\n\\t\\t\\tthis.c.copy( points[ i2 ] );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( triangle ) {\\r\\n\\r\\n\\t\\t\\tthis.a.copy( triangle.a );\\r\\n\\t\\t\\tthis.b.copy( triangle.b );\\r\\n\\t\\t\\tthis.c.copy( triangle.c );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tarea: function () {\\r\\n\\r\\n\\t\\t\\tvar v0 = new Vector3();\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function area() {\\r\\n\\r\\n\\t\\t\\t\\tv0.subVectors( this.c, this.b );\\r\\n\\t\\t\\t\\tv1.subVectors( this.a, this.b );\\r\\n\\r\\n\\t\\t\\t\\treturn v0.cross( v1 ).length() * 0.5;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tmidpoint: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\t\\t\\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormal: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\treturn Triangle.normal( this.a, this.b, this.c, optionalTarget );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tplane: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar result = optionalTarget || new Plane();\\r\\n\\r\\n\\t\\t\\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tbarycoordFromPoint: function ( point, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\treturn Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcontainsPoint: function ( point ) {\\r\\n\\r\\n\\t\\t\\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclosestPointToPoint: function () {\\r\\n\\r\\n\\t\\t\\tvar plane = new Plane();\\r\\n\\t\\t\\tvar edgeList = [ new Line3(), new Line3(), new Line3() ];\\r\\n\\t\\t\\tvar projectedPoint = new Vector3();\\r\\n\\t\\t\\tvar closestPoint = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function closestPointToPoint( point, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar result = optionalTarget || new Vector3();\\r\\n\\t\\t\\t\\tvar minDistance = Infinity;\\r\\n\\r\\n\\t\\t\\t\\t// project the point onto the plane of the triangle\\r\\n\\r\\n\\t\\t\\t\\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\\r\\n\\t\\t\\t\\tplane.projectPoint( point, projectedPoint );\\r\\n\\r\\n\\t\\t\\t\\t// check if the projection lies within the triangle\\r\\n\\r\\n\\t\\t\\t\\tif ( this.containsPoint( projectedPoint ) === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// if so, this is the closest point\\r\\n\\r\\n\\t\\t\\t\\t\\tresult.copy( projectedPoint );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\\r\\n\\r\\n\\t\\t\\t\\t\\tedgeList[ 0 ].set( this.a, this.b );\\r\\n\\t\\t\\t\\t\\tedgeList[ 1 ].set( this.b, this.c );\\r\\n\\t\\t\\t\\t\\tedgeList[ 2 ].set( this.c, this.a );\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < edgeList.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar distance = projectedPoint.distanceToSquared( closestPoint );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( distance < minDistance ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tminDistance = distance;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tresult.copy( closestPoint );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tequals: function ( triangle ) {\\r\\n\\r\\n\\t\\t\\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author jonobr1 / http://jonobr1.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Mesh( geometry, material ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Mesh';\\r\\n\\r\\n\\t\\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\\r\\n\\t\\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\\r\\n\\r\\n\\t\\tthis.drawMode = TrianglesDrawMode;\\r\\n\\r\\n\\t\\tthis.updateMorphTargets();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Mesh,\\r\\n\\r\\n\\t\\tisMesh: true,\\r\\n\\r\\n\\t\\tsetDrawMode: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.drawMode = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tObject3D.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.drawMode = source.drawMode;\\r\\n\\r\\n\\t\\t\\tif ( source.morphTargetInfluences !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( source.morphTargetDictionary !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateMorphTargets: function () {\\r\\n\\r\\n\\t\\t\\tvar geometry = this.geometry;\\r\\n\\t\\t\\tvar m, ml, name;\\r\\n\\r\\n\\t\\t\\tif ( geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\tvar morphAttributes = geometry.morphAttributes;\\r\\n\\t\\t\\t\\tvar keys = Object.keys( morphAttributes );\\r\\n\\r\\n\\t\\t\\t\\tif ( keys.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( morphAttribute !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.morphTargetInfluences = [];\\r\\n\\t\\t\\t\\t\\t\\tthis.morphTargetDictionary = {};\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tname = morphAttribute[ m ].name || String( m );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.morphTargetInfluences.push( 0 );\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.morphTargetDictionary[ name ] = m;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tvar morphTargets = geometry.morphTargets;\\r\\n\\r\\n\\t\\t\\t\\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.morphTargetInfluences = [];\\r\\n\\t\\t\\t\\t\\tthis.morphTargetDictionary = {};\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tname = morphTargets[ m ].name || String( m );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.morphTargetInfluences.push( 0 );\\r\\n\\t\\t\\t\\t\\t\\tthis.morphTargetDictionary[ name ] = m;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\traycast: ( function () {\\r\\n\\r\\n\\t\\t\\tvar inverseMatrix = new Matrix4();\\r\\n\\t\\t\\tvar ray = new Ray();\\r\\n\\t\\t\\tvar sphere = new Sphere();\\r\\n\\r\\n\\t\\t\\tvar vA = new Vector3();\\r\\n\\t\\t\\tvar vB = new Vector3();\\r\\n\\t\\t\\tvar vC = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar tempA = new Vector3();\\r\\n\\t\\t\\tvar tempB = new Vector3();\\r\\n\\t\\t\\tvar tempC = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar uvA = new Vector2();\\r\\n\\t\\t\\tvar uvB = new Vector2();\\r\\n\\t\\t\\tvar uvC = new Vector2();\\r\\n\\r\\n\\t\\t\\tvar barycoord = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar intersectionPoint = new Vector3();\\r\\n\\t\\t\\tvar intersectionPointWorld = new Vector3();\\r\\n\\r\\n\\t\\t\\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\\r\\n\\r\\n\\t\\t\\t\\tTriangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\\r\\n\\r\\n\\t\\t\\t\\tuv1.multiplyScalar( barycoord.x );\\r\\n\\t\\t\\t\\tuv2.multiplyScalar( barycoord.y );\\r\\n\\t\\t\\t\\tuv3.multiplyScalar( barycoord.z );\\r\\n\\r\\n\\t\\t\\t\\tuv1.add( uv2 ).add( uv3 );\\r\\n\\r\\n\\t\\t\\t\\treturn uv1.clone();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\\r\\n\\r\\n\\t\\t\\t\\tvar intersect;\\r\\n\\r\\n\\t\\t\\t\\tif ( material.side === BackSide ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( intersect === null ) return null;\\r\\n\\r\\n\\t\\t\\t\\tintersectionPointWorld.copy( point );\\r\\n\\t\\t\\t\\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\\r\\n\\r\\n\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\\r\\n\\r\\n\\t\\t\\t\\treturn {\\r\\n\\t\\t\\t\\t\\tdistance: distance,\\r\\n\\t\\t\\t\\t\\tpoint: intersectionPointWorld.clone(),\\r\\n\\t\\t\\t\\t\\tobject: object\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\\r\\n\\r\\n\\t\\t\\t\\tvA.fromBufferAttribute( position, a );\\r\\n\\t\\t\\t\\tvB.fromBufferAttribute( position, b );\\r\\n\\t\\t\\t\\tvC.fromBufferAttribute( position, c );\\r\\n\\r\\n\\t\\t\\t\\tvar intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );\\r\\n\\r\\n\\t\\t\\t\\tif ( intersection ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( uv ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuvA.fromBufferAttribute( uv, a );\\r\\n\\t\\t\\t\\t\\t\\tuvB.fromBufferAttribute( uv, b );\\r\\n\\t\\t\\t\\t\\t\\tuvC.fromBufferAttribute( uv, c );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tintersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );\\r\\n\\t\\t\\t\\t\\tintersection.faceIndex = a;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn intersection;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn function raycast( raycaster, intersects ) {\\r\\n\\r\\n\\t\\t\\t\\tvar geometry = this.geometry;\\r\\n\\t\\t\\t\\tvar material = this.material;\\r\\n\\t\\t\\t\\tvar matrixWorld = this.matrixWorld;\\r\\n\\r\\n\\t\\t\\t\\tif ( material === undefined ) return;\\r\\n\\r\\n\\t\\t\\t\\t// Checking boundingSphere distance to ray\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\\r\\n\\r\\n\\t\\t\\t\\tsphere.copy( geometry.boundingSphere );\\r\\n\\t\\t\\t\\tsphere.applyMatrix4( matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\\r\\n\\r\\n\\t\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\t\\tinverseMatrix.getInverse( matrixWorld );\\r\\n\\t\\t\\t\\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\\r\\n\\r\\n\\t\\t\\t\\t// Check boundingBox before continuing\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.boundingBox !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar intersection;\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar a, b, c;\\r\\n\\t\\t\\t\\t\\tvar index = geometry.index;\\r\\n\\t\\t\\t\\t\\tvar position = geometry.attributes.position;\\r\\n\\t\\t\\t\\t\\tvar uv = geometry.attributes.uv;\\r\\n\\t\\t\\t\\t\\tvar i, l;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// indexed buffer geometry\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( i = 0, l = index.count; i < l; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ta = index.getX( i );\\r\\n\\t\\t\\t\\t\\t\\t\\tb = index.getX( i + 1 );\\r\\n\\t\\t\\t\\t\\t\\t\\tc = index.getX( i + 2 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( intersection ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tintersects.push( intersection );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else if ( position !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// non-indexed buffer geometry\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( i = 0, l = position.count; i < l; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ta = i;\\r\\n\\t\\t\\t\\t\\t\\t\\tb = i + 1;\\r\\n\\t\\t\\t\\t\\t\\t\\tc = i + 2;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( intersection ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tintersection.index = a; // triangle number in positions buffer semantics\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tintersects.push( intersection );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( geometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar fvA, fvB, fvC;\\r\\n\\t\\t\\t\\t\\tvar isMultiMaterial = Array.isArray( material );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar vertices = geometry.vertices;\\r\\n\\t\\t\\t\\t\\tvar faces = geometry.faces;\\r\\n\\t\\t\\t\\t\\tvar uvs;\\r\\n\\r\\n\\t\\t\\t\\t\\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\\r\\n\\t\\t\\t\\t\\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar face = faces[ f ];\\r\\n\\t\\t\\t\\t\\t\\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( faceMaterial === undefined ) continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfvA = vertices[ face.a ];\\r\\n\\t\\t\\t\\t\\t\\tfvB = vertices[ face.b ];\\r\\n\\t\\t\\t\\t\\t\\tfvC = vertices[ face.c ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( faceMaterial.morphTargets === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar morphTargets = geometry.morphTargets;\\r\\n\\t\\t\\t\\t\\t\\t\\tvar morphInfluences = this.morphTargetInfluences;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvA.set( 0, 0, 0 );\\r\\n\\t\\t\\t\\t\\t\\t\\tvB.set( 0, 0, 0 );\\r\\n\\t\\t\\t\\t\\t\\t\\tvC.set( 0, 0, 0 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvar influence = morphInfluences[ t ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( influence === 0 ) continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvar targets = morphTargets[ t ].vertices;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvA.add( fvA );\\r\\n\\t\\t\\t\\t\\t\\t\\tvB.add( fvB );\\r\\n\\t\\t\\t\\t\\t\\t\\tvC.add( fvC );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfvA = vA;\\r\\n\\t\\t\\t\\t\\t\\t\\tfvB = vB;\\r\\n\\t\\t\\t\\t\\t\\t\\tfvC = vC;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tintersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( intersection ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( uvs && uvs[ f ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvar uvs_f = uvs[ f ];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tuvA.copy( uvs_f[ 0 ] );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tuvB.copy( uvs_f[ 1 ] );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tuvC.copy( uvs_f[ 2 ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tintersection.face = face;\\r\\n\\t\\t\\t\\t\\t\\t\\tintersection.faceIndex = f;\\r\\n\\t\\t\\t\\t\\t\\t\\tintersects.push( intersection );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}() ),\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.geometry, this.material ).copy( this );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {\\r\\n\\r\\n\\t\\tvar clearColor = new Color( 0x000000 );\\r\\n\\t\\tvar clearAlpha = 0;\\r\\n\\r\\n\\t\\tvar planeCamera, planeMesh;\\r\\n\\t\\tvar boxMesh;\\r\\n\\r\\n\\t\\tfunction render( renderList, scene, camera, forceClear ) {\\r\\n\\r\\n\\t\\t\\tvar background = scene.background;\\r\\n\\r\\n\\t\\t\\tif ( background === null ) {\\r\\n\\r\\n\\t\\t\\t\\tsetClear( clearColor, clearAlpha );\\r\\n\\r\\n\\t\\t\\t} else if ( background && background.isColor ) {\\r\\n\\r\\n\\t\\t\\t\\tsetClear( background, 1 );\\r\\n\\t\\t\\t\\tforceClear = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( renderer.autoClear || forceClear ) {\\r\\n\\r\\n\\t\\t\\t\\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( background && background.isCubeTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( boxMesh === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tboxMesh = new Mesh(\\r\\n\\t\\t\\t\\t\\t\\tnew BoxBufferGeometry( 1, 1, 1 ),\\r\\n\\t\\t\\t\\t\\t\\tnew ShaderMaterial( {\\r\\n\\t\\t\\t\\t\\t\\t\\tuniforms: ShaderLib.cube.uniforms,\\r\\n\\t\\t\\t\\t\\t\\t\\tvertexShader: ShaderLib.cube.vertexShader,\\r\\n\\t\\t\\t\\t\\t\\t\\tfragmentShader: ShaderLib.cube.fragmentShader,\\r\\n\\t\\t\\t\\t\\t\\t\\tside: BackSide,\\r\\n\\t\\t\\t\\t\\t\\t\\tdepthTest: true,\\r\\n\\t\\t\\t\\t\\t\\t\\tdepthWrite: false,\\r\\n\\t\\t\\t\\t\\t\\t\\tfog: false\\r\\n\\t\\t\\t\\t\\t\\t} )\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\tboxMesh.geometry.removeAttribute( 'normal' );\\r\\n\\t\\t\\t\\t\\tboxMesh.geometry.removeAttribute( 'uv' );\\r\\n\\r\\n\\t\\t\\t\\t\\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.matrixWorld.copyPosition( camera.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\t\\tgeometries.update( boxMesh.geometry );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tboxMesh.material.uniforms.tCube.value = background;\\r\\n\\r\\n\\t\\t\\t\\trenderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );\\r\\n\\r\\n\\t\\t\\t} else if ( background && background.isTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( planeCamera === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\\r\\n\\r\\n\\t\\t\\t\\t\\tplaneMesh = new Mesh(\\r\\n\\t\\t\\t\\t\\t\\tnew PlaneBufferGeometry( 2, 2 ),\\r\\n\\t\\t\\t\\t\\t\\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\tgeometries.update( planeMesh.geometry );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tplaneMesh.material.map = background;\\r\\n\\r\\n\\t\\t\\t\\t// TODO Push this to renderList\\r\\n\\r\\n\\t\\t\\t\\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setClear( color, alpha ) {\\r\\n\\r\\n\\t\\t\\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tgetClearColor: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn clearColor;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tsetClearColor: function ( color, alpha ) {\\r\\n\\r\\n\\t\\t\\t\\tclearColor.set( color );\\r\\n\\t\\t\\t\\tclearAlpha = alpha !== undefined ? alpha : 1;\\r\\n\\t\\t\\t\\tsetClear( clearColor, clearAlpha );\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tgetClearAlpha: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn clearAlpha;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tsetClearAlpha: function ( alpha ) {\\r\\n\\r\\n\\t\\t\\t\\tclearAlpha = alpha;\\r\\n\\t\\t\\t\\tsetClear( clearColor, clearAlpha );\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\trender: render\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction painterSortStable( a, b ) {\\r\\n\\r\\n\\t\\tif ( a.renderOrder !== b.renderOrder ) {\\r\\n\\r\\n\\t\\t\\treturn a.renderOrder - b.renderOrder;\\r\\n\\r\\n\\t\\t} else if ( a.program && b.program && a.program !== b.program ) {\\r\\n\\r\\n\\t\\t\\treturn a.program.id - b.program.id;\\r\\n\\r\\n\\t\\t} else if ( a.material.id !== b.material.id ) {\\r\\n\\r\\n\\t\\t\\treturn a.material.id - b.material.id;\\r\\n\\r\\n\\t\\t} else if ( a.z !== b.z ) {\\r\\n\\r\\n\\t\\t\\treturn a.z - b.z;\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\treturn a.id - b.id;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction reversePainterSortStable( a, b ) {\\r\\n\\r\\n\\t\\tif ( a.renderOrder !== b.renderOrder ) {\\r\\n\\r\\n\\t\\t\\treturn a.renderOrder - b.renderOrder;\\r\\n\\r\\n\\t\\t} if ( a.z !== b.z ) {\\r\\n\\r\\n\\t\\t\\treturn b.z - a.z;\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\treturn a.id - b.id;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction WebGLRenderList() {\\r\\n\\r\\n\\t\\tvar renderItems = [];\\r\\n\\t\\tvar renderItemsIndex = 0;\\r\\n\\r\\n\\t\\tvar opaque = [];\\r\\n\\t\\tvar transparent = [];\\r\\n\\r\\n\\t\\tfunction init() {\\r\\n\\r\\n\\t\\t\\trenderItemsIndex = 0;\\r\\n\\r\\n\\t\\t\\topaque.length = 0;\\r\\n\\t\\t\\ttransparent.length = 0;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction push( object, geometry, material, z, group ) {\\r\\n\\r\\n\\t\\t\\tvar renderItem = renderItems[ renderItemsIndex ];\\r\\n\\r\\n\\t\\t\\tif ( renderItem === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\trenderItem = {\\r\\n\\t\\t\\t\\t\\tid: object.id,\\r\\n\\t\\t\\t\\t\\tobject: object,\\r\\n\\t\\t\\t\\t\\tgeometry: geometry,\\r\\n\\t\\t\\t\\t\\tmaterial: material,\\r\\n\\t\\t\\t\\t\\tprogram: material.program,\\r\\n\\t\\t\\t\\t\\trenderOrder: object.renderOrder,\\r\\n\\t\\t\\t\\t\\tz: z,\\r\\n\\t\\t\\t\\t\\tgroup: group\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\trenderItems[ renderItemsIndex ] = renderItem;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\trenderItem.id = object.id;\\r\\n\\t\\t\\t\\trenderItem.object = object;\\r\\n\\t\\t\\t\\trenderItem.geometry = geometry;\\r\\n\\t\\t\\t\\trenderItem.material = material;\\r\\n\\t\\t\\t\\trenderItem.program = material.program;\\r\\n\\t\\t\\t\\trenderItem.renderOrder = object.renderOrder;\\r\\n\\t\\t\\t\\trenderItem.z = z;\\r\\n\\t\\t\\t\\trenderItem.group = group;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t( material.transparent === true ? transparent : opaque ).push( renderItem );\\r\\n\\r\\n\\t\\t\\trenderItemsIndex ++;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction sort() {\\r\\n\\r\\n\\t\\t\\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\\r\\n\\t\\t\\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\topaque: opaque,\\r\\n\\t\\t\\ttransparent: transparent,\\r\\n\\r\\n\\t\\t\\tinit: init,\\r\\n\\t\\t\\tpush: push,\\r\\n\\r\\n\\t\\t\\tsort: sort\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction WebGLRenderLists() {\\r\\n\\r\\n\\t\\tvar lists = {};\\r\\n\\r\\n\\t\\tfunction get( scene, camera ) {\\r\\n\\r\\n\\t\\t\\tvar hash = scene.id + ',' + camera.id;\\r\\n\\t\\t\\tvar list = lists[ hash ];\\r\\n\\r\\n\\t\\t\\tif ( list === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// console.log( 'THREE.WebGLRenderLists:', hash );\\r\\n\\r\\n\\t\\t\\t\\tlist = new WebGLRenderList();\\r\\n\\t\\t\\t\\tlists[ hash ] = list;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn list;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction dispose() {\\r\\n\\r\\n\\t\\t\\tlists = {};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tget: get,\\r\\n\\t\\t\\tdispose: dispose\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction absNumericalSort( a, b ) {\\r\\n\\r\\n\\t\\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction WebGLMorphtargets( gl ) {\\r\\n\\r\\n\\t\\tvar influencesList = {};\\r\\n\\t\\tvar morphInfluences = new Float32Array( 8 );\\r\\n\\r\\n\\t\\tfunction update( object, geometry, material, program ) {\\r\\n\\r\\n\\t\\t\\tvar objectInfluences = object.morphTargetInfluences;\\r\\n\\r\\n\\t\\t\\tvar length = objectInfluences.length;\\r\\n\\r\\n\\t\\t\\tvar influences = influencesList[ geometry.id ];\\r\\n\\r\\n\\t\\t\\tif ( influences === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// initialise list\\r\\n\\r\\n\\t\\t\\t\\tinfluences = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tinfluences[ i ] = [ i, 0 ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tinfluencesList[ geometry.id ] = influences;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\\r\\n\\t\\t\\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\\r\\n\\r\\n\\t\\t\\t// Remove current morphAttributes\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar influence = influences[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( influence[ 1 ] !== 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\\r\\n\\t\\t\\t\\t\\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Collect influences\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar influence = influences[ i ];\\r\\n\\r\\n\\t\\t\\t\\tinfluence[ 0 ] = i;\\r\\n\\t\\t\\t\\tinfluence[ 1 ] = objectInfluences[ i ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tinfluences.sort( absNumericalSort );\\r\\n\\r\\n\\t\\t\\t// Add morphAttributes\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 8; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar influence = influences[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( influence ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar index = influence[ 0 ];\\r\\n\\t\\t\\t\\t\\tvar value = influence[ 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( value ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\\r\\n\\t\\t\\t\\t\\t\\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmorphInfluences[ i ] = value;\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tmorphInfluences[ i ] = 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tupdate: update\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {\\r\\n\\r\\n\\t\\tvar mode;\\r\\n\\r\\n\\t\\tfunction setMode( value ) {\\r\\n\\r\\n\\t\\t\\tmode = value;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar type, bytesPerElement;\\r\\n\\r\\n\\t\\tfunction setIndex( value ) {\\r\\n\\r\\n\\t\\t\\ttype = value.type;\\r\\n\\t\\t\\tbytesPerElement = value.bytesPerElement;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction render( start, count ) {\\r\\n\\r\\n\\t\\t\\tgl.drawElements( mode, count, type, start * bytesPerElement );\\r\\n\\r\\n\\t\\t\\tinfoRender.calls ++;\\r\\n\\t\\t\\tinfoRender.vertices += count;\\r\\n\\r\\n\\t\\t\\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\\r\\n\\t\\t\\telse if ( mode === gl.POINTS ) infoRender.points += count;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction renderInstances( geometry, start, count ) {\\r\\n\\r\\n\\t\\t\\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\\r\\n\\r\\n\\t\\t\\tif ( extension === null ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\textension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\\r\\n\\r\\n\\t\\t\\tinfoRender.calls ++;\\r\\n\\t\\t\\tinfoRender.vertices += count * geometry.maxInstancedCount;\\r\\n\\r\\n\\t\\t\\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\\r\\n\\t\\t\\telse if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tthis.setMode = setMode;\\r\\n\\t\\tthis.setIndex = setIndex;\\r\\n\\t\\tthis.render = render;\\r\\n\\t\\tthis.renderInstances = renderInstances;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLBufferRenderer( gl, extensions, infoRender ) {\\r\\n\\r\\n\\t\\tvar mode;\\r\\n\\r\\n\\t\\tfunction setMode( value ) {\\r\\n\\r\\n\\t\\t\\tmode = value;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction render( start, count ) {\\r\\n\\r\\n\\t\\t\\tgl.drawArrays( mode, start, count );\\r\\n\\r\\n\\t\\t\\tinfoRender.calls ++;\\r\\n\\t\\t\\tinfoRender.vertices += count;\\r\\n\\r\\n\\t\\t\\tif ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;\\r\\n\\t\\t\\telse if ( mode === gl.POINTS ) infoRender.points += count;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction renderInstances( geometry, start, count ) {\\r\\n\\r\\n\\t\\t\\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\\r\\n\\r\\n\\t\\t\\tif ( extension === null ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar position = geometry.attributes.position;\\r\\n\\r\\n\\t\\t\\tif ( position.isInterleavedBufferAttribute ) {\\r\\n\\r\\n\\t\\t\\t\\tcount = position.data.count;\\r\\n\\r\\n\\t\\t\\t\\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\textension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tinfoRender.calls ++;\\r\\n\\t\\t\\tinfoRender.vertices += count * geometry.maxInstancedCount;\\r\\n\\r\\n\\t\\t\\tif ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;\\r\\n\\t\\t\\telse if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tthis.setMode = setMode;\\r\\n\\t\\tthis.render = render;\\r\\n\\t\\tthis.renderInstances = renderInstances;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLGeometries( gl, attributes, infoMemory ) {\\r\\n\\r\\n\\t\\tvar geometries = {};\\r\\n\\t\\tvar wireframeAttributes = {};\\r\\n\\r\\n\\t\\tfunction onGeometryDispose( event ) {\\r\\n\\r\\n\\t\\t\\tvar geometry = event.target;\\r\\n\\t\\t\\tvar buffergeometry = geometries[ geometry.id ];\\r\\n\\r\\n\\t\\t\\tif ( buffergeometry.index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tattributes.remove( buffergeometry.index );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var name in buffergeometry.attributes ) {\\r\\n\\r\\n\\t\\t\\t\\tattributes.remove( buffergeometry.attributes[ name ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\\r\\n\\r\\n\\t\\t\\tdelete geometries[ geometry.id ];\\r\\n\\r\\n\\t\\t\\t// TODO Remove duplicate code\\r\\n\\r\\n\\t\\t\\tvar attribute = wireframeAttributes[ geometry.id ];\\r\\n\\r\\n\\t\\t\\tif ( attribute ) {\\r\\n\\r\\n\\t\\t\\t\\tattributes.remove( attribute );\\r\\n\\t\\t\\t\\tdelete wireframeAttributes[ geometry.id ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tattribute = wireframeAttributes[ buffergeometry.id ];\\r\\n\\r\\n\\t\\t\\tif ( attribute ) {\\r\\n\\r\\n\\t\\t\\t\\tattributes.remove( attribute );\\r\\n\\t\\t\\t\\tdelete wireframeAttributes[ buffergeometry.id ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tinfoMemory.geometries --;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction get( object, geometry ) {\\r\\n\\r\\n\\t\\t\\tvar buffergeometry = geometries[ geometry.id ];\\r\\n\\r\\n\\t\\t\\tif ( buffergeometry ) return buffergeometry;\\r\\n\\r\\n\\t\\t\\tgeometry.addEventListener( 'dispose', onGeometryDispose );\\r\\n\\r\\n\\t\\t\\tif ( geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\tbuffergeometry = geometry;\\r\\n\\r\\n\\t\\t\\t} else if ( geometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry._bufferGeometry === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tbuffergeometry = geometry._bufferGeometry;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tgeometries[ geometry.id ] = buffergeometry;\\r\\n\\r\\n\\t\\t\\tinfoMemory.geometries ++;\\r\\n\\r\\n\\t\\t\\treturn buffergeometry;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction update( geometry ) {\\r\\n\\r\\n\\t\\t\\tvar index = geometry.index;\\r\\n\\t\\t\\tvar geometryAttributes = geometry.attributes;\\r\\n\\r\\n\\t\\t\\tif ( index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var name in geometryAttributes ) {\\r\\n\\r\\n\\t\\t\\t\\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// morph targets\\r\\n\\r\\n\\t\\t\\tvar morphAttributes = geometry.morphAttributes;\\r\\n\\r\\n\\t\\t\\tfor ( var name in morphAttributes ) {\\r\\n\\r\\n\\t\\t\\t\\tvar array = morphAttributes[ name ];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction getWireframeAttribute( geometry ) {\\r\\n\\r\\n\\t\\t\\tvar attribute = wireframeAttributes[ geometry.id ];\\r\\n\\r\\n\\t\\t\\tif ( attribute ) return attribute;\\r\\n\\r\\n\\t\\t\\tvar indices = [];\\r\\n\\r\\n\\t\\t\\tvar geometryIndex = geometry.index;\\r\\n\\t\\t\\tvar geometryAttributes = geometry.attributes;\\r\\n\\r\\n\\t\\t\\t// console.time( 'wireframe' );\\r\\n\\r\\n\\t\\t\\tif ( geometryIndex !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tvar array = geometryIndex.array;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar a = array[ i + 0 ];\\r\\n\\t\\t\\t\\t\\tvar b = array[ i + 1 ];\\r\\n\\t\\t\\t\\t\\tvar c = array[ i + 2 ];\\r\\n\\r\\n\\t\\t\\t\\t\\tindices.push( a, b, b, c, c, a );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tvar array = geometryAttributes.position.array;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar a = i + 0;\\r\\n\\t\\t\\t\\t\\tvar b = i + 1;\\r\\n\\t\\t\\t\\t\\tvar c = i + 2;\\r\\n\\r\\n\\t\\t\\t\\t\\tindices.push( a, b, b, c, c, a );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// console.timeEnd( 'wireframe' );\\r\\n\\r\\n\\t\\t\\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\\r\\n\\r\\n\\t\\t\\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\\r\\n\\r\\n\\t\\t\\twireframeAttributes[ geometry.id ] = attribute;\\r\\n\\r\\n\\t\\t\\treturn attribute;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tget: get,\\r\\n\\t\\t\\tupdate: update,\\r\\n\\r\\n\\t\\t\\tgetWireframeAttribute: getWireframeAttribute\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction UniformsCache() {\\r\\n\\r\\n\\t\\tvar lights = {};\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tget: function ( light ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( lights[ light.id ] !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn lights[ light.id ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar uniforms;\\r\\n\\r\\n\\t\\t\\t\\tswitch ( light.type ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'DirectionalLight':\\r\\n\\t\\t\\t\\t\\t\\tuniforms = {\\r\\n\\t\\t\\t\\t\\t\\t\\tdirection: new Vector3(),\\r\\n\\t\\t\\t\\t\\t\\t\\tcolor: new Color(),\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tshadow: false,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowBias: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowRadius: 1,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowMapSize: new Vector2()\\r\\n\\t\\t\\t\\t\\t\\t};\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'SpotLight':\\r\\n\\t\\t\\t\\t\\t\\tuniforms = {\\r\\n\\t\\t\\t\\t\\t\\t\\tposition: new Vector3(),\\r\\n\\t\\t\\t\\t\\t\\t\\tdirection: new Vector3(),\\r\\n\\t\\t\\t\\t\\t\\t\\tcolor: new Color(),\\r\\n\\t\\t\\t\\t\\t\\t\\tdistance: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\tconeCos: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\tpenumbraCos: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\tdecay: 0,\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tshadow: false,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowBias: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowRadius: 1,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowMapSize: new Vector2()\\r\\n\\t\\t\\t\\t\\t\\t};\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'PointLight':\\r\\n\\t\\t\\t\\t\\t\\tuniforms = {\\r\\n\\t\\t\\t\\t\\t\\t\\tposition: new Vector3(),\\r\\n\\t\\t\\t\\t\\t\\t\\tcolor: new Color(),\\r\\n\\t\\t\\t\\t\\t\\t\\tdistance: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\tdecay: 0,\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tshadow: false,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowBias: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowRadius: 1,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowMapSize: new Vector2(),\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowCameraNear: 1,\\r\\n\\t\\t\\t\\t\\t\\t\\tshadowCameraFar: 1000\\r\\n\\t\\t\\t\\t\\t\\t};\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'HemisphereLight':\\r\\n\\t\\t\\t\\t\\t\\tuniforms = {\\r\\n\\t\\t\\t\\t\\t\\t\\tdirection: new Vector3(),\\r\\n\\t\\t\\t\\t\\t\\t\\tskyColor: new Color(),\\r\\n\\t\\t\\t\\t\\t\\t\\tgroundColor: new Color()\\r\\n\\t\\t\\t\\t\\t\\t};\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'RectAreaLight':\\r\\n\\t\\t\\t\\t\\t\\tuniforms = {\\r\\n\\t\\t\\t\\t\\t\\t\\tcolor: new Color(),\\r\\n\\t\\t\\t\\t\\t\\t\\tposition: new Vector3(),\\r\\n\\t\\t\\t\\t\\t\\t\\thalfWidth: new Vector3(),\\r\\n\\t\\t\\t\\t\\t\\t\\thalfHeight: new Vector3()\\r\\n\\t\\t\\t\\t\\t\\t\\t// TODO (abelnation): set RectAreaLight shadow uniforms\\r\\n\\t\\t\\t\\t\\t\\t};\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tlights[ light.id ] = uniforms;\\r\\n\\r\\n\\t\\t\\t\\treturn uniforms;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction WebGLLights() {\\r\\n\\r\\n\\t\\tvar cache = new UniformsCache();\\r\\n\\r\\n\\t\\tvar state = {\\r\\n\\r\\n\\t\\t\\thash: '',\\r\\n\\r\\n\\t\\t\\tambient: [ 0, 0, 0 ],\\r\\n\\t\\t\\tdirectional: [],\\r\\n\\t\\t\\tdirectionalShadowMap: [],\\r\\n\\t\\t\\tdirectionalShadowMatrix: [],\\r\\n\\t\\t\\tspot: [],\\r\\n\\t\\t\\tspotShadowMap: [],\\r\\n\\t\\t\\tspotShadowMatrix: [],\\r\\n\\t\\t\\trectArea: [],\\r\\n\\t\\t\\tpoint: [],\\r\\n\\t\\t\\tpointShadowMap: [],\\r\\n\\t\\t\\tpointShadowMatrix: [],\\r\\n\\t\\t\\themi: []\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar vector3 = new Vector3();\\r\\n\\t\\tvar matrix4 = new Matrix4();\\r\\n\\t\\tvar matrix42 = new Matrix4();\\r\\n\\r\\n\\t\\tfunction setup( lights, shadows, camera ) {\\r\\n\\r\\n\\t\\t\\tvar r = 0, g = 0, b = 0;\\r\\n\\r\\n\\t\\t\\tvar directionalLength = 0;\\r\\n\\t\\t\\tvar pointLength = 0;\\r\\n\\t\\t\\tvar spotLength = 0;\\r\\n\\t\\t\\tvar rectAreaLength = 0;\\r\\n\\t\\t\\tvar hemiLength = 0;\\r\\n\\r\\n\\t\\t\\tvar viewMatrix = camera.matrixWorldInverse;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar light = lights[ i ];\\r\\n\\r\\n\\t\\t\\t\\tvar color = light.color;\\r\\n\\t\\t\\t\\tvar intensity = light.intensity;\\r\\n\\t\\t\\t\\tvar distance = light.distance;\\r\\n\\r\\n\\t\\t\\t\\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\\r\\n\\r\\n\\t\\t\\t\\tif ( light.isAmbientLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tr += color.r * intensity;\\r\\n\\t\\t\\t\\t\\tg += color.g * intensity;\\r\\n\\t\\t\\t\\t\\tb += color.b * intensity;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( light.isDirectionalLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar uniforms = cache.get( light );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\\r\\n\\t\\t\\t\\t\\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\\r\\n\\t\\t\\t\\t\\tvector3.setFromMatrixPosition( light.target.matrixWorld );\\r\\n\\t\\t\\t\\t\\tuniforms.direction.sub( vector3 );\\r\\n\\t\\t\\t\\t\\tuniforms.direction.transformDirection( viewMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.shadow = light.castShadow;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( light.castShadow ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar shadow = light.shadow;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowBias = shadow.bias;\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowRadius = shadow.radius;\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowMapSize = shadow.mapSize;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\\r\\n\\t\\t\\t\\t\\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\\r\\n\\t\\t\\t\\t\\tstate.directional[ directionalLength ] = uniforms;\\r\\n\\r\\n\\t\\t\\t\\t\\tdirectionalLength ++;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( light.isSpotLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar uniforms = cache.get( light );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\\r\\n\\t\\t\\t\\t\\tuniforms.position.applyMatrix4( viewMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.color.copy( color ).multiplyScalar( intensity );\\r\\n\\t\\t\\t\\t\\tuniforms.distance = distance;\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\\r\\n\\t\\t\\t\\t\\tvector3.setFromMatrixPosition( light.target.matrixWorld );\\r\\n\\t\\t\\t\\t\\tuniforms.direction.sub( vector3 );\\r\\n\\t\\t\\t\\t\\tuniforms.direction.transformDirection( viewMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.coneCos = Math.cos( light.angle );\\r\\n\\t\\t\\t\\t\\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\\r\\n\\t\\t\\t\\t\\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.shadow = light.castShadow;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( light.castShadow ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar shadow = light.shadow;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowBias = shadow.bias;\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowRadius = shadow.radius;\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowMapSize = shadow.mapSize;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.spotShadowMap[ spotLength ] = shadowMap;\\r\\n\\t\\t\\t\\t\\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\\r\\n\\t\\t\\t\\t\\tstate.spot[ spotLength ] = uniforms;\\r\\n\\r\\n\\t\\t\\t\\t\\tspotLength ++;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( light.isRectAreaLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar uniforms = cache.get( light );\\r\\n\\r\\n\\t\\t\\t\\t\\t// (a) intensity controls irradiance of entire light\\r\\n\\t\\t\\t\\t\\tuniforms.color\\r\\n\\t\\t\\t\\t\\t\\t.copy( color )\\r\\n\\t\\t\\t\\t\\t\\t.multiplyScalar( intensity / ( light.width * light.height ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t// (b) intensity controls the radiance per light area\\r\\n\\t\\t\\t\\t\\t// uniforms.color.copy( color ).multiplyScalar( intensity );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\\r\\n\\t\\t\\t\\t\\tuniforms.position.applyMatrix4( viewMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\t// extract local rotation of light to derive width/height half vectors\\r\\n\\t\\t\\t\\t\\tmatrix42.identity();\\r\\n\\t\\t\\t\\t\\tmatrix4.copy( light.matrixWorld );\\r\\n\\t\\t\\t\\t\\tmatrix4.premultiply( viewMatrix );\\r\\n\\t\\t\\t\\t\\tmatrix42.extractRotation( matrix4 );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\\r\\n\\t\\t\\t\\t\\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.halfWidth.applyMatrix4( matrix42 );\\r\\n\\t\\t\\t\\t\\tuniforms.halfHeight.applyMatrix4( matrix42 );\\r\\n\\r\\n\\t\\t\\t\\t\\t// TODO (abelnation): RectAreaLight distance?\\r\\n\\t\\t\\t\\t\\t// uniforms.distance = distance;\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.rectArea[ rectAreaLength ] = uniforms;\\r\\n\\r\\n\\t\\t\\t\\t\\trectAreaLength ++;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( light.isPointLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar uniforms = cache.get( light );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\\r\\n\\t\\t\\t\\t\\tuniforms.position.applyMatrix4( viewMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\\r\\n\\t\\t\\t\\t\\tuniforms.distance = light.distance;\\r\\n\\t\\t\\t\\t\\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.shadow = light.castShadow;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( light.castShadow ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar shadow = light.shadow;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowBias = shadow.bias;\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowRadius = shadow.radius;\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowMapSize = shadow.mapSize;\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowCameraNear = shadow.camera.near;\\r\\n\\t\\t\\t\\t\\t\\tuniforms.shadowCameraFar = shadow.camera.far;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.pointShadowMap[ pointLength ] = shadowMap;\\r\\n\\t\\t\\t\\t\\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\\r\\n\\t\\t\\t\\t\\tstate.point[ pointLength ] = uniforms;\\r\\n\\r\\n\\t\\t\\t\\t\\tpointLength ++;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( light.isHemisphereLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar uniforms = cache.get( light );\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\\r\\n\\t\\t\\t\\t\\tuniforms.direction.transformDirection( viewMatrix );\\r\\n\\t\\t\\t\\t\\tuniforms.direction.normalize();\\r\\n\\r\\n\\t\\t\\t\\t\\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\\r\\n\\t\\t\\t\\t\\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.hemi[ hemiLength ] = uniforms;\\r\\n\\r\\n\\t\\t\\t\\t\\themiLength ++;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.ambient[ 0 ] = r;\\r\\n\\t\\t\\tstate.ambient[ 1 ] = g;\\r\\n\\t\\t\\tstate.ambient[ 2 ] = b;\\r\\n\\r\\n\\t\\t\\tstate.directional.length = directionalLength;\\r\\n\\t\\t\\tstate.spot.length = spotLength;\\r\\n\\t\\t\\tstate.rectArea.length = rectAreaLength;\\r\\n\\t\\t\\tstate.point.length = pointLength;\\r\\n\\t\\t\\tstate.hemi.length = hemiLength;\\r\\n\\r\\n\\t\\t\\t// TODO (sam-g-steel) why aren't we using join\\r\\n\\t\\t\\tstate.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tsetup: setup,\\r\\n\\t\\t\\tstate: state\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLObjects( geometries, infoRender ) {\\r\\n\\r\\n\\t\\tvar updateList = {};\\r\\n\\r\\n\\t\\tfunction update( object ) {\\r\\n\\r\\n\\t\\t\\tvar frame = infoRender.frame;\\r\\n\\r\\n\\t\\t\\tvar geometry = object.geometry;\\r\\n\\t\\t\\tvar buffergeometry = geometries.get( object, geometry );\\r\\n\\r\\n\\t\\t\\t// Update once per frame\\r\\n\\r\\n\\t\\t\\tif ( updateList[ buffergeometry.id ] !== frame ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tbuffergeometry.updateFromObject( object );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgeometries.update( buffergeometry );\\r\\n\\r\\n\\t\\t\\t\\tupdateList[ buffergeometry.id ] = frame;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn buffergeometry;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction clear() {\\r\\n\\r\\n\\t\\t\\tupdateList = {};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tupdate: update,\\r\\n\\t\\t\\tclear: clear\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction addLineNumbers( string ) {\\r\\n\\r\\n\\t\\tvar lines = string.split( '\\\\n' );\\r\\n\\r\\n\\t\\tfor ( var i = 0; i < lines.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn lines.join( '\\\\n' );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction WebGLShader( gl, type, string ) {\\r\\n\\r\\n\\t\\tvar shader = gl.createShader( type );\\r\\n\\r\\n\\t\\tgl.shaderSource( shader, string );\\r\\n\\t\\tgl.compileShader( shader );\\r\\n\\r\\n\\t\\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.WebGLShader: Shader couldn\\\\'t compile.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// --enable-privileged-webgl-extension\\r\\n\\t\\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\\r\\n\\r\\n\\t\\treturn shader;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tvar programIdCount = 0;\\r\\n\\r\\n\\tfunction getEncodingComponents( encoding ) {\\r\\n\\r\\n\\t\\tswitch ( encoding ) {\\r\\n\\r\\n\\t\\t\\tcase LinearEncoding:\\r\\n\\t\\t\\t\\treturn [ 'Linear', '( value )' ];\\r\\n\\t\\t\\tcase sRGBEncoding:\\r\\n\\t\\t\\t\\treturn [ 'sRGB', '( value )' ];\\r\\n\\t\\t\\tcase RGBEEncoding:\\r\\n\\t\\t\\t\\treturn [ 'RGBE', '( value )' ];\\r\\n\\t\\t\\tcase RGBM7Encoding:\\r\\n\\t\\t\\t\\treturn [ 'RGBM', '( value, 7.0 )' ];\\r\\n\\t\\t\\tcase RGBM16Encoding:\\r\\n\\t\\t\\t\\treturn [ 'RGBM', '( value, 16.0 )' ];\\r\\n\\t\\t\\tcase RGBDEncoding:\\r\\n\\t\\t\\t\\treturn [ 'RGBD', '( value, 256.0 )' ];\\r\\n\\t\\t\\tcase GammaEncoding:\\r\\n\\t\\t\\t\\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\\r\\n\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\tthrow new Error( 'unsupported encoding: ' + encoding );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTexelDecodingFunction( functionName, encoding ) {\\r\\n\\r\\n\\t\\tvar components = getEncodingComponents( encoding );\\r\\n\\t\\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTexelEncodingFunction( functionName, encoding ) {\\r\\n\\r\\n\\t\\tvar components = getEncodingComponents( encoding );\\r\\n\\t\\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction getToneMappingFunction( functionName, toneMapping ) {\\r\\n\\r\\n\\t\\tvar toneMappingName;\\r\\n\\r\\n\\t\\tswitch ( toneMapping ) {\\r\\n\\r\\n\\t\\t\\tcase LinearToneMapping:\\r\\n\\t\\t\\t\\ttoneMappingName = 'Linear';\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\tcase ReinhardToneMapping:\\r\\n\\t\\t\\t\\ttoneMappingName = 'Reinhard';\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\tcase Uncharted2ToneMapping:\\r\\n\\t\\t\\t\\ttoneMappingName = 'Uncharted2';\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\tcase CineonToneMapping:\\r\\n\\t\\t\\t\\ttoneMappingName = 'OptimizedCineon';\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\\r\\n\\r\\n\\t\\textensions = extensions || {};\\r\\n\\r\\n\\t\\tvar chunks = [\\r\\n\\t\\t\\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\\r\\n\\t\\t\\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\\r\\n\\t\\t\\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\\r\\n\\t\\t\\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\treturn chunks.filter( filterEmptyLine ).join( '\\\\n' );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction generateDefines( defines ) {\\r\\n\\r\\n\\t\\tvar chunks = [];\\r\\n\\r\\n\\t\\tfor ( var name in defines ) {\\r\\n\\r\\n\\t\\t\\tvar value = defines[ name ];\\r\\n\\r\\n\\t\\t\\tif ( value === false ) continue;\\r\\n\\r\\n\\t\\t\\tchunks.push( '#define ' + name + ' ' + value );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn chunks.join( '\\\\n' );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction fetchAttributeLocations( gl, program ) {\\r\\n\\r\\n\\t\\tvar attributes = {};\\r\\n\\r\\n\\t\\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\\r\\n\\r\\n\\t\\tfor ( var i = 0; i < n; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar info = gl.getActiveAttrib( program, i );\\r\\n\\t\\t\\tvar name = info.name;\\r\\n\\r\\n\\t\\t\\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\\r\\n\\r\\n\\t\\t\\tattributes[ name ] = gl.getAttribLocation( program, name );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn attributes;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction filterEmptyLine( string ) {\\r\\n\\r\\n\\t\\treturn string !== '';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction replaceLightNums( string, parameters ) {\\r\\n\\r\\n\\t\\treturn string\\r\\n\\t\\t\\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\\r\\n\\t\\t\\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\\r\\n\\t\\t\\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\\r\\n\\t\\t\\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\\r\\n\\t\\t\\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction parseIncludes( string ) {\\r\\n\\r\\n\\t\\tvar pattern = /^[ \\\\t]*#include +<([\\\\w\\\\d.]+)>/gm;\\r\\n\\r\\n\\t\\tfunction replace( match, include ) {\\r\\n\\r\\n\\t\\t\\tvar replace = ShaderChunk[ include ];\\r\\n\\r\\n\\t\\t\\tif ( replace === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tthrow new Error( 'Can not resolve #include <' + include + '>' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn parseIncludes( replace );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn string.replace( pattern, replace );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction unrollLoops( string ) {\\r\\n\\r\\n\\t\\tvar pattern = /for \\\\( int i \\\\= (\\\\d+)\\\\; i < (\\\\d+)\\\\; i \\\\+\\\\+ \\\\) \\\\{([\\\\s\\\\S]+?)(?=\\\\})\\\\}/g;\\r\\n\\r\\n\\t\\tfunction replace( match, start, end, snippet ) {\\r\\n\\r\\n\\t\\t\\tvar unroll = '';\\r\\n\\r\\n\\t\\t\\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tunroll += snippet.replace( /\\\\[ i \\\\]/g, '[ ' + i + ' ]' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn unroll;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn string.replace( pattern, replace );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction WebGLProgram( renderer, extensions, code, material, shader, parameters ) {\\r\\n\\r\\n\\t\\tvar gl = renderer.context;\\r\\n\\r\\n\\t\\tvar defines = material.defines;\\r\\n\\r\\n\\t\\tvar vertexShader = shader.vertexShader;\\r\\n\\t\\tvar fragmentShader = shader.fragmentShader;\\r\\n\\r\\n\\t\\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\\r\\n\\r\\n\\t\\tif ( parameters.shadowMapType === PCFShadowMap ) {\\r\\n\\r\\n\\t\\t\\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\\r\\n\\r\\n\\t\\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\\r\\n\\r\\n\\t\\t\\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\\r\\n\\t\\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\\r\\n\\t\\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\\r\\n\\r\\n\\t\\tif ( parameters.envMap ) {\\r\\n\\r\\n\\t\\t\\tswitch ( material.envMap.mapping ) {\\r\\n\\r\\n\\t\\t\\t\\tcase CubeReflectionMapping:\\r\\n\\t\\t\\t\\tcase CubeRefractionMapping:\\r\\n\\t\\t\\t\\t\\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase CubeUVReflectionMapping:\\r\\n\\t\\t\\t\\tcase CubeUVRefractionMapping:\\r\\n\\t\\t\\t\\t\\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase EquirectangularReflectionMapping:\\r\\n\\t\\t\\t\\tcase EquirectangularRefractionMapping:\\r\\n\\t\\t\\t\\t\\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase SphericalReflectionMapping:\\r\\n\\t\\t\\t\\t\\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tswitch ( material.envMap.mapping ) {\\r\\n\\r\\n\\t\\t\\t\\tcase CubeRefractionMapping:\\r\\n\\t\\t\\t\\tcase EquirectangularRefractionMapping:\\r\\n\\t\\t\\t\\t\\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tswitch ( material.combine ) {\\r\\n\\r\\n\\t\\t\\t\\tcase MultiplyOperation:\\r\\n\\t\\t\\t\\t\\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase MixOperation:\\r\\n\\t\\t\\t\\t\\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase AddOperation:\\r\\n\\t\\t\\t\\t\\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\\r\\n\\r\\n\\t\\t// console.log( 'building new program ' );\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar customExtensions = generateExtensions( material.extensions, parameters, extensions );\\r\\n\\r\\n\\t\\tvar customDefines = generateDefines( defines );\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar program = gl.createProgram();\\r\\n\\r\\n\\t\\tvar prefixVertex, prefixFragment;\\r\\n\\r\\n\\t\\tif ( material.isRawShaderMaterial ) {\\r\\n\\r\\n\\t\\t\\tprefixVertex = [\\r\\n\\r\\n\\t\\t\\t\\tcustomDefines\\r\\n\\r\\n\\t\\t\\t].filter( filterEmptyLine ).join( '\\\\n' );\\r\\n\\r\\n\\t\\t\\tif ( prefixVertex.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tprefixVertex += '\\\\n';\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tprefixFragment = [\\r\\n\\r\\n\\t\\t\\t\\tcustomExtensions,\\r\\n\\t\\t\\t\\tcustomDefines\\r\\n\\r\\n\\t\\t\\t].filter( filterEmptyLine ).join( '\\\\n' );\\r\\n\\r\\n\\t\\t\\tif ( prefixFragment.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tprefixFragment += '\\\\n';\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tprefixVertex = [\\r\\n\\r\\n\\t\\t\\t\\t'precision ' + parameters.precision + ' float;',\\r\\n\\t\\t\\t\\t'precision ' + parameters.precision + ' int;',\\r\\n\\r\\n\\t\\t\\t\\t'#define SHADER_NAME ' + shader.name,\\r\\n\\r\\n\\t\\t\\t\\tcustomDefines,\\r\\n\\r\\n\\t\\t\\t\\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\\r\\n\\r\\n\\t\\t\\t\\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\\r\\n\\r\\n\\t\\t\\t\\t'#define MAX_BONES ' + parameters.maxBones,\\r\\n\\t\\t\\t\\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\\r\\n\\t\\t\\t\\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.map ? '#define USE_MAP' : '',\\r\\n\\t\\t\\t\\tparameters.envMap ? '#define USE_ENVMAP' : '',\\r\\n\\t\\t\\t\\tparameters.envMap ? '#define ' + envMapModeDefine : '',\\r\\n\\t\\t\\t\\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\\r\\n\\t\\t\\t\\tparameters.aoMap ? '#define USE_AOMAP' : '',\\r\\n\\t\\t\\t\\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\\r\\n\\t\\t\\t\\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\\r\\n\\t\\t\\t\\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\\r\\n\\t\\t\\t\\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\\r\\n\\t\\t\\t\\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\\r\\n\\t\\t\\t\\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\\r\\n\\t\\t\\t\\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\\r\\n\\t\\t\\t\\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\\r\\n\\t\\t\\t\\tparameters.vertexColors ? '#define USE_COLOR' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.flatShading ? '#define FLAT_SHADED' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.skinning ? '#define USE_SKINNING' : '',\\r\\n\\t\\t\\t\\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\\r\\n\\t\\t\\t\\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\\r\\n\\t\\t\\t\\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\\r\\n\\t\\t\\t\\tparameters.flipSided ? '#define FLIP_SIDED' : '',\\r\\n\\r\\n\\t\\t\\t\\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\\r\\n\\r\\n\\t\\t\\t\\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\\r\\n\\t\\t\\t\\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\\r\\n\\t\\t\\t\\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\\r\\n\\r\\n\\t\\t\\t\\t'uniform mat4 modelMatrix;',\\r\\n\\t\\t\\t\\t'uniform mat4 modelViewMatrix;',\\r\\n\\t\\t\\t\\t'uniform mat4 projectionMatrix;',\\r\\n\\t\\t\\t\\t'uniform mat4 viewMatrix;',\\r\\n\\t\\t\\t\\t'uniform mat3 normalMatrix;',\\r\\n\\t\\t\\t\\t'uniform vec3 cameraPosition;',\\r\\n\\r\\n\\t\\t\\t\\t'attribute vec3 position;',\\r\\n\\t\\t\\t\\t'attribute vec3 normal;',\\r\\n\\t\\t\\t\\t'attribute vec2 uv;',\\r\\n\\r\\n\\t\\t\\t\\t'#ifdef USE_COLOR',\\r\\n\\r\\n\\t\\t\\t\\t'\\tattribute vec3 color;',\\r\\n\\r\\n\\t\\t\\t\\t'#endif',\\r\\n\\r\\n\\t\\t\\t\\t'#ifdef USE_MORPHTARGETS',\\r\\n\\r\\n\\t\\t\\t\\t'\\tattribute vec3 morphTarget0;',\\r\\n\\t\\t\\t\\t'\\tattribute vec3 morphTarget1;',\\r\\n\\t\\t\\t\\t'\\tattribute vec3 morphTarget2;',\\r\\n\\t\\t\\t\\t'\\tattribute vec3 morphTarget3;',\\r\\n\\r\\n\\t\\t\\t\\t'\\t#ifdef USE_MORPHNORMALS',\\r\\n\\r\\n\\t\\t\\t\\t'\\t\\tattribute vec3 morphNormal0;',\\r\\n\\t\\t\\t\\t'\\t\\tattribute vec3 morphNormal1;',\\r\\n\\t\\t\\t\\t'\\t\\tattribute vec3 morphNormal2;',\\r\\n\\t\\t\\t\\t'\\t\\tattribute vec3 morphNormal3;',\\r\\n\\r\\n\\t\\t\\t\\t'\\t#else',\\r\\n\\r\\n\\t\\t\\t\\t'\\t\\tattribute vec3 morphTarget4;',\\r\\n\\t\\t\\t\\t'\\t\\tattribute vec3 morphTarget5;',\\r\\n\\t\\t\\t\\t'\\t\\tattribute vec3 morphTarget6;',\\r\\n\\t\\t\\t\\t'\\t\\tattribute vec3 morphTarget7;',\\r\\n\\r\\n\\t\\t\\t\\t'\\t#endif',\\r\\n\\r\\n\\t\\t\\t\\t'#endif',\\r\\n\\r\\n\\t\\t\\t\\t'#ifdef USE_SKINNING',\\r\\n\\r\\n\\t\\t\\t\\t'\\tattribute vec4 skinIndex;',\\r\\n\\t\\t\\t\\t'\\tattribute vec4 skinWeight;',\\r\\n\\r\\n\\t\\t\\t\\t'#endif',\\r\\n\\r\\n\\t\\t\\t\\t'\\\\n'\\r\\n\\r\\n\\t\\t\\t].filter( filterEmptyLine ).join( '\\\\n' );\\r\\n\\r\\n\\t\\t\\tprefixFragment = [\\r\\n\\r\\n\\t\\t\\t\\tcustomExtensions,\\r\\n\\r\\n\\t\\t\\t\\t'precision ' + parameters.precision + ' float;',\\r\\n\\t\\t\\t\\t'precision ' + parameters.precision + ' int;',\\r\\n\\r\\n\\t\\t\\t\\t'#define SHADER_NAME ' + shader.name,\\r\\n\\r\\n\\t\\t\\t\\tcustomDefines,\\r\\n\\r\\n\\t\\t\\t\\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\\r\\n\\r\\n\\t\\t\\t\\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\\r\\n\\r\\n\\t\\t\\t\\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\\r\\n\\t\\t\\t\\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.map ? '#define USE_MAP' : '',\\r\\n\\t\\t\\t\\tparameters.envMap ? '#define USE_ENVMAP' : '',\\r\\n\\t\\t\\t\\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\\r\\n\\t\\t\\t\\tparameters.envMap ? '#define ' + envMapModeDefine : '',\\r\\n\\t\\t\\t\\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\\r\\n\\t\\t\\t\\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\\r\\n\\t\\t\\t\\tparameters.aoMap ? '#define USE_AOMAP' : '',\\r\\n\\t\\t\\t\\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\\r\\n\\t\\t\\t\\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\\r\\n\\t\\t\\t\\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\\r\\n\\t\\t\\t\\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\\r\\n\\t\\t\\t\\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\\r\\n\\t\\t\\t\\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\\r\\n\\t\\t\\t\\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\\r\\n\\t\\t\\t\\tparameters.vertexColors ? '#define USE_COLOR' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.flatShading ? '#define FLAT_SHADED' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\\r\\n\\t\\t\\t\\tparameters.flipSided ? '#define FLIP_SIDED' : '',\\r\\n\\r\\n\\t\\t\\t\\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\\r\\n\\t\\t\\t\\t'#define UNION_CLIPPING_PLANES ' + ( parameters.numClippingPlanes - parameters.numClipIntersection ),\\r\\n\\r\\n\\t\\t\\t\\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\\r\\n\\t\\t\\t\\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\\r\\n\\t\\t\\t\\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\\r\\n\\r\\n\\t\\t\\t\\t'uniform mat4 viewMatrix;',\\r\\n\\t\\t\\t\\t'uniform vec3 cameraPosition;',\\r\\n\\r\\n\\t\\t\\t\\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\\r\\n\\t\\t\\t\\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\\r\\n\\t\\t\\t\\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.dithering ? '#define DITHERING' : '',\\r\\n\\r\\n\\t\\t\\t\\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\\r\\n\\t\\t\\t\\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\\r\\n\\t\\t\\t\\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\\r\\n\\t\\t\\t\\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\\r\\n\\t\\t\\t\\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\\r\\n\\r\\n\\t\\t\\t\\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\\r\\n\\r\\n\\t\\t\\t\\t'\\\\n'\\r\\n\\r\\n\\t\\t\\t].filter( filterEmptyLine ).join( '\\\\n' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvertexShader = parseIncludes( vertexShader );\\r\\n\\t\\tvertexShader = replaceLightNums( vertexShader, parameters );\\r\\n\\r\\n\\t\\tfragmentShader = parseIncludes( fragmentShader );\\r\\n\\t\\tfragmentShader = replaceLightNums( fragmentShader, parameters );\\r\\n\\r\\n\\t\\tif ( ! material.isShaderMaterial ) {\\r\\n\\r\\n\\t\\t\\tvertexShader = unrollLoops( vertexShader );\\r\\n\\t\\t\\tfragmentShader = unrollLoops( fragmentShader );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar vertexGlsl = prefixVertex + vertexShader;\\r\\n\\t\\tvar fragmentGlsl = prefixFragment + fragmentShader;\\r\\n\\r\\n\\t\\t// console.log( '*VERTEX*', vertexGlsl );\\r\\n\\t\\t// console.log( '*FRAGMENT*', fragmentGlsl );\\r\\n\\r\\n\\t\\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\\r\\n\\t\\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\\r\\n\\r\\n\\t\\tgl.attachShader( program, glVertexShader );\\r\\n\\t\\tgl.attachShader( program, glFragmentShader );\\r\\n\\r\\n\\t\\t// Force a particular attribute to index 0.\\r\\n\\r\\n\\t\\tif ( material.index0AttributeName !== undefined ) {\\r\\n\\r\\n\\t\\t\\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\\r\\n\\r\\n\\t\\t} else if ( parameters.morphTargets === true ) {\\r\\n\\r\\n\\t\\t\\t// programs with morphTargets displace position out of attribute 0\\r\\n\\t\\t\\tgl.bindAttribLocation( program, 0, 'position' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tgl.linkProgram( program );\\r\\n\\r\\n\\t\\tvar programLog = gl.getProgramInfoLog( program );\\r\\n\\t\\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\\r\\n\\t\\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\\r\\n\\r\\n\\t\\tvar runnable = true;\\r\\n\\t\\tvar haveDiagnostics = true;\\r\\n\\r\\n\\t\\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\\r\\n\\t\\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\\r\\n\\r\\n\\t\\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\\r\\n\\r\\n\\t\\t\\trunnable = false;\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\\r\\n\\r\\n\\t\\t} else if ( programLog !== '' ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\\r\\n\\r\\n\\t\\t} else if ( vertexLog === '' || fragmentLog === '' ) {\\r\\n\\r\\n\\t\\t\\thaveDiagnostics = false;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( haveDiagnostics ) {\\r\\n\\r\\n\\t\\t\\tthis.diagnostics = {\\r\\n\\r\\n\\t\\t\\t\\trunnable: runnable,\\r\\n\\t\\t\\t\\tmaterial: material,\\r\\n\\r\\n\\t\\t\\t\\tprogramLog: programLog,\\r\\n\\r\\n\\t\\t\\t\\tvertexShader: {\\r\\n\\r\\n\\t\\t\\t\\t\\tlog: vertexLog,\\r\\n\\t\\t\\t\\t\\tprefix: prefixVertex\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tfragmentShader: {\\r\\n\\r\\n\\t\\t\\t\\t\\tlog: fragmentLog,\\r\\n\\t\\t\\t\\t\\tprefix: prefixFragment\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// clean up\\r\\n\\r\\n\\t\\tgl.deleteShader( glVertexShader );\\r\\n\\t\\tgl.deleteShader( glFragmentShader );\\r\\n\\r\\n\\t\\t// set up caching for uniform locations\\r\\n\\r\\n\\t\\tvar cachedUniforms;\\r\\n\\r\\n\\t\\tthis.getUniforms = function () {\\r\\n\\r\\n\\t\\t\\tif ( cachedUniforms === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tcachedUniforms = new WebGLUniforms( gl, program, renderer );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn cachedUniforms;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// set up caching for attribute locations\\r\\n\\r\\n\\t\\tvar cachedAttributes;\\r\\n\\r\\n\\t\\tthis.getAttributes = function () {\\r\\n\\r\\n\\t\\t\\tif ( cachedAttributes === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tcachedAttributes = fetchAttributeLocations( gl, program );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn cachedAttributes;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// free resource\\r\\n\\r\\n\\t\\tthis.destroy = function () {\\r\\n\\r\\n\\t\\t\\tgl.deleteProgram( program );\\r\\n\\t\\t\\tthis.program = undefined;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// DEPRECATED\\r\\n\\r\\n\\t\\tObject.defineProperties( this, {\\r\\n\\r\\n\\t\\t\\tuniforms: {\\r\\n\\t\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\\r\\n\\t\\t\\t\\t\\treturn this.getUniforms();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tattributes: {\\r\\n\\t\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\\r\\n\\t\\t\\t\\t\\treturn this.getAttributes();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} );\\r\\n\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tthis.id = programIdCount ++;\\r\\n\\t\\tthis.code = code;\\r\\n\\t\\tthis.usedTimes = 1;\\r\\n\\t\\tthis.program = program;\\r\\n\\t\\tthis.vertexShader = glVertexShader;\\r\\n\\t\\tthis.fragmentShader = glFragmentShader;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\\r\\n\\r\\n\\t\\tvar programs = [];\\r\\n\\r\\n\\t\\tvar shaderIDs = {\\r\\n\\t\\t\\tMeshDepthMaterial: 'depth',\\r\\n\\t\\t\\tMeshDistanceMaterial: 'distanceRGBA',\\r\\n\\t\\t\\tMeshNormalMaterial: 'normal',\\r\\n\\t\\t\\tMeshBasicMaterial: 'basic',\\r\\n\\t\\t\\tMeshLambertMaterial: 'lambert',\\r\\n\\t\\t\\tMeshPhongMaterial: 'phong',\\r\\n\\t\\t\\tMeshToonMaterial: 'phong',\\r\\n\\t\\t\\tMeshStandardMaterial: 'physical',\\r\\n\\t\\t\\tMeshPhysicalMaterial: 'physical',\\r\\n\\t\\t\\tLineBasicMaterial: 'basic',\\r\\n\\t\\t\\tLineDashedMaterial: 'dashed',\\r\\n\\t\\t\\tPointsMaterial: 'points',\\r\\n\\t\\t\\tShadowMaterial: 'shadow'\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar parameterNames = [\\r\\n\\t\\t\\t\\\"precision\\\", \\\"supportsVertexTextures\\\", \\\"map\\\", \\\"mapEncoding\\\", \\\"envMap\\\", \\\"envMapMode\\\", \\\"envMapEncoding\\\",\\r\\n\\t\\t\\t\\\"lightMap\\\", \\\"aoMap\\\", \\\"emissiveMap\\\", \\\"emissiveMapEncoding\\\", \\\"bumpMap\\\", \\\"normalMap\\\", \\\"displacementMap\\\", \\\"specularMap\\\",\\r\\n\\t\\t\\t\\\"roughnessMap\\\", \\\"metalnessMap\\\", \\\"gradientMap\\\",\\r\\n\\t\\t\\t\\\"alphaMap\\\", \\\"combine\\\", \\\"vertexColors\\\", \\\"fog\\\", \\\"useFog\\\", \\\"fogExp\\\",\\r\\n\\t\\t\\t\\\"flatShading\\\", \\\"sizeAttenuation\\\", \\\"logarithmicDepthBuffer\\\", \\\"skinning\\\",\\r\\n\\t\\t\\t\\\"maxBones\\\", \\\"useVertexTexture\\\", \\\"morphTargets\\\", \\\"morphNormals\\\",\\r\\n\\t\\t\\t\\\"maxMorphTargets\\\", \\\"maxMorphNormals\\\", \\\"premultipliedAlpha\\\",\\r\\n\\t\\t\\t\\\"numDirLights\\\", \\\"numPointLights\\\", \\\"numSpotLights\\\", \\\"numHemiLights\\\", \\\"numRectAreaLights\\\",\\r\\n\\t\\t\\t\\\"shadowMapEnabled\\\", \\\"shadowMapType\\\", \\\"toneMapping\\\", 'physicallyCorrectLights',\\r\\n\\t\\t\\t\\\"alphaTest\\\", \\\"doubleSided\\\", \\\"flipSided\\\", \\\"numClippingPlanes\\\", \\\"numClipIntersection\\\", \\\"depthPacking\\\", \\\"dithering\\\"\\r\\n\\t\\t];\\r\\n\\r\\n\\r\\n\\t\\tfunction allocateBones( object ) {\\r\\n\\r\\n\\t\\t\\tvar skeleton = object.skeleton;\\r\\n\\t\\t\\tvar bones = skeleton.bones;\\r\\n\\r\\n\\t\\t\\tif ( capabilities.floatVertexTextures ) {\\r\\n\\r\\n\\t\\t\\t\\treturn 1024;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// default for when object is not specified\\r\\n\\t\\t\\t\\t// ( for example when prebuilding shader to be used with multiple objects )\\r\\n\\t\\t\\t\\t//\\r\\n\\t\\t\\t\\t//  - leave some extra space for other uniforms\\r\\n\\t\\t\\t\\t//  - limit here is ANGLE's 254 max uniform vectors\\r\\n\\t\\t\\t\\t//    (up to 54 should be safe)\\r\\n\\r\\n\\t\\t\\t\\tvar nVertexUniforms = capabilities.maxVertexUniforms;\\r\\n\\t\\t\\t\\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\\r\\n\\r\\n\\t\\t\\t\\tvar maxBones = Math.min( nVertexMatrices, bones.length );\\r\\n\\r\\n\\t\\t\\t\\tif ( maxBones < bones.length ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\\r\\n\\t\\t\\t\\t\\treturn 0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn maxBones;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\\r\\n\\r\\n\\t\\t\\tvar encoding;\\r\\n\\r\\n\\t\\t\\tif ( ! map ) {\\r\\n\\r\\n\\t\\t\\t\\tencoding = LinearEncoding;\\r\\n\\r\\n\\t\\t\\t} else if ( map.isTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tencoding = map.encoding;\\r\\n\\r\\n\\t\\t\\t} else if ( map.isWebGLRenderTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( \\\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\\\" );\\r\\n\\t\\t\\t\\tencoding = map.texture.encoding;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\\r\\n\\t\\t\\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\\r\\n\\r\\n\\t\\t\\t\\tencoding = GammaEncoding;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn encoding;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\\r\\n\\r\\n\\t\\t\\tvar shaderID = shaderIDs[ material.type ];\\r\\n\\r\\n\\t\\t\\t// heuristics to create shader parameters according to lights in the scene\\r\\n\\t\\t\\t// (not to blow over maxLights budget)\\r\\n\\r\\n\\t\\t\\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\\r\\n\\t\\t\\tvar precision = capabilities.precision;\\r\\n\\r\\n\\t\\t\\tif ( material.precision !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tprecision = capabilities.getMaxPrecision( material.precision );\\r\\n\\r\\n\\t\\t\\t\\tif ( precision !== material.precision ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar currentRenderTarget = renderer.getRenderTarget();\\r\\n\\r\\n\\t\\t\\tvar parameters = {\\r\\n\\r\\n\\t\\t\\t\\tshaderID: shaderID,\\r\\n\\r\\n\\t\\t\\t\\tprecision: precision,\\r\\n\\t\\t\\t\\tsupportsVertexTextures: capabilities.vertexTextures,\\r\\n\\t\\t\\t\\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\\r\\n\\t\\t\\t\\tmap: !! material.map,\\r\\n\\t\\t\\t\\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\\r\\n\\t\\t\\t\\tenvMap: !! material.envMap,\\r\\n\\t\\t\\t\\tenvMapMode: material.envMap && material.envMap.mapping,\\r\\n\\t\\t\\t\\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\\r\\n\\t\\t\\t\\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\\r\\n\\t\\t\\t\\tlightMap: !! material.lightMap,\\r\\n\\t\\t\\t\\taoMap: !! material.aoMap,\\r\\n\\t\\t\\t\\temissiveMap: !! material.emissiveMap,\\r\\n\\t\\t\\t\\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\\r\\n\\t\\t\\t\\tbumpMap: !! material.bumpMap,\\r\\n\\t\\t\\t\\tnormalMap: !! material.normalMap,\\r\\n\\t\\t\\t\\tdisplacementMap: !! material.displacementMap,\\r\\n\\t\\t\\t\\troughnessMap: !! material.roughnessMap,\\r\\n\\t\\t\\t\\tmetalnessMap: !! material.metalnessMap,\\r\\n\\t\\t\\t\\tspecularMap: !! material.specularMap,\\r\\n\\t\\t\\t\\talphaMap: !! material.alphaMap,\\r\\n\\r\\n\\t\\t\\t\\tgradientMap: !! material.gradientMap,\\r\\n\\r\\n\\t\\t\\t\\tcombine: material.combine,\\r\\n\\r\\n\\t\\t\\t\\tvertexColors: material.vertexColors,\\r\\n\\r\\n\\t\\t\\t\\tfog: !! fog,\\r\\n\\t\\t\\t\\tuseFog: material.fog,\\r\\n\\t\\t\\t\\tfogExp: ( fog && fog.isFogExp2 ),\\r\\n\\r\\n\\t\\t\\t\\tflatShading: material.flatShading,\\r\\n\\r\\n\\t\\t\\t\\tsizeAttenuation: material.sizeAttenuation,\\r\\n\\t\\t\\t\\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\\r\\n\\r\\n\\t\\t\\t\\tskinning: material.skinning && maxBones > 0,\\r\\n\\t\\t\\t\\tmaxBones: maxBones,\\r\\n\\t\\t\\t\\tuseVertexTexture: capabilities.floatVertexTextures,\\r\\n\\r\\n\\t\\t\\t\\tmorphTargets: material.morphTargets,\\r\\n\\t\\t\\t\\tmorphNormals: material.morphNormals,\\r\\n\\t\\t\\t\\tmaxMorphTargets: renderer.maxMorphTargets,\\r\\n\\t\\t\\t\\tmaxMorphNormals: renderer.maxMorphNormals,\\r\\n\\r\\n\\t\\t\\t\\tnumDirLights: lights.directional.length,\\r\\n\\t\\t\\t\\tnumPointLights: lights.point.length,\\r\\n\\t\\t\\t\\tnumSpotLights: lights.spot.length,\\r\\n\\t\\t\\t\\tnumRectAreaLights: lights.rectArea.length,\\r\\n\\t\\t\\t\\tnumHemiLights: lights.hemi.length,\\r\\n\\r\\n\\t\\t\\t\\tnumClippingPlanes: nClipPlanes,\\r\\n\\t\\t\\t\\tnumClipIntersection: nClipIntersection,\\r\\n\\r\\n\\t\\t\\t\\tdithering: material.dithering,\\r\\n\\r\\n\\t\\t\\t\\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\\r\\n\\t\\t\\t\\tshadowMapType: renderer.shadowMap.type,\\r\\n\\r\\n\\t\\t\\t\\ttoneMapping: renderer.toneMapping,\\r\\n\\t\\t\\t\\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\\r\\n\\r\\n\\t\\t\\t\\tpremultipliedAlpha: material.premultipliedAlpha,\\r\\n\\r\\n\\t\\t\\t\\talphaTest: material.alphaTest,\\r\\n\\t\\t\\t\\tdoubleSided: material.side === DoubleSide,\\r\\n\\t\\t\\t\\tflipSided: material.side === BackSide,\\r\\n\\r\\n\\t\\t\\t\\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\treturn parameters;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.getProgramCode = function ( material, parameters ) {\\r\\n\\r\\n\\t\\t\\tvar array = [];\\r\\n\\r\\n\\t\\t\\tif ( parameters.shaderID ) {\\r\\n\\r\\n\\t\\t\\t\\tarray.push( parameters.shaderID );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tarray.push( material.fragmentShader );\\r\\n\\t\\t\\t\\tarray.push( material.vertexShader );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.defines !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var name in material.defines ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tarray.push( name );\\r\\n\\t\\t\\t\\t\\tarray.push( material.defines[ name ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tarray.push( parameters[ parameterNames[ i ] ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tarray.push( material.onBeforeCompile.toString() );\\r\\n\\r\\n\\t\\t\\tarray.push( renderer.gammaOutput );\\r\\n\\r\\n\\t\\t\\treturn array.join();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.acquireProgram = function ( material, shader, parameters, code ) {\\r\\n\\r\\n\\t\\t\\tvar program;\\r\\n\\r\\n\\t\\t\\t// Check if code has been already compiled\\r\\n\\t\\t\\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar programInfo = programs[ p ];\\r\\n\\r\\n\\t\\t\\t\\tif ( programInfo.code === code ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tprogram = programInfo;\\r\\n\\t\\t\\t\\t\\t++ program.usedTimes;\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( program === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters );\\r\\n\\t\\t\\t\\tprograms.push( program );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn program;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.releaseProgram = function ( program ) {\\r\\n\\r\\n\\t\\t\\tif ( -- program.usedTimes === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t// Remove from unordered set\\r\\n\\t\\t\\t\\tvar i = programs.indexOf( program );\\r\\n\\t\\t\\t\\tprograms[ i ] = programs[ programs.length - 1 ];\\r\\n\\t\\t\\t\\tprograms.pop();\\r\\n\\r\\n\\t\\t\\t\\t// Free WebGL resources\\r\\n\\t\\t\\t\\tprogram.destroy();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// Exposed for resource monitoring & error feedback via renderer.info:\\r\\n\\t\\tthis.programs = programs;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, infoMemory ) {\\r\\n\\r\\n\\t\\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof window.WebGL2RenderingContext );\\r\\n\\t\\tvar _videoTextures = {};\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tfunction clampToMaxSize( image, maxSize ) {\\r\\n\\r\\n\\t\\t\\tif ( image.width > maxSize || image.height > maxSize ) {\\r\\n\\r\\n\\t\\t\\t\\t// Warning: Scaling through the canvas will only work with images that use\\r\\n\\t\\t\\t\\t// premultiplied alpha.\\r\\n\\r\\n\\t\\t\\t\\tvar scale = maxSize / Math.max( image.width, image.height );\\r\\n\\r\\n\\t\\t\\t\\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\\r\\n\\t\\t\\t\\tcanvas.width = Math.floor( image.width * scale );\\r\\n\\t\\t\\t\\tcanvas.height = Math.floor( image.height * scale );\\r\\n\\r\\n\\t\\t\\t\\tvar context = canvas.getContext( '2d' );\\r\\n\\t\\t\\t\\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\\r\\n\\r\\n\\t\\t\\t\\treturn canvas;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn image;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction isPowerOfTwo( image ) {\\r\\n\\r\\n\\t\\t\\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction makePowerOfTwo( image ) {\\r\\n\\r\\n\\t\\t\\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {\\r\\n\\r\\n\\t\\t\\t\\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\\r\\n\\t\\t\\t\\tcanvas.width = _Math.floorPowerOfTwo( image.width );\\r\\n\\t\\t\\t\\tcanvas.height = _Math.floorPowerOfTwo( image.height );\\r\\n\\r\\n\\t\\t\\t\\tvar context = canvas.getContext( '2d' );\\r\\n\\t\\t\\t\\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\\r\\n\\r\\n\\t\\t\\t\\treturn canvas;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn image;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction textureNeedsPowerOfTwo( texture ) {\\r\\n\\r\\n\\t\\t\\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\\r\\n\\t\\t\\t\\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\\r\\n\\r\\n\\t\\t\\treturn texture.generateMipmaps && isPowerOfTwo &&\\r\\n\\t\\t\\t\\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Fallback filters for non-power-of-2 textures\\r\\n\\r\\n\\t\\tfunction filterFallback( f ) {\\r\\n\\r\\n\\t\\t\\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\\r\\n\\r\\n\\t\\t\\t\\treturn _gl.NEAREST;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn _gl.LINEAR;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tfunction onTextureDispose( event ) {\\r\\n\\r\\n\\t\\t\\tvar texture = event.target;\\r\\n\\r\\n\\t\\t\\ttexture.removeEventListener( 'dispose', onTextureDispose );\\r\\n\\r\\n\\t\\t\\tdeallocateTexture( texture );\\r\\n\\r\\n\\t\\t\\tif ( texture.isVideoTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tdelete _videoTextures[ texture.id ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tinfoMemory.textures --;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction onRenderTargetDispose( event ) {\\r\\n\\r\\n\\t\\t\\tvar renderTarget = event.target;\\r\\n\\r\\n\\t\\t\\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\\r\\n\\r\\n\\t\\t\\tdeallocateRenderTarget( renderTarget );\\r\\n\\r\\n\\t\\t\\tinfoMemory.textures --;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tfunction deallocateTexture( texture ) {\\r\\n\\r\\n\\t\\t\\tvar textureProperties = properties.get( texture );\\r\\n\\r\\n\\t\\t\\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\\r\\n\\r\\n\\t\\t\\t\\t// cube texture\\r\\n\\r\\n\\t\\t\\t\\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// 2D texture\\r\\n\\r\\n\\t\\t\\t\\tif ( textureProperties.__webglInit === undefined ) return;\\r\\n\\r\\n\\t\\t\\t\\t_gl.deleteTexture( textureProperties.__webglTexture );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// remove all webgl properties\\r\\n\\t\\t\\tproperties.remove( texture );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction deallocateRenderTarget( renderTarget ) {\\r\\n\\r\\n\\t\\t\\tvar renderTargetProperties = properties.get( renderTarget );\\r\\n\\t\\t\\tvar textureProperties = properties.get( renderTarget.texture );\\r\\n\\r\\n\\t\\t\\tif ( ! renderTarget ) return;\\r\\n\\r\\n\\t\\t\\tif ( textureProperties.__webglTexture !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.deleteTexture( textureProperties.__webglTexture );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( renderTarget.depthTexture ) {\\r\\n\\r\\n\\t\\t\\t\\trenderTarget.depthTexture.dispose();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( renderTarget.isWebGLRenderTargetCube ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\\r\\n\\t\\t\\t\\t\\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\\r\\n\\t\\t\\t\\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tproperties.remove( renderTarget.texture );\\r\\n\\t\\t\\tproperties.remove( renderTarget );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\r\\n\\r\\n\\t\\tfunction setTexture2D( texture, slot ) {\\r\\n\\r\\n\\t\\t\\tvar textureProperties = properties.get( texture );\\r\\n\\r\\n\\t\\t\\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\\r\\n\\r\\n\\t\\t\\t\\tvar image = texture.image;\\r\\n\\r\\n\\t\\t\\t\\tif ( image === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( image.complete === false ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tuploadTexture( textureProperties, texture, slot );\\r\\n\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.activeTexture( _gl.TEXTURE0 + slot );\\r\\n\\t\\t\\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setTextureCube( texture, slot ) {\\r\\n\\r\\n\\t\\t\\tvar textureProperties = properties.get( texture );\\r\\n\\r\\n\\t\\t\\tif ( texture.image.length === 6 ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ! textureProperties.__image__webglTextureCube ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.addEventListener( 'dispose', onTextureDispose );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tinfoMemory.textures ++;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.activeTexture( _gl.TEXTURE0 + slot );\\r\\n\\t\\t\\t\\t\\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\\r\\n\\r\\n\\t\\t\\t\\t\\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar isCompressed = ( texture && texture.isCompressedTexture );\\r\\n\\t\\t\\t\\t\\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar cubeImage = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( ! isCompressed && ! isDataTexture ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tvar image = cubeImage[ 0 ],\\r\\n\\t\\t\\t\\t\\t\\tisPowerOfTwoImage = isPowerOfTwo( image ),\\r\\n\\t\\t\\t\\t\\t\\tglFormat = utils.convert( texture.format ),\\r\\n\\t\\t\\t\\t\\t\\tglType = utils.convert( texture.type );\\r\\n\\r\\n\\t\\t\\t\\t\\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( ! isCompressed ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( isDataTexture ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tmipmap = mipmaps[ j ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\ttextureProperties.__version = texture.version;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( texture.onUpdate ) texture.onUpdate( texture );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.activeTexture( _gl.TEXTURE0 + slot );\\r\\n\\t\\t\\t\\t\\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setTextureCubeDynamic( texture, slot ) {\\r\\n\\r\\n\\t\\t\\tstate.activeTexture( _gl.TEXTURE0 + slot );\\r\\n\\t\\t\\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\\r\\n\\r\\n\\t\\t\\tvar extension;\\r\\n\\r\\n\\t\\t\\tif ( isPowerOfTwoImage ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );\\r\\n\\t\\t\\t\\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );\\r\\n\\r\\n\\t\\t\\t\\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );\\r\\n\\t\\t\\t\\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\\r\\n\\t\\t\\t\\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\\r\\n\\r\\n\\t\\t\\t\\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\\r\\n\\t\\t\\t\\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\\r\\n\\r\\n\\t\\t\\t\\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\\r\\n\\r\\n\\t\\t\\tif ( extension ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\\r\\n\\t\\t\\t\\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\\r\\n\\r\\n\\t\\t\\t\\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\\r\\n\\t\\t\\t\\t\\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction uploadTexture( textureProperties, texture, slot ) {\\r\\n\\r\\n\\t\\t\\tif ( textureProperties.__webglInit === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\ttextureProperties.__webglInit = true;\\r\\n\\r\\n\\t\\t\\t\\ttexture.addEventListener( 'dispose', onTextureDispose );\\r\\n\\r\\n\\t\\t\\t\\ttextureProperties.__webglTexture = _gl.createTexture();\\r\\n\\r\\n\\t\\t\\t\\tif ( texture.isVideoTexture ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t_videoTextures[ texture.id ] = texture;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tinfoMemory.textures ++;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.activeTexture( _gl.TEXTURE0 + slot );\\r\\n\\t\\t\\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\\r\\n\\r\\n\\t\\t\\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\\r\\n\\t\\t\\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\\r\\n\\t\\t\\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\\r\\n\\r\\n\\t\\t\\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\\r\\n\\r\\n\\t\\t\\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\\r\\n\\r\\n\\t\\t\\t\\timage = makePowerOfTwo( image );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\\r\\n\\t\\t\\t\\tglFormat = utils.convert( texture.format ),\\r\\n\\t\\t\\t\\tglType = utils.convert( texture.type );\\r\\n\\r\\n\\t\\t\\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\\r\\n\\r\\n\\t\\t\\tvar mipmap, mipmaps = texture.mipmaps;\\r\\n\\r\\n\\t\\t\\tif ( texture.isDepthTexture ) {\\r\\n\\r\\n\\t\\t\\t\\t// populate depth texture with dummy data\\r\\n\\r\\n\\t\\t\\t\\tvar internalFormat = _gl.DEPTH_COMPONENT;\\r\\n\\r\\n\\t\\t\\t\\tif ( texture.type === FloatType ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\\r\\n\\t\\t\\t\\t\\tinternalFormat = _gl.DEPTH_COMPONENT32F;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( _isWebGL2 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// WebGL 2.0 requires signed internalformat for glTexImage2D\\r\\n\\t\\t\\t\\t\\tinternalFormat = _gl.DEPTH_COMPONENT16;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\\r\\n\\t\\t\\t\\t\\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\\r\\n\\t\\t\\t\\t\\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\\r\\n\\t\\t\\t\\t\\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.type = UnsignedShortType;\\r\\n\\t\\t\\t\\t\\t\\tglType = utils.convert( texture.type );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// Depth stencil textures need the DEPTH_STENCIL internal format\\r\\n\\t\\t\\t\\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\\r\\n\\t\\t\\t\\tif ( texture.format === DepthStencilFormat ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tinternalFormat = _gl.DEPTH_STENCIL;\\r\\n\\r\\n\\t\\t\\t\\t\\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\\r\\n\\t\\t\\t\\t\\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\\r\\n\\t\\t\\t\\t\\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\\r\\n\\t\\t\\t\\t\\tif ( texture.type !== UnsignedInt248Type ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.type = UnsignedInt248Type;\\r\\n\\t\\t\\t\\t\\t\\tglType = utils.convert( texture.type );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\\r\\n\\r\\n\\t\\t\\t} else if ( texture.isDataTexture ) {\\r\\n\\r\\n\\t\\t\\t\\t// use manually created mipmaps if available\\r\\n\\t\\t\\t\\t// if there are no manual mipmaps\\r\\n\\t\\t\\t\\t// set 0 level mipmap and then use GL to generate other mipmap levels\\r\\n\\r\\n\\t\\t\\t\\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmipmap = mipmaps[ i ];\\r\\n\\t\\t\\t\\t\\t\\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.generateMipmaps = false;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( texture.isCompressedTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmipmap = mipmaps[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// regular Texture (image, video, canvas)\\r\\n\\r\\n\\t\\t\\t\\t// use manually created mipmaps if available\\r\\n\\t\\t\\t\\t// if there are no manual mipmaps\\r\\n\\t\\t\\t\\t// set 0 level mipmap and then use GL to generate other mipmap levels\\r\\n\\r\\n\\t\\t\\t\\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmipmap = mipmaps[ i ];\\r\\n\\t\\t\\t\\t\\t\\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.generateMipmaps = false;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\\r\\n\\r\\n\\t\\t\\ttextureProperties.__version = texture.version;\\r\\n\\r\\n\\t\\t\\tif ( texture.onUpdate ) texture.onUpdate( texture );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Render targets\\r\\n\\r\\n\\t\\t// Setup storage for target texture and bind it to correct framebuffer\\r\\n\\t\\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\\r\\n\\r\\n\\t\\t\\tvar glFormat = utils.convert( renderTarget.texture.format );\\r\\n\\t\\t\\tvar glType = utils.convert( renderTarget.texture.type );\\r\\n\\t\\t\\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\\r\\n\\t\\t\\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\\r\\n\\t\\t\\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\\r\\n\\t\\t\\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\\r\\n\\t\\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\\r\\n\\r\\n\\t\\t\\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\\r\\n\\r\\n\\t\\t\\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\\r\\n\\t\\t\\t\\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\\r\\n\\r\\n\\t\\t\\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\\r\\n\\t\\t\\t\\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// FIXME: We don't support !depth !stencil\\r\\n\\t\\t\\t\\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Setup resources for a Depth Texture for a FBO (needs an extension)\\r\\n\\t\\tfunction setupDepthTexture( framebuffer, renderTarget ) {\\r\\n\\r\\n\\t\\t\\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\\r\\n\\t\\t\\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\\r\\n\\r\\n\\t\\t\\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\\r\\n\\r\\n\\t\\t\\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\\r\\n\\r\\n\\t\\t\\t\\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// upload an empty depth texture with framebuffer size\\r\\n\\t\\t\\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\\r\\n\\t\\t\\t\\t\\trenderTarget.depthTexture.image.width !== renderTarget.width ||\\r\\n\\t\\t\\t\\t\\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\\r\\n\\r\\n\\t\\t\\t\\trenderTarget.depthTexture.image.width = renderTarget.width;\\r\\n\\t\\t\\t\\trenderTarget.depthTexture.image.height = renderTarget.height;\\r\\n\\t\\t\\t\\trenderTarget.depthTexture.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tsetTexture2D( renderTarget.depthTexture, 0 );\\r\\n\\r\\n\\t\\t\\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\\r\\n\\r\\n\\t\\t\\tif ( renderTarget.depthTexture.format === DepthFormat ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\\r\\n\\r\\n\\t\\t\\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthrow new Error( 'Unknown depthTexture format' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Setup GL resources for a non-texture depth buffer\\r\\n\\t\\tfunction setupDepthRenderbuffer( renderTarget ) {\\r\\n\\r\\n\\t\\t\\tvar renderTargetProperties = properties.get( renderTarget );\\r\\n\\r\\n\\t\\t\\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\\r\\n\\r\\n\\t\\t\\tif ( renderTarget.depthTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\\r\\n\\r\\n\\t\\t\\t\\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tif ( isCube ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trenderTargetProperties.__webglDepthbuffer = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\\r\\n\\t\\t\\t\\t\\t\\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\\r\\n\\t\\t\\t\\t\\t\\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\\r\\n\\t\\t\\t\\t\\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\\r\\n\\t\\t\\t\\t\\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Set up GL resources for the render target\\r\\n\\t\\tfunction setupRenderTarget( renderTarget ) {\\r\\n\\r\\n\\t\\t\\tvar renderTargetProperties = properties.get( renderTarget );\\r\\n\\t\\t\\tvar textureProperties = properties.get( renderTarget.texture );\\r\\n\\r\\n\\t\\t\\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\\r\\n\\r\\n\\t\\t\\ttextureProperties.__webglTexture = _gl.createTexture();\\r\\n\\r\\n\\t\\t\\tinfoMemory.textures ++;\\r\\n\\r\\n\\t\\t\\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\\r\\n\\t\\t\\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\\r\\n\\r\\n\\t\\t\\t// Setup framebuffer\\r\\n\\r\\n\\t\\t\\tif ( isCube ) {\\r\\n\\r\\n\\t\\t\\t\\trenderTargetProperties.__webglFramebuffer = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Setup color buffer\\r\\n\\r\\n\\t\\t\\tif ( isCube ) {\\r\\n\\r\\n\\t\\t\\t\\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\\r\\n\\t\\t\\t\\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\\r\\n\\t\\t\\t\\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\\r\\n\\t\\t\\t\\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\\r\\n\\t\\t\\t\\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\\r\\n\\r\\n\\t\\t\\t\\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );\\r\\n\\t\\t\\t\\tstate.bindTexture( _gl.TEXTURE_2D, null );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Setup depth and stencil buffers\\r\\n\\r\\n\\t\\t\\tif ( renderTarget.depthBuffer ) {\\r\\n\\r\\n\\t\\t\\t\\tsetupDepthRenderbuffer( renderTarget );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction updateRenderTargetMipmap( renderTarget ) {\\r\\n\\r\\n\\t\\t\\tvar texture = renderTarget.texture;\\r\\n\\t\\t\\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\\r\\n\\r\\n\\t\\t\\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\\r\\n\\r\\n\\t\\t\\t\\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\\r\\n\\t\\t\\t\\tvar webglTexture = properties.get( texture ).__webglTexture;\\r\\n\\r\\n\\t\\t\\t\\tstate.bindTexture( target, webglTexture );\\r\\n\\t\\t\\t\\t_gl.generateMipmap( target );\\r\\n\\t\\t\\t\\tstate.bindTexture( target, null );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction updateVideoTextures() {\\r\\n\\r\\n\\t\\t\\tfor ( var id in _videoTextures ) {\\r\\n\\r\\n\\t\\t\\t\\t_videoTextures[ id ].update();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.setTexture2D = setTexture2D;\\r\\n\\t\\tthis.setTextureCube = setTextureCube;\\r\\n\\t\\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\\r\\n\\t\\tthis.setupRenderTarget = setupRenderTarget;\\r\\n\\t\\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\\r\\n\\t\\tthis.updateVideoTextures = updateVideoTextures;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author fordacious / fordacious.github.io\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLProperties() {\\r\\n\\r\\n\\t\\tvar properties = {};\\r\\n\\r\\n\\t\\tfunction get( object ) {\\r\\n\\r\\n\\t\\t\\tvar uuid = object.uuid;\\r\\n\\t\\t\\tvar map = properties[ uuid ];\\r\\n\\r\\n\\t\\t\\tif ( map === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tmap = {};\\r\\n\\t\\t\\t\\tproperties[ uuid ] = map;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn map;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction remove( object ) {\\r\\n\\r\\n\\t\\t\\tdelete properties[ object.uuid ];\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction clear() {\\r\\n\\r\\n\\t\\t\\tproperties = {};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tget: get,\\r\\n\\t\\t\\tremove: remove,\\r\\n\\t\\t\\tclear: clear\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLState( gl, extensions, utils ) {\\r\\n\\r\\n\\t\\tfunction ColorBuffer() {\\r\\n\\r\\n\\t\\t\\tvar locked = false;\\r\\n\\r\\n\\t\\t\\tvar color = new Vector4();\\r\\n\\t\\t\\tvar currentColorMask = null;\\r\\n\\t\\t\\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\\r\\n\\r\\n\\t\\t\\treturn {\\r\\n\\r\\n\\t\\t\\t\\tsetMask: function ( colorMask ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( currentColorMask !== colorMask && ! locked ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\\r\\n\\t\\t\\t\\t\\t\\tcurrentColorMask = colorMask;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetLocked: function ( lock ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tlocked = lock;\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( premultipliedAlpha === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tr *= a; g *= a; b *= a;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tcolor.set( r, g, b, a );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( currentColorClear.equals( color ) === false ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.clearColor( r, g, b, a );\\r\\n\\t\\t\\t\\t\\t\\tcurrentColorClear.copy( color );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\treset: function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tlocked = false;\\r\\n\\r\\n\\t\\t\\t\\t\\tcurrentColorMask = null;\\r\\n\\t\\t\\t\\t\\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction DepthBuffer() {\\r\\n\\r\\n\\t\\t\\tvar locked = false;\\r\\n\\r\\n\\t\\t\\tvar currentDepthMask = null;\\r\\n\\t\\t\\tvar currentDepthFunc = null;\\r\\n\\t\\t\\tvar currentDepthClear = null;\\r\\n\\r\\n\\t\\t\\treturn {\\r\\n\\r\\n\\t\\t\\t\\tsetTest: function ( depthTest ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( depthTest ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tenable( gl.DEPTH_TEST );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdisable( gl.DEPTH_TEST );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetMask: function ( depthMask ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( currentDepthMask !== depthMask && ! locked ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.depthMask( depthMask );\\r\\n\\t\\t\\t\\t\\t\\tcurrentDepthMask = depthMask;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetFunc: function ( depthFunc ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( currentDepthFunc !== depthFunc ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( depthFunc ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tswitch ( depthFunc ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase NeverDepth:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.NEVER );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase AlwaysDepth:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.ALWAYS );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase LessDepth:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.LESS );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase LessEqualDepth:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.LEQUAL );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase EqualDepth:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.EQUAL );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase GreaterEqualDepth:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.GEQUAL );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase GreaterDepth:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.GREATER );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase NotEqualDepth:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.NOTEQUAL );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdefault:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.LEQUAL );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgl.depthFunc( gl.LEQUAL );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcurrentDepthFunc = depthFunc;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetLocked: function ( lock ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tlocked = lock;\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetClear: function ( depth ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( currentDepthClear !== depth ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.clearDepth( depth );\\r\\n\\t\\t\\t\\t\\t\\tcurrentDepthClear = depth;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\treset: function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tlocked = false;\\r\\n\\r\\n\\t\\t\\t\\t\\tcurrentDepthMask = null;\\r\\n\\t\\t\\t\\t\\tcurrentDepthFunc = null;\\r\\n\\t\\t\\t\\t\\tcurrentDepthClear = null;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction StencilBuffer() {\\r\\n\\r\\n\\t\\t\\tvar locked = false;\\r\\n\\r\\n\\t\\t\\tvar currentStencilMask = null;\\r\\n\\t\\t\\tvar currentStencilFunc = null;\\r\\n\\t\\t\\tvar currentStencilRef = null;\\r\\n\\t\\t\\tvar currentStencilFuncMask = null;\\r\\n\\t\\t\\tvar currentStencilFail = null;\\r\\n\\t\\t\\tvar currentStencilZFail = null;\\r\\n\\t\\t\\tvar currentStencilZPass = null;\\r\\n\\t\\t\\tvar currentStencilClear = null;\\r\\n\\r\\n\\t\\t\\treturn {\\r\\n\\r\\n\\t\\t\\t\\tsetTest: function ( stencilTest ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( stencilTest ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tenable( gl.STENCIL_TEST );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdisable( gl.STENCIL_TEST );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetMask: function ( stencilMask ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( currentStencilMask !== stencilMask && ! locked ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.stencilMask( stencilMask );\\r\\n\\t\\t\\t\\t\\t\\tcurrentStencilMask = stencilMask;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( currentStencilFunc !== stencilFunc ||\\r\\n\\t\\t\\t\\t\\t     currentStencilRef \\t!== stencilRef \\t||\\r\\n\\t\\t\\t\\t\\t     currentStencilFuncMask !== stencilMask ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcurrentStencilFunc = stencilFunc;\\r\\n\\t\\t\\t\\t\\t\\tcurrentStencilRef = stencilRef;\\r\\n\\t\\t\\t\\t\\t\\tcurrentStencilFuncMask = stencilMask;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( currentStencilFail\\t !== stencilFail \\t||\\r\\n\\t\\t\\t\\t\\t     currentStencilZFail !== stencilZFail ||\\r\\n\\t\\t\\t\\t\\t     currentStencilZPass !== stencilZPass ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcurrentStencilFail = stencilFail;\\r\\n\\t\\t\\t\\t\\t\\tcurrentStencilZFail = stencilZFail;\\r\\n\\t\\t\\t\\t\\t\\tcurrentStencilZPass = stencilZPass;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetLocked: function ( lock ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tlocked = lock;\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tsetClear: function ( stencil ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( currentStencilClear !== stencil ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.clearStencil( stencil );\\r\\n\\t\\t\\t\\t\\t\\tcurrentStencilClear = stencil;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\treset: function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tlocked = false;\\r\\n\\r\\n\\t\\t\\t\\t\\tcurrentStencilMask = null;\\r\\n\\t\\t\\t\\t\\tcurrentStencilFunc = null;\\r\\n\\t\\t\\t\\t\\tcurrentStencilRef = null;\\r\\n\\t\\t\\t\\t\\tcurrentStencilFuncMask = null;\\r\\n\\t\\t\\t\\t\\tcurrentStencilFail = null;\\r\\n\\t\\t\\t\\t\\tcurrentStencilZFail = null;\\r\\n\\t\\t\\t\\t\\tcurrentStencilZPass = null;\\r\\n\\t\\t\\t\\t\\tcurrentStencilClear = null;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar colorBuffer = new ColorBuffer();\\r\\n\\t\\tvar depthBuffer = new DepthBuffer();\\r\\n\\t\\tvar stencilBuffer = new StencilBuffer();\\r\\n\\r\\n\\t\\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\\r\\n\\t\\tvar newAttributes = new Uint8Array( maxVertexAttributes );\\r\\n\\t\\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\\r\\n\\t\\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\\r\\n\\r\\n\\t\\tvar capabilities = {};\\r\\n\\r\\n\\t\\tvar compressedTextureFormats = null;\\r\\n\\r\\n\\t\\tvar currentProgram = null;\\r\\n\\r\\n\\t\\tvar currentBlending = null;\\r\\n\\t\\tvar currentBlendEquation = null;\\r\\n\\t\\tvar currentBlendSrc = null;\\r\\n\\t\\tvar currentBlendDst = null;\\r\\n\\t\\tvar currentBlendEquationAlpha = null;\\r\\n\\t\\tvar currentBlendSrcAlpha = null;\\r\\n\\t\\tvar currentBlendDstAlpha = null;\\r\\n\\t\\tvar currentPremultipledAlpha = false;\\r\\n\\r\\n\\t\\tvar currentFlipSided = null;\\r\\n\\t\\tvar currentCullFace = null;\\r\\n\\r\\n\\t\\tvar currentLineWidth = null;\\r\\n\\r\\n\\t\\tvar currentPolygonOffsetFactor = null;\\r\\n\\t\\tvar currentPolygonOffsetUnits = null;\\r\\n\\r\\n\\t\\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\\r\\n\\r\\n\\t\\tvar version = parseFloat( /^WebGL\\\\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );\\r\\n\\t\\tvar lineWidthAvailable = parseFloat( version ) >= 1.0;\\r\\n\\r\\n\\t\\tvar currentTextureSlot = null;\\r\\n\\t\\tvar currentBoundTextures = {};\\r\\n\\r\\n\\t\\tvar currentScissor = new Vector4();\\r\\n\\t\\tvar currentViewport = new Vector4();\\r\\n\\r\\n\\t\\tfunction createTexture( type, target, count ) {\\r\\n\\r\\n\\t\\t\\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\\r\\n\\t\\t\\tvar texture = gl.createTexture();\\r\\n\\r\\n\\t\\t\\tgl.bindTexture( type, texture );\\r\\n\\t\\t\\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\\r\\n\\t\\t\\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < count; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn texture;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar emptyTextures = {};\\r\\n\\t\\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\\r\\n\\t\\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\\r\\n\\r\\n\\t\\t// init\\r\\n\\r\\n\\t\\tcolorBuffer.setClear( 0, 0, 0, 1 );\\r\\n\\t\\tdepthBuffer.setClear( 1 );\\r\\n\\t\\tstencilBuffer.setClear( 0 );\\r\\n\\r\\n\\t\\tenable( gl.DEPTH_TEST );\\r\\n\\t\\tdepthBuffer.setFunc( LessEqualDepth );\\r\\n\\r\\n\\t\\tsetFlipSided( false );\\r\\n\\t\\tsetCullFace( CullFaceBack );\\r\\n\\t\\tenable( gl.CULL_FACE );\\r\\n\\r\\n\\t\\tenable( gl.BLEND );\\r\\n\\t\\tsetBlending( NormalBlending );\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tfunction initAttributes() {\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tnewAttributes[ i ] = 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction enableAttribute( attribute ) {\\r\\n\\r\\n\\t\\t\\tnewAttributes[ attribute ] = 1;\\r\\n\\r\\n\\t\\t\\tif ( enabledAttributes[ attribute ] === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.enableVertexAttribArray( attribute );\\r\\n\\t\\t\\t\\tenabledAttributes[ attribute ] = 1;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( attributeDivisors[ attribute ] !== 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\\r\\n\\r\\n\\t\\t\\t\\textension.vertexAttribDivisorANGLE( attribute, 0 );\\r\\n\\t\\t\\t\\tattributeDivisors[ attribute ] = 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\\r\\n\\r\\n\\t\\t\\tnewAttributes[ attribute ] = 1;\\r\\n\\r\\n\\t\\t\\tif ( enabledAttributes[ attribute ] === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.enableVertexAttribArray( attribute );\\r\\n\\t\\t\\t\\tenabledAttributes[ attribute ] = 1;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\\r\\n\\r\\n\\t\\t\\t\\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\\r\\n\\r\\n\\t\\t\\t\\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\\r\\n\\t\\t\\t\\tattributeDivisors[ attribute ] = meshPerAttribute;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction disableUnusedAttributes() {\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.disableVertexAttribArray( i );\\r\\n\\t\\t\\t\\t\\tenabledAttributes[ i ] = 0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction enable( id ) {\\r\\n\\r\\n\\t\\t\\tif ( capabilities[ id ] !== true ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.enable( id );\\r\\n\\t\\t\\t\\tcapabilities[ id ] = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction disable( id ) {\\r\\n\\r\\n\\t\\t\\tif ( capabilities[ id ] !== false ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.disable( id );\\r\\n\\t\\t\\t\\tcapabilities[ id ] = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction getCompressedTextureFormats() {\\r\\n\\r\\n\\t\\t\\tif ( compressedTextureFormats === null ) {\\r\\n\\r\\n\\t\\t\\t\\tcompressedTextureFormats = [];\\r\\n\\r\\n\\t\\t\\t\\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\\r\\n\\t\\t\\t\\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\\r\\n\\t\\t\\t\\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < formats.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcompressedTextureFormats.push( formats[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn compressedTextureFormats;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction useProgram( program ) {\\r\\n\\r\\n\\t\\t\\tif ( currentProgram !== program ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.useProgram( program );\\r\\n\\r\\n\\t\\t\\t\\tcurrentProgram = program;\\r\\n\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn false;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\\r\\n\\r\\n\\t\\t\\tif ( blending !== NoBlending ) {\\r\\n\\r\\n\\t\\t\\t\\tenable( gl.BLEND );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tdisable( gl.BLEND );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( blending !== CustomBlending ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tswitch ( blending ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase AdditiveBlending:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( premultipliedAlpha ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendEquation( gl.FUNC_ADD );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase SubtractiveBlending:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( premultipliedAlpha ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendEquation( gl.FUNC_ADD );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase MultiplyBlending:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( premultipliedAlpha ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendEquation( gl.FUNC_ADD );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdefault:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( premultipliedAlpha ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tcurrentBlendEquation = null;\\r\\n\\t\\t\\t\\tcurrentBlendSrc = null;\\r\\n\\t\\t\\t\\tcurrentBlendDst = null;\\r\\n\\t\\t\\t\\tcurrentBlendEquationAlpha = null;\\r\\n\\t\\t\\t\\tcurrentBlendSrcAlpha = null;\\r\\n\\t\\t\\t\\tcurrentBlendDstAlpha = null;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tblendEquationAlpha = blendEquationAlpha || blendEquation;\\r\\n\\t\\t\\t\\tblendSrcAlpha = blendSrcAlpha || blendSrc;\\r\\n\\t\\t\\t\\tblendDstAlpha = blendDstAlpha || blendDst;\\r\\n\\r\\n\\t\\t\\t\\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\\r\\n\\r\\n\\t\\t\\t\\t\\tcurrentBlendEquation = blendEquation;\\r\\n\\t\\t\\t\\t\\tcurrentBlendEquationAlpha = blendEquationAlpha;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\\r\\n\\r\\n\\t\\t\\t\\t\\tcurrentBlendSrc = blendSrc;\\r\\n\\t\\t\\t\\t\\tcurrentBlendDst = blendDst;\\r\\n\\t\\t\\t\\t\\tcurrentBlendSrcAlpha = blendSrcAlpha;\\r\\n\\t\\t\\t\\t\\tcurrentBlendDstAlpha = blendDstAlpha;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tcurrentBlending = blending;\\r\\n\\t\\t\\tcurrentPremultipledAlpha = premultipliedAlpha;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setMaterial( material, frontFaceCW ) {\\r\\n\\r\\n\\t\\t\\tmaterial.side === DoubleSide\\r\\n\\t\\t\\t\\t? disable( gl.CULL_FACE )\\r\\n\\t\\t\\t\\t: enable( gl.CULL_FACE );\\r\\n\\r\\n\\t\\t\\tvar flipSided = ( material.side === BackSide );\\r\\n\\t\\t\\tif ( frontFaceCW ) flipSided = ! flipSided;\\r\\n\\r\\n\\t\\t\\tsetFlipSided( flipSided );\\r\\n\\r\\n\\t\\t\\tmaterial.transparent === true\\r\\n\\t\\t\\t\\t? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\\r\\n\\t\\t\\t\\t: setBlending( NoBlending );\\r\\n\\r\\n\\t\\t\\tdepthBuffer.setFunc( material.depthFunc );\\r\\n\\t\\t\\tdepthBuffer.setTest( material.depthTest );\\r\\n\\t\\t\\tdepthBuffer.setMask( material.depthWrite );\\r\\n\\t\\t\\tcolorBuffer.setMask( material.colorWrite );\\r\\n\\r\\n\\t\\t\\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tfunction setFlipSided( flipSided ) {\\r\\n\\r\\n\\t\\t\\tif ( currentFlipSided !== flipSided ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( flipSided ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.frontFace( gl.CW );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.frontFace( gl.CCW );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tcurrentFlipSided = flipSided;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setCullFace( cullFace ) {\\r\\n\\r\\n\\t\\t\\tif ( cullFace !== CullFaceNone ) {\\r\\n\\r\\n\\t\\t\\t\\tenable( gl.CULL_FACE );\\r\\n\\r\\n\\t\\t\\t\\tif ( cullFace !== currentCullFace ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( cullFace === CullFaceBack ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.cullFace( gl.BACK );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else if ( cullFace === CullFaceFront ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.cullFace( gl.FRONT );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgl.cullFace( gl.FRONT_AND_BACK );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tdisable( gl.CULL_FACE );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tcurrentCullFace = cullFace;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setLineWidth( width ) {\\r\\n\\r\\n\\t\\t\\tif ( width !== currentLineWidth ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( lineWidthAvailable ) gl.lineWidth( width );\\r\\n\\r\\n\\t\\t\\t\\tcurrentLineWidth = width;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setPolygonOffset( polygonOffset, factor, units ) {\\r\\n\\r\\n\\t\\t\\tif ( polygonOffset ) {\\r\\n\\r\\n\\t\\t\\t\\tenable( gl.POLYGON_OFFSET_FILL );\\r\\n\\r\\n\\t\\t\\t\\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.polygonOffset( factor, units );\\r\\n\\r\\n\\t\\t\\t\\t\\tcurrentPolygonOffsetFactor = factor;\\r\\n\\t\\t\\t\\t\\tcurrentPolygonOffsetUnits = units;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tdisable( gl.POLYGON_OFFSET_FILL );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setScissorTest( scissorTest ) {\\r\\n\\r\\n\\t\\t\\tif ( scissorTest ) {\\r\\n\\r\\n\\t\\t\\t\\tenable( gl.SCISSOR_TEST );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tdisable( gl.SCISSOR_TEST );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// texture\\r\\n\\r\\n\\t\\tfunction activeTexture( webglSlot ) {\\r\\n\\r\\n\\t\\t\\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\\r\\n\\r\\n\\t\\t\\tif ( currentTextureSlot !== webglSlot ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.activeTexture( webglSlot );\\r\\n\\t\\t\\t\\tcurrentTextureSlot = webglSlot;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction bindTexture( webglType, webglTexture ) {\\r\\n\\r\\n\\t\\t\\tif ( currentTextureSlot === null ) {\\r\\n\\r\\n\\t\\t\\t\\tactiveTexture();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\\r\\n\\r\\n\\t\\t\\tif ( boundTexture === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tboundTexture = { type: undefined, texture: undefined };\\r\\n\\t\\t\\t\\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\\r\\n\\r\\n\\t\\t\\t\\tboundTexture.type = webglType;\\r\\n\\t\\t\\t\\tboundTexture.texture = webglTexture;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction compressedTexImage2D() {\\r\\n\\r\\n\\t\\t\\ttry {\\r\\n\\r\\n\\t\\t\\t\\tgl.compressedTexImage2D.apply( gl, arguments );\\r\\n\\r\\n\\t\\t\\t} catch ( error ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLState:', error );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction texImage2D() {\\r\\n\\r\\n\\t\\t\\ttry {\\r\\n\\r\\n\\t\\t\\t\\tgl.texImage2D.apply( gl, arguments );\\r\\n\\r\\n\\t\\t\\t} catch ( error ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLState:', error );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tfunction scissor( scissor ) {\\r\\n\\r\\n\\t\\t\\tif ( currentScissor.equals( scissor ) === false ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\\r\\n\\t\\t\\t\\tcurrentScissor.copy( scissor );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction viewport( viewport ) {\\r\\n\\r\\n\\t\\t\\tif ( currentViewport.equals( viewport ) === false ) {\\r\\n\\r\\n\\t\\t\\t\\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\\r\\n\\t\\t\\t\\tcurrentViewport.copy( viewport );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tfunction reset() {\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( enabledAttributes[ i ] === 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgl.disableVertexAttribArray( i );\\r\\n\\t\\t\\t\\t\\tenabledAttributes[ i ] = 0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tcapabilities = {};\\r\\n\\r\\n\\t\\t\\tcompressedTextureFormats = null;\\r\\n\\r\\n\\t\\t\\tcurrentTextureSlot = null;\\r\\n\\t\\t\\tcurrentBoundTextures = {};\\r\\n\\r\\n\\t\\t\\tcurrentProgram = null;\\r\\n\\r\\n\\t\\t\\tcurrentBlending = null;\\r\\n\\r\\n\\t\\t\\tcurrentFlipSided = null;\\r\\n\\t\\t\\tcurrentCullFace = null;\\r\\n\\r\\n\\t\\t\\tcolorBuffer.reset();\\r\\n\\t\\t\\tdepthBuffer.reset();\\r\\n\\t\\t\\tstencilBuffer.reset();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tbuffers: {\\r\\n\\t\\t\\t\\tcolor: colorBuffer,\\r\\n\\t\\t\\t\\tdepth: depthBuffer,\\r\\n\\t\\t\\t\\tstencil: stencilBuffer\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tinitAttributes: initAttributes,\\r\\n\\t\\t\\tenableAttribute: enableAttribute,\\r\\n\\t\\t\\tenableAttributeAndDivisor: enableAttributeAndDivisor,\\r\\n\\t\\t\\tdisableUnusedAttributes: disableUnusedAttributes,\\r\\n\\t\\t\\tenable: enable,\\r\\n\\t\\t\\tdisable: disable,\\r\\n\\t\\t\\tgetCompressedTextureFormats: getCompressedTextureFormats,\\r\\n\\r\\n\\t\\t\\tuseProgram: useProgram,\\r\\n\\r\\n\\t\\t\\tsetBlending: setBlending,\\r\\n\\t\\t\\tsetMaterial: setMaterial,\\r\\n\\r\\n\\t\\t\\tsetFlipSided: setFlipSided,\\r\\n\\t\\t\\tsetCullFace: setCullFace,\\r\\n\\r\\n\\t\\t\\tsetLineWidth: setLineWidth,\\r\\n\\t\\t\\tsetPolygonOffset: setPolygonOffset,\\r\\n\\r\\n\\t\\t\\tsetScissorTest: setScissorTest,\\r\\n\\r\\n\\t\\t\\tactiveTexture: activeTexture,\\r\\n\\t\\t\\tbindTexture: bindTexture,\\r\\n\\t\\t\\tcompressedTexImage2D: compressedTexImage2D,\\r\\n\\t\\t\\ttexImage2D: texImage2D,\\r\\n\\r\\n\\t\\t\\tscissor: scissor,\\r\\n\\t\\t\\tviewport: viewport,\\r\\n\\r\\n\\t\\t\\treset: reset\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLCapabilities( gl, extensions, parameters ) {\\r\\n\\r\\n\\t\\tvar maxAnisotropy;\\r\\n\\r\\n\\t\\tfunction getMaxAnisotropy() {\\r\\n\\r\\n\\t\\t\\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\\r\\n\\r\\n\\t\\t\\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\\r\\n\\r\\n\\t\\t\\tif ( extension !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tmaxAnisotropy = 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn maxAnisotropy;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction getMaxPrecision( precision ) {\\r\\n\\r\\n\\t\\t\\tif ( precision === 'highp' ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\\r\\n\\t\\t\\t\\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn 'highp';\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tprecision = 'mediump';\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( precision === 'mediump' ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\\r\\n\\t\\t\\t\\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn 'mediump';\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn 'lowp';\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\\r\\n\\t\\tvar maxPrecision = getMaxPrecision( precision );\\r\\n\\r\\n\\t\\tif ( maxPrecision !== precision ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\\r\\n\\t\\t\\tprecision = maxPrecision;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\\r\\n\\r\\n\\t\\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\\r\\n\\t\\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\\r\\n\\t\\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\\r\\n\\t\\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\\r\\n\\r\\n\\t\\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\\r\\n\\t\\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\\r\\n\\t\\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\\r\\n\\t\\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\\r\\n\\r\\n\\t\\tvar vertexTextures = maxVertexTextures > 0;\\r\\n\\t\\tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\\r\\n\\t\\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tgetMaxAnisotropy: getMaxAnisotropy,\\r\\n\\t\\t\\tgetMaxPrecision: getMaxPrecision,\\r\\n\\r\\n\\t\\t\\tprecision: precision,\\r\\n\\t\\t\\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\\r\\n\\r\\n\\t\\t\\tmaxTextures: maxTextures,\\r\\n\\t\\t\\tmaxVertexTextures: maxVertexTextures,\\r\\n\\t\\t\\tmaxTextureSize: maxTextureSize,\\r\\n\\t\\t\\tmaxCubemapSize: maxCubemapSize,\\r\\n\\r\\n\\t\\t\\tmaxAttributes: maxAttributes,\\r\\n\\t\\t\\tmaxVertexUniforms: maxVertexUniforms,\\r\\n\\t\\t\\tmaxVaryings: maxVaryings,\\r\\n\\t\\t\\tmaxFragmentUniforms: maxFragmentUniforms,\\r\\n\\r\\n\\t\\t\\tvertexTextures: vertexTextures,\\r\\n\\t\\t\\tfloatFragmentTextures: floatFragmentTextures,\\r\\n\\t\\t\\tfloatVertexTextures: floatVertexTextures\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author greggman / http://games.greggman.com/\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction PerspectiveCamera( fov, aspect, near, far ) {\\r\\n\\r\\n\\t\\tCamera.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'PerspectiveCamera';\\r\\n\\r\\n\\t\\tthis.fov = fov !== undefined ? fov : 50;\\r\\n\\t\\tthis.zoom = 1;\\r\\n\\r\\n\\t\\tthis.near = near !== undefined ? near : 0.1;\\r\\n\\t\\tthis.far = far !== undefined ? far : 2000;\\r\\n\\t\\tthis.focus = 10;\\r\\n\\r\\n\\t\\tthis.aspect = aspect !== undefined ? aspect : 1;\\r\\n\\t\\tthis.view = null;\\r\\n\\r\\n\\t\\tthis.filmGauge = 35;\\t// width of the film (default in millimeters)\\r\\n\\t\\tthis.filmOffset = 0;\\t// horizontal film offset (same unit as gauge)\\r\\n\\r\\n\\t\\tthis.updateProjectionMatrix();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: PerspectiveCamera,\\r\\n\\r\\n\\t\\tisPerspectiveCamera: true,\\r\\n\\r\\n\\t\\tcopy: function ( source, recursive ) {\\r\\n\\r\\n\\t\\t\\tCamera.prototype.copy.call( this, source, recursive );\\r\\n\\r\\n\\t\\t\\tthis.fov = source.fov;\\r\\n\\t\\t\\tthis.zoom = source.zoom;\\r\\n\\r\\n\\t\\t\\tthis.near = source.near;\\r\\n\\t\\t\\tthis.far = source.far;\\r\\n\\t\\t\\tthis.focus = source.focus;\\r\\n\\r\\n\\t\\t\\tthis.aspect = source.aspect;\\r\\n\\t\\t\\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\\r\\n\\r\\n\\t\\t\\tthis.filmGauge = source.filmGauge;\\r\\n\\t\\t\\tthis.filmOffset = source.filmOffset;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * Sets the FOV by focal length in respect to the current .filmGauge.\\r\\n\\t\\t *\\r\\n\\t\\t * The default film gauge is 35, so that the focal length can be specified for\\r\\n\\t\\t * a 35mm (full frame) camera.\\r\\n\\t\\t *\\r\\n\\t\\t * Values for focal length and film gauge must have the same unit.\\r\\n\\t\\t */\\r\\n\\t\\tsetFocalLength: function ( focalLength ) {\\r\\n\\r\\n\\t\\t\\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\\r\\n\\t\\t\\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\\r\\n\\r\\n\\t\\t\\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\\r\\n\\t\\t\\tthis.updateProjectionMatrix();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * Calculates the focal length from the current .fov and .filmGauge.\\r\\n\\t\\t */\\r\\n\\t\\tgetFocalLength: function () {\\r\\n\\r\\n\\t\\t\\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\\r\\n\\r\\n\\t\\t\\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetEffectiveFOV: function () {\\r\\n\\r\\n\\t\\t\\treturn _Math.RAD2DEG * 2 * Math.atan(\\r\\n\\t\\t\\t\\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetFilmWidth: function () {\\r\\n\\r\\n\\t\\t\\t// film not completely covered in portrait format (aspect < 1)\\r\\n\\t\\t\\treturn this.filmGauge * Math.min( this.aspect, 1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetFilmHeight: function () {\\r\\n\\r\\n\\t\\t\\t// film not completely covered in landscape format (aspect > 1)\\r\\n\\t\\t\\treturn this.filmGauge / Math.max( this.aspect, 1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * Sets an offset in a larger frustum. This is useful for multi-window or\\r\\n\\t\\t * multi-monitor/multi-machine setups.\\r\\n\\t\\t *\\r\\n\\t\\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\\r\\n\\t\\t * the monitors are in grid like this\\r\\n\\t\\t *\\r\\n\\t\\t *   +---+---+---+\\r\\n\\t\\t *   | A | B | C |\\r\\n\\t\\t *   +---+---+---+\\r\\n\\t\\t *   | D | E | F |\\r\\n\\t\\t *   +---+---+---+\\r\\n\\t\\t *\\r\\n\\t\\t * then for each monitor you would call it like this\\r\\n\\t\\t *\\r\\n\\t\\t *   var w = 1920;\\r\\n\\t\\t *   var h = 1080;\\r\\n\\t\\t *   var fullWidth = w * 3;\\r\\n\\t\\t *   var fullHeight = h * 2;\\r\\n\\t\\t *\\r\\n\\t\\t *   --A--\\r\\n\\t\\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\\r\\n\\t\\t *   --B--\\r\\n\\t\\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\\r\\n\\t\\t *   --C--\\r\\n\\t\\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\\r\\n\\t\\t *   --D--\\r\\n\\t\\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\\r\\n\\t\\t *   --E--\\r\\n\\t\\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\\r\\n\\t\\t *   --F--\\r\\n\\t\\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\\r\\n\\t\\t *\\r\\n\\t\\t *   Note there is no reason monitors have to be the same size or in a grid.\\r\\n\\t\\t */\\r\\n\\t\\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\\r\\n\\r\\n\\t\\t\\tthis.aspect = fullWidth / fullHeight;\\r\\n\\r\\n\\t\\t\\tif ( this.view === null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.view = {\\r\\n\\t\\t\\t\\t\\tenabled: true,\\r\\n\\t\\t\\t\\t\\tfullWidth: 1,\\r\\n\\t\\t\\t\\t\\tfullHeight: 1,\\r\\n\\t\\t\\t\\t\\toffsetX: 0,\\r\\n\\t\\t\\t\\t\\toffsetY: 0,\\r\\n\\t\\t\\t\\t\\twidth: 1,\\r\\n\\t\\t\\t\\t\\theight: 1\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.view.enabled = true;\\r\\n\\t\\t\\tthis.view.fullWidth = fullWidth;\\r\\n\\t\\t\\tthis.view.fullHeight = fullHeight;\\r\\n\\t\\t\\tthis.view.offsetX = x;\\r\\n\\t\\t\\tthis.view.offsetY = y;\\r\\n\\t\\t\\tthis.view.width = width;\\r\\n\\t\\t\\tthis.view.height = height;\\r\\n\\r\\n\\t\\t\\tthis.updateProjectionMatrix();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclearViewOffset: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.view !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.view.enabled = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.updateProjectionMatrix();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateProjectionMatrix: function () {\\r\\n\\r\\n\\t\\t\\tvar near = this.near,\\r\\n\\t\\t\\t\\ttop = near * Math.tan(\\r\\n\\t\\t\\t\\t\\t_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\\r\\n\\t\\t\\t\\theight = 2 * top,\\r\\n\\t\\t\\t\\twidth = this.aspect * height,\\r\\n\\t\\t\\t\\tleft = - 0.5 * width,\\r\\n\\t\\t\\t\\tview = this.view;\\r\\n\\r\\n\\t\\t\\tif ( this.view !== null && this.view.enabled ) {\\r\\n\\r\\n\\t\\t\\t\\tvar fullWidth = view.fullWidth,\\r\\n\\t\\t\\t\\t\\tfullHeight = view.fullHeight;\\r\\n\\r\\n\\t\\t\\t\\tleft += view.offsetX * width / fullWidth;\\r\\n\\t\\t\\t\\ttop -= view.offsetY * height / fullHeight;\\r\\n\\t\\t\\t\\twidth *= view.width / fullWidth;\\r\\n\\t\\t\\t\\theight *= view.height / fullHeight;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar skew = this.filmOffset;\\r\\n\\t\\t\\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\\r\\n\\r\\n\\t\\t\\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( meta ) {\\r\\n\\r\\n\\t\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\r\\n\\r\\n\\t\\t\\tdata.object.fov = this.fov;\\r\\n\\t\\t\\tdata.object.zoom = this.zoom;\\r\\n\\r\\n\\t\\t\\tdata.object.near = this.near;\\r\\n\\t\\t\\tdata.object.far = this.far;\\r\\n\\t\\t\\tdata.object.focus = this.focus;\\r\\n\\r\\n\\t\\t\\tdata.object.aspect = this.aspect;\\r\\n\\r\\n\\t\\t\\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\\r\\n\\r\\n\\t\\t\\tdata.object.filmGauge = this.filmGauge;\\r\\n\\t\\t\\tdata.object.filmOffset = this.filmOffset;\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction ArrayCamera( array ) {\\r\\n\\r\\n\\t\\tPerspectiveCamera.call( this );\\r\\n\\r\\n\\t\\tthis.cameras = array || [];\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: ArrayCamera,\\r\\n\\r\\n\\t\\tisArrayCamera: true\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebVRManager( renderer ) {\\r\\n\\r\\n\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\tvar device = null;\\r\\n\\t\\tvar frameData = null;\\r\\n\\r\\n\\t\\tvar poseTarget = null;\\r\\n\\r\\n\\t\\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\\r\\n\\r\\n\\t\\t\\tframeData = new window.VRFrameData();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar matrixWorldInverse = new Matrix4();\\r\\n\\r\\n\\t\\tvar cameraL = new PerspectiveCamera();\\r\\n\\t\\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\\r\\n\\t\\tcameraL.layers.enable( 1 );\\r\\n\\r\\n\\t\\tvar cameraR = new PerspectiveCamera();\\r\\n\\t\\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\\r\\n\\t\\tcameraR.layers.enable( 2 );\\r\\n\\r\\n\\t\\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\\r\\n\\t\\tcameraVR.layers.enable( 1 );\\r\\n\\t\\tcameraVR.layers.enable( 2 );\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar currentSize, currentPixelRatio;\\r\\n\\r\\n\\t\\tfunction onVRDisplayPresentChange() {\\r\\n\\r\\n\\t\\t\\tif ( device !== null && device.isPresenting ) {\\r\\n\\r\\n\\t\\t\\t\\tvar eyeParameters = device.getEyeParameters( 'left' );\\r\\n\\t\\t\\t\\tvar renderWidth = eyeParameters.renderWidth;\\r\\n\\t\\t\\t\\tvar renderHeight = eyeParameters.renderHeight;\\r\\n\\r\\n\\t\\t\\t\\tcurrentPixelRatio = renderer.getPixelRatio();\\r\\n\\t\\t\\t\\tcurrentSize = renderer.getSize();\\r\\n\\r\\n\\t\\t\\t\\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\\r\\n\\r\\n\\t\\t\\t} else if ( scope.enabled ) {\\r\\n\\r\\n\\t\\t\\t\\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( typeof window !== 'undefined' ) {\\r\\n\\r\\n\\t\\t\\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tthis.enabled = false;\\r\\n\\r\\n\\t\\tthis.getDevice = function () {\\r\\n\\r\\n\\t\\t\\treturn device;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setDevice = function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( value !== undefined ) device = value;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setPoseTarget = function ( object ) {\\r\\n\\r\\n\\t\\t\\tif ( object !== undefined ) poseTarget = object;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.getCamera = function ( camera ) {\\r\\n\\r\\n\\t\\t\\tif ( device === null ) return camera;\\r\\n\\r\\n\\t\\t\\tdevice.depthNear = camera.near;\\r\\n\\t\\t\\tdevice.depthFar = camera.far;\\r\\n\\r\\n\\t\\t\\tdevice.getFrameData( frameData );\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tvar pose = frameData.pose;\\r\\n\\t\\t\\tvar poseObject = poseTarget !== null ? poseTarget : camera;\\r\\n\\r\\n\\t\\t\\tif ( pose.position !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tposeObject.position.fromArray( pose.position );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tposeObject.position.set( 0, 0, 0 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( pose.orientation !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tposeObject.quaternion.fromArray( pose.orientation );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tposeObject.updateMatrixWorld();\\r\\n\\r\\n\\t\\t\\tif ( device.isPresenting === false ) return camera;\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tcameraL.near = camera.near;\\r\\n\\t\\t\\tcameraR.near = camera.near;\\r\\n\\r\\n\\t\\t\\tcameraL.far = camera.far;\\r\\n\\t\\t\\tcameraR.far = camera.far;\\r\\n\\r\\n\\t\\t\\tcameraVR.matrixWorld.copy( camera.matrixWorld );\\r\\n\\t\\t\\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\\r\\n\\r\\n\\t\\t\\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\\r\\n\\t\\t\\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\\r\\n\\r\\n\\t\\t\\tvar parent = poseObject.parent;\\r\\n\\r\\n\\t\\t\\tif ( parent !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tmatrixWorldInverse.getInverse( parent.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\\r\\n\\t\\t\\t\\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// envMap and Mirror needs camera.matrixWorld\\r\\n\\r\\n\\t\\t\\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\\r\\n\\t\\t\\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\\r\\n\\r\\n\\t\\t\\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\\r\\n\\t\\t\\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\\r\\n\\r\\n\\t\\t\\t// HACK @mrdoob\\r\\n\\t\\t\\t// https://github.com/w3c/webvr/issues/203\\r\\n\\r\\n\\t\\t\\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tvar layers = device.getLayers();\\r\\n\\r\\n\\t\\t\\tif ( layers.length ) {\\r\\n\\r\\n\\t\\t\\t\\tvar layer = layers[ 0 ];\\r\\n\\r\\n\\t\\t\\t\\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcameraL.bounds.fromArray( layer.leftBounds );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcameraR.bounds.fromArray( layer.rightBounds );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn cameraVR;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.submitFrame = function () {\\r\\n\\r\\n\\t\\t\\tif ( device && device.isPresenting ) device.submitFrame();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.dispose = function () {\\r\\n\\r\\n\\t\\t\\tif ( typeof window !== 'undefined' ) {\\r\\n\\r\\n\\t\\t\\t\\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLExtensions( gl ) {\\r\\n\\r\\n\\t\\tvar extensions = {};\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tget: function ( name ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( extensions[ name ] !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn extensions[ name ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar extension;\\r\\n\\r\\n\\t\\t\\t\\tswitch ( name ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'WEBGL_depth_texture':\\r\\n\\t\\t\\t\\t\\t\\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'EXT_texture_filter_anisotropic':\\r\\n\\t\\t\\t\\t\\t\\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'WEBGL_compressed_texture_s3tc':\\r\\n\\t\\t\\t\\t\\t\\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'WEBGL_compressed_texture_pvrtc':\\r\\n\\t\\t\\t\\t\\t\\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'WEBGL_compressed_texture_etc1':\\r\\n\\t\\t\\t\\t\\t\\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\t\\t\\textension = gl.getExtension( name );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( extension === null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\textensions[ name ] = extension;\\r\\n\\r\\n\\t\\t\\t\\treturn extension;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLClipping() {\\r\\n\\r\\n\\t\\tvar scope = this,\\r\\n\\r\\n\\t\\t\\tglobalState = null,\\r\\n\\t\\t\\tnumGlobalPlanes = 0,\\r\\n\\t\\t\\tlocalClippingEnabled = false,\\r\\n\\t\\t\\trenderingShadows = false,\\r\\n\\r\\n\\t\\t\\tplane = new Plane(),\\r\\n\\t\\t\\tviewNormalMatrix = new Matrix3(),\\r\\n\\r\\n\\t\\t\\tuniform = { value: null, needsUpdate: false };\\r\\n\\r\\n\\t\\tthis.uniform = uniform;\\r\\n\\t\\tthis.numPlanes = 0;\\r\\n\\t\\tthis.numIntersection = 0;\\r\\n\\r\\n\\t\\tthis.init = function ( planes, enableLocalClipping, camera ) {\\r\\n\\r\\n\\t\\t\\tvar enabled =\\r\\n\\t\\t\\t\\tplanes.length !== 0 ||\\r\\n\\t\\t\\t\\tenableLocalClipping ||\\r\\n\\t\\t\\t\\t// enable state of previous frame - the clipping code has to\\r\\n\\t\\t\\t\\t// run another frame in order to reset the state:\\r\\n\\t\\t\\t\\tnumGlobalPlanes !== 0 ||\\r\\n\\t\\t\\t\\tlocalClippingEnabled;\\r\\n\\r\\n\\t\\t\\tlocalClippingEnabled = enableLocalClipping;\\r\\n\\r\\n\\t\\t\\tglobalState = projectPlanes( planes, camera, 0 );\\r\\n\\t\\t\\tnumGlobalPlanes = planes.length;\\r\\n\\r\\n\\t\\t\\treturn enabled;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.beginShadows = function () {\\r\\n\\r\\n\\t\\t\\trenderingShadows = true;\\r\\n\\t\\t\\tprojectPlanes( null );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.endShadows = function () {\\r\\n\\r\\n\\t\\t\\trenderingShadows = false;\\r\\n\\t\\t\\tresetGlobalState();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\\r\\n\\r\\n\\t\\t\\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\\r\\n\\r\\n\\t\\t\\t\\t// there's no local clipping\\r\\n\\r\\n\\t\\t\\t\\tif ( renderingShadows ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// there's no global clipping\\r\\n\\r\\n\\t\\t\\t\\t\\tprojectPlanes( null );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tresetGlobalState();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\\r\\n\\t\\t\\t\\t\\tlGlobal = nGlobal * 4,\\r\\n\\r\\n\\t\\t\\t\\t\\tdstArray = cache.clippingState || null;\\r\\n\\r\\n\\t\\t\\t\\tuniform.value = dstArray; // ensure unique state\\r\\n\\r\\n\\t\\t\\t\\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i !== lGlobal; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tdstArray[ i ] = globalState[ i ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tcache.clippingState = dstArray;\\r\\n\\t\\t\\t\\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\\r\\n\\t\\t\\t\\tthis.numPlanes += nGlobal;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfunction resetGlobalState() {\\r\\n\\r\\n\\t\\t\\tif ( uniform.value !== globalState ) {\\r\\n\\r\\n\\t\\t\\t\\tuniform.value = globalState;\\r\\n\\t\\t\\t\\tuniform.needsUpdate = numGlobalPlanes > 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tscope.numPlanes = numGlobalPlanes;\\r\\n\\t\\t\\tscope.numIntersection = 0;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\\r\\n\\r\\n\\t\\t\\tvar nPlanes = planes !== null ? planes.length : 0,\\r\\n\\t\\t\\t\\tdstArray = null;\\r\\n\\r\\n\\t\\t\\tif ( nPlanes !== 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tdstArray = uniform.value;\\r\\n\\r\\n\\t\\t\\t\\tif ( skipTransform !== true || dstArray === null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar flatSize = dstOffset + nPlanes * 4,\\r\\n\\t\\t\\t\\t\\t\\tviewMatrix = camera.matrixWorldInverse;\\r\\n\\r\\n\\t\\t\\t\\t\\tviewNormalMatrix.getNormalMatrix( viewMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( dstArray === null || dstArray.length < flatSize ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdstArray = new Float32Array( flatSize );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tplane.normal.toArray( dstArray, i4 );\\r\\n\\t\\t\\t\\t\\t\\tdstArray[ i4 + 3 ] = plane.constant;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tuniform.value = dstArray;\\r\\n\\t\\t\\t\\tuniform.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tscope.numPlanes = nPlanes;\\r\\n\\r\\n\\t\\t\\treturn dstArray;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author thespite / http://www.twitter.com/thespite\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLUtils( gl, extensions ) {\\r\\n\\r\\n\\t\\tfunction convert( p ) {\\r\\n\\r\\n\\t\\t\\tvar extension;\\r\\n\\r\\n\\t\\t\\tif ( p === RepeatWrapping ) return gl.REPEAT;\\r\\n\\t\\t\\tif ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;\\r\\n\\t\\t\\tif ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;\\r\\n\\r\\n\\t\\t\\tif ( p === NearestFilter ) return gl.NEAREST;\\r\\n\\t\\t\\tif ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;\\r\\n\\t\\t\\tif ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;\\r\\n\\r\\n\\t\\t\\tif ( p === LinearFilter ) return gl.LINEAR;\\r\\n\\t\\t\\tif ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;\\r\\n\\t\\t\\tif ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;\\r\\n\\r\\n\\t\\t\\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\\r\\n\\t\\t\\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\\r\\n\\t\\t\\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\\r\\n\\t\\t\\tif ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;\\r\\n\\r\\n\\t\\t\\tif ( p === ByteType ) return gl.BYTE;\\r\\n\\t\\t\\tif ( p === ShortType ) return gl.SHORT;\\r\\n\\t\\t\\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\\r\\n\\t\\t\\tif ( p === IntType ) return gl.INT;\\r\\n\\t\\t\\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\\r\\n\\t\\t\\tif ( p === FloatType ) return gl.FLOAT;\\r\\n\\r\\n\\t\\t\\tif ( p === HalfFloatType ) {\\r\\n\\r\\n\\t\\t\\t\\textension = extensions.get( 'OES_texture_half_float' );\\r\\n\\r\\n\\t\\t\\t\\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( p === AlphaFormat ) return gl.ALPHA;\\r\\n\\t\\t\\tif ( p === RGBFormat ) return gl.RGB;\\r\\n\\t\\t\\tif ( p === RGBAFormat ) return gl.RGBA;\\r\\n\\t\\t\\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\\r\\n\\t\\t\\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\\r\\n\\t\\t\\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\\r\\n\\t\\t\\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\\r\\n\\r\\n\\t\\t\\tif ( p === AddEquation ) return gl.FUNC_ADD;\\r\\n\\t\\t\\tif ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;\\r\\n\\t\\t\\tif ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;\\r\\n\\r\\n\\t\\t\\tif ( p === ZeroFactor ) return gl.ZERO;\\r\\n\\t\\t\\tif ( p === OneFactor ) return gl.ONE;\\r\\n\\t\\t\\tif ( p === SrcColorFactor ) return gl.SRC_COLOR;\\r\\n\\t\\t\\tif ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;\\r\\n\\t\\t\\tif ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;\\r\\n\\t\\t\\tif ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;\\r\\n\\t\\t\\tif ( p === DstAlphaFactor ) return gl.DST_ALPHA;\\r\\n\\t\\t\\tif ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;\\r\\n\\r\\n\\t\\t\\tif ( p === DstColorFactor ) return gl.DST_COLOR;\\r\\n\\t\\t\\tif ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;\\r\\n\\t\\t\\tif ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;\\r\\n\\r\\n\\t\\t\\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\\r\\n\\t\\t\\t\\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\\r\\n\\r\\n\\t\\t\\t\\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\\r\\n\\r\\n\\t\\t\\t\\tif ( extension !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\\r\\n\\t\\t\\t\\t\\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\\r\\n\\t\\t\\t\\t\\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\\r\\n\\t\\t\\t\\t\\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\\r\\n\\t\\t\\t\\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\\r\\n\\r\\n\\t\\t\\t\\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\\r\\n\\r\\n\\t\\t\\t\\tif ( extension !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\\r\\n\\t\\t\\t\\t\\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\\r\\n\\t\\t\\t\\t\\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\\r\\n\\t\\t\\t\\t\\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( p === RGB_ETC1_Format ) {\\r\\n\\r\\n\\t\\t\\t\\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\\r\\n\\r\\n\\t\\t\\t\\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( p === MinEquation || p === MaxEquation ) {\\r\\n\\r\\n\\t\\t\\t\\textension = extensions.get( 'EXT_blend_minmax' );\\r\\n\\r\\n\\t\\t\\t\\tif ( extension !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( p === MinEquation ) return extension.MIN_EXT;\\r\\n\\t\\t\\t\\t\\tif ( p === MaxEquation ) return extension.MAX_EXT;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( p === UnsignedInt248Type ) {\\r\\n\\r\\n\\t\\t\\t\\textension = extensions.get( 'WEBGL_depth_texture' );\\r\\n\\r\\n\\t\\t\\t\\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn 0;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn { convert: convert };\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author supereggbert / http://www.paulbrunt.co.uk/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author szimek / https://github.com/szimek/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction WebGLRenderer( parameters ) {\\r\\n\\r\\n\\t\\tconsole.log( 'THREE.WebGLRenderer', REVISION );\\r\\n\\r\\n\\t\\tparameters = parameters || {};\\r\\n\\r\\n\\t\\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\\r\\n\\t\\t\\t_context = parameters.context !== undefined ? parameters.context : null,\\r\\n\\r\\n\\t\\t\\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\\r\\n\\t\\t\\t_depth = parameters.depth !== undefined ? parameters.depth : true,\\r\\n\\t\\t\\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\\r\\n\\t\\t\\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\\r\\n\\t\\t\\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\\r\\n\\t\\t\\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\\r\\n\\t\\t\\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';\\r\\n\\r\\n\\t\\tvar lightsArray = [];\\r\\n\\t\\tvar shadowsArray = [];\\r\\n\\r\\n\\t\\tvar currentRenderList = null;\\r\\n\\r\\n\\t\\tvar spritesArray = [];\\r\\n\\t\\tvar flaresArray = [];\\r\\n\\r\\n\\t\\t// public properties\\r\\n\\r\\n\\t\\tthis.domElement = _canvas;\\r\\n\\t\\tthis.context = null;\\r\\n\\r\\n\\t\\t// clearing\\r\\n\\r\\n\\t\\tthis.autoClear = true;\\r\\n\\t\\tthis.autoClearColor = true;\\r\\n\\t\\tthis.autoClearDepth = true;\\r\\n\\t\\tthis.autoClearStencil = true;\\r\\n\\r\\n\\t\\t// scene graph\\r\\n\\r\\n\\t\\tthis.sortObjects = true;\\r\\n\\r\\n\\t\\t// user-defined clipping\\r\\n\\r\\n\\t\\tthis.clippingPlanes = [];\\r\\n\\t\\tthis.localClippingEnabled = false;\\r\\n\\r\\n\\t\\t// physically based shading\\r\\n\\r\\n\\t\\tthis.gammaFactor = 2.0;\\t// for backwards compatibility\\r\\n\\t\\tthis.gammaInput = false;\\r\\n\\t\\tthis.gammaOutput = false;\\r\\n\\r\\n\\t\\t// physical lights\\r\\n\\r\\n\\t\\tthis.physicallyCorrectLights = false;\\r\\n\\r\\n\\t\\t// tone mapping\\r\\n\\r\\n\\t\\tthis.toneMapping = LinearToneMapping;\\r\\n\\t\\tthis.toneMappingExposure = 1.0;\\r\\n\\t\\tthis.toneMappingWhitePoint = 1.0;\\r\\n\\r\\n\\t\\t// morphs\\r\\n\\r\\n\\t\\tthis.maxMorphTargets = 8;\\r\\n\\t\\tthis.maxMorphNormals = 4;\\r\\n\\r\\n\\t\\t// internal properties\\r\\n\\r\\n\\t\\tvar _this = this,\\r\\n\\r\\n\\t\\t\\t_isContextLost = false,\\r\\n\\r\\n\\t\\t\\t// internal state cache\\r\\n\\r\\n\\t\\t\\t_currentRenderTarget = null,\\r\\n\\t\\t\\t_currentFramebuffer = null,\\r\\n\\t\\t\\t_currentMaterialId = - 1,\\r\\n\\t\\t\\t_currentGeometryProgram = '',\\r\\n\\r\\n\\t\\t\\t_currentCamera = null,\\r\\n\\t\\t\\t_currentArrayCamera = null,\\r\\n\\r\\n\\t\\t\\t_currentViewport = new Vector4(),\\r\\n\\t\\t\\t_currentScissor = new Vector4(),\\r\\n\\t\\t\\t_currentScissorTest = null,\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\t_usedTextureUnits = 0,\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\t_width = _canvas.width,\\r\\n\\t\\t\\t_height = _canvas.height,\\r\\n\\r\\n\\t\\t\\t_pixelRatio = 1,\\r\\n\\r\\n\\t\\t\\t_viewport = new Vector4( 0, 0, _width, _height ),\\r\\n\\t\\t\\t_scissor = new Vector4( 0, 0, _width, _height ),\\r\\n\\t\\t\\t_scissorTest = false,\\r\\n\\r\\n\\t\\t\\t// frustum\\r\\n\\r\\n\\t\\t\\t_frustum = new Frustum(),\\r\\n\\r\\n\\t\\t\\t// clipping\\r\\n\\r\\n\\t\\t\\t_clipping = new WebGLClipping(),\\r\\n\\t\\t\\t_clippingEnabled = false,\\r\\n\\t\\t\\t_localClippingEnabled = false,\\r\\n\\r\\n\\t\\t\\t// camera matrices cache\\r\\n\\r\\n\\t\\t\\t_projScreenMatrix = new Matrix4(),\\r\\n\\r\\n\\t\\t\\t_vector3 = new Vector3(),\\r\\n\\r\\n\\t\\t\\t// info\\r\\n\\r\\n\\t\\t\\t_infoMemory = {\\r\\n\\t\\t\\t\\tgeometries: 0,\\r\\n\\t\\t\\t\\ttextures: 0\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t_infoRender = {\\r\\n\\r\\n\\t\\t\\t\\tframe: 0,\\r\\n\\t\\t\\t\\tcalls: 0,\\r\\n\\t\\t\\t\\tvertices: 0,\\r\\n\\t\\t\\t\\tfaces: 0,\\r\\n\\t\\t\\t\\tpoints: 0\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\tthis.info = {\\r\\n\\r\\n\\t\\t\\trender: _infoRender,\\r\\n\\t\\t\\tmemory: _infoMemory,\\r\\n\\t\\t\\tprograms: null\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfunction getTargetPixelRatio() {\\r\\n\\r\\n\\t\\t\\treturn _currentRenderTarget === null ? _pixelRatio : 1;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// initialize\\r\\n\\r\\n\\t\\tvar _gl;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\r\\n\\t\\t\\tvar contextAttributes = {\\r\\n\\t\\t\\t\\talpha: _alpha,\\r\\n\\t\\t\\t\\tdepth: _depth,\\r\\n\\t\\t\\t\\tstencil: _stencil,\\r\\n\\t\\t\\t\\tantialias: _antialias,\\r\\n\\t\\t\\t\\tpremultipliedAlpha: _premultipliedAlpha,\\r\\n\\t\\t\\t\\tpreserveDrawingBuffer: _preserveDrawingBuffer,\\r\\n\\t\\t\\t\\tpowerPreference: _powerPreference\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t// event listeners must be registered before WebGL context is created, see #12753\\r\\n\\r\\n\\t\\t\\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\\r\\n\\t\\t\\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\\r\\n\\r\\n\\t\\t\\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\\r\\n\\r\\n\\t\\t\\tif ( _gl === null ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( _canvas.getContext( 'webgl' ) !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tthrow new Error( 'Error creating WebGL context.' );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\\r\\n\\r\\n\\t\\t\\tif ( _gl.getShaderPrecisionFormat === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.getShaderPrecisionFormat = function () {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\\r\\n\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} catch ( error ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar extensions, capabilities, state;\\r\\n\\t\\tvar properties, textures, attributes, geometries, objects, lights;\\r\\n\\t\\tvar programCache, renderLists;\\r\\n\\r\\n\\t\\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\\r\\n\\t\\tvar flareRenderer, spriteRenderer;\\r\\n\\r\\n\\t\\tvar utils;\\r\\n\\r\\n\\t\\tfunction initGLContext() {\\r\\n\\r\\n\\t\\t\\textensions = new WebGLExtensions( _gl );\\r\\n\\t\\t\\textensions.get( 'WEBGL_depth_texture' );\\r\\n\\t\\t\\textensions.get( 'OES_texture_float' );\\r\\n\\t\\t\\textensions.get( 'OES_texture_float_linear' );\\r\\n\\t\\t\\textensions.get( 'OES_texture_half_float' );\\r\\n\\t\\t\\textensions.get( 'OES_texture_half_float_linear' );\\r\\n\\t\\t\\textensions.get( 'OES_standard_derivatives' );\\r\\n\\t\\t\\textensions.get( 'OES_element_index_uint' );\\r\\n\\t\\t\\textensions.get( 'ANGLE_instanced_arrays' );\\r\\n\\r\\n\\t\\t\\tutils = new WebGLUtils( _gl, extensions );\\r\\n\\r\\n\\t\\t\\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\\r\\n\\r\\n\\t\\t\\tstate = new WebGLState( _gl, extensions, utils );\\r\\n\\t\\t\\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\\r\\n\\t\\t\\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\\r\\n\\r\\n\\t\\t\\tproperties = new WebGLProperties();\\r\\n\\t\\t\\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, _infoMemory );\\r\\n\\t\\t\\tattributes = new WebGLAttributes( _gl );\\r\\n\\t\\t\\tgeometries = new WebGLGeometries( _gl, attributes, _infoMemory );\\r\\n\\t\\t\\tobjects = new WebGLObjects( geometries, _infoRender );\\r\\n\\t\\t\\tmorphtargets = new WebGLMorphtargets( _gl );\\r\\n\\t\\t\\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\\r\\n\\t\\t\\tlights = new WebGLLights();\\r\\n\\t\\t\\trenderLists = new WebGLRenderLists();\\r\\n\\r\\n\\t\\t\\tbackground = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );\\r\\n\\r\\n\\t\\t\\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );\\r\\n\\t\\t\\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\\r\\n\\r\\n\\t\\t\\tflareRenderer = new WebGLFlareRenderer( _this, _gl, state, textures, capabilities );\\r\\n\\t\\t\\tspriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );\\r\\n\\r\\n\\t\\t\\t_this.info.programs = programCache.programs;\\r\\n\\r\\n\\t\\t\\t_this.context = _gl;\\r\\n\\t\\t\\t_this.capabilities = capabilities;\\r\\n\\t\\t\\t_this.extensions = extensions;\\r\\n\\t\\t\\t_this.properties = properties;\\r\\n\\t\\t\\t_this.renderLists = renderLists;\\r\\n\\t\\t\\t_this.state = state;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tinitGLContext();\\r\\n\\r\\n\\t\\t// vr\\r\\n\\r\\n\\t\\tvar vr = new WebVRManager( _this );\\r\\n\\r\\n\\t\\tthis.vr = vr;\\r\\n\\r\\n\\t\\t// shadow map\\r\\n\\r\\n\\t\\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\\r\\n\\r\\n\\t\\tthis.shadowMap = shadowMap;\\r\\n\\r\\n\\t\\t// API\\r\\n\\r\\n\\t\\tthis.getContext = function () {\\r\\n\\r\\n\\t\\t\\treturn _gl;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.getContextAttributes = function () {\\r\\n\\r\\n\\t\\t\\treturn _gl.getContextAttributes();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.forceContextLoss = function () {\\r\\n\\r\\n\\t\\t\\tvar extension = extensions.get( 'WEBGL_lose_context' );\\r\\n\\t\\t\\tif ( extension ) extension.loseContext();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.forceContextRestore = function () {\\r\\n\\r\\n\\t\\t\\tvar extension = extensions.get( 'WEBGL_lose_context' );\\r\\n\\t\\t\\tif ( extension ) extension.restoreContext();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.getPixelRatio = function () {\\r\\n\\r\\n\\t\\t\\treturn _pixelRatio;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setPixelRatio = function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( value === undefined ) return;\\r\\n\\r\\n\\t\\t\\t_pixelRatio = value;\\r\\n\\r\\n\\t\\t\\tthis.setSize( _width, _height, false );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.getSize = function () {\\r\\n\\r\\n\\t\\t\\treturn {\\r\\n\\t\\t\\t\\twidth: _width,\\r\\n\\t\\t\\t\\theight: _height\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setSize = function ( width, height, updateStyle ) {\\r\\n\\r\\n\\t\\t\\tvar device = vr.getDevice();\\r\\n\\r\\n\\t\\t\\tif ( device && device.isPresenting ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Can\\\\'t change size while VR device is presenting.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t_width = width;\\r\\n\\t\\t\\t_height = height;\\r\\n\\r\\n\\t\\t\\t_canvas.width = width * _pixelRatio;\\r\\n\\t\\t\\t_canvas.height = height * _pixelRatio;\\r\\n\\r\\n\\t\\t\\tif ( updateStyle !== false ) {\\r\\n\\r\\n\\t\\t\\t\\t_canvas.style.width = width + 'px';\\r\\n\\t\\t\\t\\t_canvas.style.height = height + 'px';\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.setViewport( 0, 0, width, height );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.getDrawingBufferSize = function () {\\r\\n\\r\\n\\t\\t\\treturn {\\r\\n\\t\\t\\t\\twidth: _width * _pixelRatio,\\r\\n\\t\\t\\t\\theight: _height * _pixelRatio\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\\r\\n\\r\\n\\t\\t\\t_width = width;\\r\\n\\t\\t\\t_height = height;\\r\\n\\r\\n\\t\\t\\t_pixelRatio = pixelRatio;\\r\\n\\r\\n\\t\\t\\t_canvas.width = width * pixelRatio;\\r\\n\\t\\t\\t_canvas.height = height * pixelRatio;\\r\\n\\r\\n\\t\\t\\tthis.setViewport( 0, 0, width, height );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setViewport = function ( x, y, width, height ) {\\r\\n\\r\\n\\t\\t\\t_viewport.set( x, _height - y - height, width, height );\\r\\n\\t\\t\\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setScissor = function ( x, y, width, height ) {\\r\\n\\r\\n\\t\\t\\t_scissor.set( x, _height - y - height, width, height );\\r\\n\\t\\t\\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setScissorTest = function ( boolean ) {\\r\\n\\r\\n\\t\\t\\tstate.setScissorTest( _scissorTest = boolean );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// Clearing\\r\\n\\r\\n\\t\\tthis.getClearColor = function () {\\r\\n\\r\\n\\t\\t\\treturn background.getClearColor();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setClearColor = function () {\\r\\n\\r\\n\\t\\t\\tbackground.setClearColor.apply( background, arguments );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.getClearAlpha = function () {\\r\\n\\r\\n\\t\\t\\treturn background.getClearAlpha();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setClearAlpha = function () {\\r\\n\\r\\n\\t\\t\\tbackground.setClearAlpha.apply( background, arguments );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.clear = function ( color, depth, stencil ) {\\r\\n\\r\\n\\t\\t\\tvar bits = 0;\\r\\n\\r\\n\\t\\t\\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\\r\\n\\t\\t\\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\\r\\n\\t\\t\\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\\r\\n\\r\\n\\t\\t\\t_gl.clear( bits );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.clearColor = function () {\\r\\n\\r\\n\\t\\t\\tthis.clear( true, false, false );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.clearDepth = function () {\\r\\n\\r\\n\\t\\t\\tthis.clear( false, true, false );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.clearStencil = function () {\\r\\n\\r\\n\\t\\t\\tthis.clear( false, false, true );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\\r\\n\\r\\n\\t\\t\\tthis.setRenderTarget( renderTarget );\\r\\n\\t\\t\\tthis.clear( color, depth, stencil );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tthis.dispose = function () {\\r\\n\\r\\n\\t\\t\\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\\r\\n\\t\\t\\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\\r\\n\\r\\n\\t\\t\\trenderLists.dispose();\\r\\n\\r\\n\\t\\t\\tvr.dispose();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// Events\\r\\n\\r\\n\\t\\tfunction onContextLost( event ) {\\r\\n\\r\\n\\t\\t\\tevent.preventDefault();\\r\\n\\r\\n\\t\\t\\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\\r\\n\\r\\n\\t\\t\\t_isContextLost = true;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction onContextRestore( /* event */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\\r\\n\\r\\n\\t\\t\\t_isContextLost = false;\\r\\n\\r\\n\\t\\t\\tinitGLContext();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction onMaterialDispose( event ) {\\r\\n\\r\\n\\t\\t\\tvar material = event.target;\\r\\n\\r\\n\\t\\t\\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\\r\\n\\r\\n\\t\\t\\tdeallocateMaterial( material );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Buffer deallocation\\r\\n\\r\\n\\t\\tfunction deallocateMaterial( material ) {\\r\\n\\r\\n\\t\\t\\treleaseMaterialProgramReference( material );\\r\\n\\r\\n\\t\\t\\tproperties.remove( material );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\tfunction releaseMaterialProgramReference( material ) {\\r\\n\\r\\n\\t\\t\\tvar programInfo = properties.get( material ).program;\\r\\n\\r\\n\\t\\t\\tmaterial.program = undefined;\\r\\n\\r\\n\\t\\t\\tif ( programInfo !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tprogramCache.releaseProgram( programInfo );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Buffer rendering\\r\\n\\r\\n\\t\\tfunction renderObjectImmediate( object, program, material ) {\\r\\n\\r\\n\\t\\t\\tobject.render( function ( object ) {\\r\\n\\r\\n\\t\\t\\t\\t_this.renderBufferImmediate( object, program, material );\\r\\n\\r\\n\\t\\t\\t} );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.renderBufferImmediate = function ( object, program, material ) {\\r\\n\\r\\n\\t\\t\\tstate.initAttributes();\\r\\n\\r\\n\\t\\t\\tvar buffers = properties.get( object );\\r\\n\\r\\n\\t\\t\\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\\r\\n\\t\\t\\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\\r\\n\\t\\t\\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\\r\\n\\t\\t\\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\\r\\n\\r\\n\\t\\t\\tvar programAttributes = program.getAttributes();\\r\\n\\r\\n\\t\\t\\tif ( object.hasPositions ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\\r\\n\\t\\t\\t\\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\\r\\n\\r\\n\\t\\t\\t\\tstate.enableAttribute( programAttributes.position );\\r\\n\\t\\t\\t\\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( object.hasNormals ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\\r\\n\\r\\n\\t\\t\\t\\tif ( ! material.isMeshPhongMaterial &&\\r\\n\\t\\t\\t\\t\\t! material.isMeshStandardMaterial &&\\r\\n\\t\\t\\t\\t\\t! material.isMeshNormalMaterial &&\\r\\n\\t\\t\\t\\t\\tmaterial.flatShading === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar array = object.normalArray;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\\r\\n\\t\\t\\t\\t\\t\\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\\r\\n\\t\\t\\t\\t\\t\\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tarray[ i + 0 ] = nx;\\r\\n\\t\\t\\t\\t\\t\\tarray[ i + 1 ] = ny;\\r\\n\\t\\t\\t\\t\\t\\tarray[ i + 2 ] = nz;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tarray[ i + 3 ] = nx;\\r\\n\\t\\t\\t\\t\\t\\tarray[ i + 4 ] = ny;\\r\\n\\t\\t\\t\\t\\t\\tarray[ i + 5 ] = nz;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tarray[ i + 6 ] = nx;\\r\\n\\t\\t\\t\\t\\t\\tarray[ i + 7 ] = ny;\\r\\n\\t\\t\\t\\t\\t\\tarray[ i + 8 ] = nz;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\\r\\n\\r\\n\\t\\t\\t\\tstate.enableAttribute( programAttributes.normal );\\r\\n\\r\\n\\t\\t\\t\\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( object.hasUvs && material.map ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\\r\\n\\t\\t\\t\\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\\r\\n\\r\\n\\t\\t\\t\\tstate.enableAttribute( programAttributes.uv );\\r\\n\\r\\n\\t\\t\\t\\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( object.hasColors && material.vertexColors !== NoColors ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\\r\\n\\t\\t\\t\\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\\r\\n\\r\\n\\t\\t\\t\\tstate.enableAttribute( programAttributes.color );\\r\\n\\r\\n\\t\\t\\t\\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.disableUnusedAttributes();\\r\\n\\r\\n\\t\\t\\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\\r\\n\\r\\n\\t\\t\\tobject.count = 0;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\\r\\n\\r\\n\\t\\t\\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\\r\\n\\r\\n\\t\\t\\tstate.setMaterial( material, frontFaceCW );\\r\\n\\r\\n\\t\\t\\tvar program = setProgram( camera, fog, material, object );\\r\\n\\t\\t\\tvar geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );\\r\\n\\r\\n\\t\\t\\tvar updateBuffers = false;\\r\\n\\r\\n\\t\\t\\tif ( geometryProgram !== _currentGeometryProgram ) {\\r\\n\\r\\n\\t\\t\\t\\t_currentGeometryProgram = geometryProgram;\\r\\n\\t\\t\\t\\tupdateBuffers = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( object.morphTargetInfluences ) {\\r\\n\\r\\n\\t\\t\\t\\tmorphtargets.update( object, geometry, material, program );\\r\\n\\r\\n\\t\\t\\t\\tupdateBuffers = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tvar index = geometry.index;\\r\\n\\t\\t\\tvar position = geometry.attributes.position;\\r\\n\\t\\t\\tvar rangeFactor = 1;\\r\\n\\r\\n\\t\\t\\tif ( material.wireframe === true ) {\\r\\n\\r\\n\\t\\t\\t\\tindex = geometries.getWireframeAttribute( geometry );\\r\\n\\t\\t\\t\\trangeFactor = 2;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar attribute;\\r\\n\\t\\t\\tvar renderer = bufferRenderer;\\r\\n\\r\\n\\t\\t\\tif ( index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tattribute = attributes.get( index );\\r\\n\\r\\n\\t\\t\\t\\trenderer = indexedBufferRenderer;\\r\\n\\t\\t\\t\\trenderer.setIndex( attribute );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( updateBuffers ) {\\r\\n\\r\\n\\t\\t\\t\\tsetupVertexAttributes( material, program, geometry );\\r\\n\\r\\n\\t\\t\\t\\tif ( index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tvar dataCount = 0;\\r\\n\\r\\n\\t\\t\\tif ( index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tdataCount = index.count;\\r\\n\\r\\n\\t\\t\\t} else if ( position !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tdataCount = position.count;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar rangeStart = geometry.drawRange.start * rangeFactor;\\r\\n\\t\\t\\tvar rangeCount = geometry.drawRange.count * rangeFactor;\\r\\n\\r\\n\\t\\t\\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\\r\\n\\t\\t\\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\\r\\n\\r\\n\\t\\t\\tvar drawStart = Math.max( rangeStart, groupStart );\\r\\n\\t\\t\\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\\r\\n\\r\\n\\t\\t\\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\\r\\n\\r\\n\\t\\t\\tif ( drawCount === 0 ) return;\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tif ( object.isMesh ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( material.wireframe === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\\r\\n\\t\\t\\t\\t\\trenderer.setMode( _gl.LINES );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tswitch ( object.drawMode ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase TrianglesDrawMode:\\r\\n\\t\\t\\t\\t\\t\\t\\trenderer.setMode( _gl.TRIANGLES );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase TriangleStripDrawMode:\\r\\n\\t\\t\\t\\t\\t\\t\\trenderer.setMode( _gl.TRIANGLE_STRIP );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase TriangleFanDrawMode:\\r\\n\\t\\t\\t\\t\\t\\t\\trenderer.setMode( _gl.TRIANGLE_FAN );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t} else if ( object.isLine ) {\\r\\n\\r\\n\\t\\t\\t\\tvar lineWidth = material.linewidth;\\r\\n\\r\\n\\t\\t\\t\\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\\r\\n\\r\\n\\t\\t\\t\\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\\r\\n\\r\\n\\t\\t\\t\\tif ( object.isLineSegments ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trenderer.setMode( _gl.LINES );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( object.isLineLoop ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trenderer.setMode( _gl.LINE_LOOP );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\trenderer.setMode( _gl.LINE_STRIP );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( object.isPoints ) {\\r\\n\\r\\n\\t\\t\\t\\trenderer.setMode( _gl.POINTS );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( geometry && geometry.isInstancedBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.maxInstancedCount > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trenderer.renderInstances( geometry, drawStart, drawCount );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\trenderer.render( drawStart, drawCount );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\\r\\n\\r\\n\\t\\t\\tif ( geometry && geometry.isInstancedBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\\r\\n\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( startIndex === undefined ) startIndex = 0;\\r\\n\\r\\n\\t\\t\\tstate.initAttributes();\\r\\n\\r\\n\\t\\t\\tvar geometryAttributes = geometry.attributes;\\r\\n\\r\\n\\t\\t\\tvar programAttributes = program.getAttributes();\\r\\n\\r\\n\\t\\t\\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\\r\\n\\r\\n\\t\\t\\tfor ( var name in programAttributes ) {\\r\\n\\r\\n\\t\\t\\t\\tvar programAttribute = programAttributes[ name ];\\r\\n\\r\\n\\t\\t\\t\\tif ( programAttribute >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar geometryAttribute = geometryAttributes[ name ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( geometryAttribute !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar normalized = geometryAttribute.normalized;\\r\\n\\t\\t\\t\\t\\t\\tvar size = geometryAttribute.itemSize;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar attribute = attributes.get( geometryAttribute );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// TODO Attribute may not be available on context restore\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( attribute === undefined ) continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar buffer = attribute.buffer;\\r\\n\\t\\t\\t\\t\\t\\tvar type = attribute.type;\\r\\n\\t\\t\\t\\t\\t\\tvar bytesPerElement = attribute.bytesPerElement;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar data = geometryAttribute.data;\\r\\n\\t\\t\\t\\t\\t\\t\\tvar stride = data.stride;\\r\\n\\t\\t\\t\\t\\t\\t\\tvar offset = geometryAttribute.offset;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( data && data.isInstancedInterleavedBuffer ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( geometry.maxInstancedCount === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tstate.enableAttribute( programAttribute );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\\r\\n\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( geometryAttribute.isInstancedBufferAttribute ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( geometry.maxInstancedCount === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tstate.enableAttribute( programAttribute );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\\r\\n\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else if ( materialDefaultAttributeValues !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar value = materialDefaultAttributeValues[ name ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( value !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tswitch ( value.length ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase 2:\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttrib2fv( programAttribute, value );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase 3:\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttrib3fv( programAttribute, value );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcase 4:\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttrib4fv( programAttribute, value );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t_gl.vertexAttrib1fv( programAttribute, value );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.disableUnusedAttributes();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Compile\\r\\n\\r\\n\\t\\tthis.compile = function ( scene, camera ) {\\r\\n\\r\\n\\t\\t\\tlightsArray.length = 0;\\r\\n\\t\\t\\tshadowsArray.length = 0;\\r\\n\\r\\n\\t\\t\\tscene.traverse( function ( object ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( object.isLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tlightsArray.push( object );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( object.castShadow ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tshadowsArray.push( object );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\tlights.setup( lightsArray, shadowsArray, camera );\\r\\n\\r\\n\\t\\t\\tscene.traverse( function ( object ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( object.material ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( Array.isArray( object.material ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0; i < object.material.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tinitMaterial( object.material[ i ], scene.fog, object );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tinitMaterial( object.material, scene.fog, object );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// Animation Loop\\r\\n\\r\\n\\t\\tvar isAnimating = false;\\r\\n\\t\\tvar onAnimationFrame = null;\\r\\n\\r\\n\\t\\tfunction start() {\\r\\n\\r\\n\\t\\t\\tif ( isAnimating ) return;\\r\\n\\r\\n\\t\\t\\tvar device = vr.getDevice();\\r\\n\\r\\n\\t\\t\\tif ( device && device.isPresenting ) {\\r\\n\\r\\n\\t\\t\\t\\tdevice.requestAnimationFrame( loop );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\twindow.requestAnimationFrame( loop );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tisAnimating = true;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction loop( time ) {\\r\\n\\r\\n\\t\\t\\tif ( onAnimationFrame !== null ) onAnimationFrame( time );\\r\\n\\r\\n\\t\\t\\tvar device = vr.getDevice();\\r\\n\\r\\n\\t\\t\\tif ( device && device.isPresenting ) {\\r\\n\\r\\n\\t\\t\\t\\tdevice.requestAnimationFrame( loop );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\twindow.requestAnimationFrame( loop );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.animate = function ( callback ) {\\r\\n\\r\\n\\t\\t\\tonAnimationFrame = callback;\\r\\n\\t\\t\\tstart();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// Rendering\\r\\n\\r\\n\\t\\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\\r\\n\\r\\n\\t\\t\\tif ( ! ( camera && camera.isCamera ) ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( _isContextLost ) return;\\r\\n\\r\\n\\t\\t\\t// reset caching for this frame\\r\\n\\r\\n\\t\\t\\t_currentGeometryProgram = '';\\r\\n\\t\\t\\t_currentMaterialId = - 1;\\r\\n\\t\\t\\t_currentCamera = null;\\r\\n\\r\\n\\t\\t\\t// update scene graph\\r\\n\\r\\n\\t\\t\\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\\r\\n\\r\\n\\t\\t\\t// update camera matrices and frustum\\r\\n\\r\\n\\t\\t\\tif ( camera.parent === null ) camera.updateMatrixWorld();\\r\\n\\r\\n\\t\\t\\tif ( vr.enabled ) {\\r\\n\\r\\n\\t\\t\\t\\tcamera = vr.getCamera( camera );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\\r\\n\\t\\t\\t_frustum.setFromMatrix( _projScreenMatrix );\\r\\n\\r\\n\\t\\t\\tlightsArray.length = 0;\\r\\n\\t\\t\\tshadowsArray.length = 0;\\r\\n\\r\\n\\t\\t\\tspritesArray.length = 0;\\r\\n\\t\\t\\tflaresArray.length = 0;\\r\\n\\r\\n\\t\\t\\t_localClippingEnabled = this.localClippingEnabled;\\r\\n\\t\\t\\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\\r\\n\\r\\n\\t\\t\\tcurrentRenderList = renderLists.get( scene, camera );\\r\\n\\t\\t\\tcurrentRenderList.init();\\r\\n\\r\\n\\t\\t\\tprojectObject( scene, camera, _this.sortObjects );\\r\\n\\r\\n\\t\\t\\tif ( _this.sortObjects === true ) {\\r\\n\\r\\n\\t\\t\\t\\tcurrentRenderList.sort();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\ttextures.updateVideoTextures();\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tif ( _clippingEnabled ) _clipping.beginShadows();\\r\\n\\r\\n\\t\\t\\tshadowMap.render( shadowsArray, scene, camera );\\r\\n\\r\\n\\t\\t\\tlights.setup( lightsArray, shadowsArray, camera );\\r\\n\\r\\n\\t\\t\\tif ( _clippingEnabled ) _clipping.endShadows();\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\t_infoRender.frame ++;\\r\\n\\t\\t\\t_infoRender.calls = 0;\\r\\n\\t\\t\\t_infoRender.vertices = 0;\\r\\n\\t\\t\\t_infoRender.faces = 0;\\r\\n\\t\\t\\t_infoRender.points = 0;\\r\\n\\r\\n\\t\\t\\tif ( renderTarget === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\trenderTarget = null;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.setRenderTarget( renderTarget );\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tbackground.render( currentRenderList, scene, camera, forceClear );\\r\\n\\r\\n\\t\\t\\t// render scene\\r\\n\\r\\n\\t\\t\\tvar opaqueObjects = currentRenderList.opaque;\\r\\n\\t\\t\\tvar transparentObjects = currentRenderList.transparent;\\r\\n\\r\\n\\t\\t\\tif ( scene.overrideMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\tvar overrideMaterial = scene.overrideMaterial;\\r\\n\\r\\n\\t\\t\\t\\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\\r\\n\\t\\t\\t\\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// opaque pass (front-to-back order)\\r\\n\\r\\n\\t\\t\\t\\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\\r\\n\\r\\n\\t\\t\\t\\t// transparent pass (back-to-front order)\\r\\n\\r\\n\\t\\t\\t\\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// custom renderers\\r\\n\\r\\n\\t\\t\\tspriteRenderer.render( spritesArray, scene, camera );\\r\\n\\t\\t\\tflareRenderer.render( flaresArray, scene, camera, _currentViewport );\\r\\n\\r\\n\\t\\t\\t// Generate mipmap if we're using any kind of mipmap filtering\\r\\n\\r\\n\\t\\t\\tif ( renderTarget ) {\\r\\n\\r\\n\\t\\t\\t\\ttextures.updateRenderTargetMipmap( renderTarget );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Ensure depth buffer writing is enabled so it can be cleared on next render\\r\\n\\r\\n\\t\\t\\tstate.buffers.depth.setTest( true );\\r\\n\\t\\t\\tstate.buffers.depth.setMask( true );\\r\\n\\t\\t\\tstate.buffers.color.setMask( true );\\r\\n\\r\\n\\t\\t\\tstate.setPolygonOffset( false );\\r\\n\\r\\n\\t\\t\\tif ( vr.enabled ) {\\r\\n\\r\\n\\t\\t\\t\\tvr.submitFrame();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// _gl.finish();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t// TODO Duplicated code (Frustum)\\r\\n\\r\\n\\t\\tvar _sphere = new Sphere();\\r\\n\\r\\n\\t\\tfunction isObjectViewable( object ) {\\r\\n\\r\\n\\t\\t\\tvar geometry = object.geometry;\\r\\n\\r\\n\\t\\t\\tif ( geometry.boundingSphere === null )\\r\\n\\t\\t\\t\\tgeometry.computeBoundingSphere();\\r\\n\\r\\n\\t\\t\\t_sphere.copy( geometry.boundingSphere ).\\r\\n\\t\\t\\tapplyMatrix4( object.matrixWorld );\\r\\n\\r\\n\\t\\t\\treturn isSphereViewable( _sphere );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction isSpriteViewable( sprite ) {\\r\\n\\r\\n\\t\\t\\t_sphere.center.set( 0, 0, 0 );\\r\\n\\t\\t\\t_sphere.radius = 0.7071067811865476;\\r\\n\\t\\t\\t_sphere.applyMatrix4( sprite.matrixWorld );\\r\\n\\r\\n\\t\\t\\treturn isSphereViewable( _sphere );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction isSphereViewable( sphere ) {\\r\\n\\r\\n\\t\\t\\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\\r\\n\\r\\n\\t\\t\\tvar numPlanes = _clipping.numPlanes;\\r\\n\\r\\n\\t\\t\\tif ( numPlanes === 0 ) return true;\\r\\n\\r\\n\\t\\t\\tvar planes = _this.clippingPlanes,\\r\\n\\r\\n\\t\\t\\t\\tcenter = sphere.center,\\r\\n\\t\\t\\t\\tnegRad = - sphere.radius,\\r\\n\\t\\t\\t\\ti = 0;\\r\\n\\r\\n\\t\\t\\tdo {\\r\\n\\r\\n\\t\\t\\t\\t// out when deeper than radius in the negative halfspace\\r\\n\\t\\t\\t\\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\\r\\n\\r\\n\\t\\t\\t} while ( ++ i !== numPlanes );\\r\\n\\r\\n\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t}\\r\\n\\t\\t*/\\r\\n\\r\\n\\t\\tfunction projectObject( object, camera, sortObjects ) {\\r\\n\\r\\n\\t\\t\\tif ( object.visible === false ) return;\\r\\n\\r\\n\\t\\t\\tvar visible = object.layers.test( camera.layers );\\r\\n\\r\\n\\t\\t\\tif ( visible ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( object.isLight ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tlightsArray.push( object );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( object.castShadow ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tshadowsArray.push( object );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( object.isSprite ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tspritesArray.push( object );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( object.isLensFlare ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tflaresArray.push( object );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( object.isImmediateRenderObject ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( sortObjects ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t_vector3.setFromMatrixPosition( object.matrixWorld )\\r\\n\\t\\t\\t\\t\\t\\t\\t.applyMatrix4( _projScreenMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( object.isSkinnedMesh ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject.skeleton.update();\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( sortObjects ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t_vector3.setFromMatrixPosition( object.matrixWorld )\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t.applyMatrix4( _projScreenMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar geometry = objects.update( object );\\r\\n\\t\\t\\t\\t\\t\\tvar material = object.material;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( Array.isArray( material ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar groups = geometry.groups;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvar group = groups[ i ];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvar groupMaterial = material[ group.materialIndex ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( groupMaterial && groupMaterial.visible ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else if ( material.visible ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar children = object.children;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tprojectObject( children[ i ], camera, sortObjects );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar renderItem = renderList[ i ];\\r\\n\\r\\n\\t\\t\\t\\tvar object = renderItem.object;\\r\\n\\t\\t\\t\\tvar geometry = renderItem.geometry;\\r\\n\\t\\t\\t\\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\\r\\n\\t\\t\\t\\tvar group = renderItem.group;\\r\\n\\r\\n\\t\\t\\t\\tif ( camera.isArrayCamera ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t_currentArrayCamera = camera;\\r\\n\\r\\n\\t\\t\\t\\t\\tvar cameras = camera.cameras;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar camera2 = cameras[ j ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( object.layers.test( camera2.layers ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar bounds = camera2.bounds;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar x = bounds.x * _width;\\r\\n\\t\\t\\t\\t\\t\\t\\tvar y = bounds.y * _height;\\r\\n\\t\\t\\t\\t\\t\\t\\tvar width = bounds.z * _width;\\r\\n\\t\\t\\t\\t\\t\\t\\tvar height = bounds.w * _height;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tstate.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\trenderObject( object, scene, camera2, geometry, material, group );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t_currentArrayCamera = null;\\r\\n\\r\\n\\t\\t\\t\\t\\trenderObject( object, scene, camera, geometry, material, group );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction renderObject( object, scene, camera, geometry, material, group ) {\\r\\n\\r\\n\\t\\t\\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\\r\\n\\r\\n\\t\\t\\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\\r\\n\\t\\t\\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\\r\\n\\r\\n\\t\\t\\tif ( object.isImmediateRenderObject ) {\\r\\n\\r\\n\\t\\t\\t\\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\\r\\n\\r\\n\\t\\t\\t\\tstate.setMaterial( material, frontFaceCW );\\r\\n\\r\\n\\t\\t\\t\\tvar program = setProgram( camera, scene.fog, material, object );\\r\\n\\r\\n\\t\\t\\t\\t_currentGeometryProgram = '';\\r\\n\\r\\n\\t\\t\\t\\trenderObjectImmediate( object, program, material );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction initMaterial( material, fog, object ) {\\r\\n\\r\\n\\t\\t\\tvar materialProperties = properties.get( material );\\r\\n\\r\\n\\t\\t\\tvar parameters = programCache.getParameters(\\r\\n\\t\\t\\t\\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\\r\\n\\r\\n\\t\\t\\tvar code = programCache.getProgramCode( material, parameters );\\r\\n\\r\\n\\t\\t\\tvar program = materialProperties.program;\\r\\n\\t\\t\\tvar programChange = true;\\r\\n\\r\\n\\t\\t\\tif ( program === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// new material\\r\\n\\t\\t\\t\\tmaterial.addEventListener( 'dispose', onMaterialDispose );\\r\\n\\r\\n\\t\\t\\t} else if ( program.code !== code ) {\\r\\n\\r\\n\\t\\t\\t\\t// changed glsl or parameters\\r\\n\\t\\t\\t\\treleaseMaterialProgramReference( material );\\r\\n\\r\\n\\t\\t\\t} else if ( parameters.shaderID !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// same glsl and uniform list\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// only rebuild uniform list\\r\\n\\t\\t\\t\\tprogramChange = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( programChange ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( parameters.shaderID ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar shader = ShaderLib[ parameters.shaderID ];\\r\\n\\r\\n\\t\\t\\t\\t\\tmaterialProperties.shader = {\\r\\n\\t\\t\\t\\t\\t\\tname: material.type,\\r\\n\\t\\t\\t\\t\\t\\tuniforms: UniformsUtils.clone( shader.uniforms ),\\r\\n\\t\\t\\t\\t\\t\\tvertexShader: shader.vertexShader,\\r\\n\\t\\t\\t\\t\\t\\tfragmentShader: shader.fragmentShader\\r\\n\\t\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tmaterialProperties.shader = {\\r\\n\\t\\t\\t\\t\\t\\tname: material.type,\\r\\n\\t\\t\\t\\t\\t\\tuniforms: material.uniforms,\\r\\n\\t\\t\\t\\t\\t\\tvertexShader: material.vertexShader,\\r\\n\\t\\t\\t\\t\\t\\tfragmentShader: material.fragmentShader\\r\\n\\t\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tmaterial.onBeforeCompile( materialProperties.shader );\\r\\n\\r\\n\\t\\t\\t\\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\\r\\n\\r\\n\\t\\t\\t\\tmaterialProperties.program = program;\\r\\n\\t\\t\\t\\tmaterial.program = program;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar programAttributes = program.getAttributes();\\r\\n\\r\\n\\t\\t\\tif ( material.morphTargets ) {\\r\\n\\r\\n\\t\\t\\t\\tmaterial.numSupportedMorphTargets = 0;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmaterial.numSupportedMorphTargets ++;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.morphNormals ) {\\r\\n\\r\\n\\t\\t\\t\\tmaterial.numSupportedMorphNormals = 0;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmaterial.numSupportedMorphNormals ++;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar uniforms = materialProperties.shader.uniforms;\\r\\n\\r\\n\\t\\t\\tif ( ! material.isShaderMaterial &&\\r\\n\\t\\t\\t\\t! material.isRawShaderMaterial ||\\r\\n\\t\\t\\t\\tmaterial.clipping === true ) {\\r\\n\\r\\n\\t\\t\\t\\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\\r\\n\\t\\t\\t\\tmaterialProperties.numIntersection = _clipping.numIntersection;\\r\\n\\t\\t\\t\\tuniforms.clippingPlanes = _clipping.uniform;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tmaterialProperties.fog = fog;\\r\\n\\r\\n\\t\\t\\t// store the light setup it was created for\\r\\n\\r\\n\\t\\t\\tmaterialProperties.lightsHash = lights.state.hash;\\r\\n\\r\\n\\t\\t\\tif ( material.lights ) {\\r\\n\\r\\n\\t\\t\\t\\t// wire up the material to this renderer's lighting state\\r\\n\\r\\n\\t\\t\\t\\tuniforms.ambientLightColor.value = lights.state.ambient;\\r\\n\\t\\t\\t\\tuniforms.directionalLights.value = lights.state.directional;\\r\\n\\t\\t\\t\\tuniforms.spotLights.value = lights.state.spot;\\r\\n\\t\\t\\t\\tuniforms.rectAreaLights.value = lights.state.rectArea;\\r\\n\\t\\t\\t\\tuniforms.pointLights.value = lights.state.point;\\r\\n\\t\\t\\t\\tuniforms.hemisphereLights.value = lights.state.hemi;\\r\\n\\r\\n\\t\\t\\t\\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\\r\\n\\t\\t\\t\\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\\r\\n\\t\\t\\t\\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\\r\\n\\t\\t\\t\\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\\r\\n\\t\\t\\t\\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\\r\\n\\t\\t\\t\\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\\r\\n\\t\\t\\t\\t// TODO (abelnation): add area lights shadow info to uniforms\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar progUniforms = materialProperties.program.getUniforms(),\\r\\n\\t\\t\\t\\tuniformsList =\\r\\n\\t\\t\\t\\t\\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\\r\\n\\r\\n\\t\\t\\tmaterialProperties.uniformsList = uniformsList;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction setProgram( camera, fog, material, object ) {\\r\\n\\r\\n\\t\\t\\t_usedTextureUnits = 0;\\r\\n\\r\\n\\t\\t\\tvar materialProperties = properties.get( material );\\r\\n\\r\\n\\t\\t\\tif ( _clippingEnabled ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( _localClippingEnabled || camera !== _currentCamera ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar useCache =\\r\\n\\t\\t\\t\\t\\t\\tcamera === _currentCamera &&\\r\\n\\t\\t\\t\\t\\t\\tmaterial.id === _currentMaterialId;\\r\\n\\r\\n\\t\\t\\t\\t\\t// we might want to call this function with some ClippingGroup\\r\\n\\t\\t\\t\\t\\t// object instead of the material, once it becomes feasible\\r\\n\\t\\t\\t\\t\\t// (#8465, #8379)\\r\\n\\t\\t\\t\\t\\t_clipping.setState(\\r\\n\\t\\t\\t\\t\\t\\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\\r\\n\\t\\t\\t\\t\\t\\tcamera, materialProperties, useCache );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.needsUpdate === false ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( materialProperties.program === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmaterial.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.fog && materialProperties.fog !== fog ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmaterial.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmaterial.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( materialProperties.numClippingPlanes !== undefined &&\\r\\n\\t\\t\\t\\t\\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\\r\\n\\t\\t\\t\\t\\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmaterial.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.needsUpdate ) {\\r\\n\\r\\n\\t\\t\\t\\tinitMaterial( material, fog, object );\\r\\n\\t\\t\\t\\tmaterial.needsUpdate = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar refreshProgram = false;\\r\\n\\t\\t\\tvar refreshMaterial = false;\\r\\n\\t\\t\\tvar refreshLights = false;\\r\\n\\r\\n\\t\\t\\tvar program = materialProperties.program,\\r\\n\\t\\t\\t\\tp_uniforms = program.getUniforms(),\\r\\n\\t\\t\\t\\tm_uniforms = materialProperties.shader.uniforms;\\r\\n\\r\\n\\t\\t\\tif ( state.useProgram( program.program ) ) {\\r\\n\\r\\n\\t\\t\\t\\trefreshProgram = true;\\r\\n\\t\\t\\t\\trefreshMaterial = true;\\r\\n\\t\\t\\t\\trefreshLights = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.id !== _currentMaterialId ) {\\r\\n\\r\\n\\t\\t\\t\\t_currentMaterialId = material.id;\\r\\n\\r\\n\\t\\t\\t\\trefreshMaterial = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( refreshProgram || camera !== _currentCamera ) {\\r\\n\\r\\n\\t\\t\\t\\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\\r\\n\\r\\n\\t\\t\\t\\tif ( capabilities.logarithmicDepthBuffer ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tp_uniforms.setValue( _gl, 'logDepthBufFC',\\r\\n\\t\\t\\t\\t\\t\\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// Avoid unneeded uniform updates per ArrayCamera's sub-camera\\r\\n\\r\\n\\t\\t\\t\\tif ( _currentCamera !== ( _currentArrayCamera || camera ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t_currentCamera = ( _currentArrayCamera || camera );\\r\\n\\r\\n\\t\\t\\t\\t\\t// lighting uniforms depend on the camera so enforce an update\\r\\n\\t\\t\\t\\t\\t// now, in case this material supports lights - or later, when\\r\\n\\t\\t\\t\\t\\t// the next material that does gets activated:\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshMaterial = true;\\t\\t// set to true on material change\\r\\n\\t\\t\\t\\t\\trefreshLights = true;\\t\\t// remains set until update done\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// load material specific uniforms\\r\\n\\t\\t\\t\\t// (shader material also gets them for the sake of genericity)\\r\\n\\r\\n\\t\\t\\t\\tif ( material.isShaderMaterial ||\\r\\n\\t\\t\\t\\t\\tmaterial.isMeshPhongMaterial ||\\r\\n\\t\\t\\t\\t\\tmaterial.isMeshStandardMaterial ||\\r\\n\\t\\t\\t\\t\\tmaterial.envMap ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar uCamPos = p_uniforms.map.cameraPosition;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( uCamPos !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tuCamPos.setValue( _gl,\\r\\n\\t\\t\\t\\t\\t\\t\\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( material.isMeshPhongMaterial ||\\r\\n\\t\\t\\t\\t\\tmaterial.isMeshLambertMaterial ||\\r\\n\\t\\t\\t\\t\\tmaterial.isMeshBasicMaterial ||\\r\\n\\t\\t\\t\\t\\tmaterial.isMeshStandardMaterial ||\\r\\n\\t\\t\\t\\t\\tmaterial.isShaderMaterial ||\\r\\n\\t\\t\\t\\t\\tmaterial.skinning ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// skinning uniforms must be set even if material didn't change\\r\\n\\t\\t\\t// auto-setting of texture unit for bone texture must go before other textures\\r\\n\\t\\t\\t// not sure why, but otherwise weird things happen\\r\\n\\r\\n\\t\\t\\tif ( material.skinning ) {\\r\\n\\r\\n\\t\\t\\t\\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\\r\\n\\t\\t\\t\\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\\r\\n\\r\\n\\t\\t\\t\\tvar skeleton = object.skeleton;\\r\\n\\r\\n\\t\\t\\t\\tif ( skeleton ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar bones = skeleton.bones;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( capabilities.floatVertexTextures ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( skeleton.boneTexture === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// layout (1 matrix = 4 pixels)\\r\\n\\t\\t\\t\\t\\t\\t\\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\\r\\n\\t\\t\\t\\t\\t\\t\\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\\r\\n\\t\\t\\t\\t\\t\\t\\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\\r\\n\\t\\t\\t\\t\\t\\t\\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\\r\\n\\t\\t\\t\\t\\t\\t\\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\\r\\n\\t\\t\\t\\t\\t\\t\\tsize = _Math.ceilPowerOfTwo( size );\\r\\n\\t\\t\\t\\t\\t\\t\\tsize = Math.max( size, 4 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\\r\\n\\t\\t\\t\\t\\t\\t\\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tskeleton.boneMatrices = boneMatrices;\\r\\n\\t\\t\\t\\t\\t\\t\\tskeleton.boneTexture = boneTexture;\\r\\n\\t\\t\\t\\t\\t\\t\\tskeleton.boneTextureSize = size;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\\r\\n\\t\\t\\t\\t\\t\\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( refreshMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\\r\\n\\t\\t\\t\\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\\r\\n\\r\\n\\t\\t\\t\\tif ( material.lights ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// the current material requires lighting info\\r\\n\\r\\n\\t\\t\\t\\t\\t// note: all lighting uniforms are always set correctly\\r\\n\\t\\t\\t\\t\\t// they simply reference the renderer's state for their\\r\\n\\t\\t\\t\\t\\t// values\\r\\n\\t\\t\\t\\t\\t//\\r\\n\\t\\t\\t\\t\\t// use the current material's .needsUpdate flags to set\\r\\n\\t\\t\\t\\t\\t// the GL state when required\\r\\n\\r\\n\\t\\t\\t\\t\\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// refresh uniforms common to several materials\\r\\n\\r\\n\\t\\t\\t\\tif ( fog && material.fog ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsFog( m_uniforms, fog );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( material.isMeshBasicMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.isMeshLambertMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\r\\n\\t\\t\\t\\t\\trefreshUniformsLambert( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.isMeshPhongMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( material.isMeshToonMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\trefreshUniformsToon( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\trefreshUniformsPhong( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.isMeshStandardMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( material.isMeshPhysicalMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\trefreshUniformsPhysical( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\trefreshUniformsStandard( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.isMeshDepthMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\r\\n\\t\\t\\t\\t\\trefreshUniformsDepth( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.isMeshDistanceMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\r\\n\\t\\t\\t\\t\\trefreshUniformsDistance( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.isMeshNormalMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsCommon( m_uniforms, material );\\r\\n\\t\\t\\t\\t\\trefreshUniformsNormal( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.isLineBasicMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsLine( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( material.isLineDashedMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\trefreshUniformsDash( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.isPointsMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trefreshUniformsPoints( m_uniforms, material );\\r\\n\\r\\n\\t\\t\\t\\t} else if ( material.isShadowMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tm_uniforms.color.value = material.color;\\r\\n\\t\\t\\t\\t\\tm_uniforms.opacity.value = material.opacity;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// RectAreaLight Texture\\r\\n\\t\\t\\t\\t// TODO (mrdoob): Find a nicer implementation\\r\\n\\r\\n\\t\\t\\t\\tif ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;\\r\\n\\t\\t\\t\\tif ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;\\r\\n\\r\\n\\t\\t\\t\\tWebGLUniforms.upload(\\r\\n\\t\\t\\t\\t\\t_gl, materialProperties.uniformsList, m_uniforms, _this );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t// common matrices\\r\\n\\r\\n\\t\\t\\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\\r\\n\\t\\t\\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\\r\\n\\t\\t\\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\\r\\n\\r\\n\\t\\t\\treturn program;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Uniforms (refresh uniforms objects)\\r\\n\\r\\n\\t\\tfunction refreshUniformsCommon( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tuniforms.opacity.value = material.opacity;\\r\\n\\r\\n\\t\\t\\tif ( material.color ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.diffuse.value = material.color;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.emissive ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.map ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.map.value = material.map;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.alphaMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.alphaMap.value = material.alphaMap;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.specularMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.specularMap.value = material.specularMap;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.envMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.envMap.value = material.envMap;\\r\\n\\r\\n\\t\\t\\t\\t// don't flip CubeTexture envMaps, flip everything else:\\r\\n\\t\\t\\t\\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\\r\\n\\t\\t\\t\\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\\r\\n\\t\\t\\t\\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\\r\\n\\t\\t\\t\\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\\r\\n\\r\\n\\t\\t\\t\\tuniforms.reflectivity.value = material.reflectivity;\\r\\n\\t\\t\\t\\tuniforms.refractionRatio.value = material.refractionRatio;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.lightMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.lightMap.value = material.lightMap;\\r\\n\\t\\t\\t\\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.aoMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.aoMap.value = material.aoMap;\\r\\n\\t\\t\\t\\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// uv repeat and offset setting priorities\\r\\n\\t\\t\\t// 1. color map\\r\\n\\t\\t\\t// 2. specular map\\r\\n\\t\\t\\t// 3. normal map\\r\\n\\t\\t\\t// 4. bump map\\r\\n\\t\\t\\t// 5. alpha map\\r\\n\\t\\t\\t// 6. emissive map\\r\\n\\r\\n\\t\\t\\tvar uvScaleMap;\\r\\n\\r\\n\\t\\t\\tif ( material.map ) {\\r\\n\\r\\n\\t\\t\\t\\tuvScaleMap = material.map;\\r\\n\\r\\n\\t\\t\\t} else if ( material.specularMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuvScaleMap = material.specularMap;\\r\\n\\r\\n\\t\\t\\t} else if ( material.displacementMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuvScaleMap = material.displacementMap;\\r\\n\\r\\n\\t\\t\\t} else if ( material.normalMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuvScaleMap = material.normalMap;\\r\\n\\r\\n\\t\\t\\t} else if ( material.bumpMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuvScaleMap = material.bumpMap;\\r\\n\\r\\n\\t\\t\\t} else if ( material.roughnessMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuvScaleMap = material.roughnessMap;\\r\\n\\r\\n\\t\\t\\t} else if ( material.metalnessMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuvScaleMap = material.metalnessMap;\\r\\n\\r\\n\\t\\t\\t} else if ( material.alphaMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuvScaleMap = material.alphaMap;\\r\\n\\r\\n\\t\\t\\t} else if ( material.emissiveMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuvScaleMap = material.emissiveMap;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( uvScaleMap !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// backwards compatibility\\r\\n\\t\\t\\t\\tif ( uvScaleMap.isWebGLRenderTarget ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tuvScaleMap = uvScaleMap.texture;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( uvScaleMap.matrixAutoUpdate === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar offset = uvScaleMap.offset;\\r\\n\\t\\t\\t\\t\\tvar repeat = uvScaleMap.repeat;\\r\\n\\t\\t\\t\\t\\tvar rotation = uvScaleMap.rotation;\\r\\n\\t\\t\\t\\t\\tvar center = uvScaleMap.center;\\r\\n\\r\\n\\t\\t\\t\\t\\tuvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsLine( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tuniforms.diffuse.value = material.color;\\r\\n\\t\\t\\tuniforms.opacity.value = material.opacity;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsDash( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tuniforms.dashSize.value = material.dashSize;\\r\\n\\t\\t\\tuniforms.totalSize.value = material.dashSize + material.gapSize;\\r\\n\\t\\t\\tuniforms.scale.value = material.scale;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsPoints( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tuniforms.diffuse.value = material.color;\\r\\n\\t\\t\\tuniforms.opacity.value = material.opacity;\\r\\n\\t\\t\\tuniforms.size.value = material.size * _pixelRatio;\\r\\n\\t\\t\\tuniforms.scale.value = _height * 0.5;\\r\\n\\r\\n\\t\\t\\tuniforms.map.value = material.map;\\r\\n\\r\\n\\t\\t\\tif ( material.map !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( material.map.matrixAutoUpdate === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar offset = material.map.offset;\\r\\n\\t\\t\\t\\t\\tvar repeat = material.map.repeat;\\r\\n\\t\\t\\t\\t\\tvar rotation = material.map.rotation;\\r\\n\\t\\t\\t\\t\\tvar center = material.map.center;\\r\\n\\r\\n\\t\\t\\t\\t\\tmaterial.map.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tuniforms.uvTransform.value.copy( material.map.matrix );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsFog( uniforms, fog ) {\\r\\n\\r\\n\\t\\t\\tuniforms.fogColor.value = fog.color;\\r\\n\\r\\n\\t\\t\\tif ( fog.isFog ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.fogNear.value = fog.near;\\r\\n\\t\\t\\t\\tuniforms.fogFar.value = fog.far;\\r\\n\\r\\n\\t\\t\\t} else if ( fog.isFogExp2 ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.fogDensity.value = fog.density;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsLambert( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tif ( material.emissiveMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.emissiveMap.value = material.emissiveMap;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsPhong( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tuniforms.specular.value = material.specular;\\r\\n\\t\\t\\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\\r\\n\\r\\n\\t\\t\\tif ( material.emissiveMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.emissiveMap.value = material.emissiveMap;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.bumpMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.bumpMap.value = material.bumpMap;\\r\\n\\t\\t\\t\\tuniforms.bumpScale.value = material.bumpScale;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.normalMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.normalMap.value = material.normalMap;\\r\\n\\t\\t\\t\\tuniforms.normalScale.value.copy( material.normalScale );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.displacementMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\r\\n\\t\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\r\\n\\t\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsToon( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\trefreshUniformsPhong( uniforms, material );\\r\\n\\r\\n\\t\\t\\tif ( material.gradientMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.gradientMap.value = material.gradientMap;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsStandard( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tuniforms.roughness.value = material.roughness;\\r\\n\\t\\t\\tuniforms.metalness.value = material.metalness;\\r\\n\\r\\n\\t\\t\\tif ( material.roughnessMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.roughnessMap.value = material.roughnessMap;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.metalnessMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.metalnessMap.value = material.metalnessMap;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.emissiveMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.emissiveMap.value = material.emissiveMap;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.bumpMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.bumpMap.value = material.bumpMap;\\r\\n\\t\\t\\t\\tuniforms.bumpScale.value = material.bumpScale;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.normalMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.normalMap.value = material.normalMap;\\r\\n\\t\\t\\t\\tuniforms.normalScale.value.copy( material.normalScale );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.displacementMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\r\\n\\t\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\r\\n\\t\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.envMap ) {\\r\\n\\r\\n\\t\\t\\t\\t//uniforms.envMap.value = material.envMap; // part of uniforms common\\r\\n\\t\\t\\t\\tuniforms.envMapIntensity.value = material.envMapIntensity;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsPhysical( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tuniforms.clearCoat.value = material.clearCoat;\\r\\n\\t\\t\\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\\r\\n\\r\\n\\t\\t\\trefreshUniformsStandard( uniforms, material );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsDepth( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tif ( material.displacementMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\r\\n\\t\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\r\\n\\t\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsDistance( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tif ( material.displacementMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\r\\n\\t\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\r\\n\\t\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tuniforms.referencePosition.value.copy( material.referencePosition );\\r\\n\\t\\t\\tuniforms.nearDistance.value = material.nearDistance;\\r\\n\\t\\t\\tuniforms.farDistance.value = material.farDistance;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction refreshUniformsNormal( uniforms, material ) {\\r\\n\\r\\n\\t\\t\\tif ( material.bumpMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.bumpMap.value = material.bumpMap;\\r\\n\\t\\t\\t\\tuniforms.bumpScale.value = material.bumpScale;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.normalMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.normalMap.value = material.normalMap;\\r\\n\\t\\t\\t\\tuniforms.normalScale.value.copy( material.normalScale );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( material.displacementMap ) {\\r\\n\\r\\n\\t\\t\\t\\tuniforms.displacementMap.value = material.displacementMap;\\r\\n\\t\\t\\t\\tuniforms.displacementScale.value = material.displacementScale;\\r\\n\\t\\t\\t\\tuniforms.displacementBias.value = material.displacementBias;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\\r\\n\\r\\n\\t\\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\\r\\n\\r\\n\\t\\t\\tuniforms.ambientLightColor.needsUpdate = value;\\r\\n\\r\\n\\t\\t\\tuniforms.directionalLights.needsUpdate = value;\\r\\n\\t\\t\\tuniforms.pointLights.needsUpdate = value;\\r\\n\\t\\t\\tuniforms.spotLights.needsUpdate = value;\\r\\n\\t\\t\\tuniforms.rectAreaLights.needsUpdate = value;\\r\\n\\t\\t\\tuniforms.hemisphereLights.needsUpdate = value;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// GL state setting\\r\\n\\r\\n\\t\\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\\r\\n\\r\\n\\t\\t\\tstate.setCullFace( cullFace );\\r\\n\\t\\t\\tstate.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// Textures\\r\\n\\r\\n\\t\\tfunction allocTextureUnit() {\\r\\n\\r\\n\\t\\t\\tvar textureUnit = _usedTextureUnits;\\r\\n\\r\\n\\t\\t\\tif ( textureUnit >= capabilities.maxTextures ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t_usedTextureUnits += 1;\\r\\n\\r\\n\\t\\t\\treturn textureUnit;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.allocTextureUnit = allocTextureUnit;\\r\\n\\r\\n\\t\\t// this.setTexture2D = setTexture2D;\\r\\n\\t\\tthis.setTexture2D = ( function () {\\r\\n\\r\\n\\t\\t\\tvar warned = false;\\r\\n\\r\\n\\t\\t\\t// backwards compatibility: peel texture.texture\\r\\n\\t\\t\\treturn function setTexture2D( texture, slot ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( texture && texture.isWebGLRenderTarget ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ! warned ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( \\\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\\\" );\\r\\n\\t\\t\\t\\t\\t\\twarned = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture = texture.texture;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ttextures.setTexture2D( texture, slot );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}() );\\r\\n\\r\\n\\t\\tthis.setTexture = ( function () {\\r\\n\\r\\n\\t\\t\\tvar warned = false;\\r\\n\\r\\n\\t\\t\\treturn function setTexture( texture, slot ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( ! warned ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( \\\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\\\" );\\r\\n\\t\\t\\t\\t\\twarned = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ttextures.setTexture2D( texture, slot );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}() );\\r\\n\\r\\n\\t\\tthis.setTextureCube = ( function () {\\r\\n\\r\\n\\t\\t\\tvar warned = false;\\r\\n\\r\\n\\t\\t\\treturn function setTextureCube( texture, slot ) {\\r\\n\\r\\n\\t\\t\\t\\t// backwards compatibility: peel texture.texture\\r\\n\\t\\t\\t\\tif ( texture && texture.isWebGLRenderTargetCube ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ! warned ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( \\\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\\\" );\\r\\n\\t\\t\\t\\t\\t\\twarned = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture = texture.texture;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\\r\\n\\t\\t\\t\\t// TODO: unify these code paths\\r\\n\\t\\t\\t\\tif ( ( texture && texture.isCubeTexture ) ||\\r\\n\\t\\t\\t\\t\\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// CompressedTexture can have Array in image :/\\r\\n\\r\\n\\t\\t\\t\\t\\t// this function alone should take care of cube textures\\r\\n\\t\\t\\t\\t\\ttextures.setTextureCube( texture, slot );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// assumed: texture property of THREE.WebGLRenderTargetCube\\r\\n\\r\\n\\t\\t\\t\\t\\ttextures.setTextureCubeDynamic( texture, slot );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}() );\\r\\n\\r\\n\\t\\tthis.getRenderTarget = function () {\\r\\n\\r\\n\\t\\t\\treturn _currentRenderTarget;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setRenderTarget = function ( renderTarget ) {\\r\\n\\r\\n\\t\\t\\t_currentRenderTarget = renderTarget;\\r\\n\\r\\n\\t\\t\\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\ttextures.setupRenderTarget( renderTarget );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar framebuffer = null;\\r\\n\\t\\t\\tvar isCube = false;\\r\\n\\r\\n\\t\\t\\tif ( renderTarget ) {\\r\\n\\r\\n\\t\\t\\t\\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\\r\\n\\r\\n\\t\\t\\t\\tif ( renderTarget.isWebGLRenderTargetCube ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tframebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];\\r\\n\\t\\t\\t\\t\\tisCube = true;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tframebuffer = __webglFramebuffer;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t_currentViewport.copy( renderTarget.viewport );\\r\\n\\t\\t\\t\\t_currentScissor.copy( renderTarget.scissor );\\r\\n\\t\\t\\t\\t_currentScissorTest = renderTarget.scissorTest;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\\r\\n\\t\\t\\t\\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\\r\\n\\t\\t\\t\\t_currentScissorTest = _scissorTest;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( _currentFramebuffer !== framebuffer ) {\\r\\n\\r\\n\\t\\t\\t\\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\\r\\n\\t\\t\\t\\t_currentFramebuffer = framebuffer;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.viewport( _currentViewport );\\r\\n\\t\\t\\tstate.scissor( _currentScissor );\\r\\n\\t\\t\\tstate.setScissorTest( _currentScissorTest );\\r\\n\\r\\n\\t\\t\\tif ( isCube ) {\\r\\n\\r\\n\\t\\t\\t\\tvar textureProperties = properties.get( renderTarget.texture );\\r\\n\\t\\t\\t\\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\\r\\n\\r\\n\\t\\t\\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\\r\\n\\r\\n\\t\\t\\tif ( framebuffer ) {\\r\\n\\r\\n\\t\\t\\t\\tvar restore = false;\\r\\n\\r\\n\\t\\t\\t\\tif ( framebuffer !== _currentFramebuffer ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\\r\\n\\r\\n\\t\\t\\t\\t\\trestore = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ttry {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar texture = renderTarget.texture;\\r\\n\\t\\t\\t\\t\\tvar textureFormat = texture.format;\\r\\n\\t\\t\\t\\t\\tvar textureType = texture.type;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\\r\\n\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\\r\\n\\t\\t\\t\\t\\t\\t! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\\r\\n\\t\\t\\t\\t\\t\\t! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\\r\\n\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} finally {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( restore ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction FogExp2( color, density ) {\\r\\n\\r\\n\\t\\tthis.name = '';\\r\\n\\r\\n\\t\\tthis.color = new Color( color );\\r\\n\\t\\tthis.density = ( density !== undefined ) ? density : 0.00025;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tFogExp2.prototype.isFogExp2 = true;\\r\\n\\r\\n\\tFogExp2.prototype.clone = function () {\\r\\n\\r\\n\\t\\treturn new FogExp2( this.color.getHex(), this.density );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tFogExp2.prototype.toJSON = function ( /* meta */ ) {\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\ttype: 'FogExp2',\\r\\n\\t\\t\\tcolor: this.color.getHex(),\\r\\n\\t\\t\\tdensity: this.density\\r\\n\\t\\t};\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Fog( color, near, far ) {\\r\\n\\r\\n\\t\\tthis.name = '';\\r\\n\\r\\n\\t\\tthis.color = new Color( color );\\r\\n\\r\\n\\t\\tthis.near = ( near !== undefined ) ? near : 1;\\r\\n\\t\\tthis.far = ( far !== undefined ) ? far : 1000;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tFog.prototype.isFog = true;\\r\\n\\r\\n\\tFog.prototype.clone = function () {\\r\\n\\r\\n\\t\\treturn new Fog( this.color.getHex(), this.near, this.far );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tFog.prototype.toJSON = function ( /* meta */ ) {\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\ttype: 'Fog',\\r\\n\\t\\t\\tcolor: this.color.getHex(),\\r\\n\\t\\t\\tnear: this.near,\\r\\n\\t\\t\\tfar: this.far\\r\\n\\t\\t};\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Scene() {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Scene';\\r\\n\\r\\n\\t\\tthis.background = null;\\r\\n\\t\\tthis.fog = null;\\r\\n\\t\\tthis.overrideMaterial = null;\\r\\n\\r\\n\\t\\tthis.autoUpdate = true; // checked by the renderer\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Scene,\\r\\n\\r\\n\\t\\tcopy: function ( source, recursive ) {\\r\\n\\r\\n\\t\\t\\tObject3D.prototype.copy.call( this, source, recursive );\\r\\n\\r\\n\\t\\t\\tif ( source.background !== null ) this.background = source.background.clone();\\r\\n\\t\\t\\tif ( source.fog !== null ) this.fog = source.fog.clone();\\r\\n\\t\\t\\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\\r\\n\\r\\n\\t\\t\\tthis.autoUpdate = source.autoUpdate;\\r\\n\\t\\t\\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( meta ) {\\r\\n\\r\\n\\t\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\r\\n\\r\\n\\t\\t\\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\\r\\n\\t\\t\\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction LensFlare( texture, size, distance, blending, color ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.lensFlares = [];\\r\\n\\r\\n\\t\\tthis.positionScreen = new Vector3();\\r\\n\\t\\tthis.customUpdateCallback = undefined;\\r\\n\\r\\n\\t\\tif ( texture !== undefined ) {\\r\\n\\r\\n\\t\\t\\tthis.add( texture, size, distance, blending, color );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: LensFlare,\\r\\n\\r\\n\\t\\tisLensFlare: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tObject3D.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.positionScreen.copy( source.positionScreen );\\r\\n\\t\\t\\tthis.customUpdateCallback = source.customUpdateCallback;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.lensFlares.push( source.lensFlares[ i ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tadd: function ( texture, size, distance, blending, color, opacity ) {\\r\\n\\r\\n\\t\\t\\tif ( size === undefined ) size = - 1;\\r\\n\\t\\t\\tif ( distance === undefined ) distance = 0;\\r\\n\\t\\t\\tif ( opacity === undefined ) opacity = 1;\\r\\n\\t\\t\\tif ( color === undefined ) color = new Color( 0xffffff );\\r\\n\\t\\t\\tif ( blending === undefined ) blending = NormalBlending;\\r\\n\\r\\n\\t\\t\\tdistance = Math.min( distance, Math.max( 0, distance ) );\\r\\n\\r\\n\\t\\t\\tthis.lensFlares.push( {\\r\\n\\t\\t\\t\\ttexture: texture,\\t// THREE.Texture\\r\\n\\t\\t\\t\\tsize: size, \\t\\t// size in pixels (-1 = use texture.width)\\r\\n\\t\\t\\t\\tdistance: distance, \\t// distance (0-1) from light source (0=at light source)\\r\\n\\t\\t\\t\\tx: 0, y: 0, z: 0,\\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\\r\\n\\t\\t\\t\\tscale: 1, \\t\\t// scale\\r\\n\\t\\t\\t\\trotation: 0, \\t\\t// rotation\\r\\n\\t\\t\\t\\topacity: opacity,\\t// opacity\\r\\n\\t\\t\\t\\tcolor: color,\\t\\t// color\\r\\n\\t\\t\\t\\tblending: blending\\t// blending\\r\\n\\t\\t\\t} );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * Update lens flares update positions on all flares based on the screen position\\r\\n\\t\\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\\r\\n\\t\\t */\\r\\n\\r\\n\\t\\tupdateLensFlares: function () {\\r\\n\\r\\n\\t\\t\\tvar f, fl = this.lensFlares.length;\\r\\n\\t\\t\\tvar flare;\\r\\n\\t\\t\\tvar vecX = - this.positionScreen.x * 2;\\r\\n\\t\\t\\tvar vecY = - this.positionScreen.y * 2;\\r\\n\\r\\n\\t\\t\\tfor ( f = 0; f < fl; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tflare = this.lensFlares[ f ];\\r\\n\\r\\n\\t\\t\\t\\tflare.x = this.positionScreen.x + vecX * flare.distance;\\r\\n\\t\\t\\t\\tflare.y = this.positionScreen.y + vecY * flare.distance;\\r\\n\\r\\n\\t\\t\\t\\tflare.wantedRotation = flare.x * Math.PI * 0.25;\\r\\n\\t\\t\\t\\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  color: <hex>,\\r\\n\\t *  opacity: <float>,\\r\\n\\t *  map: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *\\tuvOffset: new THREE.Vector2(),\\r\\n\\t *\\tuvScale: new THREE.Vector2()\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction SpriteMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'SpriteMaterial';\\r\\n\\r\\n\\t\\tthis.color = new Color( 0xffffff );\\r\\n\\t\\tthis.map = null;\\r\\n\\r\\n\\t\\tthis.rotation = 0;\\r\\n\\r\\n\\t\\tthis.fog = false;\\r\\n\\t\\tthis.lights = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSpriteMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tSpriteMaterial.prototype.constructor = SpriteMaterial;\\r\\n\\tSpriteMaterial.prototype.isSpriteMaterial = true;\\r\\n\\r\\n\\tSpriteMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.color.copy( source.color );\\r\\n\\t\\tthis.map = source.map;\\r\\n\\r\\n\\t\\tthis.rotation = source.rotation;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Sprite( material ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Sprite';\\r\\n\\r\\n\\t\\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Sprite,\\r\\n\\r\\n\\t\\tisSprite: true,\\r\\n\\r\\n\\t\\traycast: ( function () {\\r\\n\\r\\n\\t\\t\\tvar intersectPoint = new Vector3();\\r\\n\\t\\t\\tvar worldPosition = new Vector3();\\r\\n\\t\\t\\tvar worldScale = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function raycast( raycaster, intersects ) {\\r\\n\\r\\n\\t\\t\\t\\tworldPosition.setFromMatrixPosition( this.matrixWorld );\\r\\n\\t\\t\\t\\traycaster.ray.closestPointToPoint( worldPosition, intersectPoint );\\r\\n\\r\\n\\t\\t\\t\\tworldScale.setFromMatrixScale( this.matrixWorld );\\r\\n\\t\\t\\t\\tvar guessSizeSq = worldScale.x * worldScale.y / 4;\\r\\n\\r\\n\\t\\t\\t\\tif ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;\\r\\n\\r\\n\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\\r\\n\\r\\n\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) return;\\r\\n\\r\\n\\t\\t\\t\\tintersects.push( {\\r\\n\\r\\n\\t\\t\\t\\t\\tdistance: distance,\\r\\n\\t\\t\\t\\t\\tpoint: intersectPoint.clone(),\\r\\n\\t\\t\\t\\t\\tface: null,\\r\\n\\t\\t\\t\\t\\tobject: this\\r\\n\\r\\n\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}() ),\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.material ).copy( this );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction LOD() {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'LOD';\\r\\n\\r\\n\\t\\tObject.defineProperties( this, {\\r\\n\\t\\t\\tlevels: {\\r\\n\\t\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\t\\tvalue: []\\r\\n\\t\\t\\t}\\r\\n\\t\\t} );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: LOD,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tObject3D.prototype.copy.call( this, source, false );\\r\\n\\r\\n\\t\\t\\tvar levels = source.levels;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar level = levels[ i ];\\r\\n\\r\\n\\t\\t\\t\\tthis.addLevel( level.object.clone(), level.distance );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\taddLevel: function ( object, distance ) {\\r\\n\\r\\n\\t\\t\\tif ( distance === undefined ) distance = 0;\\r\\n\\r\\n\\t\\t\\tdistance = Math.abs( distance );\\r\\n\\r\\n\\t\\t\\tvar levels = this.levels;\\r\\n\\r\\n\\t\\t\\tfor ( var l = 0; l < levels.length; l ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( distance < levels[ l ].distance ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tlevels.splice( l, 0, { distance: distance, object: object } );\\r\\n\\r\\n\\t\\t\\tthis.add( object );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetObjectForDistance: function ( distance ) {\\r\\n\\r\\n\\t\\t\\tvar levels = this.levels;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( distance < levels[ i ].distance ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn levels[ i - 1 ].object;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\traycast: ( function () {\\r\\n\\r\\n\\t\\t\\tvar matrixPosition = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function raycast( raycaster, intersects ) {\\r\\n\\r\\n\\t\\t\\t\\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\\r\\n\\r\\n\\t\\t\\t\\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}() ),\\r\\n\\r\\n\\t\\tupdate: function () {\\r\\n\\r\\n\\t\\t\\tvar v1 = new Vector3();\\r\\n\\t\\t\\tvar v2 = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function update( camera ) {\\r\\n\\r\\n\\t\\t\\t\\tvar levels = this.levels;\\r\\n\\r\\n\\t\\t\\t\\tif ( levels.length > 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tv1.setFromMatrixPosition( camera.matrixWorld );\\r\\n\\t\\t\\t\\t\\tv2.setFromMatrixPosition( this.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar distance = v1.distanceTo( v2 );\\r\\n\\r\\n\\t\\t\\t\\t\\tlevels[ 0 ].object.visible = true;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( distance >= levels[ i ].distance ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tlevels[ i - 1 ].object.visible = false;\\r\\n\\t\\t\\t\\t\\t\\t\\tlevels[ i ].object.visible = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( ; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tlevels[ i ].object.visible = false;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\ttoJSON: function ( meta ) {\\r\\n\\r\\n\\t\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\r\\n\\r\\n\\t\\t\\tdata.object.levels = [];\\r\\n\\r\\n\\t\\t\\tvar levels = this.levels;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar level = levels[ i ];\\r\\n\\r\\n\\t\\t\\t\\tdata.object.levels.push( {\\r\\n\\t\\t\\t\\t\\tobject: level.object.uuid,\\r\\n\\t\\t\\t\\t\\tdistance: level.distance\\r\\n\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author michael guerrero / http://realitymeltdown.com\\r\\n\\t * @author ikerr / http://verold.com\\r\\n\\t */\\r\\n\\r\\n\\tfunction Skeleton( bones, boneInverses ) {\\r\\n\\r\\n\\t\\t// copy the bone array\\r\\n\\r\\n\\t\\tbones = bones || [];\\r\\n\\r\\n\\t\\tthis.bones = bones.slice( 0 );\\r\\n\\t\\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\\r\\n\\r\\n\\t\\t// use the supplied bone inverses or calculate the inverses\\r\\n\\r\\n\\t\\tif ( boneInverses === undefined ) {\\r\\n\\r\\n\\t\\t\\tthis.calculateInverses();\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tif ( this.bones.length === boneInverses.length ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.boneInverses = boneInverses.slice( 0 );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\\r\\n\\r\\n\\t\\t\\t\\tthis.boneInverses = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.boneInverses.push( new Matrix4() );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Skeleton.prototype, {\\r\\n\\r\\n\\t\\tcalculateInverses: function () {\\r\\n\\r\\n\\t\\t\\tthis.boneInverses = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar inverse = new Matrix4();\\r\\n\\r\\n\\t\\t\\t\\tif ( this.bones[ i ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tinverse.getInverse( this.bones[ i ].matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.boneInverses.push( inverse );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tpose: function () {\\r\\n\\r\\n\\t\\t\\tvar bone, i, il;\\r\\n\\r\\n\\t\\t\\t// recover the bind-time world matrices\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tbone = this.bones[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( bone ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// compute the local matrices, positions, rotations and scales\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tbone = this.bones[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( bone ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( bone.parent && bone.parent.isBone ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbone.matrix.getInverse( bone.parent.matrixWorld );\\r\\n\\t\\t\\t\\t\\t\\tbone.matrix.multiply( bone.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbone.matrix.copy( bone.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdate: ( function () {\\r\\n\\r\\n\\t\\t\\tvar offsetMatrix = new Matrix4();\\r\\n\\t\\t\\tvar identityMatrix = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function update() {\\r\\n\\r\\n\\t\\t\\t\\tvar bones = this.bones;\\r\\n\\t\\t\\t\\tvar boneInverses = this.boneInverses;\\r\\n\\t\\t\\t\\tvar boneMatrices = this.boneMatrices;\\r\\n\\t\\t\\t\\tvar boneTexture = this.boneTexture;\\r\\n\\r\\n\\t\\t\\t\\t// flatten bone matrices to array\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// compute the offset between the current and the original transform\\r\\n\\r\\n\\t\\t\\t\\t\\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\\r\\n\\r\\n\\t\\t\\t\\t\\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\\r\\n\\t\\t\\t\\t\\toffsetMatrix.toArray( boneMatrices, i * 16 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( boneTexture !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tboneTexture.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )(),\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new Skeleton( this.bones, this.boneInverses );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author ikerr / http://verold.com\\r\\n\\t */\\r\\n\\r\\n\\tfunction Bone() {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Bone';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Bone,\\r\\n\\r\\n\\t\\tisBone: true\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mikael emtinger / http://gomo.se/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author ikerr / http://verold.com\\r\\n\\t */\\r\\n\\r\\n\\tfunction SkinnedMesh( geometry, material ) {\\r\\n\\r\\n\\t\\tMesh.call( this, geometry, material );\\r\\n\\r\\n\\t\\tthis.type = 'SkinnedMesh';\\r\\n\\r\\n\\t\\tthis.bindMode = 'attached';\\r\\n\\t\\tthis.bindMatrix = new Matrix4();\\r\\n\\t\\tthis.bindMatrixInverse = new Matrix4();\\r\\n\\r\\n\\t\\tvar bones = this.initBones();\\r\\n\\t\\tvar skeleton = new Skeleton( bones );\\r\\n\\r\\n\\t\\tthis.bind( skeleton, this.matrixWorld );\\r\\n\\r\\n\\t\\tthis.normalizeSkinWeights();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: SkinnedMesh,\\r\\n\\r\\n\\t\\tisSkinnedMesh: true,\\r\\n\\r\\n\\t\\tinitBones: function () {\\r\\n\\r\\n\\t\\t\\tvar bones = [], bone, gbone;\\r\\n\\t\\t\\tvar i, il;\\r\\n\\r\\n\\t\\t\\tif ( this.geometry && this.geometry.bones !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// first, create array of 'Bone' objects from geometry data\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgbone = this.geometry.bones[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t// create new 'Bone' object\\r\\n\\r\\n\\t\\t\\t\\t\\tbone = new Bone();\\r\\n\\t\\t\\t\\t\\tbones.push( bone );\\r\\n\\r\\n\\t\\t\\t\\t\\t// apply values\\r\\n\\r\\n\\t\\t\\t\\t\\tbone.name = gbone.name;\\r\\n\\t\\t\\t\\t\\tbone.position.fromArray( gbone.pos );\\r\\n\\t\\t\\t\\t\\tbone.quaternion.fromArray( gbone.rotq );\\r\\n\\t\\t\\t\\t\\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// second, create bone hierarchy\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgbone = this.geometry.bones[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// subsequent bones in the hierarchy\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbones[ gbone.parent ].add( bones[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// topmost bone, immediate child of the skinned mesh\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.add( bones[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// now the bones are part of the scene graph and children of the skinned mesh.\\r\\n\\t\\t\\t// let's update the corresponding matrices\\r\\n\\r\\n\\t\\t\\tthis.updateMatrixWorld( true );\\r\\n\\r\\n\\t\\t\\treturn bones;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tbind: function ( skeleton, bindMatrix ) {\\r\\n\\r\\n\\t\\t\\tthis.skeleton = skeleton;\\r\\n\\r\\n\\t\\t\\tif ( bindMatrix === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.updateMatrixWorld( true );\\r\\n\\r\\n\\t\\t\\t\\tthis.skeleton.calculateInverses();\\r\\n\\r\\n\\t\\t\\t\\tbindMatrix = this.matrixWorld;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.bindMatrix.copy( bindMatrix );\\r\\n\\t\\t\\tthis.bindMatrixInverse.getInverse( bindMatrix );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tpose: function () {\\r\\n\\r\\n\\t\\t\\tthis.skeleton.pose();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnormalizeSkinWeights: function () {\\r\\n\\r\\n\\t\\t\\tvar scale, i;\\r\\n\\r\\n\\t\\t\\tif ( this.geometry && this.geometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar sw = this.geometry.skinWeights[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tscale = 1.0 / sw.manhattanLength();\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( scale !== Infinity ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tsw.multiplyScalar( scale );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tsw.set( 1, 0, 0, 0 ); // do something reasonable\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vec = new Vector4();\\r\\n\\r\\n\\t\\t\\t\\tvar skinWeight = this.geometry.attributes.skinWeight;\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0; i < skinWeight.count; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvec.x = skinWeight.getX( i );\\r\\n\\t\\t\\t\\t\\tvec.y = skinWeight.getY( i );\\r\\n\\t\\t\\t\\t\\tvec.z = skinWeight.getZ( i );\\r\\n\\t\\t\\t\\t\\tvec.w = skinWeight.getW( i );\\r\\n\\r\\n\\t\\t\\t\\t\\tscale = 1.0 / vec.manhattanLength();\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( scale !== Infinity ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvec.multiplyScalar( scale );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvec.set( 1, 0, 0, 0 ); // do something reasonable\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateMatrixWorld: function ( force ) {\\r\\n\\r\\n\\t\\t\\tMesh.prototype.updateMatrixWorld.call( this, force );\\r\\n\\r\\n\\t\\t\\tif ( this.bindMode === 'attached' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\\r\\n\\r\\n\\t\\t\\t} else if ( this.bindMode === 'detached' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.geometry, this.material ).copy( this );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  color: <hex>,\\r\\n\\t *  opacity: <float>,\\r\\n\\t *\\r\\n\\t *  linewidth: <float>,\\r\\n\\t *  linecap: \\\"round\\\",\\r\\n\\t *  linejoin: \\\"round\\\"\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction LineBasicMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'LineBasicMaterial';\\r\\n\\r\\n\\t\\tthis.color = new Color( 0xffffff );\\r\\n\\r\\n\\t\\tthis.linewidth = 1;\\r\\n\\t\\tthis.linecap = 'round';\\r\\n\\t\\tthis.linejoin = 'round';\\r\\n\\r\\n\\t\\tthis.lights = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLineBasicMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\\r\\n\\r\\n\\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\\r\\n\\r\\n\\tLineBasicMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.color.copy( source.color );\\r\\n\\r\\n\\t\\tthis.linewidth = source.linewidth;\\r\\n\\t\\tthis.linecap = source.linecap;\\r\\n\\t\\tthis.linejoin = source.linejoin;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Line( geometry, material, mode ) {\\r\\n\\r\\n\\t\\tif ( mode === 1 ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\\r\\n\\t\\t\\treturn new LineSegments( geometry, material );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Line';\\r\\n\\r\\n\\t\\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\\r\\n\\t\\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Line,\\r\\n\\r\\n\\t\\tisLine: true,\\r\\n\\r\\n\\t\\traycast: ( function () {\\r\\n\\r\\n\\t\\t\\tvar inverseMatrix = new Matrix4();\\r\\n\\t\\t\\tvar ray = new Ray();\\r\\n\\t\\t\\tvar sphere = new Sphere();\\r\\n\\r\\n\\t\\t\\treturn function raycast( raycaster, intersects ) {\\r\\n\\r\\n\\t\\t\\t\\tvar precision = raycaster.linePrecision;\\r\\n\\t\\t\\t\\tvar precisionSq = precision * precision;\\r\\n\\r\\n\\t\\t\\t\\tvar geometry = this.geometry;\\r\\n\\t\\t\\t\\tvar matrixWorld = this.matrixWorld;\\r\\n\\r\\n\\t\\t\\t\\t// Checking boundingSphere distance to ray\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\\r\\n\\r\\n\\t\\t\\t\\tsphere.copy( geometry.boundingSphere );\\r\\n\\t\\t\\t\\tsphere.applyMatrix4( matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\\r\\n\\r\\n\\t\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\t\\tinverseMatrix.getInverse( matrixWorld );\\r\\n\\t\\t\\t\\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\\r\\n\\r\\n\\t\\t\\t\\tvar vStart = new Vector3();\\r\\n\\t\\t\\t\\tvar vEnd = new Vector3();\\r\\n\\t\\t\\t\\tvar interSegment = new Vector3();\\r\\n\\t\\t\\t\\tvar interRay = new Vector3();\\r\\n\\t\\t\\t\\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar index = geometry.index;\\r\\n\\t\\t\\t\\t\\tvar attributes = geometry.attributes;\\r\\n\\t\\t\\t\\t\\tvar positions = attributes.position.array;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar indices = index.array;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar a = indices[ i ];\\r\\n\\t\\t\\t\\t\\t\\t\\tvar b = indices[ i + 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvStart.fromArray( positions, a * 3 );\\r\\n\\t\\t\\t\\t\\t\\t\\tvEnd.fromArray( positions, b * 3 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( distSq > precisionSq ) continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( interRay );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tintersects.push( {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdistance: distance,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// What do we want? intersection point on the ray or on the segment??\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// point: raycaster.ray.at( distance ),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tindex: i,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tface: null,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfaceIndex: null,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tobject: this\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvStart.fromArray( positions, 3 * i );\\r\\n\\t\\t\\t\\t\\t\\t\\tvEnd.fromArray( positions, 3 * i + 3 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( distSq > precisionSq ) continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( interRay );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tintersects.push( {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdistance: distance,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// What do we want? intersection point on the ray or on the segment??\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// point: raycaster.ray.at( distance ),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tindex: i,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tface: null,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfaceIndex: null,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tobject: this\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( geometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar vertices = geometry.vertices;\\r\\n\\t\\t\\t\\t\\tvar nbVertices = vertices.length;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( distSq > precisionSq ) continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( interRay );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tintersects.push( {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tdistance: distance,\\r\\n\\t\\t\\t\\t\\t\\t\\t// What do we want? intersection point on the ray or on the segment??\\r\\n\\t\\t\\t\\t\\t\\t\\t// point: raycaster.ray.at( distance ),\\r\\n\\t\\t\\t\\t\\t\\t\\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\\r\\n\\t\\t\\t\\t\\t\\t\\tindex: i,\\r\\n\\t\\t\\t\\t\\t\\t\\tface: null,\\r\\n\\t\\t\\t\\t\\t\\t\\tfaceIndex: null,\\r\\n\\t\\t\\t\\t\\t\\t\\tobject: this\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}() ),\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.geometry, this.material ).copy( this );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction LineSegments( geometry, material ) {\\r\\n\\r\\n\\t\\tLine.call( this, geometry, material );\\r\\n\\r\\n\\t\\tthis.type = 'LineSegments';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: LineSegments,\\r\\n\\r\\n\\t\\tisLineSegments: true\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mgreter / http://github.com/mgreter\\r\\n\\t */\\r\\n\\r\\n\\tfunction LineLoop( geometry, material ) {\\r\\n\\r\\n\\t\\tLine.call( this, geometry, material );\\r\\n\\r\\n\\t\\tthis.type = 'LineLoop';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: LineLoop,\\r\\n\\r\\n\\t\\tisLineLoop: true,\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  color: <hex>,\\r\\n\\t *  opacity: <float>,\\r\\n\\t *  map: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  size: <float>,\\r\\n\\t *  sizeAttenuation: <bool>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction PointsMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'PointsMaterial';\\r\\n\\r\\n\\t\\tthis.color = new Color( 0xffffff );\\r\\n\\r\\n\\t\\tthis.map = null;\\r\\n\\r\\n\\t\\tthis.size = 1;\\r\\n\\t\\tthis.sizeAttenuation = true;\\r\\n\\r\\n\\t\\tthis.lights = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPointsMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tPointsMaterial.prototype.constructor = PointsMaterial;\\r\\n\\r\\n\\tPointsMaterial.prototype.isPointsMaterial = true;\\r\\n\\r\\n\\tPointsMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.color.copy( source.color );\\r\\n\\r\\n\\t\\tthis.map = source.map;\\r\\n\\r\\n\\t\\tthis.size = source.size;\\r\\n\\t\\tthis.sizeAttenuation = source.sizeAttenuation;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Points( geometry, material ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Points';\\r\\n\\r\\n\\t\\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\\r\\n\\t\\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Points,\\r\\n\\r\\n\\t\\tisPoints: true,\\r\\n\\r\\n\\t\\traycast: ( function () {\\r\\n\\r\\n\\t\\t\\tvar inverseMatrix = new Matrix4();\\r\\n\\t\\t\\tvar ray = new Ray();\\r\\n\\t\\t\\tvar sphere = new Sphere();\\r\\n\\r\\n\\t\\t\\treturn function raycast( raycaster, intersects ) {\\r\\n\\r\\n\\t\\t\\t\\tvar object = this;\\r\\n\\t\\t\\t\\tvar geometry = this.geometry;\\r\\n\\t\\t\\t\\tvar matrixWorld = this.matrixWorld;\\r\\n\\t\\t\\t\\tvar threshold = raycaster.params.Points.threshold;\\r\\n\\r\\n\\t\\t\\t\\t// Checking boundingSphere distance to ray\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\\r\\n\\r\\n\\t\\t\\t\\tsphere.copy( geometry.boundingSphere );\\r\\n\\t\\t\\t\\tsphere.applyMatrix4( matrixWorld );\\r\\n\\t\\t\\t\\tsphere.radius += threshold;\\r\\n\\r\\n\\t\\t\\t\\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\\r\\n\\r\\n\\t\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\t\\tinverseMatrix.getInverse( matrixWorld );\\r\\n\\t\\t\\t\\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\\r\\n\\r\\n\\t\\t\\t\\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\\r\\n\\t\\t\\t\\tvar localThresholdSq = localThreshold * localThreshold;\\r\\n\\t\\t\\t\\tvar position = new Vector3();\\r\\n\\r\\n\\t\\t\\t\\tfunction testPoint( point, index ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( rayPointDistanceSq < localThresholdSq ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar intersectPoint = ray.closestPointToPoint( point );\\r\\n\\t\\t\\t\\t\\t\\tintersectPoint.applyMatrix4( matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( distance < raycaster.near || distance > raycaster.far ) return;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tintersects.push( {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tdistance: distance,\\r\\n\\t\\t\\t\\t\\t\\t\\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\\r\\n\\t\\t\\t\\t\\t\\t\\tpoint: intersectPoint.clone(),\\r\\n\\t\\t\\t\\t\\t\\t\\tindex: index,\\r\\n\\t\\t\\t\\t\\t\\t\\tface: null,\\r\\n\\t\\t\\t\\t\\t\\t\\tobject: object\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar index = geometry.index;\\r\\n\\t\\t\\t\\t\\tvar attributes = geometry.attributes;\\r\\n\\t\\t\\t\\t\\tvar positions = attributes.position.array;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar indices = index.array;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar a = indices[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tposition.fromArray( positions, a * 3 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ttestPoint( position, a );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tposition.fromArray( positions, i * 3 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ttestPoint( position, i );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar vertices = geometry.vertices;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttestPoint( vertices[ i ], i );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}() ),\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor( this.geometry, this.material ).copy( this );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Group() {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Group';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Group,\\r\\n\\r\\n\\t\\tisGroup: true\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\\r\\n\\r\\n\\t\\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\\r\\n\\r\\n\\t\\tthis.generateMipmaps = false;\\r\\n\\r\\n\\t\\t// Set needsUpdate when first frame is ready\\r\\n\\r\\n\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\tfunction onLoaded() {\\r\\n\\r\\n\\t\\t\\tvideo.removeEventListener( 'loadeddata', onLoaded, false );\\r\\n\\t\\t\\tscope.needsUpdate = true;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvideo.addEventListener( 'loadeddata', onLoaded, false );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: VideoTexture,\\r\\n\\r\\n\\t\\tisVideoTexture: true,\\r\\n\\r\\n\\t\\tupdate: function () {\\r\\n\\r\\n\\t\\t\\tvar video = this.image;\\r\\n\\r\\n\\t\\t\\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\\r\\n\\r\\n\\t\\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\\r\\n\\r\\n\\t\\tthis.image = { width: width, height: height };\\r\\n\\t\\tthis.mipmaps = mipmaps;\\r\\n\\r\\n\\t\\t// no flipping for cube textures\\r\\n\\t\\t// (also flipping doesn't work for compressed textures )\\r\\n\\r\\n\\t\\tthis.flipY = false;\\r\\n\\r\\n\\t\\t// can't generate mipmaps for compressed textures\\r\\n\\t\\t// mips must be embedded in DDS files\\r\\n\\r\\n\\t\\tthis.generateMipmaps = false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCompressedTexture.prototype = Object.create( Texture.prototype );\\r\\n\\tCompressedTexture.prototype.constructor = CompressedTexture;\\r\\n\\r\\n\\tCompressedTexture.prototype.isCompressedTexture = true;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author Matt DesLauriers / @mattdesl\\r\\n\\t * @author atix / arthursilber.de\\r\\n\\t */\\r\\n\\r\\n\\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\\r\\n\\r\\n\\t\\tformat = format !== undefined ? format : DepthFormat;\\r\\n\\r\\n\\t\\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\\r\\n\\r\\n\\t\\t\\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\\r\\n\\t\\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\\r\\n\\r\\n\\t\\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\\r\\n\\r\\n\\t\\tthis.image = { width: width, height: height };\\r\\n\\r\\n\\t\\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\\r\\n\\t\\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\\r\\n\\r\\n\\t\\tthis.flipY = false;\\r\\n\\t\\tthis.generateMipmaps\\t= false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tDepthTexture.prototype = Object.create( Texture.prototype );\\r\\n\\tDepthTexture.prototype.constructor = DepthTexture;\\r\\n\\tDepthTexture.prototype.isDepthTexture = true;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\tfunction WireframeGeometry( geometry ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'WireframeGeometry';\\r\\n\\r\\n\\t\\t// buffer\\r\\n\\r\\n\\t\\tvar vertices = [];\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar i, j, l, o, ol;\\r\\n\\t\\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\\r\\n\\t\\tvar key, keys = [ 'a', 'b', 'c' ];\\r\\n\\t\\tvar vertex;\\r\\n\\r\\n\\t\\t// different logic for Geometry and BufferGeometry\\r\\n\\r\\n\\t\\tif ( geometry && geometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t// create a data structure that contains all edges without duplicates\\r\\n\\r\\n\\t\\t\\tvar faces = geometry.faces;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar face = faces[ i ];\\r\\n\\r\\n\\t\\t\\t\\tfor ( j = 0; j < 3; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tedge1 = face[ keys[ j ] ];\\r\\n\\t\\t\\t\\t\\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\\r\\n\\t\\t\\t\\t\\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\\r\\n\\t\\t\\t\\t\\tedge[ 1 ] = Math.max( edge1, edge2 );\\r\\n\\r\\n\\t\\t\\t\\t\\tkey = edge[ 0 ] + ',' + edge[ 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( edges[ key ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// generate vertices\\r\\n\\r\\n\\t\\t\\tfor ( key in edges ) {\\r\\n\\r\\n\\t\\t\\t\\te = edges[ key ];\\r\\n\\r\\n\\t\\t\\t\\tvertex = geometry.vertices[ e.index1 ];\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\tvertex = geometry.vertices[ e.index2 ];\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} else if ( geometry && geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\tvar position, indices, groups;\\r\\n\\t\\t\\tvar group, start, count;\\r\\n\\t\\t\\tvar index1, index2;\\r\\n\\r\\n\\t\\t\\tvertex = new Vector3();\\r\\n\\r\\n\\t\\t\\tif ( geometry.index !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t// indexed BufferGeometry\\r\\n\\r\\n\\t\\t\\t\\tposition = geometry.attributes.position;\\r\\n\\t\\t\\t\\tindices = geometry.index;\\r\\n\\t\\t\\t\\tgroups = geometry.groups;\\r\\n\\r\\n\\t\\t\\t\\tif ( groups.length === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// create a data structure that contains all eges without duplicates\\r\\n\\r\\n\\t\\t\\t\\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tgroup = groups[ o ];\\r\\n\\r\\n\\t\\t\\t\\t\\tstart = group.start;\\r\\n\\t\\t\\t\\t\\tcount = group.count;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( j = 0; j < 3; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tedge1 = indices.getX( i + j );\\r\\n\\t\\t\\t\\t\\t\\t\\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\\r\\n\\t\\t\\t\\t\\t\\t\\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\\r\\n\\t\\t\\t\\t\\t\\t\\tedge[ 1 ] = Math.max( edge1, edge2 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tkey = edge[ 0 ] + ',' + edge[ 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( edges[ key ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// generate vertices\\r\\n\\r\\n\\t\\t\\t\\tfor ( key in edges ) {\\r\\n\\r\\n\\t\\t\\t\\t\\te = edges[ key ];\\r\\n\\r\\n\\t\\t\\t\\t\\tvertex.fromBufferAttribute( position, e.index1 );\\r\\n\\t\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t\\tvertex.fromBufferAttribute( position, e.index2 );\\r\\n\\t\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// non-indexed BufferGeometry\\r\\n\\r\\n\\t\\t\\t\\tposition = geometry.attributes.position;\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( j = 0; j < 3; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// three edges per triangle, an edge is represented as (index1, index2)\\r\\n\\t\\t\\t\\t\\t\\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tindex1 = 3 * i + j;\\r\\n\\t\\t\\t\\t\\t\\tvertex.fromBufferAttribute( position, index1 );\\r\\n\\t\\t\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\\r\\n\\t\\t\\t\\t\\t\\tvertex.fromBufferAttribute( position, index2 );\\r\\n\\t\\t\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tWireframeGeometry.prototype.constructor = WireframeGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / https://github.com/zz85\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t *\\r\\n\\t * Parametric Surfaces Geometry\\r\\n\\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\\r\\n\\t */\\r\\n\\r\\n\\t// ParametricGeometry\\r\\n\\r\\n\\tfunction ParametricGeometry( func, slices, stacks ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'ParametricGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tfunc: func,\\r\\n\\t\\t\\tslices: slices,\\r\\n\\t\\t\\tstacks: stacks\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tParametricGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tParametricGeometry.prototype.constructor = ParametricGeometry;\\r\\n\\r\\n\\t// ParametricBufferGeometry\\r\\n\\r\\n\\tfunction ParametricBufferGeometry( func, slices, stacks ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'ParametricBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tfunc: func,\\r\\n\\t\\t\\tslices: slices,\\r\\n\\t\\t\\tstacks: stacks\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\tvar EPS = 0.00001;\\r\\n\\r\\n\\t\\tvar normal = new Vector3();\\r\\n\\r\\n\\t\\tvar p0 = new Vector3(), p1 = new Vector3();\\r\\n\\t\\tvar pu = new Vector3(), pv = new Vector3();\\r\\n\\r\\n\\t\\tvar i, j;\\r\\n\\r\\n\\t\\t// generate vertices, normals and uvs\\r\\n\\r\\n\\t\\tvar sliceCount = slices + 1;\\r\\n\\r\\n\\t\\tfor ( i = 0; i <= stacks; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar v = i / stacks;\\r\\n\\r\\n\\t\\t\\tfor ( j = 0; j <= slices; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar u = j / slices;\\r\\n\\r\\n\\t\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\t\\tp0 = func( u, v, p0 );\\r\\n\\t\\t\\t\\tvertices.push( p0.x, p0.y, p0.z );\\r\\n\\r\\n\\t\\t\\t\\t// normal\\r\\n\\r\\n\\t\\t\\t\\t// approximate tangent vectors via finite differences\\r\\n\\r\\n\\t\\t\\t\\tif ( u - EPS >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tp1 = func( u - EPS, v, p1 );\\r\\n\\t\\t\\t\\t\\tpu.subVectors( p0, p1 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tp1 = func( u + EPS, v, p1 );\\r\\n\\t\\t\\t\\t\\tpu.subVectors( p1, p0 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( v - EPS >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tp1 = func( u, v - EPS, p1 );\\r\\n\\t\\t\\t\\t\\tpv.subVectors( p0, p1 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tp1 = func( u, v + EPS, p1 );\\r\\n\\t\\t\\t\\t\\tpv.subVectors( p1, p0 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// cross product of tangent vectors returns surface normal\\r\\n\\r\\n\\t\\t\\t\\tnormal.crossVectors( pu, pv ).normalize();\\r\\n\\t\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\r\\n\\r\\n\\t\\t\\t\\t// uv\\r\\n\\r\\n\\t\\t\\t\\tuvs.push( u, v );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// generate indices\\r\\n\\r\\n\\t\\tfor ( i = 0; i < stacks; i ++ ) {\\r\\n\\r\\n\\t\\t\\tfor ( j = 0; j < slices; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar a = i * sliceCount + j;\\r\\n\\t\\t\\t\\tvar b = i * sliceCount + j + 1;\\r\\n\\t\\t\\t\\tvar c = ( i + 1 ) * sliceCount + j + 1;\\r\\n\\t\\t\\t\\tvar d = ( i + 1 ) * sliceCount + j;\\r\\n\\r\\n\\t\\t\\t\\t// faces one and two\\r\\n\\r\\n\\t\\t\\t\\tindices.push( a, b, d );\\r\\n\\t\\t\\t\\tindices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author clockworkgeek / https://github.com/clockworkgeek\\r\\n\\t * @author timothypratley / https://github.com/timothypratley\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// PolyhedronGeometry\\r\\n\\r\\n\\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'PolyhedronGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tvertices: vertices,\\r\\n\\t\\t\\tindices: indices,\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\\r\\n\\r\\n\\t// PolyhedronBufferGeometry\\r\\n\\r\\n\\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'PolyhedronBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tvertices: vertices,\\r\\n\\t\\t\\tindices: indices,\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tradius = radius || 1;\\r\\n\\t\\tdetail = detail || 0;\\r\\n\\r\\n\\t\\t// default buffer data\\r\\n\\r\\n\\t\\tvar vertexBuffer = [];\\r\\n\\t\\tvar uvBuffer = [];\\r\\n\\r\\n\\t\\t// the subdivision creates the vertex buffer data\\r\\n\\r\\n\\t\\tsubdivide( detail );\\r\\n\\r\\n\\t\\t// all vertices should lie on a conceptual sphere with a given radius\\r\\n\\r\\n\\t\\tappplyRadius( radius );\\r\\n\\r\\n\\t\\t// finally, create the uv data\\r\\n\\r\\n\\t\\tgenerateUVs();\\r\\n\\r\\n\\t\\t// build non-indexed geometry\\r\\n\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\\r\\n\\r\\n\\t\\tif ( detail === 0 ) {\\r\\n\\r\\n\\t\\t\\tthis.computeVertexNormals(); // flat normals\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tthis.normalizeNormals(); // smooth normals\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// helper functions\\r\\n\\r\\n\\t\\tfunction subdivide( detail ) {\\r\\n\\r\\n\\t\\t\\tvar a = new Vector3();\\r\\n\\t\\t\\tvar b = new Vector3();\\r\\n\\t\\t\\tvar c = new Vector3();\\r\\n\\r\\n\\t\\t\\t// iterate over all faces and apply a subdivison with the given detail value\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < indices.length; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t// get the vertices of the face\\r\\n\\r\\n\\t\\t\\t\\tgetVertexByIndex( indices[ i + 0 ], a );\\r\\n\\t\\t\\t\\tgetVertexByIndex( indices[ i + 1 ], b );\\r\\n\\t\\t\\t\\tgetVertexByIndex( indices[ i + 2 ], c );\\r\\n\\r\\n\\t\\t\\t\\t// perform subdivision\\r\\n\\r\\n\\t\\t\\t\\tsubdivideFace( a, b, c, detail );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction subdivideFace( a, b, c, detail ) {\\r\\n\\r\\n\\t\\t\\tvar cols = Math.pow( 2, detail );\\r\\n\\r\\n\\t\\t\\t// we use this multidimensional array as a data structure for creating the subdivision\\r\\n\\r\\n\\t\\t\\tvar v = [];\\r\\n\\r\\n\\t\\t\\tvar i, j;\\r\\n\\r\\n\\t\\t\\t// construct all of the vertices for this subdivision\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i <= cols; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tv[ i ] = [];\\r\\n\\r\\n\\t\\t\\t\\tvar aj = a.clone().lerp( c, i / cols );\\r\\n\\t\\t\\t\\tvar bj = b.clone().lerp( c, i / cols );\\r\\n\\r\\n\\t\\t\\t\\tvar rows = cols - i;\\r\\n\\r\\n\\t\\t\\t\\tfor ( j = 0; j <= rows; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( j === 0 && i === cols ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tv[ i ][ j ] = aj;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// construct all of the faces\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i < cols; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar k = Math.floor( j / 2 );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( j % 2 === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tpushVertex( v[ i ][ k + 1 ] );\\r\\n\\t\\t\\t\\t\\t\\tpushVertex( v[ i + 1 ][ k ] );\\r\\n\\t\\t\\t\\t\\t\\tpushVertex( v[ i ][ k ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tpushVertex( v[ i ][ k + 1 ] );\\r\\n\\t\\t\\t\\t\\t\\tpushVertex( v[ i + 1 ][ k + 1 ] );\\r\\n\\t\\t\\t\\t\\t\\tpushVertex( v[ i + 1 ][ k ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction appplyRadius( radius ) {\\r\\n\\r\\n\\t\\t\\tvar vertex = new Vector3();\\r\\n\\r\\n\\t\\t\\t// iterate over the entire buffer and apply the radius to each vertex\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\tvertex.x = vertexBuffer[ i + 0 ];\\r\\n\\t\\t\\t\\tvertex.y = vertexBuffer[ i + 1 ];\\r\\n\\t\\t\\t\\tvertex.z = vertexBuffer[ i + 2 ];\\r\\n\\r\\n\\t\\t\\t\\tvertex.normalize().multiplyScalar( radius );\\r\\n\\r\\n\\t\\t\\t\\tvertexBuffer[ i + 0 ] = vertex.x;\\r\\n\\t\\t\\t\\tvertexBuffer[ i + 1 ] = vertex.y;\\r\\n\\t\\t\\t\\tvertexBuffer[ i + 2 ] = vertex.z;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction generateUVs() {\\r\\n\\r\\n\\t\\t\\tvar vertex = new Vector3();\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\tvertex.x = vertexBuffer[ i + 0 ];\\r\\n\\t\\t\\t\\tvertex.y = vertexBuffer[ i + 1 ];\\r\\n\\t\\t\\t\\tvertex.z = vertexBuffer[ i + 2 ];\\r\\n\\r\\n\\t\\t\\t\\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\\r\\n\\t\\t\\t\\tvar v = inclination( vertex ) / Math.PI + 0.5;\\r\\n\\t\\t\\t\\tuvBuffer.push( u, 1 - v );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tcorrectUVs();\\r\\n\\r\\n\\t\\t\\tcorrectSeam();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction correctSeam() {\\r\\n\\r\\n\\t\\t\\t// handle case when face straddles the seam, see #3269\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\\r\\n\\r\\n\\t\\t\\t\\t// uv data of a single face\\r\\n\\r\\n\\t\\t\\t\\tvar x0 = uvBuffer[ i + 0 ];\\r\\n\\t\\t\\t\\tvar x1 = uvBuffer[ i + 2 ];\\r\\n\\t\\t\\t\\tvar x2 = uvBuffer[ i + 4 ];\\r\\n\\r\\n\\t\\t\\t\\tvar max = Math.max( x0, x1, x2 );\\r\\n\\t\\t\\t\\tvar min = Math.min( x0, x1, x2 );\\r\\n\\r\\n\\t\\t\\t\\t// 0.9 is somewhat arbitrary\\r\\n\\r\\n\\t\\t\\t\\tif ( max > 0.9 && min < 0.1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\\r\\n\\t\\t\\t\\t\\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\\r\\n\\t\\t\\t\\t\\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction pushVertex( vertex ) {\\r\\n\\r\\n\\t\\t\\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction getVertexByIndex( index, vertex ) {\\r\\n\\r\\n\\t\\t\\tvar stride = index * 3;\\r\\n\\r\\n\\t\\t\\tvertex.x = vertices[ stride + 0 ];\\r\\n\\t\\t\\tvertex.y = vertices[ stride + 1 ];\\r\\n\\t\\t\\tvertex.z = vertices[ stride + 2 ];\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction correctUVs() {\\r\\n\\r\\n\\t\\t\\tvar a = new Vector3();\\r\\n\\t\\t\\tvar b = new Vector3();\\r\\n\\t\\t\\tvar c = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar centroid = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar uvA = new Vector2();\\r\\n\\t\\t\\tvar uvB = new Vector2();\\r\\n\\t\\t\\tvar uvC = new Vector2();\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\\r\\n\\r\\n\\t\\t\\t\\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\\r\\n\\t\\t\\t\\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\\r\\n\\t\\t\\t\\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\\r\\n\\r\\n\\t\\t\\t\\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\\r\\n\\t\\t\\t\\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\\r\\n\\t\\t\\t\\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\\r\\n\\r\\n\\t\\t\\t\\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\\r\\n\\r\\n\\t\\t\\t\\tvar azi = azimuth( centroid );\\r\\n\\r\\n\\t\\t\\t\\tcorrectUV( uvA, j + 0, a, azi );\\r\\n\\t\\t\\t\\tcorrectUV( uvB, j + 2, b, azi );\\r\\n\\t\\t\\t\\tcorrectUV( uvC, j + 4, c, azi );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction correctUV( uv, stride, vector, azimuth ) {\\r\\n\\r\\n\\t\\t\\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\\r\\n\\r\\n\\t\\t\\t\\tuvBuffer[ stride ] = uv.x - 1;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\\r\\n\\r\\n\\t\\t\\t\\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Angle around the Y axis, counter-clockwise when looking from above.\\r\\n\\r\\n\\t\\tfunction azimuth( vector ) {\\r\\n\\r\\n\\t\\t\\treturn Math.atan2( vector.z, - vector.x );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t// Angle above the XZ plane.\\r\\n\\r\\n\\t\\tfunction inclination( vector ) {\\r\\n\\r\\n\\t\\t\\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author timothypratley / https://github.com/timothypratley\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// TetrahedronGeometry\\r\\n\\r\\n\\tfunction TetrahedronGeometry( radius, detail ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'TetrahedronGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\\r\\n\\r\\n\\t// TetrahedronBufferGeometry\\r\\n\\r\\n\\tfunction TetrahedronBufferGeometry( radius, detail ) {\\r\\n\\r\\n\\t\\tvar vertices = [\\r\\n\\t\\t\\t1, 1, 1, \\t- 1, - 1, 1, \\t- 1, 1, - 1, \\t1, - 1, - 1\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tvar indices = [\\r\\n\\t\\t\\t2, 1, 0, \\t0, 3, 2,\\t1, 3, 0,\\t2, 3, 1\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\\r\\n\\r\\n\\t\\tthis.type = 'TetrahedronBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\\r\\n\\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author timothypratley / https://github.com/timothypratley\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// OctahedronGeometry\\r\\n\\r\\n\\tfunction OctahedronGeometry( radius, detail ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'OctahedronGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\\r\\n\\r\\n\\t// OctahedronBufferGeometry\\r\\n\\r\\n\\tfunction OctahedronBufferGeometry( radius, detail ) {\\r\\n\\r\\n\\t\\tvar vertices = [\\r\\n\\t\\t\\t1, 0, 0, \\t- 1, 0, 0,\\t0, 1, 0,\\r\\n\\t\\t\\t0, - 1, 0, \\t0, 0, 1,\\t0, 0, - 1\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tvar indices = [\\r\\n\\t\\t\\t0, 2, 4,\\t0, 4, 3,\\t0, 3, 5,\\r\\n\\t\\t\\t0, 5, 2,\\t1, 2, 5,\\t1, 5, 3,\\r\\n\\t\\t\\t1, 3, 4,\\t1, 4, 2\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\\r\\n\\r\\n\\t\\tthis.type = 'OctahedronBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\\r\\n\\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author timothypratley / https://github.com/timothypratley\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// IcosahedronGeometry\\r\\n\\r\\n\\tfunction IcosahedronGeometry( radius, detail ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'IcosahedronGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\\r\\n\\r\\n\\t// IcosahedronBufferGeometry\\r\\n\\r\\n\\tfunction IcosahedronBufferGeometry( radius, detail ) {\\r\\n\\r\\n\\t\\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\\r\\n\\r\\n\\t\\tvar vertices = [\\r\\n\\t\\t\\t- 1, t, 0, \\t1, t, 0, \\t- 1, - t, 0, \\t1, - t, 0,\\r\\n\\t\\t\\t 0, - 1, t, \\t0, 1, t,\\t0, - 1, - t, \\t0, 1, - t,\\r\\n\\t\\t\\t t, 0, - 1, \\tt, 0, 1, \\t- t, 0, - 1, \\t- t, 0, 1\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tvar indices = [\\r\\n\\t\\t\\t 0, 11, 5, \\t0, 5, 1, \\t0, 1, 7, \\t0, 7, 10, \\t0, 10, 11,\\r\\n\\t\\t\\t 1, 5, 9, \\t5, 11, 4,\\t11, 10, 2,\\t10, 7, 6,\\t7, 1, 8,\\r\\n\\t\\t\\t 3, 9, 4, \\t3, 4, 2,\\t3, 2, 6,\\t3, 6, 8,\\t3, 8, 9,\\r\\n\\t\\t\\t 4, 9, 5, \\t2, 4, 11,\\t6, 2, 10,\\t8, 6, 7,\\t9, 8, 1\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\\r\\n\\r\\n\\t\\tthis.type = 'IcosahedronBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\\r\\n\\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author Abe Pazos / https://hamoid.com\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// DodecahedronGeometry\\r\\n\\r\\n\\tfunction DodecahedronGeometry( radius, detail ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'DodecahedronGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\\r\\n\\r\\n\\t// DodecahedronBufferGeometry\\r\\n\\r\\n\\tfunction DodecahedronBufferGeometry( radius, detail ) {\\r\\n\\r\\n\\t\\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\\r\\n\\t\\tvar r = 1 / t;\\r\\n\\r\\n\\t\\tvar vertices = [\\r\\n\\r\\n\\t\\t\\t// (±1, ±1, ±1)\\r\\n\\t\\t\\t- 1, - 1, - 1,\\t- 1, - 1, 1,\\r\\n\\t\\t\\t- 1, 1, - 1, - 1, 1, 1,\\r\\n\\t\\t\\t1, - 1, - 1, 1, - 1, 1,\\r\\n\\t\\t\\t1, 1, - 1, 1, 1, 1,\\r\\n\\r\\n\\t\\t\\t// (0, ±1/φ, ±φ)\\r\\n\\t\\t\\t 0, - r, - t, 0, - r, t,\\r\\n\\t\\t\\t 0, r, - t, 0, r, t,\\r\\n\\r\\n\\t\\t\\t// (±1/φ, ±φ, 0)\\r\\n\\t\\t\\t- r, - t, 0, - r, t, 0,\\r\\n\\t\\t\\t r, - t, 0, r, t, 0,\\r\\n\\r\\n\\t\\t\\t// (±φ, 0, ±1/φ)\\r\\n\\t\\t\\t- t, 0, - r, t, 0, - r,\\r\\n\\t\\t\\t- t, 0, r, t, 0, r\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tvar indices = [\\r\\n\\t\\t\\t3, 11, 7, \\t3, 7, 15, \\t3, 15, 13,\\r\\n\\t\\t\\t7, 19, 17, \\t7, 17, 6, \\t7, 6, 15,\\r\\n\\t\\t\\t17, 4, 8, \\t17, 8, 10, \\t17, 10, 6,\\r\\n\\t\\t\\t8, 0, 16, \\t8, 16, 2, \\t8, 2, 10,\\r\\n\\t\\t\\t0, 12, 1, \\t0, 1, 18, \\t0, 18, 16,\\r\\n\\t\\t\\t6, 10, 2, \\t6, 2, 13, \\t6, 13, 15,\\r\\n\\t\\t\\t2, 16, 18, \\t2, 18, 3, \\t2, 3, 13,\\r\\n\\t\\t\\t18, 1, 9, \\t18, 9, 11, \\t18, 11, 3,\\r\\n\\t\\t\\t4, 14, 12, \\t4, 12, 0, \\t4, 0, 8,\\r\\n\\t\\t\\t11, 9, 5, \\t11, 5, 19, \\t11, 19, 7,\\r\\n\\t\\t\\t19, 5, 14, \\t19, 14, 4, \\t19, 4, 17,\\r\\n\\t\\t\\t1, 12, 14, \\t1, 14, 5, \\t1, 5, 9\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\\r\\n\\r\\n\\t\\tthis.type = 'DodecahedronBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tdetail: detail\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\\r\\n\\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author oosmoxiecode / https://github.com/oosmoxiecode\\r\\n\\t * @author WestLangley / https://github.com/WestLangley\\r\\n\\t * @author zz85 / https://github.com/zz85\\r\\n\\t * @author miningold / https://github.com/miningold\\r\\n\\t * @author jonobr1 / https://github.com/jonobr1\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t *\\r\\n\\t */\\r\\n\\r\\n\\t// TubeGeometry\\r\\n\\r\\n\\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'TubeGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tpath: path,\\r\\n\\t\\t\\ttubularSegments: tubularSegments,\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\tclosed: closed\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\\r\\n\\r\\n\\t\\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\\r\\n\\r\\n\\t\\t// expose internals\\r\\n\\r\\n\\t\\tthis.tangents = bufferGeometry.tangents;\\r\\n\\t\\tthis.normals = bufferGeometry.normals;\\r\\n\\t\\tthis.binormals = bufferGeometry.binormals;\\r\\n\\r\\n\\t\\t// create geometry\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( bufferGeometry );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTubeGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tTubeGeometry.prototype.constructor = TubeGeometry;\\r\\n\\r\\n\\t// TubeBufferGeometry\\r\\n\\r\\n\\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'TubeBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tpath: path,\\r\\n\\t\\t\\ttubularSegments: tubularSegments,\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\tclosed: closed\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\ttubularSegments = tubularSegments || 64;\\r\\n\\t\\tradius = radius || 1;\\r\\n\\t\\tradialSegments = radialSegments || 8;\\r\\n\\t\\tclosed = closed || false;\\r\\n\\r\\n\\t\\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\\r\\n\\r\\n\\t\\t// expose internals\\r\\n\\r\\n\\t\\tthis.tangents = frames.tangents;\\r\\n\\t\\tthis.normals = frames.normals;\\r\\n\\t\\tthis.binormals = frames.binormals;\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar vertex = new Vector3();\\r\\n\\t\\tvar normal = new Vector3();\\r\\n\\t\\tvar uv = new Vector2();\\r\\n\\t\\tvar P = new Vector3();\\r\\n\\r\\n\\t\\tvar i, j;\\r\\n\\r\\n\\t\\t// buffer\\r\\n\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\t\\tvar indices = [];\\r\\n\\r\\n\\t\\t// create buffer data\\r\\n\\r\\n\\t\\tgenerateBufferData();\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t\\t// functions\\r\\n\\r\\n\\t\\tfunction generateBufferData() {\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i < tubularSegments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tgenerateSegment( i );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// if the geometry is not closed, generate the last row of vertices and normals\\r\\n\\t\\t\\t// at the regular position on the given path\\r\\n\\t\\t\\t//\\r\\n\\t\\t\\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\\r\\n\\r\\n\\t\\t\\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\\r\\n\\r\\n\\t\\t\\t// uvs are generated in a separate function.\\r\\n\\t\\t\\t// this makes it easy compute correct values for closed geometries\\r\\n\\r\\n\\t\\t\\tgenerateUVs();\\r\\n\\r\\n\\t\\t\\t// finally create faces\\r\\n\\r\\n\\t\\t\\tgenerateIndices();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction generateSegment( i ) {\\r\\n\\r\\n\\t\\t\\t// we use getPointAt to sample evenly distributed points from the given path\\r\\n\\r\\n\\t\\t\\tP = path.getPointAt( i / tubularSegments, P );\\r\\n\\r\\n\\t\\t\\t// retrieve corresponding normal and binormal\\r\\n\\r\\n\\t\\t\\tvar N = frames.normals[ i ];\\r\\n\\t\\t\\tvar B = frames.binormals[ i ];\\r\\n\\r\\n\\t\\t\\t// generate normals and vertices for the current segment\\r\\n\\r\\n\\t\\t\\tfor ( j = 0; j <= radialSegments; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar v = j / radialSegments * Math.PI * 2;\\r\\n\\r\\n\\t\\t\\t\\tvar sin = Math.sin( v );\\r\\n\\t\\t\\t\\tvar cos = - Math.cos( v );\\r\\n\\r\\n\\t\\t\\t\\t// normal\\r\\n\\r\\n\\t\\t\\t\\tnormal.x = ( cos * N.x + sin * B.x );\\r\\n\\t\\t\\t\\tnormal.y = ( cos * N.y + sin * B.y );\\r\\n\\t\\t\\t\\tnormal.z = ( cos * N.z + sin * B.z );\\r\\n\\t\\t\\t\\tnormal.normalize();\\r\\n\\r\\n\\t\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\r\\n\\r\\n\\t\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\t\\tvertex.x = P.x + radius * normal.x;\\r\\n\\t\\t\\t\\tvertex.y = P.y + radius * normal.y;\\r\\n\\t\\t\\t\\tvertex.z = P.z + radius * normal.z;\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction generateIndices() {\\r\\n\\r\\n\\t\\t\\tfor ( j = 1; j <= tubularSegments; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 1; i <= radialSegments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\\r\\n\\t\\t\\t\\t\\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\\r\\n\\t\\t\\t\\t\\tvar c = ( radialSegments + 1 ) * j + i;\\r\\n\\t\\t\\t\\t\\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\\r\\n\\r\\n\\t\\t\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\t\\t\\tindices.push( a, b, d );\\r\\n\\t\\t\\t\\t\\tindices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction generateUVs() {\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i <= tubularSegments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( j = 0; j <= radialSegments; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tuv.x = i / tubularSegments;\\r\\n\\t\\t\\t\\t\\tuv.y = j / radialSegments;\\r\\n\\r\\n\\t\\t\\t\\t\\tuvs.push( uv.x, uv.y );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author oosmoxiecode\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t *\\r\\n\\t * based on http://www.blackpawn.com/texts/pqtorus/\\r\\n\\t */\\r\\n\\r\\n\\t// TorusKnotGeometry\\r\\n\\r\\n\\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'TorusKnotGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\ttube: tube,\\r\\n\\t\\t\\ttubularSegments: tubularSegments,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\tp: p,\\r\\n\\t\\t\\tq: q\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\\r\\n\\r\\n\\t// TorusKnotBufferGeometry\\r\\n\\r\\n\\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'TorusKnotBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\ttube: tube,\\r\\n\\t\\t\\ttubularSegments: tubularSegments,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\tp: p,\\r\\n\\t\\t\\tq: q\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tradius = radius || 1;\\r\\n\\t\\ttube = tube || 0.4;\\r\\n\\t\\ttubularSegments = Math.floor( tubularSegments ) || 64;\\r\\n\\t\\tradialSegments = Math.floor( radialSegments ) || 8;\\r\\n\\t\\tp = p || 2;\\r\\n\\t\\tq = q || 3;\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar i, j;\\r\\n\\r\\n\\t\\tvar vertex = new Vector3();\\r\\n\\t\\tvar normal = new Vector3();\\r\\n\\r\\n\\t\\tvar P1 = new Vector3();\\r\\n\\t\\tvar P2 = new Vector3();\\r\\n\\r\\n\\t\\tvar B = new Vector3();\\r\\n\\t\\tvar T = new Vector3();\\r\\n\\t\\tvar N = new Vector3();\\r\\n\\r\\n\\t\\t// generate vertices, normals and uvs\\r\\n\\r\\n\\t\\tfor ( i = 0; i <= tubularSegments; ++ i ) {\\r\\n\\r\\n\\t\\t\\t// the radian \\\"u\\\" is used to calculate the position on the torus curve of the current tubular segement\\r\\n\\r\\n\\t\\t\\tvar u = i / tubularSegments * p * Math.PI * 2;\\r\\n\\r\\n\\t\\t\\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\\r\\n\\t\\t\\t// these points are used to create a special \\\"coordinate space\\\", which is necessary to calculate the correct vertex positions\\r\\n\\r\\n\\t\\t\\tcalculatePositionOnCurve( u, p, q, radius, P1 );\\r\\n\\t\\t\\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\\r\\n\\r\\n\\t\\t\\t// calculate orthonormal basis\\r\\n\\r\\n\\t\\t\\tT.subVectors( P2, P1 );\\r\\n\\t\\t\\tN.addVectors( P2, P1 );\\r\\n\\t\\t\\tB.crossVectors( T, N );\\r\\n\\t\\t\\tN.crossVectors( B, T );\\r\\n\\r\\n\\t\\t\\t// normalize B, N. T can be ignored, we don't use it\\r\\n\\r\\n\\t\\t\\tB.normalize();\\r\\n\\t\\t\\tN.normalize();\\r\\n\\r\\n\\t\\t\\tfor ( j = 0; j <= radialSegments; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\\r\\n\\t\\t\\t\\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\\r\\n\\r\\n\\t\\t\\t\\tvar v = j / radialSegments * Math.PI * 2;\\r\\n\\t\\t\\t\\tvar cx = - tube * Math.cos( v );\\r\\n\\t\\t\\t\\tvar cy = tube * Math.sin( v );\\r\\n\\r\\n\\t\\t\\t\\t// now calculate the final vertex position.\\r\\n\\t\\t\\t\\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\\r\\n\\r\\n\\t\\t\\t\\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\\r\\n\\t\\t\\t\\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\\r\\n\\t\\t\\t\\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\\r\\n\\r\\n\\t\\t\\t\\tnormal.subVectors( vertex, P1 ).normalize();\\r\\n\\r\\n\\t\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\r\\n\\r\\n\\t\\t\\t\\t// uv\\r\\n\\r\\n\\t\\t\\t\\tuvs.push( i / tubularSegments );\\r\\n\\t\\t\\t\\tuvs.push( j / radialSegments );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// generate indices\\r\\n\\r\\n\\t\\tfor ( j = 1; j <= tubularSegments; j ++ ) {\\r\\n\\r\\n\\t\\t\\tfor ( i = 1; i <= radialSegments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t// indices\\r\\n\\r\\n\\t\\t\\t\\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\\r\\n\\t\\t\\t\\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\\r\\n\\t\\t\\t\\tvar c = ( radialSegments + 1 ) * j + i;\\r\\n\\t\\t\\t\\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\\r\\n\\r\\n\\t\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\t\\tindices.push( a, b, d );\\r\\n\\t\\t\\t\\tindices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t\\t// this function calculates the current position on the torus curve\\r\\n\\r\\n\\t\\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\\r\\n\\r\\n\\t\\t\\tvar cu = Math.cos( u );\\r\\n\\t\\t\\tvar su = Math.sin( u );\\r\\n\\t\\t\\tvar quOverP = q / p * u;\\r\\n\\t\\t\\tvar cs = Math.cos( quOverP );\\r\\n\\r\\n\\t\\t\\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\\r\\n\\t\\t\\tposition.y = radius * ( 2 + cs ) * su * 0.5;\\r\\n\\t\\t\\tposition.z = radius * Math.sin( quOverP ) * 0.5;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author oosmoxiecode\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// TorusGeometry\\r\\n\\r\\n\\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'TorusGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\ttube: tube,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\ttubularSegments: tubularSegments,\\r\\n\\t\\t\\tarc: arc\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTorusGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tTorusGeometry.prototype.constructor = TorusGeometry;\\r\\n\\r\\n\\t// TorusBufferGeometry\\r\\n\\r\\n\\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'TorusBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\ttube: tube,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\ttubularSegments: tubularSegments,\\r\\n\\t\\t\\tarc: arc\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tradius = radius || 1;\\r\\n\\t\\ttube = tube || 0.4;\\r\\n\\t\\tradialSegments = Math.floor( radialSegments ) || 8;\\r\\n\\t\\ttubularSegments = Math.floor( tubularSegments ) || 6;\\r\\n\\t\\tarc = arc || Math.PI * 2;\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar center = new Vector3();\\r\\n\\t\\tvar vertex = new Vector3();\\r\\n\\t\\tvar normal = new Vector3();\\r\\n\\r\\n\\t\\tvar j, i;\\r\\n\\r\\n\\t\\t// generate vertices, normals and uvs\\r\\n\\r\\n\\t\\tfor ( j = 0; j <= radialSegments; j ++ ) {\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i <= tubularSegments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar u = i / tubularSegments * arc;\\r\\n\\t\\t\\t\\tvar v = j / radialSegments * Math.PI * 2;\\r\\n\\r\\n\\t\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\t\\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\\r\\n\\t\\t\\t\\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\\r\\n\\t\\t\\t\\tvertex.z = tube * Math.sin( v );\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t// normal\\r\\n\\r\\n\\t\\t\\t\\tcenter.x = radius * Math.cos( u );\\r\\n\\t\\t\\t\\tcenter.y = radius * Math.sin( u );\\r\\n\\t\\t\\t\\tnormal.subVectors( vertex, center ).normalize();\\r\\n\\r\\n\\t\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\r\\n\\r\\n\\t\\t\\t\\t// uv\\r\\n\\r\\n\\t\\t\\t\\tuvs.push( i / tubularSegments );\\r\\n\\t\\t\\t\\tuvs.push( j / radialSegments );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// generate indices\\r\\n\\r\\n\\t\\tfor ( j = 1; j <= radialSegments; j ++ ) {\\r\\n\\r\\n\\t\\t\\tfor ( i = 1; i <= tubularSegments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t// indices\\r\\n\\r\\n\\t\\t\\t\\tvar a = ( tubularSegments + 1 ) * j + i - 1;\\r\\n\\t\\t\\t\\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\\r\\n\\t\\t\\t\\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\\r\\n\\t\\t\\t\\tvar d = ( tubularSegments + 1 ) * j + i;\\r\\n\\r\\n\\t\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\t\\tindices.push( a, b, d );\\r\\n\\t\\t\\t\\tindices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t * Port from https://github.com/mapbox/earcut (v2.1.2)\\r\\n\\t */\\r\\n\\r\\n\\tvar Earcut = {\\r\\n\\r\\n\\t\\ttriangulate: function ( data, holeIndices, dim ) {\\r\\n\\r\\n\\t\\t\\tdim = dim || 2;\\r\\n\\r\\n\\t\\t\\tvar hasHoles = holeIndices && holeIndices.length,\\r\\n\\t\\t\\t\\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\\r\\n\\t\\t\\t\\touterNode = linkedList( data, 0, outerLen, dim, true ),\\r\\n\\t\\t\\t\\ttriangles = [];\\r\\n\\r\\n\\t\\t\\tif ( ! outerNode ) return triangles;\\r\\n\\r\\n\\t\\t\\tvar minX, minY, maxX, maxY, x, y, invSize;\\r\\n\\r\\n\\t\\t\\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\\r\\n\\r\\n\\t\\t\\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\\r\\n\\r\\n\\t\\t\\tif ( data.length > 80 * dim ) {\\r\\n\\r\\n\\t\\t\\t\\tminX = maxX = data[ 0 ];\\r\\n\\t\\t\\t\\tminY = maxY = data[ 1 ];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = dim; i < outerLen; i += dim ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tx = data[ i ];\\r\\n\\t\\t\\t\\t\\ty = data[ i + 1 ];\\r\\n\\t\\t\\t\\t\\tif ( x < minX ) minX = x;\\r\\n\\t\\t\\t\\t\\tif ( y < minY ) minY = y;\\r\\n\\t\\t\\t\\t\\tif ( x > maxX ) maxX = x;\\r\\n\\t\\t\\t\\t\\tif ( y > maxY ) maxY = y;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\\r\\n\\r\\n\\t\\t\\t\\tinvSize = Math.max( maxX - minX, maxY - minY );\\r\\n\\t\\t\\t\\tinvSize = invSize !== 0 ? 1 / invSize : 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\\r\\n\\r\\n\\t\\t\\treturn triangles;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t// create a circular doubly linked list from polygon points in the specified winding order\\r\\n\\r\\n\\tfunction linkedList( data, start, end, dim, clockwise ) {\\r\\n\\r\\n\\t\\tvar i, last;\\r\\n\\r\\n\\t\\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\\r\\n\\r\\n\\t\\t\\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( last && equals( last, last.next ) ) {\\r\\n\\r\\n\\t\\t\\tremoveNode( last );\\r\\n\\t\\t\\tlast = last.next;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn last;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// eliminate colinear or duplicate points\\r\\n\\r\\n\\tfunction filterPoints( start, end ) {\\r\\n\\r\\n\\t\\tif ( ! start ) return start;\\r\\n\\t\\tif ( ! end ) end = start;\\r\\n\\r\\n\\t\\tvar p = start, again;\\r\\n\\r\\n\\t\\tdo {\\r\\n\\r\\n\\t\\t\\tagain = false;\\r\\n\\r\\n\\t\\t\\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\\r\\n\\r\\n\\t\\t\\t\\tremoveNode( p );\\r\\n\\t\\t\\t\\tp = end = p.prev;\\r\\n\\t\\t\\t\\tif ( p === p.next ) break;\\r\\n\\t\\t\\t\\tagain = true;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tp = p.next;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} while ( again || p !== end );\\r\\n\\r\\n\\t\\treturn end;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// main ear slicing loop which triangulates a polygon (given as a linked list)\\r\\n\\r\\n\\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\\r\\n\\r\\n\\t\\tif ( ! ear ) return;\\r\\n\\r\\n\\t\\t// interlink polygon nodes in z-order\\r\\n\\r\\n\\t\\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\\r\\n\\r\\n\\t\\tvar stop = ear, prev, next;\\r\\n\\r\\n\\t\\t// iterate through ears, slicing them one by one\\r\\n\\r\\n\\t\\twhile ( ear.prev !== ear.next ) {\\r\\n\\r\\n\\t\\t\\tprev = ear.prev;\\r\\n\\t\\t\\tnext = ear.next;\\r\\n\\r\\n\\t\\t\\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\\r\\n\\r\\n\\t\\t\\t\\t// cut off the triangle\\r\\n\\t\\t\\t\\ttriangles.push( prev.i / dim );\\r\\n\\t\\t\\t\\ttriangles.push( ear.i / dim );\\r\\n\\t\\t\\t\\ttriangles.push( next.i / dim );\\r\\n\\r\\n\\t\\t\\t\\tremoveNode( ear );\\r\\n\\r\\n\\t\\t\\t\\t// skipping the next vertice leads to less sliver triangles\\r\\n\\t\\t\\t\\tear = next.next;\\r\\n\\t\\t\\t\\tstop = next.next;\\r\\n\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tear = next;\\r\\n\\r\\n\\t\\t\\t// if we looped through the whole remaining polygon and can't find any more ears\\r\\n\\r\\n\\t\\t\\tif ( ear === stop ) {\\r\\n\\r\\n\\t\\t\\t\\t// try filtering points and slicing again\\r\\n\\r\\n\\t\\t\\t\\tif ( ! pass ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\\r\\n\\r\\n\\t\\t\\t\\t\\t// if this didn't work, try curing all small self-intersections locally\\r\\n\\r\\n\\t\\t\\t\\t} else if ( pass === 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tear = cureLocalIntersections( ear, triangles, dim );\\r\\n\\t\\t\\t\\t\\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\\r\\n\\r\\n\\t\\t\\t\\t// as a last resort, try splitting the remaining polygon into two\\r\\n\\r\\n\\t\\t\\t\\t} else if ( pass === 2 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// check whether a polygon node forms a valid ear with adjacent nodes\\r\\n\\r\\n\\tfunction isEar( ear ) {\\r\\n\\r\\n\\t\\tvar a = ear.prev,\\r\\n\\t\\t\\tb = ear,\\r\\n\\t\\t\\tc = ear.next;\\r\\n\\r\\n\\t\\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\\r\\n\\r\\n\\t\\t// now make sure we don't have other points inside the potential ear\\r\\n\\t\\tvar p = ear.next.next;\\r\\n\\r\\n\\t\\twhile ( p !== ear.prev ) {\\r\\n\\r\\n\\t\\t\\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tp = p.next;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction isEarHashed( ear, minX, minY, invSize ) {\\r\\n\\r\\n\\t\\tvar a = ear.prev,\\r\\n\\t\\t\\tb = ear,\\r\\n\\t\\t\\tc = ear.next;\\r\\n\\r\\n\\t\\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\\r\\n\\r\\n\\t\\t// triangle bbox; min & max are calculated like this for speed\\r\\n\\r\\n\\t\\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\\r\\n\\t\\t\\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\\r\\n\\t\\t\\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\\r\\n\\t\\t\\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\\r\\n\\r\\n\\t\\t// z-order range for the current triangle bbox;\\r\\n\\r\\n\\t\\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\\r\\n\\t\\t\\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\\r\\n\\r\\n\\t\\t// first look for points inside the triangle in increasing z-order\\r\\n\\r\\n\\t\\tvar p = ear.nextZ;\\r\\n\\r\\n\\t\\twhile ( p && p.z <= maxZ ) {\\r\\n\\r\\n\\t\\t\\tif ( p !== ear.prev && p !== ear.next &&\\r\\n\\t\\t\\t\\t\\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\\r\\n\\t\\t\\t\\t\\tarea( p.prev, p, p.next ) >= 0 ) return false;\\r\\n\\t\\t\\tp = p.nextZ;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// then look for points in decreasing z-order\\r\\n\\r\\n\\t\\tp = ear.prevZ;\\r\\n\\r\\n\\t\\twhile ( p && p.z >= minZ ) {\\r\\n\\r\\n\\t\\t\\tif ( p !== ear.prev && p !== ear.next &&\\r\\n\\t\\t\\t\\t\\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\\r\\n\\t\\t\\t\\t\\tarea( p.prev, p, p.next ) >= 0 ) return false;\\r\\n\\r\\n\\t\\t\\tp = p.prevZ;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// go through all polygon nodes and cure small local self-intersections\\r\\n\\r\\n\\tfunction cureLocalIntersections( start, triangles, dim ) {\\r\\n\\r\\n\\t\\tvar p = start;\\r\\n\\r\\n\\t\\tdo {\\r\\n\\r\\n\\t\\t\\tvar a = p.prev, b = p.next.next;\\r\\n\\r\\n\\t\\t\\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\\r\\n\\r\\n\\t\\t\\t\\ttriangles.push( a.i / dim );\\r\\n\\t\\t\\t\\ttriangles.push( p.i / dim );\\r\\n\\t\\t\\t\\ttriangles.push( b.i / dim );\\r\\n\\r\\n\\t\\t\\t\\t// remove two nodes involved\\r\\n\\r\\n\\t\\t\\t\\tremoveNode( p );\\r\\n\\t\\t\\t\\tremoveNode( p.next );\\r\\n\\r\\n\\t\\t\\t\\tp = start = b;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tp = p.next;\\r\\n\\r\\n\\t\\t} while ( p !== start );\\r\\n\\r\\n\\t\\treturn p;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// try splitting polygon into two and triangulate them independently\\r\\n\\r\\n\\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\\r\\n\\r\\n\\t\\t// look for a valid diagonal that divides the polygon into two\\r\\n\\r\\n\\t\\tvar a = start;\\r\\n\\r\\n\\t\\tdo {\\r\\n\\r\\n\\t\\t\\tvar b = a.next.next;\\r\\n\\r\\n\\t\\t\\twhile ( b !== a.prev ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// split the polygon in two by the diagonal\\r\\n\\r\\n\\t\\t\\t\\t\\tvar c = splitPolygon( a, b );\\r\\n\\r\\n\\t\\t\\t\\t\\t// filter colinear points around the cuts\\r\\n\\r\\n\\t\\t\\t\\t\\ta = filterPoints( a, a.next );\\r\\n\\t\\t\\t\\t\\tc = filterPoints( c, c.next );\\r\\n\\r\\n\\t\\t\\t\\t\\t// run earcut on each half\\r\\n\\r\\n\\t\\t\\t\\t\\tearcutLinked( a, triangles, dim, minX, minY, invSize );\\r\\n\\t\\t\\t\\t\\tearcutLinked( c, triangles, dim, minX, minY, invSize );\\r\\n\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tb = b.next;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\ta = a.next;\\r\\n\\r\\n\\t\\t} while ( a !== start );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// link every hole into the outer loop, producing a single-ring polygon without holes\\r\\n\\r\\n\\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\\r\\n\\r\\n\\t\\tvar queue = [], i, len, start, end, list;\\r\\n\\r\\n\\t\\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\\r\\n\\r\\n\\t\\t\\tstart = holeIndices[ i ] * dim;\\r\\n\\t\\t\\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\\r\\n\\t\\t\\tlist = linkedList( data, start, end, dim, false );\\r\\n\\t\\t\\tif ( list === list.next ) list.steiner = true;\\r\\n\\t\\t\\tqueue.push( getLeftmost( list ) );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tqueue.sort( compareX );\\r\\n\\r\\n\\t\\t// process holes from left to right\\r\\n\\r\\n\\t\\tfor ( i = 0; i < queue.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\teliminateHole( queue[ i ], outerNode );\\r\\n\\t\\t\\touterNode = filterPoints( outerNode, outerNode.next );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn outerNode;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction compareX( a, b ) {\\r\\n\\r\\n\\t\\treturn a.x - b.x;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// find a bridge between vertices that connects hole with an outer ring and and link it\\r\\n\\r\\n\\tfunction eliminateHole( hole, outerNode ) {\\r\\n\\r\\n\\t\\touterNode = findHoleBridge( hole, outerNode );\\r\\n\\r\\n\\t\\tif ( outerNode ) {\\r\\n\\r\\n\\t\\t\\tvar b = splitPolygon( outerNode, hole );\\r\\n\\r\\n\\t\\t\\tfilterPoints( b, b.next );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\\r\\n\\r\\n\\tfunction findHoleBridge( hole, outerNode ) {\\r\\n\\r\\n\\t\\tvar p = outerNode,\\r\\n\\t\\t\\thx = hole.x,\\r\\n\\t\\t\\thy = hole.y,\\r\\n\\t\\t\\tqx = - Infinity,\\r\\n\\t\\t\\tm;\\r\\n\\r\\n\\t\\t// find a segment intersected by a ray from the hole's leftmost point to the left;\\r\\n\\t\\t// segment's endpoint with lesser x will be potential connection point\\r\\n\\r\\n\\t\\tdo {\\r\\n\\r\\n\\t\\t\\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\\r\\n\\r\\n\\t\\t\\t\\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\\r\\n\\r\\n\\t\\t\\t\\tif ( x <= hx && x > qx ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tqx = x;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( x === hx ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hy === p.y ) return p;\\r\\n\\t\\t\\t\\t\\t\\tif ( hy === p.next.y ) return p.next;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tm = p.x < p.next.x ? p : p.next;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tp = p.next;\\r\\n\\r\\n\\t\\t} while ( p !== outerNode );\\r\\n\\r\\n\\t\\tif ( ! m ) return null;\\r\\n\\r\\n\\t\\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\\r\\n\\r\\n\\t\\t// look for points inside the triangle of hole point, segment intersection and endpoint;\\r\\n\\t\\t// if there are no points found, we have a valid connection;\\r\\n\\t\\t// otherwise choose the point of the minimum angle with the ray as connection point\\r\\n\\r\\n\\t\\tvar stop = m,\\r\\n\\t\\t\\tmx = m.x,\\r\\n\\t\\t\\tmy = m.y,\\r\\n\\t\\t\\ttanMin = Infinity,\\r\\n\\t\\t\\ttan;\\r\\n\\r\\n\\t\\tp = m.next;\\r\\n\\r\\n\\t\\twhile ( p !== stop ) {\\r\\n\\r\\n\\t\\t\\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\\r\\n\\t\\t\\t\\t\\t\\t\\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\\r\\n\\r\\n\\t\\t\\t\\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\\r\\n\\r\\n\\t\\t\\t\\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tm = p;\\r\\n\\t\\t\\t\\t\\ttanMin = tan;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tp = p.next;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn m;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// interlink polygon nodes in z-order\\r\\n\\r\\n\\tfunction indexCurve( start, minX, minY, invSize ) {\\r\\n\\r\\n\\t\\tvar p = start;\\r\\n\\r\\n\\t\\tdo {\\r\\n\\r\\n\\t\\t\\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\\r\\n\\t\\t\\tp.prevZ = p.prev;\\r\\n\\t\\t\\tp.nextZ = p.next;\\r\\n\\t\\t\\tp = p.next;\\r\\n\\r\\n\\t\\t} while ( p !== start );\\r\\n\\r\\n\\t\\tp.prevZ.nextZ = null;\\r\\n\\t\\tp.prevZ = null;\\r\\n\\r\\n\\t\\tsortLinked( p );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Simon Tatham's linked list merge sort algorithm\\r\\n\\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\\r\\n\\r\\n\\tfunction sortLinked( list ) {\\r\\n\\r\\n\\t\\tvar i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\\r\\n\\r\\n\\t\\tdo {\\r\\n\\r\\n\\t\\t\\tp = list;\\r\\n\\t\\t\\tlist = null;\\r\\n\\t\\t\\ttail = null;\\r\\n\\t\\t\\tnumMerges = 0;\\r\\n\\r\\n\\t\\t\\twhile ( p ) {\\r\\n\\r\\n\\t\\t\\t\\tnumMerges ++;\\r\\n\\t\\t\\t\\tq = p;\\r\\n\\t\\t\\t\\tpSize = 0;\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0; i < inSize; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tpSize ++;\\r\\n\\t\\t\\t\\t\\tq = q.nextZ;\\r\\n\\t\\t\\t\\t\\tif ( ! q ) break;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tqSize = inSize;\\r\\n\\r\\n\\t\\t\\t\\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\te = p;\\r\\n\\t\\t\\t\\t\\t\\tp = p.nextZ;\\r\\n\\t\\t\\t\\t\\t\\tpSize --;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\te = q;\\r\\n\\t\\t\\t\\t\\t\\tq = q.nextZ;\\r\\n\\t\\t\\t\\t\\t\\tqSize --;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( tail ) tail.nextZ = e;\\r\\n\\t\\t\\t\\t\\telse list = e;\\r\\n\\r\\n\\t\\t\\t\\t\\te.prevZ = tail;\\r\\n\\t\\t\\t\\t\\ttail = e;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tp = q;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\ttail.nextZ = null;\\r\\n\\t\\t\\tinSize *= 2;\\r\\n\\r\\n\\t\\t} while ( numMerges > 1 );\\r\\n\\r\\n\\t\\treturn list;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// z-order of a point given coords and inverse of the longer side of data bbox\\r\\n\\r\\n\\tfunction zOrder( x, y, minX, minY, invSize ) {\\r\\n\\r\\n\\t\\t// coords are transformed into non-negative 15-bit integer range\\r\\n\\r\\n\\t\\tx = 32767 * ( x - minX ) * invSize;\\r\\n\\t\\ty = 32767 * ( y - minY ) * invSize;\\r\\n\\r\\n\\t\\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\\r\\n\\t\\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\\r\\n\\t\\tx = ( x | ( x << 2 ) ) & 0x33333333;\\r\\n\\t\\tx = ( x | ( x << 1 ) ) & 0x55555555;\\r\\n\\r\\n\\t\\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\\r\\n\\t\\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\\r\\n\\t\\ty = ( y | ( y << 2 ) ) & 0x33333333;\\r\\n\\t\\ty = ( y | ( y << 1 ) ) & 0x55555555;\\r\\n\\r\\n\\t\\treturn x | ( y << 1 );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// find the leftmost node of a polygon ring\\r\\n\\r\\n\\tfunction getLeftmost( start ) {\\r\\n\\r\\n\\t\\tvar p = start, leftmost = start;\\r\\n\\r\\n\\t\\tdo {\\r\\n\\r\\n\\t\\t\\tif ( p.x < leftmost.x ) leftmost = p;\\r\\n\\t\\t\\tp = p.next;\\r\\n\\r\\n\\t\\t} while ( p !== start );\\r\\n\\r\\n\\t\\treturn leftmost;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// check if a point lies within a convex triangle\\r\\n\\r\\n\\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\\r\\n\\r\\n\\t\\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\\r\\n\\t\\t ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\\r\\n\\t\\t ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\\r\\n\\r\\n\\tfunction isValidDiagonal( a, b ) {\\r\\n\\r\\n\\t\\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\\r\\n\\t\\t\\tlocallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// signed area of a triangle\\r\\n\\r\\n\\tfunction area( p, q, r ) {\\r\\n\\r\\n\\t\\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// check if two points are equal\\r\\n\\r\\n\\tfunction equals( p1, p2 ) {\\r\\n\\r\\n\\t\\treturn p1.x === p2.x && p1.y === p2.y;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// check if two segments intersect\\r\\n\\r\\n\\tfunction intersects( p1, q1, p2, q2 ) {\\r\\n\\r\\n\\t\\tif ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\\r\\n\\t\\t\\t\\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\\r\\n\\r\\n\\t\\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\\r\\n\\t\\t\\t\\t\\t area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// check if a polygon diagonal intersects any polygon segments\\r\\n\\r\\n\\tfunction intersectsPolygon( a, b ) {\\r\\n\\r\\n\\t\\tvar p = a;\\r\\n\\r\\n\\t\\tdo {\\r\\n\\r\\n\\t\\t\\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\\r\\n\\t\\t\\t\\t\\t\\t\\tintersects( p, p.next, a, b ) ) {\\r\\n\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tp = p.next;\\r\\n\\r\\n\\t\\t} while ( p !== a );\\r\\n\\r\\n\\t\\treturn false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// check if a polygon diagonal is locally inside the polygon\\r\\n\\r\\n\\tfunction locallyInside( a, b ) {\\r\\n\\r\\n\\t\\treturn area( a.prev, a, a.next ) < 0 ?\\r\\n\\t\\t\\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\\r\\n\\t\\t\\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// check if the middle point of a polygon diagonal is inside the polygon\\r\\n\\r\\n\\tfunction middleInside( a, b ) {\\r\\n\\r\\n\\t\\tvar p = a,\\r\\n\\t\\t\\tinside = false,\\r\\n\\t\\t\\tpx = ( a.x + b.x ) / 2,\\r\\n\\t\\t\\tpy = ( a.y + b.y ) / 2;\\r\\n\\r\\n\\t\\tdo {\\r\\n\\r\\n\\t\\t\\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\\r\\n\\t\\t\\t\\t\\t\\t\\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\\r\\n\\r\\n\\t\\t\\t\\tinside = ! inside;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tp = p.next;\\r\\n\\r\\n\\t\\t} while ( p !== a );\\r\\n\\r\\n\\t\\treturn inside;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\\r\\n\\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\\r\\n\\r\\n\\tfunction splitPolygon( a, b ) {\\r\\n\\r\\n\\t\\tvar a2 = new Node( a.i, a.x, a.y ),\\r\\n\\t\\t\\tb2 = new Node( b.i, b.x, b.y ),\\r\\n\\t\\t\\tan = a.next,\\r\\n\\t\\t\\tbp = b.prev;\\r\\n\\r\\n\\t\\ta.next = b;\\r\\n\\t\\tb.prev = a;\\r\\n\\r\\n\\t\\ta2.next = an;\\r\\n\\t\\tan.prev = a2;\\r\\n\\r\\n\\t\\tb2.next = a2;\\r\\n\\t\\ta2.prev = b2;\\r\\n\\r\\n\\t\\tbp.next = b2;\\r\\n\\t\\tb2.prev = bp;\\r\\n\\r\\n\\t\\treturn b2;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// create a node and optionally link it with previous one (in a circular doubly linked list)\\r\\n\\r\\n\\tfunction insertNode( i, x, y, last ) {\\r\\n\\r\\n\\t\\tvar p = new Node( i, x, y );\\r\\n\\r\\n\\t\\tif ( ! last ) {\\r\\n\\r\\n\\t\\t\\tp.prev = p;\\r\\n\\t\\t\\tp.next = p;\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tp.next = last.next;\\r\\n\\t\\t\\tp.prev = last;\\r\\n\\t\\t\\tlast.next.prev = p;\\r\\n\\t\\t\\tlast.next = p;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn p;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeNode( p ) {\\r\\n\\r\\n\\t\\tp.next.prev = p.prev;\\r\\n\\t\\tp.prev.next = p.next;\\r\\n\\r\\n\\t\\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\\r\\n\\t\\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Node( i, x, y ) {\\r\\n\\r\\n\\t\\t// vertice index in coordinates array\\r\\n\\t\\tthis.i = i;\\r\\n\\r\\n\\t\\t// vertex coordinates\\r\\n\\t\\tthis.x = x;\\r\\n\\t\\tthis.y = y;\\r\\n\\r\\n\\t\\t// previous and next vertice nodes in a polygon ring\\r\\n\\t\\tthis.prev = null;\\r\\n\\t\\tthis.next = null;\\r\\n\\r\\n\\t\\t// z-order curve value\\r\\n\\t\\tthis.z = null;\\r\\n\\r\\n\\t\\t// previous and next nodes in z-order\\r\\n\\t\\tthis.prevZ = null;\\r\\n\\t\\tthis.nextZ = null;\\r\\n\\r\\n\\t\\t// indicates whether this is a steiner point\\r\\n\\t\\tthis.steiner = false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction signedArea( data, start, end, dim ) {\\r\\n\\r\\n\\t\\tvar sum = 0;\\r\\n\\r\\n\\t\\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\\r\\n\\r\\n\\t\\t\\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\\r\\n\\t\\t\\tj = i;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn sum;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t */\\r\\n\\r\\n\\tvar ShapeUtils = {\\r\\n\\r\\n\\t\\t// calculate area of the contour polygon\\r\\n\\r\\n\\t\\tarea: function ( contour ) {\\r\\n\\r\\n\\t\\t\\tvar n = contour.length;\\r\\n\\t\\t\\tvar a = 0.0;\\r\\n\\r\\n\\t\\t\\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\\r\\n\\r\\n\\t\\t\\t\\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn a * 0.5;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tisClockWise: function ( pts ) {\\r\\n\\r\\n\\t\\t\\treturn ShapeUtils.area( pts ) < 0;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttriangulateShape: function ( contour, holes ) {\\r\\n\\r\\n\\t\\t\\tfunction removeDupEndPts( points ) {\\r\\n\\r\\n\\t\\t\\t\\tvar l = points.length;\\r\\n\\r\\n\\t\\t\\t\\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tpoints.pop();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction addContour( vertices, contour ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < contour.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvertices.push( contour[ i ].x );\\r\\n\\t\\t\\t\\t\\tvertices.push( contour[ i ].y );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\\r\\n\\t\\t\\tvar holeIndices = []; // array of hole indices\\r\\n\\t\\t\\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\\r\\n\\r\\n\\t\\t\\tremoveDupEndPts( contour );\\r\\n\\t\\t\\taddContour( vertices, contour );\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tvar holeIndex = contour.length;\\r\\n\\t\\t\\tholes.forEach( removeDupEndPts );\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i < holes.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tholeIndices.push( holeIndex );\\r\\n\\t\\t\\t\\tholeIndex += holes[ i ].length;\\r\\n\\t\\t\\t\\taddContour( vertices, holes[ i ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tvar triangles = Earcut.triangulate( vertices, holeIndices );\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < triangles.length; i += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\tfaces.push( triangles.slice( i, i + 3 ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn faces;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t *\\r\\n\\t * Creates extruded geometry from a path shape.\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *\\r\\n\\t *  curveSegments: <int>, // number of points on the curves\\r\\n\\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\\r\\n\\t *  amount: <int>, // Depth to extrude the shape\\r\\n\\t *\\r\\n\\t *  bevelEnabled: <bool>, // turn on bevel\\r\\n\\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\\r\\n\\t *  bevelSize: <float>, // how far from shape outline is bevel\\r\\n\\t *  bevelSegments: <int>, // number of bevel layers\\r\\n\\t *\\r\\n\\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\\r\\n\\t *  frames: <Object> // containing arrays of tangents, normals, binormals\\r\\n\\t *\\r\\n\\t *  UVGenerator: <Object> // object that provides UV generator functions\\r\\n\\t *\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\t// ExtrudeGeometry\\r\\n\\r\\n\\tfunction ExtrudeGeometry( shapes, options ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'ExtrudeGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tshapes: shapes,\\r\\n\\t\\t\\toptions: options\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\\r\\n\\r\\n\\t// ExtrudeBufferGeometry\\r\\n\\r\\n\\tfunction ExtrudeBufferGeometry( shapes, options ) {\\r\\n\\r\\n\\t\\tif ( typeof ( shapes ) === \\\"undefined\\\" ) {\\r\\n\\r\\n\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'ExtrudeBufferGeometry';\\r\\n\\r\\n\\t\\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\\r\\n\\r\\n\\t\\tthis.addShapeList( shapes, options );\\r\\n\\r\\n\\t\\tthis.computeVertexNormals();\\r\\n\\r\\n\\t\\t// can't really use automatic vertex normals\\r\\n\\t\\t// as then front and back sides get smoothed too\\r\\n\\t\\t// should do separate smoothing just for sides\\r\\n\\r\\n\\t\\t//this.computeVertexNormals();\\r\\n\\r\\n\\t\\t//console.log( \\\"took\\\", ( Date.now() - startTime ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\\r\\n\\r\\n\\tExtrudeBufferGeometry.prototype.getArrays = function () {\\r\\n\\r\\n\\t\\tvar positionAttribute = this.getAttribute( \\\"position\\\" );\\r\\n\\t\\tvar verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];\\r\\n\\r\\n\\t\\tvar uvAttribute = this.getAttribute( \\\"uv\\\" );\\r\\n\\t\\tvar uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];\\r\\n\\r\\n\\t\\tvar IndexAttribute = this.index;\\r\\n\\t\\tvar indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];\\r\\n\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tposition: verticesArray,\\r\\n\\t\\t\\tuv: uvArray,\\r\\n\\t\\t\\tindex: indicesArray\\r\\n\\t\\t};\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {\\r\\n\\r\\n\\t\\tvar sl = shapes.length;\\r\\n\\t\\toptions.arrays = this.getArrays();\\r\\n\\r\\n\\t\\tfor ( var s = 0; s < sl; s ++ ) {\\r\\n\\r\\n\\t\\t\\tvar shape = shapes[ s ];\\r\\n\\t\\t\\tthis.addShape( shape, options );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.setIndex( options.arrays.index );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {\\r\\n\\r\\n\\t\\tvar arrays = options.arrays ? options.arrays : this.getArrays();\\r\\n\\t\\tvar verticesArray = arrays.position;\\r\\n\\t\\tvar indicesArray = arrays.index;\\r\\n\\t\\tvar uvArray = arrays.uv;\\r\\n\\r\\n\\t\\tvar placeholder = [];\\r\\n\\r\\n\\r\\n\\t\\tvar amount = options.amount !== undefined ? options.amount : 100;\\r\\n\\r\\n\\t\\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\\r\\n\\t\\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\\r\\n\\t\\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\\r\\n\\r\\n\\t\\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\\r\\n\\r\\n\\t\\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\\r\\n\\r\\n\\t\\tvar steps = options.steps !== undefined ? options.steps : 1;\\r\\n\\r\\n\\t\\tvar extrudePath = options.extrudePath;\\r\\n\\t\\tvar extrudePts, extrudeByPath = false;\\r\\n\\r\\n\\t\\t// Use default WorldUVGenerator if no UV generators are specified.\\r\\n\\t\\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\\r\\n\\r\\n\\t\\tvar splineTube, binormal, normal, position2;\\r\\n\\t\\tif ( extrudePath ) {\\r\\n\\r\\n\\t\\t\\textrudePts = extrudePath.getSpacedPoints( steps );\\r\\n\\r\\n\\t\\t\\textrudeByPath = true;\\r\\n\\t\\t\\tbevelEnabled = false; // bevels not supported for path extrusion\\r\\n\\r\\n\\t\\t\\t// SETUP TNB variables\\r\\n\\r\\n\\t\\t\\t// TODO1 - have a .isClosed in spline?\\r\\n\\r\\n\\t\\t\\tsplineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );\\r\\n\\r\\n\\t\\t\\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\\r\\n\\r\\n\\t\\t\\tbinormal = new Vector3();\\r\\n\\t\\t\\tnormal = new Vector3();\\r\\n\\t\\t\\tposition2 = new Vector3();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Safeguards if bevels are not enabled\\r\\n\\r\\n\\t\\tif ( ! bevelEnabled ) {\\r\\n\\r\\n\\t\\t\\tbevelSegments = 0;\\r\\n\\t\\t\\tbevelThickness = 0;\\r\\n\\t\\t\\tbevelSize = 0;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Variables initialization\\r\\n\\r\\n\\t\\tvar ahole, h, hl; // looping of holes\\r\\n\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\tvar shapePoints = shape.extractPoints( curveSegments );\\r\\n\\r\\n\\t\\tvar vertices = shapePoints.shape;\\r\\n\\t\\tvar holes = shapePoints.holes;\\r\\n\\r\\n\\t\\tvar reverse = ! ShapeUtils.isClockWise( vertices );\\r\\n\\r\\n\\t\\tif ( reverse ) {\\r\\n\\r\\n\\t\\t\\tvertices = vertices.reverse();\\r\\n\\r\\n\\t\\t\\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\\r\\n\\r\\n\\t\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tahole = holes[ h ];\\r\\n\\r\\n\\t\\t\\t\\tif ( ShapeUtils.isClockWise( ahole ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tholes[ h ] = ahole.reverse();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\\r\\n\\r\\n\\t\\t/* Vertices */\\r\\n\\r\\n\\t\\tvar contour = vertices; // vertices has all points but contour has only points of circumference\\r\\n\\r\\n\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\r\\n\\r\\n\\t\\t\\tahole = holes[ h ];\\r\\n\\r\\n\\t\\t\\tvertices = vertices.concat( ahole );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\tfunction scalePt2( pt, vec, size ) {\\r\\n\\r\\n\\t\\t\\tif ( ! vec ) console.error( \\\"THREE.ExtrudeGeometry: vec does not exist\\\" );\\r\\n\\r\\n\\t\\t\\treturn vec.clone().multiplyScalar( size ).add( pt );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar b, bs, t, z,\\r\\n\\t\\t\\tvert, vlen = vertices.length,\\r\\n\\t\\t\\tface, flen = faces.length;\\r\\n\\r\\n\\r\\n\\t\\t// Find directions for point movement\\r\\n\\r\\n\\r\\n\\t\\tfunction getBevelVec( inPt, inPrev, inNext ) {\\r\\n\\r\\n\\t\\t\\t// computes for inPt the corresponding point inPt' on a new contour\\r\\n\\t\\t\\t//   shifted by 1 unit (length of normalized vector) to the left\\r\\n\\t\\t\\t// if we walk along contour clockwise, this new contour is outside the old one\\r\\n\\t\\t\\t//\\r\\n\\t\\t\\t// inPt' is the intersection of the two lines parallel to the two\\r\\n\\t\\t\\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\\r\\n\\r\\n\\t\\t\\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\\r\\n\\r\\n\\t\\t\\t// good reading for geometry algorithms (here: line-line intersection)\\r\\n\\t\\t\\t// http://geomalgorithms.com/a05-_intersect-1.html\\r\\n\\r\\n\\t\\t\\tvar v_prev_x = inPt.x - inPrev.x,\\r\\n\\t\\t\\t\\tv_prev_y = inPt.y - inPrev.y;\\r\\n\\t\\t\\tvar v_next_x = inNext.x - inPt.x,\\r\\n\\t\\t\\t\\tv_next_y = inNext.y - inPt.y;\\r\\n\\r\\n\\t\\t\\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\\r\\n\\r\\n\\t\\t\\t// check for collinear edges\\r\\n\\t\\t\\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\\r\\n\\r\\n\\t\\t\\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\\r\\n\\r\\n\\t\\t\\t\\t// not collinear\\r\\n\\r\\n\\t\\t\\t\\t// length of vectors for normalizing\\r\\n\\r\\n\\t\\t\\t\\tvar v_prev_len = Math.sqrt( v_prev_lensq );\\r\\n\\t\\t\\t\\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\\r\\n\\r\\n\\t\\t\\t\\t// shift adjacent points by unit vectors to the left\\r\\n\\r\\n\\t\\t\\t\\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\\r\\n\\t\\t\\t\\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\\r\\n\\r\\n\\t\\t\\t\\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\\r\\n\\t\\t\\t\\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\\r\\n\\r\\n\\t\\t\\t\\t// scaling factor for v_prev to intersection point\\r\\n\\r\\n\\t\\t\\t\\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\\r\\n\\t\\t\\t\\t\\t\\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\\r\\n\\t\\t\\t\\t\\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\\r\\n\\r\\n\\t\\t\\t\\t// vector from inPt to intersection point\\r\\n\\r\\n\\t\\t\\t\\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\\r\\n\\t\\t\\t\\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\\r\\n\\r\\n\\t\\t\\t\\t// Don't normalize!, otherwise sharp corners become ugly\\r\\n\\t\\t\\t\\t//  but prevent crazy spikes\\r\\n\\t\\t\\t\\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\\r\\n\\t\\t\\t\\tif ( v_trans_lensq <= 2 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn new Vector2( v_trans_x, v_trans_y );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// handle special case of collinear edges\\r\\n\\r\\n\\t\\t\\t\\tvar direction_eq = false; // assumes: opposite\\r\\n\\t\\t\\t\\tif ( v_prev_x > Number.EPSILON ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( v_next_x > Number.EPSILON ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdirection_eq = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( v_prev_x < - Number.EPSILON ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( v_next_x < - Number.EPSILON ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tdirection_eq = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tdirection_eq = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( direction_eq ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// console.log(\\\"Warning: lines are a straight sequence\\\");\\r\\n\\t\\t\\t\\t\\tv_trans_x = - v_prev_y;\\r\\n\\t\\t\\t\\t\\tv_trans_y = v_prev_x;\\r\\n\\t\\t\\t\\t\\tshrink_by = Math.sqrt( v_prev_lensq );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// console.log(\\\"Warning: lines are a straight spike\\\");\\r\\n\\t\\t\\t\\t\\tv_trans_x = v_prev_x;\\r\\n\\t\\t\\t\\t\\tv_trans_y = v_prev_y;\\r\\n\\t\\t\\t\\t\\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\tvar contourMovements = [];\\r\\n\\r\\n\\t\\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\\r\\n\\r\\n\\t\\t\\tif ( j === il ) j = 0;\\r\\n\\t\\t\\tif ( k === il ) k = 0;\\r\\n\\r\\n\\t\\t\\t//  (j)---(i)---(k)\\r\\n\\t\\t\\t// console.log('i,j,k', i, j , k)\\r\\n\\r\\n\\t\\t\\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar holesMovements = [],\\r\\n\\t\\t\\toneHoleMovements, verticesMovements = contourMovements.concat();\\r\\n\\r\\n\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\r\\n\\r\\n\\t\\t\\tahole = holes[ h ];\\r\\n\\r\\n\\t\\t\\toneHoleMovements = [];\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( j === il ) j = 0;\\r\\n\\t\\t\\t\\tif ( k === il ) k = 0;\\r\\n\\r\\n\\t\\t\\t\\t//  (j)---(i)---(k)\\r\\n\\t\\t\\t\\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tholesMovements.push( oneHoleMovements );\\r\\n\\t\\t\\tverticesMovements = verticesMovements.concat( oneHoleMovements );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t// Loop bevelSegments, 1 for the front, 1 for the back\\r\\n\\r\\n\\t\\tfor ( b = 0; b < bevelSegments; b ++ ) {\\r\\n\\r\\n\\t\\t\\t//for ( b = bevelSegments; b > 0; b -- ) {\\r\\n\\r\\n\\t\\t\\tt = b / bevelSegments;\\r\\n\\t\\t\\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\\r\\n\\t\\t\\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\\r\\n\\r\\n\\t\\t\\t// contract shape\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\\r\\n\\r\\n\\t\\t\\t\\tv( vert.x, vert.y, - z );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// expand holes\\r\\n\\r\\n\\t\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tahole = holes[ h ];\\r\\n\\t\\t\\t\\toneHoleMovements = holesMovements[ h ];\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\\r\\n\\r\\n\\t\\t\\t\\t\\tv( vert.x, vert.y, - z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tbs = bevelSize;\\r\\n\\r\\n\\t\\t// Back facing vertices\\r\\n\\r\\n\\t\\tfor ( i = 0; i < vlen; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\\r\\n\\r\\n\\t\\t\\tif ( ! extrudeByPath ) {\\r\\n\\r\\n\\t\\t\\t\\tv( vert.x, vert.y, 0 );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\\r\\n\\r\\n\\t\\t\\t\\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\\r\\n\\t\\t\\t\\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\\r\\n\\r\\n\\t\\t\\t\\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\\r\\n\\r\\n\\t\\t\\t\\tv( position2.x, position2.y, position2.z );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Add stepped vertices...\\r\\n\\t\\t// Including front facing vertices\\r\\n\\r\\n\\t\\tvar s;\\r\\n\\r\\n\\t\\tfor ( s = 1; s <= steps; s ++ ) {\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i < vlen; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( ! extrudeByPath ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tv( vert.x, vert.y, amount / steps * s );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\\r\\n\\r\\n\\t\\t\\t\\t\\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\\r\\n\\t\\t\\t\\t\\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\\r\\n\\r\\n\\t\\t\\t\\t\\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\\r\\n\\r\\n\\t\\t\\t\\t\\tv( position2.x, position2.y, position2.z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t// Add bevel segments planes\\r\\n\\r\\n\\t\\t//for ( b = 1; b <= bevelSegments; b ++ ) {\\r\\n\\t\\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\\r\\n\\r\\n\\t\\t\\tt = b / bevelSegments;\\r\\n\\t\\t\\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\\r\\n\\t\\t\\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\\r\\n\\r\\n\\t\\t\\t// contract shape\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\\r\\n\\t\\t\\t\\tv( vert.x, vert.y, amount + z );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// expand holes\\r\\n\\r\\n\\t\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tahole = holes[ h ];\\r\\n\\t\\t\\t\\toneHoleMovements = holesMovements[ h ];\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ! extrudeByPath ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tv( vert.x, vert.y, amount + z );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/* Faces */\\r\\n\\r\\n\\t\\t// Top and bottom faces\\r\\n\\r\\n\\t\\tbuildLidFaces();\\r\\n\\r\\n\\t\\t// Sides faces\\r\\n\\r\\n\\t\\tbuildSideFaces();\\r\\n\\r\\n\\r\\n\\t\\t/////  Internal functions\\r\\n\\r\\n\\t\\tfunction buildLidFaces() {\\r\\n\\r\\n\\t\\t\\tvar start = verticesArray.length / 3;\\r\\n\\r\\n\\t\\t\\tif ( bevelEnabled ) {\\r\\n\\r\\n\\t\\t\\t\\tvar layer = 0; // steps + 1\\r\\n\\t\\t\\t\\tvar offset = vlen * layer;\\r\\n\\r\\n\\t\\t\\t\\t// Bottom faces\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0; i < flen; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tface = faces[ i ];\\r\\n\\t\\t\\t\\t\\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tlayer = steps + bevelSegments * 2;\\r\\n\\t\\t\\t\\toffset = vlen * layer;\\r\\n\\r\\n\\t\\t\\t\\t// Top faces\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0; i < flen; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tface = faces[ i ];\\r\\n\\t\\t\\t\\t\\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// Bottom faces\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0; i < flen; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tface = faces[ i ];\\r\\n\\t\\t\\t\\t\\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// Top faces\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0; i < flen; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tface = faces[ i ];\\r\\n\\t\\t\\t\\t\\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tscope.addGroup( start, verticesArray.length / 3 - start, options.material !== undefined ? options.material : 0 );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Create faces for the z-sides of the shape\\r\\n\\r\\n\\t\\tfunction buildSideFaces() {\\r\\n\\r\\n\\t\\t\\tvar start = verticesArray.length / 3;\\r\\n\\t\\t\\tvar layeroffset = 0;\\r\\n\\t\\t\\tsidewalls( contour, layeroffset );\\r\\n\\t\\t\\tlayeroffset += contour.length;\\r\\n\\r\\n\\t\\t\\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tahole = holes[ h ];\\r\\n\\t\\t\\t\\tsidewalls( ahole, layeroffset );\\r\\n\\r\\n\\t\\t\\t\\t//, true\\r\\n\\t\\t\\t\\tlayeroffset += ahole.length;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\tscope.addGroup( start, verticesArray.length / 3 - start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1 );\\r\\n\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction sidewalls( contour, layeroffset ) {\\r\\n\\r\\n\\t\\t\\tvar j, k;\\r\\n\\t\\t\\ti = contour.length;\\r\\n\\r\\n\\t\\t\\twhile ( -- i >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tj = i;\\r\\n\\t\\t\\t\\tk = i - 1;\\r\\n\\t\\t\\t\\tif ( k < 0 ) k = contour.length - 1;\\r\\n\\r\\n\\t\\t\\t\\t//console.log('b', i,j, i-1, k,vertices.length);\\r\\n\\r\\n\\t\\t\\t\\tvar s = 0,\\r\\n\\t\\t\\t\\t\\tsl = steps + bevelSegments * 2;\\r\\n\\r\\n\\t\\t\\t\\tfor ( s = 0; s < sl; s ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar slen1 = vlen * s;\\r\\n\\t\\t\\t\\t\\tvar slen2 = vlen * ( s + 1 );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar a = layeroffset + j + slen1,\\r\\n\\t\\t\\t\\t\\t\\tb = layeroffset + k + slen1,\\r\\n\\t\\t\\t\\t\\t\\tc = layeroffset + k + slen2,\\r\\n\\t\\t\\t\\t\\t\\td = layeroffset + j + slen2;\\r\\n\\r\\n\\t\\t\\t\\t\\tf4( a, b, c, d );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction v( x, y, z ) {\\r\\n\\r\\n\\t\\t\\tplaceholder.push( x );\\r\\n\\t\\t\\tplaceholder.push( y );\\r\\n\\t\\t\\tplaceholder.push( z );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\tfunction f3( a, b, c ) {\\r\\n\\r\\n\\t\\t\\taddVertex( a );\\r\\n\\t\\t\\taddVertex( b );\\r\\n\\t\\t\\taddVertex( c );\\r\\n\\r\\n\\t\\t\\tvar nextIndex = verticesArray.length / 3;\\r\\n\\t\\t\\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\\r\\n\\r\\n\\t\\t\\taddUV( uvs[ 0 ] );\\r\\n\\t\\t\\taddUV( uvs[ 1 ] );\\r\\n\\t\\t\\taddUV( uvs[ 2 ] );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction f4( a, b, c, d ) {\\r\\n\\r\\n\\t\\t\\taddVertex( a );\\r\\n\\t\\t\\taddVertex( b );\\r\\n\\t\\t\\taddVertex( d );\\r\\n\\r\\n\\t\\t\\taddVertex( b );\\r\\n\\t\\t\\taddVertex( c );\\r\\n\\t\\t\\taddVertex( d );\\r\\n\\r\\n\\r\\n\\t\\t\\tvar nextIndex = verticesArray.length / 3;\\r\\n\\t\\t\\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\\r\\n\\r\\n\\t\\t\\taddUV( uvs[ 0 ] );\\r\\n\\t\\t\\taddUV( uvs[ 1 ] );\\r\\n\\t\\t\\taddUV( uvs[ 3 ] );\\r\\n\\r\\n\\t\\t\\taddUV( uvs[ 1 ] );\\r\\n\\t\\t\\taddUV( uvs[ 2 ] );\\r\\n\\t\\t\\taddUV( uvs[ 3 ] );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction addVertex( index ) {\\r\\n\\r\\n\\t\\t\\tindicesArray.push( verticesArray.length / 3 );\\r\\n\\t\\t\\tverticesArray.push( placeholder[ index * 3 + 0 ] );\\r\\n\\t\\t\\tverticesArray.push( placeholder[ index * 3 + 1 ] );\\r\\n\\t\\t\\tverticesArray.push( placeholder[ index * 3 + 2 ] );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\tfunction addUV( vector2 ) {\\r\\n\\r\\n\\t\\t\\tuvArray.push( vector2.x );\\r\\n\\t\\t\\tuvArray.push( vector2.y );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( ! options.arrays ) {\\r\\n\\r\\n\\t\\t\\tthis.setIndex( indicesArray );\\r\\n\\t\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\\r\\n\\t\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tExtrudeGeometry.WorldUVGenerator = {\\r\\n\\r\\n\\t\\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\\r\\n\\r\\n\\t\\t\\tvar a_x = vertices[ indexA * 3 ];\\r\\n\\t\\t\\tvar a_y = vertices[ indexA * 3 + 1 ];\\r\\n\\t\\t\\tvar b_x = vertices[ indexB * 3 ];\\r\\n\\t\\t\\tvar b_y = vertices[ indexB * 3 + 1 ];\\r\\n\\t\\t\\tvar c_x = vertices[ indexC * 3 ];\\r\\n\\t\\t\\tvar c_y = vertices[ indexC * 3 + 1 ];\\r\\n\\r\\n\\t\\t\\treturn [\\r\\n\\t\\t\\t\\tnew Vector2( a_x, a_y ),\\r\\n\\t\\t\\t\\tnew Vector2( b_x, b_y ),\\r\\n\\t\\t\\t\\tnew Vector2( c_x, c_y )\\r\\n\\t\\t\\t];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\\r\\n\\r\\n\\t\\t\\tvar a_x = vertices[ indexA * 3 ];\\r\\n\\t\\t\\tvar a_y = vertices[ indexA * 3 + 1 ];\\r\\n\\t\\t\\tvar a_z = vertices[ indexA * 3 + 2 ];\\r\\n\\t\\t\\tvar b_x = vertices[ indexB * 3 ];\\r\\n\\t\\t\\tvar b_y = vertices[ indexB * 3 + 1 ];\\r\\n\\t\\t\\tvar b_z = vertices[ indexB * 3 + 2 ];\\r\\n\\t\\t\\tvar c_x = vertices[ indexC * 3 ];\\r\\n\\t\\t\\tvar c_y = vertices[ indexC * 3 + 1 ];\\r\\n\\t\\t\\tvar c_z = vertices[ indexC * 3 + 2 ];\\r\\n\\t\\t\\tvar d_x = vertices[ indexD * 3 ];\\r\\n\\t\\t\\tvar d_y = vertices[ indexD * 3 + 1 ];\\r\\n\\t\\t\\tvar d_z = vertices[ indexD * 3 + 2 ];\\r\\n\\r\\n\\t\\t\\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\\r\\n\\r\\n\\t\\t\\t\\treturn [\\r\\n\\t\\t\\t\\t\\tnew Vector2( a_x, 1 - a_z ),\\r\\n\\t\\t\\t\\t\\tnew Vector2( b_x, 1 - b_z ),\\r\\n\\t\\t\\t\\t\\tnew Vector2( c_x, 1 - c_z ),\\r\\n\\t\\t\\t\\t\\tnew Vector2( d_x, 1 - d_z )\\r\\n\\t\\t\\t\\t];\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\treturn [\\r\\n\\t\\t\\t\\t\\tnew Vector2( a_y, 1 - a_z ),\\r\\n\\t\\t\\t\\t\\tnew Vector2( b_y, 1 - b_z ),\\r\\n\\t\\t\\t\\t\\tnew Vector2( c_y, 1 - c_z ),\\r\\n\\t\\t\\t\\t\\tnew Vector2( d_y, 1 - d_z )\\r\\n\\t\\t\\t\\t];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t *\\r\\n\\t * Text = 3D Text\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  font: <THREE.Font>, // font\\r\\n\\t *\\r\\n\\t *  size: <float>, // size of the text\\r\\n\\t *  height: <float>, // thickness to extrude text\\r\\n\\t *  curveSegments: <int>, // number of points on the curves\\r\\n\\t *\\r\\n\\t *  bevelEnabled: <bool>, // turn on bevel\\r\\n\\t *  bevelThickness: <float>, // how deep into text bevel goes\\r\\n\\t *  bevelSize: <float> // how far from text outline is bevel\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\t// TextGeometry\\r\\n\\r\\n\\tfunction TextGeometry( text, parameters ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'TextGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\ttext: text,\\r\\n\\t\\t\\tparameters: parameters\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTextGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tTextGeometry.prototype.constructor = TextGeometry;\\r\\n\\r\\n\\t// TextBufferGeometry\\r\\n\\r\\n\\tfunction TextBufferGeometry( text, parameters ) {\\r\\n\\r\\n\\t\\tparameters = parameters || {};\\r\\n\\r\\n\\t\\tvar font = parameters.font;\\r\\n\\r\\n\\t\\tif ( ! ( font && font.isFont ) ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\\r\\n\\t\\t\\treturn new Geometry();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\\r\\n\\r\\n\\t\\t// translate parameters to ExtrudeGeometry API\\r\\n\\r\\n\\t\\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\\r\\n\\r\\n\\t\\t// defaults\\r\\n\\r\\n\\t\\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\\r\\n\\t\\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\\r\\n\\t\\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\\r\\n\\r\\n\\t\\tExtrudeBufferGeometry.call( this, shapes, parameters );\\r\\n\\r\\n\\t\\tthis.type = 'TextBufferGeometry';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\\r\\n\\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author benaadams / https://twitter.com/ben_a_adams\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// SphereGeometry\\r\\n\\r\\n\\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'SphereGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\twidthSegments: widthSegments,\\r\\n\\t\\t\\theightSegments: heightSegments,\\r\\n\\t\\t\\tphiStart: phiStart,\\r\\n\\t\\t\\tphiLength: phiLength,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSphereGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tSphereGeometry.prototype.constructor = SphereGeometry;\\r\\n\\r\\n\\t// SphereBufferGeometry\\r\\n\\r\\n\\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'SphereBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\twidthSegments: widthSegments,\\r\\n\\t\\t\\theightSegments: heightSegments,\\r\\n\\t\\t\\tphiStart: phiStart,\\r\\n\\t\\t\\tphiLength: phiLength,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tradius = radius || 1;\\r\\n\\r\\n\\t\\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\\r\\n\\t\\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\\r\\n\\r\\n\\t\\tphiStart = phiStart !== undefined ? phiStart : 0;\\r\\n\\t\\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\\r\\n\\r\\n\\t\\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\\r\\n\\t\\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\\r\\n\\r\\n\\t\\tvar thetaEnd = thetaStart + thetaLength;\\r\\n\\r\\n\\t\\tvar ix, iy;\\r\\n\\r\\n\\t\\tvar index = 0;\\r\\n\\t\\tvar grid = [];\\r\\n\\r\\n\\t\\tvar vertex = new Vector3();\\r\\n\\t\\tvar normal = new Vector3();\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// generate vertices, normals and uvs\\r\\n\\r\\n\\t\\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\\r\\n\\r\\n\\t\\t\\tvar verticesRow = [];\\r\\n\\r\\n\\t\\t\\tvar v = iy / heightSegments;\\r\\n\\r\\n\\t\\t\\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar u = ix / widthSegments;\\r\\n\\r\\n\\t\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\t\\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\\r\\n\\t\\t\\t\\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\\r\\n\\t\\t\\t\\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t// normal\\r\\n\\r\\n\\t\\t\\t\\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\\r\\n\\t\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\r\\n\\r\\n\\t\\t\\t\\t// uv\\r\\n\\r\\n\\t\\t\\t\\tuvs.push( u, 1 - v );\\r\\n\\r\\n\\t\\t\\t\\tverticesRow.push( index ++ );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tgrid.push( verticesRow );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// indices\\r\\n\\r\\n\\t\\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\\r\\n\\r\\n\\t\\t\\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar a = grid[ iy ][ ix + 1 ];\\r\\n\\t\\t\\t\\tvar b = grid[ iy ][ ix ];\\r\\n\\t\\t\\t\\tvar c = grid[ iy + 1 ][ ix ];\\r\\n\\t\\t\\t\\tvar d = grid[ iy + 1 ][ ix + 1 ];\\r\\n\\r\\n\\t\\t\\t\\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\\r\\n\\t\\t\\t\\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author Kaleb Murphy\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// RingGeometry\\r\\n\\r\\n\\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'RingGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tinnerRadius: innerRadius,\\r\\n\\t\\t\\touterRadius: outerRadius,\\r\\n\\t\\t\\tthetaSegments: thetaSegments,\\r\\n\\t\\t\\tphiSegments: phiSegments,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tRingGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tRingGeometry.prototype.constructor = RingGeometry;\\r\\n\\r\\n\\t// RingBufferGeometry\\r\\n\\r\\n\\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'RingBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tinnerRadius: innerRadius,\\r\\n\\t\\t\\touterRadius: outerRadius,\\r\\n\\t\\t\\tthetaSegments: thetaSegments,\\r\\n\\t\\t\\tphiSegments: phiSegments,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tinnerRadius = innerRadius || 0.5;\\r\\n\\t\\touterRadius = outerRadius || 1;\\r\\n\\r\\n\\t\\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\\r\\n\\t\\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\\r\\n\\r\\n\\t\\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\\r\\n\\t\\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// some helper variables\\r\\n\\r\\n\\t\\tvar segment;\\r\\n\\t\\tvar radius = innerRadius;\\r\\n\\t\\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\\r\\n\\t\\tvar vertex = new Vector3();\\r\\n\\t\\tvar uv = new Vector2();\\r\\n\\t\\tvar j, i;\\r\\n\\r\\n\\t\\t// generate vertices, normals and uvs\\r\\n\\r\\n\\t\\tfor ( j = 0; j <= phiSegments; j ++ ) {\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i <= thetaSegments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t// values are generate from the inside of the ring to the outside\\r\\n\\r\\n\\t\\t\\t\\tsegment = thetaStart + i / thetaSegments * thetaLength;\\r\\n\\r\\n\\t\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\t\\tvertex.x = radius * Math.cos( segment );\\r\\n\\t\\t\\t\\tvertex.y = radius * Math.sin( segment );\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t// normal\\r\\n\\r\\n\\t\\t\\t\\tnormals.push( 0, 0, 1 );\\r\\n\\r\\n\\t\\t\\t\\t// uv\\r\\n\\r\\n\\t\\t\\t\\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\\r\\n\\t\\t\\t\\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\\r\\n\\r\\n\\t\\t\\t\\tuvs.push( uv.x, uv.y );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// increase the radius for next row of vertices\\r\\n\\r\\n\\t\\t\\tradius += radiusStep;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// indices\\r\\n\\r\\n\\t\\tfor ( j = 0; j < phiSegments; j ++ ) {\\r\\n\\r\\n\\t\\t\\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i < thetaSegments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tsegment = i + thetaSegmentLevel;\\r\\n\\r\\n\\t\\t\\t\\tvar a = segment;\\r\\n\\t\\t\\t\\tvar b = segment + thetaSegments + 1;\\r\\n\\t\\t\\t\\tvar c = segment + thetaSegments + 2;\\r\\n\\t\\t\\t\\tvar d = segment + 1;\\r\\n\\r\\n\\t\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\t\\tindices.push( a, b, d );\\r\\n\\t\\t\\t\\tindices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author astrodud / http://astrodud.isgreat.org/\\r\\n\\t * @author zz85 / https://github.com/zz85\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// LatheGeometry\\r\\n\\r\\n\\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'LatheGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tpoints: points,\\r\\n\\t\\t\\tsegments: segments,\\r\\n\\t\\t\\tphiStart: phiStart,\\r\\n\\t\\t\\tphiLength: phiLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLatheGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tLatheGeometry.prototype.constructor = LatheGeometry;\\r\\n\\r\\n\\t// LatheBufferGeometry\\r\\n\\r\\n\\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'LatheBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tpoints: points,\\r\\n\\t\\t\\tsegments: segments,\\r\\n\\t\\t\\tphiStart: phiStart,\\r\\n\\t\\t\\tphiLength: phiLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tsegments = Math.floor( segments ) || 12;\\r\\n\\t\\tphiStart = phiStart || 0;\\r\\n\\t\\tphiLength = phiLength || Math.PI * 2;\\r\\n\\r\\n\\t\\t// clamp phiLength so it's in range of [ 0, 2PI ]\\r\\n\\r\\n\\t\\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\\r\\n\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar base;\\r\\n\\t\\tvar inverseSegments = 1.0 / segments;\\r\\n\\t\\tvar vertex = new Vector3();\\r\\n\\t\\tvar uv = new Vector2();\\r\\n\\t\\tvar i, j;\\r\\n\\r\\n\\t\\t// generate vertices and uvs\\r\\n\\r\\n\\t\\tfor ( i = 0; i <= segments; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar phi = phiStart + i * inverseSegments * phiLength;\\r\\n\\r\\n\\t\\t\\tvar sin = Math.sin( phi );\\r\\n\\t\\t\\tvar cos = Math.cos( phi );\\r\\n\\r\\n\\t\\t\\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\t\\tvertex.x = points[ j ].x * sin;\\r\\n\\t\\t\\t\\tvertex.y = points[ j ].y;\\r\\n\\t\\t\\t\\tvertex.z = points[ j ].x * cos;\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t// uv\\r\\n\\r\\n\\t\\t\\t\\tuv.x = i / segments;\\r\\n\\t\\t\\t\\tuv.y = j / ( points.length - 1 );\\r\\n\\r\\n\\t\\t\\t\\tuvs.push( uv.x, uv.y );\\r\\n\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// indices\\r\\n\\r\\n\\t\\tfor ( i = 0; i < segments; i ++ ) {\\r\\n\\r\\n\\t\\t\\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tbase = j + i * points.length;\\r\\n\\r\\n\\t\\t\\t\\tvar a = base;\\r\\n\\t\\t\\t\\tvar b = base + points.length;\\r\\n\\t\\t\\t\\tvar c = base + points.length + 1;\\r\\n\\t\\t\\t\\tvar d = base + 1;\\r\\n\\r\\n\\t\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\t\\tindices.push( a, b, d );\\r\\n\\t\\t\\t\\tindices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t\\t// generate normals\\r\\n\\r\\n\\t\\tthis.computeVertexNormals();\\r\\n\\r\\n\\t\\t// if the geometry is closed, we need to average the normals along the seam.\\r\\n\\t\\t// because the corresponding vertices are identical (but still have different UVs).\\r\\n\\r\\n\\t\\tif ( phiLength === Math.PI * 2 ) {\\r\\n\\r\\n\\t\\t\\tvar normals = this.attributes.normal.array;\\r\\n\\t\\t\\tvar n1 = new Vector3();\\r\\n\\t\\t\\tvar n2 = new Vector3();\\r\\n\\t\\t\\tvar n = new Vector3();\\r\\n\\r\\n\\t\\t\\t// this is the buffer offset for the last line of vertices\\r\\n\\r\\n\\t\\t\\tbase = segments * points.length * 3;\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t// select the normal of the vertex in the first line\\r\\n\\r\\n\\t\\t\\t\\tn1.x = normals[ j + 0 ];\\r\\n\\t\\t\\t\\tn1.y = normals[ j + 1 ];\\r\\n\\t\\t\\t\\tn1.z = normals[ j + 2 ];\\r\\n\\r\\n\\t\\t\\t\\t// select the normal of the vertex in the last line\\r\\n\\r\\n\\t\\t\\t\\tn2.x = normals[ base + j + 0 ];\\r\\n\\t\\t\\t\\tn2.y = normals[ base + j + 1 ];\\r\\n\\t\\t\\t\\tn2.z = normals[ base + j + 2 ];\\r\\n\\r\\n\\t\\t\\t\\t// average normals\\r\\n\\r\\n\\t\\t\\t\\tn.addVectors( n1, n2 ).normalize();\\r\\n\\r\\n\\t\\t\\t\\t// assign the new values to both normals\\r\\n\\r\\n\\t\\t\\t\\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\\r\\n\\t\\t\\t\\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\\r\\n\\t\\t\\t\\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author jonobr1 / http://jonobr1.com\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// ShapeGeometry\\r\\n\\r\\n\\tfunction ShapeGeometry( shapes, curveSegments ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'ShapeGeometry';\\r\\n\\r\\n\\t\\tif ( typeof curveSegments === 'object' ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\\r\\n\\r\\n\\t\\t\\tcurveSegments = curveSegments.curveSegments;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tshapes: shapes,\\r\\n\\t\\t\\tcurveSegments: curveSegments\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tShapeGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tShapeGeometry.prototype.constructor = ShapeGeometry;\\r\\n\\r\\n\\tShapeGeometry.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Geometry.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tvar shapes = this.parameters.shapes;\\r\\n\\r\\n\\t\\treturn toJSON( shapes, data );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t// ShapeBufferGeometry\\r\\n\\r\\n\\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'ShapeBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tshapes: shapes,\\r\\n\\t\\t\\tcurveSegments: curveSegments\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tcurveSegments = curveSegments || 12;\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar groupStart = 0;\\r\\n\\t\\tvar groupCount = 0;\\r\\n\\r\\n\\t\\t// allow single and array values for \\\"shapes\\\" parameter\\r\\n\\r\\n\\t\\tif ( Array.isArray( shapes ) === false ) {\\r\\n\\r\\n\\t\\t\\taddShape( shapes );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < shapes.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\taddShape( shapes[ i ] );\\r\\n\\r\\n\\t\\t\\t\\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\\r\\n\\r\\n\\t\\t\\t\\tgroupStart += groupCount;\\r\\n\\t\\t\\t\\tgroupCount = 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\r\\n\\t\\t// helper functions\\r\\n\\r\\n\\t\\tfunction addShape( shape ) {\\r\\n\\r\\n\\t\\t\\tvar i, l, shapeHole;\\r\\n\\r\\n\\t\\t\\tvar indexOffset = vertices.length / 3;\\r\\n\\t\\t\\tvar points = shape.extractPoints( curveSegments );\\r\\n\\r\\n\\t\\t\\tvar shapeVertices = points.shape;\\r\\n\\t\\t\\tvar shapeHoles = points.holes;\\r\\n\\r\\n\\t\\t\\t// check direction of vertices\\r\\n\\r\\n\\t\\t\\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\\r\\n\\r\\n\\t\\t\\t\\tshapeVertices = shapeVertices.reverse();\\r\\n\\r\\n\\t\\t\\t\\t// also check if holes are in the opposite direction\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tshapeHole = shapeHoles[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tshapeHoles[ i ] = shapeHole.reverse();\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\\r\\n\\r\\n\\t\\t\\t// join vertices of inner and outer paths to a single array\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tshapeHole = shapeHoles[ i ];\\r\\n\\t\\t\\t\\tshapeVertices = shapeVertices.concat( shapeHole );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// vertices, normals, uvs\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vertex = shapeVertices[ i ];\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, 0 );\\r\\n\\t\\t\\t\\tnormals.push( 0, 0, 1 );\\r\\n\\t\\t\\t\\tuvs.push( vertex.x, vertex.y ); // world uvs\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// incides\\r\\n\\r\\n\\t\\t\\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar face = faces[ i ];\\r\\n\\r\\n\\t\\t\\t\\tvar a = face[ 0 ] + indexOffset;\\r\\n\\t\\t\\t\\tvar b = face[ 1 ] + indexOffset;\\r\\n\\t\\t\\t\\tvar c = face[ 2 ] + indexOffset;\\r\\n\\r\\n\\t\\t\\t\\tindices.push( a, b, c );\\r\\n\\t\\t\\t\\tgroupCount += 3;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\\r\\n\\r\\n\\tShapeBufferGeometry.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = BufferGeometry.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tvar shapes = this.parameters.shapes;\\r\\n\\r\\n\\t\\treturn toJSON( shapes, data );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction toJSON( shapes, data ) {\\r\\n\\r\\n\\t\\tdata.shapes = [];\\r\\n\\r\\n\\t\\tif ( Array.isArray( shapes ) ) {\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar shape = shapes[ i ];\\r\\n\\r\\n\\t\\t\\t\\tdata.shapes.push( shape.uuid );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tdata.shapes.push( shapes.uuid );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\tfunction EdgesGeometry( geometry, thresholdAngle ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'EdgesGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tthresholdAngle: thresholdAngle\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\\r\\n\\r\\n\\t\\t// buffer\\r\\n\\r\\n\\t\\tvar vertices = [];\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\\r\\n\\t\\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\\r\\n\\t\\tvar key, keys = [ 'a', 'b', 'c' ];\\r\\n\\r\\n\\t\\t// prepare source geometry\\r\\n\\r\\n\\t\\tvar geometry2;\\r\\n\\r\\n\\t\\tif ( geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\tgeometry2 = new Geometry();\\r\\n\\t\\t\\tgeometry2.fromBufferGeometry( geometry );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tgeometry2 = geometry.clone();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tgeometry2.mergeVertices();\\r\\n\\t\\tgeometry2.computeFaceNormals();\\r\\n\\r\\n\\t\\tvar sourceVertices = geometry2.vertices;\\r\\n\\t\\tvar faces = geometry2.faces;\\r\\n\\r\\n\\t\\t// now create a data structure where each entry represents an edge with its adjoining faces\\r\\n\\r\\n\\t\\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar face = faces[ i ];\\r\\n\\r\\n\\t\\t\\tfor ( var j = 0; j < 3; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tedge1 = face[ keys[ j ] ];\\r\\n\\t\\t\\t\\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\\r\\n\\t\\t\\t\\tedge[ 0 ] = Math.min( edge1, edge2 );\\r\\n\\t\\t\\t\\tedge[ 1 ] = Math.max( edge1, edge2 );\\r\\n\\r\\n\\t\\t\\t\\tkey = edge[ 0 ] + ',' + edge[ 1 ];\\r\\n\\r\\n\\t\\t\\t\\tif ( edges[ key ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tedges[ key ].face2 = i;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// generate vertices\\r\\n\\r\\n\\t\\tfor ( key in edges ) {\\r\\n\\r\\n\\t\\t\\tvar e = edges[ key ];\\r\\n\\r\\n\\t\\t\\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\\r\\n\\r\\n\\t\\t\\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vertex = sourceVertices[ e.index1 ];\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\tvertex = sourceVertices[ e.index2 ];\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tEdgesGeometry.prototype.constructor = EdgesGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\t// CylinderGeometry\\r\\n\\r\\n\\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'CylinderGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradiusTop: radiusTop,\\r\\n\\t\\t\\tradiusBottom: radiusBottom,\\r\\n\\t\\t\\theight: height,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\theightSegments: heightSegments,\\r\\n\\t\\t\\topenEnded: openEnded,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tCylinderGeometry.prototype.constructor = CylinderGeometry;\\r\\n\\r\\n\\t// CylinderBufferGeometry\\r\\n\\r\\n\\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'CylinderBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradiusTop: radiusTop,\\r\\n\\t\\t\\tradiusBottom: radiusBottom,\\r\\n\\t\\t\\theight: height,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\theightSegments: heightSegments,\\r\\n\\t\\t\\topenEnded: openEnded,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\\r\\n\\t\\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\\r\\n\\t\\theight = height || 1;\\r\\n\\r\\n\\t\\tradialSegments = Math.floor( radialSegments ) || 8;\\r\\n\\t\\theightSegments = Math.floor( heightSegments ) || 1;\\r\\n\\r\\n\\t\\topenEnded = openEnded !== undefined ? openEnded : false;\\r\\n\\t\\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\\r\\n\\t\\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar index = 0;\\r\\n\\t\\tvar indexArray = [];\\r\\n\\t\\tvar halfHeight = height / 2;\\r\\n\\t\\tvar groupStart = 0;\\r\\n\\r\\n\\t\\t// generate geometry\\r\\n\\r\\n\\t\\tgenerateTorso();\\r\\n\\r\\n\\t\\tif ( openEnded === false ) {\\r\\n\\r\\n\\t\\t\\tif ( radiusTop > 0 ) generateCap( true );\\r\\n\\t\\t\\tif ( radiusBottom > 0 ) generateCap( false );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t\\tfunction generateTorso() {\\r\\n\\r\\n\\t\\t\\tvar x, y;\\r\\n\\t\\t\\tvar normal = new Vector3();\\r\\n\\t\\t\\tvar vertex = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar groupCount = 0;\\r\\n\\r\\n\\t\\t\\t// this will be used to calculate the normal\\r\\n\\t\\t\\tvar slope = ( radiusBottom - radiusTop ) / height;\\r\\n\\r\\n\\t\\t\\t// generate vertices, normals and uvs\\r\\n\\r\\n\\t\\t\\tfor ( y = 0; y <= heightSegments; y ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar indexRow = [];\\r\\n\\r\\n\\t\\t\\t\\tvar v = y / heightSegments;\\r\\n\\r\\n\\t\\t\\t\\t// calculate the radius of the current row\\r\\n\\r\\n\\t\\t\\t\\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\\r\\n\\r\\n\\t\\t\\t\\tfor ( x = 0; x <= radialSegments; x ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar u = x / radialSegments;\\r\\n\\r\\n\\t\\t\\t\\t\\tvar theta = u * thetaLength + thetaStart;\\r\\n\\r\\n\\t\\t\\t\\t\\tvar sinTheta = Math.sin( theta );\\r\\n\\t\\t\\t\\t\\tvar cosTheta = Math.cos( theta );\\r\\n\\r\\n\\t\\t\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\t\\t\\tvertex.x = radius * sinTheta;\\r\\n\\t\\t\\t\\t\\tvertex.y = - v * height + halfHeight;\\r\\n\\t\\t\\t\\t\\tvertex.z = radius * cosTheta;\\r\\n\\t\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t\\t// normal\\r\\n\\r\\n\\t\\t\\t\\t\\tnormal.set( sinTheta, slope, cosTheta ).normalize();\\r\\n\\t\\t\\t\\t\\tnormals.push( normal.x, normal.y, normal.z );\\r\\n\\r\\n\\t\\t\\t\\t\\t// uv\\r\\n\\r\\n\\t\\t\\t\\t\\tuvs.push( u, 1 - v );\\r\\n\\r\\n\\t\\t\\t\\t\\t// save index of vertex in respective row\\r\\n\\r\\n\\t\\t\\t\\t\\tindexRow.push( index ++ );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// now save vertices of the row in our index array\\r\\n\\r\\n\\t\\t\\t\\tindexArray.push( indexRow );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// generate indices\\r\\n\\r\\n\\t\\t\\tfor ( x = 0; x < radialSegments; x ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( y = 0; y < heightSegments; y ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// we use the index array to access the correct indices\\r\\n\\r\\n\\t\\t\\t\\t\\tvar a = indexArray[ y ][ x ];\\r\\n\\t\\t\\t\\t\\tvar b = indexArray[ y + 1 ][ x ];\\r\\n\\t\\t\\t\\t\\tvar c = indexArray[ y + 1 ][ x + 1 ];\\r\\n\\t\\t\\t\\t\\tvar d = indexArray[ y ][ x + 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t// faces\\r\\n\\r\\n\\t\\t\\t\\t\\tindices.push( a, b, d );\\r\\n\\t\\t\\t\\t\\tindices.push( b, c, d );\\r\\n\\r\\n\\t\\t\\t\\t\\t// update group counter\\r\\n\\r\\n\\t\\t\\t\\t\\tgroupCount += 6;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// add a group to the geometry. this will ensure multi material support\\r\\n\\r\\n\\t\\t\\tscope.addGroup( groupStart, groupCount, 0 );\\r\\n\\r\\n\\t\\t\\t// calculate new start value for groups\\r\\n\\r\\n\\t\\t\\tgroupStart += groupCount;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction generateCap( top ) {\\r\\n\\r\\n\\t\\t\\tvar x, centerIndexStart, centerIndexEnd;\\r\\n\\r\\n\\t\\t\\tvar uv = new Vector2();\\r\\n\\t\\t\\tvar vertex = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar groupCount = 0;\\r\\n\\r\\n\\t\\t\\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\\r\\n\\t\\t\\tvar sign = ( top === true ) ? 1 : - 1;\\r\\n\\r\\n\\t\\t\\t// save the index of the first center vertex\\r\\n\\t\\t\\tcenterIndexStart = index;\\r\\n\\r\\n\\t\\t\\t// first we generate the center vertex data of the cap.\\r\\n\\t\\t\\t// because the geometry needs one set of uvs per face,\\r\\n\\t\\t\\t// we must generate a center vertex per face/segment\\r\\n\\r\\n\\t\\t\\tfor ( x = 1; x <= radialSegments; x ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( 0, halfHeight * sign, 0 );\\r\\n\\r\\n\\t\\t\\t\\t// normal\\r\\n\\r\\n\\t\\t\\t\\tnormals.push( 0, sign, 0 );\\r\\n\\r\\n\\t\\t\\t\\t// uv\\r\\n\\r\\n\\t\\t\\t\\tuvs.push( 0.5, 0.5 );\\r\\n\\r\\n\\t\\t\\t\\t// increase index\\r\\n\\r\\n\\t\\t\\t\\tindex ++;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// save the index of the last center vertex\\r\\n\\r\\n\\t\\t\\tcenterIndexEnd = index;\\r\\n\\r\\n\\t\\t\\t// now we generate the surrounding vertices, normals and uvs\\r\\n\\r\\n\\t\\t\\tfor ( x = 0; x <= radialSegments; x ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar u = x / radialSegments;\\r\\n\\t\\t\\t\\tvar theta = u * thetaLength + thetaStart;\\r\\n\\r\\n\\t\\t\\t\\tvar cosTheta = Math.cos( theta );\\r\\n\\t\\t\\t\\tvar sinTheta = Math.sin( theta );\\r\\n\\r\\n\\t\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\t\\tvertex.x = radius * sinTheta;\\r\\n\\t\\t\\t\\tvertex.y = halfHeight * sign;\\r\\n\\t\\t\\t\\tvertex.z = radius * cosTheta;\\r\\n\\t\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t\\t// normal\\r\\n\\r\\n\\t\\t\\t\\tnormals.push( 0, sign, 0 );\\r\\n\\r\\n\\t\\t\\t\\t// uv\\r\\n\\r\\n\\t\\t\\t\\tuv.x = ( cosTheta * 0.5 ) + 0.5;\\r\\n\\t\\t\\t\\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\\r\\n\\t\\t\\t\\tuvs.push( uv.x, uv.y );\\r\\n\\r\\n\\t\\t\\t\\t// increase index\\r\\n\\r\\n\\t\\t\\t\\tindex ++;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// generate indices\\r\\n\\r\\n\\t\\t\\tfor ( x = 0; x < radialSegments; x ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar c = centerIndexStart + x;\\r\\n\\t\\t\\t\\tvar i = centerIndexEnd + x;\\r\\n\\r\\n\\t\\t\\t\\tif ( top === true ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// face top\\r\\n\\r\\n\\t\\t\\t\\t\\tindices.push( i, i + 1, c );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// face bottom\\r\\n\\r\\n\\t\\t\\t\\t\\tindices.push( i + 1, i, c );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgroupCount += 3;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// add a group to the geometry. this will ensure multi material support\\r\\n\\r\\n\\t\\t\\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\\r\\n\\r\\n\\t\\t\\t// calculate new start value for groups\\r\\n\\r\\n\\t\\t\\tgroupStart += groupCount;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author abelnation / http://github.com/abelnation\\r\\n\\t */\\r\\n\\r\\n\\t// ConeGeometry\\r\\n\\r\\n\\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\\r\\n\\r\\n\\t\\tthis.type = 'ConeGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\theight: height,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\theightSegments: heightSegments,\\r\\n\\t\\t\\topenEnded: openEnded,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\\r\\n\\tConeGeometry.prototype.constructor = ConeGeometry;\\r\\n\\r\\n\\t// ConeBufferGeometry\\r\\n\\r\\n\\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\\r\\n\\r\\n\\t\\tthis.type = 'ConeBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\theight: height,\\r\\n\\t\\t\\tradialSegments: radialSegments,\\r\\n\\t\\t\\theightSegments: heightSegments,\\r\\n\\t\\t\\topenEnded: openEnded,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\\r\\n\\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author benaadams / https://twitter.com/ben_a_adams\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t * @author hughes\\r\\n\\t */\\r\\n\\r\\n\\t// CircleGeometry\\r\\n\\r\\n\\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'CircleGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tsegments: segments,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\\r\\n\\t\\tthis.mergeVertices();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCircleGeometry.prototype = Object.create( Geometry.prototype );\\r\\n\\tCircleGeometry.prototype.constructor = CircleGeometry;\\r\\n\\r\\n\\t// CircleBufferGeometry\\r\\n\\r\\n\\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'CircleBufferGeometry';\\r\\n\\r\\n\\t\\tthis.parameters = {\\r\\n\\t\\t\\tradius: radius,\\r\\n\\t\\t\\tsegments: segments,\\r\\n\\t\\t\\tthetaStart: thetaStart,\\r\\n\\t\\t\\tthetaLength: thetaLength\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tradius = radius || 1;\\r\\n\\t\\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\\r\\n\\r\\n\\t\\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\\r\\n\\t\\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\\r\\n\\r\\n\\t\\t// buffers\\r\\n\\r\\n\\t\\tvar indices = [];\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar normals = [];\\r\\n\\t\\tvar uvs = [];\\r\\n\\r\\n\\t\\t// helper variables\\r\\n\\r\\n\\t\\tvar i, s;\\r\\n\\t\\tvar vertex = new Vector3();\\r\\n\\t\\tvar uv = new Vector2();\\r\\n\\r\\n\\t\\t// center point\\r\\n\\r\\n\\t\\tvertices.push( 0, 0, 0 );\\r\\n\\t\\tnormals.push( 0, 0, 1 );\\r\\n\\t\\tuvs.push( 0.5, 0.5 );\\r\\n\\r\\n\\t\\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\\r\\n\\r\\n\\t\\t\\tvar segment = thetaStart + s / segments * thetaLength;\\r\\n\\r\\n\\t\\t\\t// vertex\\r\\n\\r\\n\\t\\t\\tvertex.x = radius * Math.cos( segment );\\r\\n\\t\\t\\tvertex.y = radius * Math.sin( segment );\\r\\n\\r\\n\\t\\t\\tvertices.push( vertex.x, vertex.y, vertex.z );\\r\\n\\r\\n\\t\\t\\t// normal\\r\\n\\r\\n\\t\\t\\tnormals.push( 0, 0, 1 );\\r\\n\\r\\n\\t\\t\\t// uvs\\r\\n\\r\\n\\t\\t\\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\\r\\n\\t\\t\\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\\r\\n\\r\\n\\t\\t\\tuvs.push( uv.x, uv.y );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// indices\\r\\n\\r\\n\\t\\tfor ( i = 1; i <= segments; i ++ ) {\\r\\n\\r\\n\\t\\t\\tindices.push( i, i + 1, 0 );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// build geometry\\r\\n\\r\\n\\t\\tthis.setIndex( indices );\\r\\n\\t\\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\\r\\n\\t\\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\\r\\n\\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\\r\\n\\r\\n\\r\\n\\r\\n\\tvar Geometries = Object.freeze({\\r\\n\\t\\tWireframeGeometry: WireframeGeometry,\\r\\n\\t\\tParametricGeometry: ParametricGeometry,\\r\\n\\t\\tParametricBufferGeometry: ParametricBufferGeometry,\\r\\n\\t\\tTetrahedronGeometry: TetrahedronGeometry,\\r\\n\\t\\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\\r\\n\\t\\tOctahedronGeometry: OctahedronGeometry,\\r\\n\\t\\tOctahedronBufferGeometry: OctahedronBufferGeometry,\\r\\n\\t\\tIcosahedronGeometry: IcosahedronGeometry,\\r\\n\\t\\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\\r\\n\\t\\tDodecahedronGeometry: DodecahedronGeometry,\\r\\n\\t\\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\\r\\n\\t\\tPolyhedronGeometry: PolyhedronGeometry,\\r\\n\\t\\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\\r\\n\\t\\tTubeGeometry: TubeGeometry,\\r\\n\\t\\tTubeBufferGeometry: TubeBufferGeometry,\\r\\n\\t\\tTorusKnotGeometry: TorusKnotGeometry,\\r\\n\\t\\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\\r\\n\\t\\tTorusGeometry: TorusGeometry,\\r\\n\\t\\tTorusBufferGeometry: TorusBufferGeometry,\\r\\n\\t\\tTextGeometry: TextGeometry,\\r\\n\\t\\tTextBufferGeometry: TextBufferGeometry,\\r\\n\\t\\tSphereGeometry: SphereGeometry,\\r\\n\\t\\tSphereBufferGeometry: SphereBufferGeometry,\\r\\n\\t\\tRingGeometry: RingGeometry,\\r\\n\\t\\tRingBufferGeometry: RingBufferGeometry,\\r\\n\\t\\tPlaneGeometry: PlaneGeometry,\\r\\n\\t\\tPlaneBufferGeometry: PlaneBufferGeometry,\\r\\n\\t\\tLatheGeometry: LatheGeometry,\\r\\n\\t\\tLatheBufferGeometry: LatheBufferGeometry,\\r\\n\\t\\tShapeGeometry: ShapeGeometry,\\r\\n\\t\\tShapeBufferGeometry: ShapeBufferGeometry,\\r\\n\\t\\tExtrudeGeometry: ExtrudeGeometry,\\r\\n\\t\\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\\r\\n\\t\\tEdgesGeometry: EdgesGeometry,\\r\\n\\t\\tConeGeometry: ConeGeometry,\\r\\n\\t\\tConeBufferGeometry: ConeBufferGeometry,\\r\\n\\t\\tCylinderGeometry: CylinderGeometry,\\r\\n\\t\\tCylinderBufferGeometry: CylinderBufferGeometry,\\r\\n\\t\\tCircleGeometry: CircleGeometry,\\r\\n\\t\\tCircleBufferGeometry: CircleBufferGeometry,\\r\\n\\t\\tBoxGeometry: BoxGeometry,\\r\\n\\t\\tBoxBufferGeometry: BoxBufferGeometry\\r\\n\\t});\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  color: <THREE.Color>,\\r\\n\\t *  opacity: <float>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction ShadowMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'ShadowMaterial';\\r\\n\\r\\n\\t\\tthis.color = new Color( 0x000000 );\\r\\n\\t\\tthis.opacity = 1.0;\\r\\n\\r\\n\\t\\tthis.lights = true;\\r\\n\\t\\tthis.transparent = true;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tShadowMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tShadowMaterial.prototype.constructor = ShadowMaterial;\\r\\n\\r\\n\\tShadowMaterial.prototype.isShadowMaterial = true;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction RawShaderMaterial( parameters ) {\\r\\n\\r\\n\\t\\tShaderMaterial.call( this, parameters );\\r\\n\\r\\n\\t\\tthis.type = 'RawShaderMaterial';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\\r\\n\\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\\r\\n\\r\\n\\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  color: <hex>,\\r\\n\\t *  roughness: <float>,\\r\\n\\t *  metalness: <float>,\\r\\n\\t *  opacity: <float>,\\r\\n\\t *\\r\\n\\t *  map: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  lightMap: new THREE.Texture( <Image> ),\\r\\n\\t *  lightMapIntensity: <float>\\r\\n\\t *\\r\\n\\t *  aoMap: new THREE.Texture( <Image> ),\\r\\n\\t *  aoMapIntensity: <float>\\r\\n\\t *\\r\\n\\t *  emissive: <hex>,\\r\\n\\t *  emissiveIntensity: <float>\\r\\n\\t *  emissiveMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  bumpMap: new THREE.Texture( <Image> ),\\r\\n\\t *  bumpScale: <float>,\\r\\n\\t *\\r\\n\\t *  normalMap: new THREE.Texture( <Image> ),\\r\\n\\t *  normalScale: <Vector2>,\\r\\n\\t *\\r\\n\\t *  displacementMap: new THREE.Texture( <Image> ),\\r\\n\\t *  displacementScale: <float>,\\r\\n\\t *  displacementBias: <float>,\\r\\n\\t *\\r\\n\\t *  roughnessMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  metalnessMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  alphaMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\\r\\n\\t *  envMapIntensity: <float>\\r\\n\\t *\\r\\n\\t *  refractionRatio: <float>,\\r\\n\\t *\\r\\n\\t *  wireframe: <boolean>,\\r\\n\\t *  wireframeLinewidth: <float>,\\r\\n\\t *\\r\\n\\t *  skinning: <bool>,\\r\\n\\t *  morphTargets: <bool>,\\r\\n\\t *  morphNormals: <bool>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction MeshStandardMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.defines = { 'STANDARD': '' };\\r\\n\\r\\n\\t\\tthis.type = 'MeshStandardMaterial';\\r\\n\\r\\n\\t\\tthis.color = new Color( 0xffffff ); // diffuse\\r\\n\\t\\tthis.roughness = 0.5;\\r\\n\\t\\tthis.metalness = 0.5;\\r\\n\\r\\n\\t\\tthis.map = null;\\r\\n\\r\\n\\t\\tthis.lightMap = null;\\r\\n\\t\\tthis.lightMapIntensity = 1.0;\\r\\n\\r\\n\\t\\tthis.aoMap = null;\\r\\n\\t\\tthis.aoMapIntensity = 1.0;\\r\\n\\r\\n\\t\\tthis.emissive = new Color( 0x000000 );\\r\\n\\t\\tthis.emissiveIntensity = 1.0;\\r\\n\\t\\tthis.emissiveMap = null;\\r\\n\\r\\n\\t\\tthis.bumpMap = null;\\r\\n\\t\\tthis.bumpScale = 1;\\r\\n\\r\\n\\t\\tthis.normalMap = null;\\r\\n\\t\\tthis.normalScale = new Vector2( 1, 1 );\\r\\n\\r\\n\\t\\tthis.displacementMap = null;\\r\\n\\t\\tthis.displacementScale = 1;\\r\\n\\t\\tthis.displacementBias = 0;\\r\\n\\r\\n\\t\\tthis.roughnessMap = null;\\r\\n\\r\\n\\t\\tthis.metalnessMap = null;\\r\\n\\r\\n\\t\\tthis.alphaMap = null;\\r\\n\\r\\n\\t\\tthis.envMap = null;\\r\\n\\t\\tthis.envMapIntensity = 1.0;\\r\\n\\r\\n\\t\\tthis.refractionRatio = 0.98;\\r\\n\\r\\n\\t\\tthis.wireframe = false;\\r\\n\\t\\tthis.wireframeLinewidth = 1;\\r\\n\\t\\tthis.wireframeLinecap = 'round';\\r\\n\\t\\tthis.wireframeLinejoin = 'round';\\r\\n\\r\\n\\t\\tthis.skinning = false;\\r\\n\\t\\tthis.morphTargets = false;\\r\\n\\t\\tthis.morphNormals = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\\r\\n\\r\\n\\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\\r\\n\\r\\n\\tMeshStandardMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.defines = { 'STANDARD': '' };\\r\\n\\r\\n\\t\\tthis.color.copy( source.color );\\r\\n\\t\\tthis.roughness = source.roughness;\\r\\n\\t\\tthis.metalness = source.metalness;\\r\\n\\r\\n\\t\\tthis.map = source.map;\\r\\n\\r\\n\\t\\tthis.lightMap = source.lightMap;\\r\\n\\t\\tthis.lightMapIntensity = source.lightMapIntensity;\\r\\n\\r\\n\\t\\tthis.aoMap = source.aoMap;\\r\\n\\t\\tthis.aoMapIntensity = source.aoMapIntensity;\\r\\n\\r\\n\\t\\tthis.emissive.copy( source.emissive );\\r\\n\\t\\tthis.emissiveMap = source.emissiveMap;\\r\\n\\t\\tthis.emissiveIntensity = source.emissiveIntensity;\\r\\n\\r\\n\\t\\tthis.bumpMap = source.bumpMap;\\r\\n\\t\\tthis.bumpScale = source.bumpScale;\\r\\n\\r\\n\\t\\tthis.normalMap = source.normalMap;\\r\\n\\t\\tthis.normalScale.copy( source.normalScale );\\r\\n\\r\\n\\t\\tthis.displacementMap = source.displacementMap;\\r\\n\\t\\tthis.displacementScale = source.displacementScale;\\r\\n\\t\\tthis.displacementBias = source.displacementBias;\\r\\n\\r\\n\\t\\tthis.roughnessMap = source.roughnessMap;\\r\\n\\r\\n\\t\\tthis.metalnessMap = source.metalnessMap;\\r\\n\\r\\n\\t\\tthis.alphaMap = source.alphaMap;\\r\\n\\r\\n\\t\\tthis.envMap = source.envMap;\\r\\n\\t\\tthis.envMapIntensity = source.envMapIntensity;\\r\\n\\r\\n\\t\\tthis.refractionRatio = source.refractionRatio;\\r\\n\\r\\n\\t\\tthis.wireframe = source.wireframe;\\r\\n\\t\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\r\\n\\t\\tthis.wireframeLinecap = source.wireframeLinecap;\\r\\n\\t\\tthis.wireframeLinejoin = source.wireframeLinejoin;\\r\\n\\r\\n\\t\\tthis.skinning = source.skinning;\\r\\n\\t\\tthis.morphTargets = source.morphTargets;\\r\\n\\t\\tthis.morphNormals = source.morphNormals;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  reflectivity: <float>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction MeshPhysicalMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMeshStandardMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.defines = { 'PHYSICAL': '' };\\r\\n\\r\\n\\t\\tthis.type = 'MeshPhysicalMaterial';\\r\\n\\r\\n\\t\\tthis.reflectivity = 0.5; // maps to F0 = 0.04\\r\\n\\r\\n\\t\\tthis.clearCoat = 0.0;\\r\\n\\t\\tthis.clearCoatRoughness = 0.0;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\\r\\n\\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\\r\\n\\r\\n\\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\\r\\n\\r\\n\\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMeshStandardMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.defines = { 'PHYSICAL': '' };\\r\\n\\r\\n\\t\\tthis.reflectivity = source.reflectivity;\\r\\n\\r\\n\\t\\tthis.clearCoat = source.clearCoat;\\r\\n\\t\\tthis.clearCoatRoughness = source.clearCoatRoughness;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  color: <hex>,\\r\\n\\t *  specular: <hex>,\\r\\n\\t *  shininess: <float>,\\r\\n\\t *  opacity: <float>,\\r\\n\\t *\\r\\n\\t *  map: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  lightMap: new THREE.Texture( <Image> ),\\r\\n\\t *  lightMapIntensity: <float>\\r\\n\\t *\\r\\n\\t *  aoMap: new THREE.Texture( <Image> ),\\r\\n\\t *  aoMapIntensity: <float>\\r\\n\\t *\\r\\n\\t *  emissive: <hex>,\\r\\n\\t *  emissiveIntensity: <float>\\r\\n\\t *  emissiveMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  bumpMap: new THREE.Texture( <Image> ),\\r\\n\\t *  bumpScale: <float>,\\r\\n\\t *\\r\\n\\t *  normalMap: new THREE.Texture( <Image> ),\\r\\n\\t *  normalScale: <Vector2>,\\r\\n\\t *\\r\\n\\t *  displacementMap: new THREE.Texture( <Image> ),\\r\\n\\t *  displacementScale: <float>,\\r\\n\\t *  displacementBias: <float>,\\r\\n\\t *\\r\\n\\t *  specularMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  alphaMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\\r\\n\\t *  combine: THREE.Multiply,\\r\\n\\t *  reflectivity: <float>,\\r\\n\\t *  refractionRatio: <float>,\\r\\n\\t *\\r\\n\\t *  wireframe: <boolean>,\\r\\n\\t *  wireframeLinewidth: <float>,\\r\\n\\t *\\r\\n\\t *  skinning: <bool>,\\r\\n\\t *  morphTargets: <bool>,\\r\\n\\t *  morphNormals: <bool>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction MeshPhongMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'MeshPhongMaterial';\\r\\n\\r\\n\\t\\tthis.color = new Color( 0xffffff ); // diffuse\\r\\n\\t\\tthis.specular = new Color( 0x111111 );\\r\\n\\t\\tthis.shininess = 30;\\r\\n\\r\\n\\t\\tthis.map = null;\\r\\n\\r\\n\\t\\tthis.lightMap = null;\\r\\n\\t\\tthis.lightMapIntensity = 1.0;\\r\\n\\r\\n\\t\\tthis.aoMap = null;\\r\\n\\t\\tthis.aoMapIntensity = 1.0;\\r\\n\\r\\n\\t\\tthis.emissive = new Color( 0x000000 );\\r\\n\\t\\tthis.emissiveIntensity = 1.0;\\r\\n\\t\\tthis.emissiveMap = null;\\r\\n\\r\\n\\t\\tthis.bumpMap = null;\\r\\n\\t\\tthis.bumpScale = 1;\\r\\n\\r\\n\\t\\tthis.normalMap = null;\\r\\n\\t\\tthis.normalScale = new Vector2( 1, 1 );\\r\\n\\r\\n\\t\\tthis.displacementMap = null;\\r\\n\\t\\tthis.displacementScale = 1;\\r\\n\\t\\tthis.displacementBias = 0;\\r\\n\\r\\n\\t\\tthis.specularMap = null;\\r\\n\\r\\n\\t\\tthis.alphaMap = null;\\r\\n\\r\\n\\t\\tthis.envMap = null;\\r\\n\\t\\tthis.combine = MultiplyOperation;\\r\\n\\t\\tthis.reflectivity = 1;\\r\\n\\t\\tthis.refractionRatio = 0.98;\\r\\n\\r\\n\\t\\tthis.wireframe = false;\\r\\n\\t\\tthis.wireframeLinewidth = 1;\\r\\n\\t\\tthis.wireframeLinecap = 'round';\\r\\n\\t\\tthis.wireframeLinejoin = 'round';\\r\\n\\r\\n\\t\\tthis.skinning = false;\\r\\n\\t\\tthis.morphTargets = false;\\r\\n\\t\\tthis.morphNormals = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\\r\\n\\r\\n\\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\\r\\n\\r\\n\\tMeshPhongMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.color.copy( source.color );\\r\\n\\t\\tthis.specular.copy( source.specular );\\r\\n\\t\\tthis.shininess = source.shininess;\\r\\n\\r\\n\\t\\tthis.map = source.map;\\r\\n\\r\\n\\t\\tthis.lightMap = source.lightMap;\\r\\n\\t\\tthis.lightMapIntensity = source.lightMapIntensity;\\r\\n\\r\\n\\t\\tthis.aoMap = source.aoMap;\\r\\n\\t\\tthis.aoMapIntensity = source.aoMapIntensity;\\r\\n\\r\\n\\t\\tthis.emissive.copy( source.emissive );\\r\\n\\t\\tthis.emissiveMap = source.emissiveMap;\\r\\n\\t\\tthis.emissiveIntensity = source.emissiveIntensity;\\r\\n\\r\\n\\t\\tthis.bumpMap = source.bumpMap;\\r\\n\\t\\tthis.bumpScale = source.bumpScale;\\r\\n\\r\\n\\t\\tthis.normalMap = source.normalMap;\\r\\n\\t\\tthis.normalScale.copy( source.normalScale );\\r\\n\\r\\n\\t\\tthis.displacementMap = source.displacementMap;\\r\\n\\t\\tthis.displacementScale = source.displacementScale;\\r\\n\\t\\tthis.displacementBias = source.displacementBias;\\r\\n\\r\\n\\t\\tthis.specularMap = source.specularMap;\\r\\n\\r\\n\\t\\tthis.alphaMap = source.alphaMap;\\r\\n\\r\\n\\t\\tthis.envMap = source.envMap;\\r\\n\\t\\tthis.combine = source.combine;\\r\\n\\t\\tthis.reflectivity = source.reflectivity;\\r\\n\\t\\tthis.refractionRatio = source.refractionRatio;\\r\\n\\r\\n\\t\\tthis.wireframe = source.wireframe;\\r\\n\\t\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\r\\n\\t\\tthis.wireframeLinecap = source.wireframeLinecap;\\r\\n\\t\\tthis.wireframeLinejoin = source.wireframeLinejoin;\\r\\n\\r\\n\\t\\tthis.skinning = source.skinning;\\r\\n\\t\\tthis.morphTargets = source.morphTargets;\\r\\n\\t\\tthis.morphNormals = source.morphNormals;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author takahirox / http://github.com/takahirox\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  gradientMap: new THREE.Texture( <Image> )\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction MeshToonMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMeshPhongMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.defines = { 'TOON': '' };\\r\\n\\r\\n\\t\\tthis.type = 'MeshToonMaterial';\\r\\n\\r\\n\\t\\tthis.gradientMap = null;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\\r\\n\\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\\r\\n\\r\\n\\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\\r\\n\\r\\n\\tMeshToonMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMeshPhongMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.gradientMap = source.gradientMap;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  opacity: <float>,\\r\\n\\t *\\r\\n\\t *  bumpMap: new THREE.Texture( <Image> ),\\r\\n\\t *  bumpScale: <float>,\\r\\n\\t *\\r\\n\\t *  normalMap: new THREE.Texture( <Image> ),\\r\\n\\t *  normalScale: <Vector2>,\\r\\n\\t *\\r\\n\\t *  displacementMap: new THREE.Texture( <Image> ),\\r\\n\\t *  displacementScale: <float>,\\r\\n\\t *  displacementBias: <float>,\\r\\n\\t *\\r\\n\\t *  wireframe: <boolean>,\\r\\n\\t *  wireframeLinewidth: <float>\\r\\n\\t *\\r\\n\\t *  skinning: <bool>,\\r\\n\\t *  morphTargets: <bool>,\\r\\n\\t *  morphNormals: <bool>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction MeshNormalMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'MeshNormalMaterial';\\r\\n\\r\\n\\t\\tthis.bumpMap = null;\\r\\n\\t\\tthis.bumpScale = 1;\\r\\n\\r\\n\\t\\tthis.normalMap = null;\\r\\n\\t\\tthis.normalScale = new Vector2( 1, 1 );\\r\\n\\r\\n\\t\\tthis.displacementMap = null;\\r\\n\\t\\tthis.displacementScale = 1;\\r\\n\\t\\tthis.displacementBias = 0;\\r\\n\\r\\n\\t\\tthis.wireframe = false;\\r\\n\\t\\tthis.wireframeLinewidth = 1;\\r\\n\\r\\n\\t\\tthis.fog = false;\\r\\n\\t\\tthis.lights = false;\\r\\n\\r\\n\\t\\tthis.skinning = false;\\r\\n\\t\\tthis.morphTargets = false;\\r\\n\\t\\tthis.morphNormals = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\\r\\n\\r\\n\\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\\r\\n\\r\\n\\tMeshNormalMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.bumpMap = source.bumpMap;\\r\\n\\t\\tthis.bumpScale = source.bumpScale;\\r\\n\\r\\n\\t\\tthis.normalMap = source.normalMap;\\r\\n\\t\\tthis.normalScale.copy( source.normalScale );\\r\\n\\r\\n\\t\\tthis.displacementMap = source.displacementMap;\\r\\n\\t\\tthis.displacementScale = source.displacementScale;\\r\\n\\t\\tthis.displacementBias = source.displacementBias;\\r\\n\\r\\n\\t\\tthis.wireframe = source.wireframe;\\r\\n\\t\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\r\\n\\r\\n\\t\\tthis.skinning = source.skinning;\\r\\n\\t\\tthis.morphTargets = source.morphTargets;\\r\\n\\t\\tthis.morphNormals = source.morphNormals;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  color: <hex>,\\r\\n\\t *  opacity: <float>,\\r\\n\\t *\\r\\n\\t *  map: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  lightMap: new THREE.Texture( <Image> ),\\r\\n\\t *  lightMapIntensity: <float>\\r\\n\\t *\\r\\n\\t *  aoMap: new THREE.Texture( <Image> ),\\r\\n\\t *  aoMapIntensity: <float>\\r\\n\\t *\\r\\n\\t *  emissive: <hex>,\\r\\n\\t *  emissiveIntensity: <float>\\r\\n\\t *  emissiveMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  specularMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  alphaMap: new THREE.Texture( <Image> ),\\r\\n\\t *\\r\\n\\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\\r\\n\\t *  combine: THREE.Multiply,\\r\\n\\t *  reflectivity: <float>,\\r\\n\\t *  refractionRatio: <float>,\\r\\n\\t *\\r\\n\\t *  wireframe: <boolean>,\\r\\n\\t *  wireframeLinewidth: <float>,\\r\\n\\t *\\r\\n\\t *  skinning: <bool>,\\r\\n\\t *  morphTargets: <bool>,\\r\\n\\t *  morphNormals: <bool>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction MeshLambertMaterial( parameters ) {\\r\\n\\r\\n\\t\\tMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'MeshLambertMaterial';\\r\\n\\r\\n\\t\\tthis.color = new Color( 0xffffff ); // diffuse\\r\\n\\r\\n\\t\\tthis.map = null;\\r\\n\\r\\n\\t\\tthis.lightMap = null;\\r\\n\\t\\tthis.lightMapIntensity = 1.0;\\r\\n\\r\\n\\t\\tthis.aoMap = null;\\r\\n\\t\\tthis.aoMapIntensity = 1.0;\\r\\n\\r\\n\\t\\tthis.emissive = new Color( 0x000000 );\\r\\n\\t\\tthis.emissiveIntensity = 1.0;\\r\\n\\t\\tthis.emissiveMap = null;\\r\\n\\r\\n\\t\\tthis.specularMap = null;\\r\\n\\r\\n\\t\\tthis.alphaMap = null;\\r\\n\\r\\n\\t\\tthis.envMap = null;\\r\\n\\t\\tthis.combine = MultiplyOperation;\\r\\n\\t\\tthis.reflectivity = 1;\\r\\n\\t\\tthis.refractionRatio = 0.98;\\r\\n\\r\\n\\t\\tthis.wireframe = false;\\r\\n\\t\\tthis.wireframeLinewidth = 1;\\r\\n\\t\\tthis.wireframeLinecap = 'round';\\r\\n\\t\\tthis.wireframeLinejoin = 'round';\\r\\n\\r\\n\\t\\tthis.skinning = false;\\r\\n\\t\\tthis.morphTargets = false;\\r\\n\\t\\tthis.morphNormals = false;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\\r\\n\\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\\r\\n\\r\\n\\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\\r\\n\\r\\n\\tMeshLambertMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.color.copy( source.color );\\r\\n\\r\\n\\t\\tthis.map = source.map;\\r\\n\\r\\n\\t\\tthis.lightMap = source.lightMap;\\r\\n\\t\\tthis.lightMapIntensity = source.lightMapIntensity;\\r\\n\\r\\n\\t\\tthis.aoMap = source.aoMap;\\r\\n\\t\\tthis.aoMapIntensity = source.aoMapIntensity;\\r\\n\\r\\n\\t\\tthis.emissive.copy( source.emissive );\\r\\n\\t\\tthis.emissiveMap = source.emissiveMap;\\r\\n\\t\\tthis.emissiveIntensity = source.emissiveIntensity;\\r\\n\\r\\n\\t\\tthis.specularMap = source.specularMap;\\r\\n\\r\\n\\t\\tthis.alphaMap = source.alphaMap;\\r\\n\\r\\n\\t\\tthis.envMap = source.envMap;\\r\\n\\t\\tthis.combine = source.combine;\\r\\n\\t\\tthis.reflectivity = source.reflectivity;\\r\\n\\t\\tthis.refractionRatio = source.refractionRatio;\\r\\n\\r\\n\\t\\tthis.wireframe = source.wireframe;\\r\\n\\t\\tthis.wireframeLinewidth = source.wireframeLinewidth;\\r\\n\\t\\tthis.wireframeLinecap = source.wireframeLinecap;\\r\\n\\t\\tthis.wireframeLinejoin = source.wireframeLinejoin;\\r\\n\\r\\n\\t\\tthis.skinning = source.skinning;\\r\\n\\t\\tthis.morphTargets = source.morphTargets;\\r\\n\\t\\tthis.morphNormals = source.morphNormals;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t *\\r\\n\\t * parameters = {\\r\\n\\t *  color: <hex>,\\r\\n\\t *  opacity: <float>,\\r\\n\\t *\\r\\n\\t *  linewidth: <float>,\\r\\n\\t *\\r\\n\\t *  scale: <float>,\\r\\n\\t *  dashSize: <float>,\\r\\n\\t *  gapSize: <float>\\r\\n\\t * }\\r\\n\\t */\\r\\n\\r\\n\\tfunction LineDashedMaterial( parameters ) {\\r\\n\\r\\n\\t\\tLineBasicMaterial.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'LineDashedMaterial';\\r\\n\\r\\n\\t\\tthis.scale = 1;\\r\\n\\t\\tthis.dashSize = 3;\\r\\n\\t\\tthis.gapSize = 1;\\r\\n\\r\\n\\t\\tthis.setValues( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\\r\\n\\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\\r\\n\\r\\n\\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\\r\\n\\r\\n\\tLineDashedMaterial.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tLineBasicMaterial.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.scale = source.scale;\\r\\n\\t\\tthis.dashSize = source.dashSize;\\r\\n\\t\\tthis.gapSize = source.gapSize;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\r\\n\\r\\n\\tvar Materials = Object.freeze({\\r\\n\\t\\tShadowMaterial: ShadowMaterial,\\r\\n\\t\\tSpriteMaterial: SpriteMaterial,\\r\\n\\t\\tRawShaderMaterial: RawShaderMaterial,\\r\\n\\t\\tShaderMaterial: ShaderMaterial,\\r\\n\\t\\tPointsMaterial: PointsMaterial,\\r\\n\\t\\tMeshPhysicalMaterial: MeshPhysicalMaterial,\\r\\n\\t\\tMeshStandardMaterial: MeshStandardMaterial,\\r\\n\\t\\tMeshPhongMaterial: MeshPhongMaterial,\\r\\n\\t\\tMeshToonMaterial: MeshToonMaterial,\\r\\n\\t\\tMeshNormalMaterial: MeshNormalMaterial,\\r\\n\\t\\tMeshLambertMaterial: MeshLambertMaterial,\\r\\n\\t\\tMeshDepthMaterial: MeshDepthMaterial,\\r\\n\\t\\tMeshDistanceMaterial: MeshDistanceMaterial,\\r\\n\\t\\tMeshBasicMaterial: MeshBasicMaterial,\\r\\n\\t\\tLineDashedMaterial: LineDashedMaterial,\\r\\n\\t\\tLineBasicMaterial: LineBasicMaterial,\\r\\n\\t\\tMaterial: Material\\r\\n\\t});\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tvar Cache = {\\r\\n\\r\\n\\t\\tenabled: false,\\r\\n\\r\\n\\t\\tfiles: {},\\r\\n\\r\\n\\t\\tadd: function ( key, file ) {\\r\\n\\r\\n\\t\\t\\tif ( this.enabled === false ) return;\\r\\n\\r\\n\\t\\t\\t// console.log( 'THREE.Cache', 'Adding key:', key );\\r\\n\\r\\n\\t\\t\\tthis.files[ key ] = file;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tget: function ( key ) {\\r\\n\\r\\n\\t\\t\\tif ( this.enabled === false ) return;\\r\\n\\r\\n\\t\\t\\t// console.log( 'THREE.Cache', 'Checking key:', key );\\r\\n\\r\\n\\t\\t\\treturn this.files[ key ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tremove: function ( key ) {\\r\\n\\r\\n\\t\\t\\tdelete this.files[ key ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclear: function () {\\r\\n\\r\\n\\t\\t\\tthis.files = {};\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction LoadingManager( onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\tvar isLoading = false;\\r\\n\\t\\tvar itemsLoaded = 0;\\r\\n\\t\\tvar itemsTotal = 0;\\r\\n\\t\\tvar urlModifier = undefined;\\r\\n\\r\\n\\t\\tthis.onStart = undefined;\\r\\n\\t\\tthis.onLoad = onLoad;\\r\\n\\t\\tthis.onProgress = onProgress;\\r\\n\\t\\tthis.onError = onError;\\r\\n\\r\\n\\t\\tthis.itemStart = function ( url ) {\\r\\n\\r\\n\\t\\t\\titemsTotal ++;\\r\\n\\r\\n\\t\\t\\tif ( isLoading === false ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( scope.onStart !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.onStart( url, itemsLoaded, itemsTotal );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tisLoading = true;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.itemEnd = function ( url ) {\\r\\n\\r\\n\\t\\t\\titemsLoaded ++;\\r\\n\\r\\n\\t\\t\\tif ( scope.onProgress !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tscope.onProgress( url, itemsLoaded, itemsTotal );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( itemsLoaded === itemsTotal ) {\\r\\n\\r\\n\\t\\t\\t\\tisLoading = false;\\r\\n\\r\\n\\t\\t\\t\\tif ( scope.onLoad !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.onLoad();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.itemError = function ( url ) {\\r\\n\\r\\n\\t\\t\\tif ( scope.onError !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tscope.onError( url );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.resolveURL = function ( url ) {\\r\\n\\r\\n\\t\\t\\tif ( urlModifier ) {\\r\\n\\r\\n\\t\\t\\t\\treturn urlModifier( url );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn url;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.setURLModifier = function ( transform ) {\\r\\n\\r\\n\\t\\t\\turlModifier = transform;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tvar DefaultLoadingManager = new LoadingManager();\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tvar loading = {};\\r\\n\\r\\n\\tfunction FileLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( FileLoader.prototype, {\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tif ( url === undefined ) url = '';\\r\\n\\r\\n\\t\\t\\tif ( this.path !== undefined ) url = this.path + url;\\r\\n\\r\\n\\t\\t\\turl = this.manager.resolveURL( url );\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar cached = Cache.get( url );\\r\\n\\r\\n\\t\\t\\tif ( cached !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tscope.manager.itemStart( url );\\r\\n\\r\\n\\t\\t\\t\\tsetTimeout( function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( onLoad ) onLoad( cached );\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\r\\n\\t\\t\\t\\t}, 0 );\\r\\n\\r\\n\\t\\t\\t\\treturn cached;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Check if request is duplicate\\r\\n\\r\\n\\t\\t\\tif ( loading[ url ] !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tloading[ url ].push( {\\r\\n\\r\\n\\t\\t\\t\\t\\tonLoad: onLoad,\\r\\n\\t\\t\\t\\t\\tonProgress: onProgress,\\r\\n\\t\\t\\t\\t\\tonError: onError\\r\\n\\r\\n\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Check for data: URI\\r\\n\\t\\t\\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\\r\\n\\t\\t\\tvar dataUriRegexResult = url.match( dataUriRegex );\\r\\n\\r\\n\\t\\t\\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\\r\\n\\t\\t\\tif ( dataUriRegexResult ) {\\r\\n\\r\\n\\t\\t\\t\\tvar mimeType = dataUriRegexResult[ 1 ];\\r\\n\\t\\t\\t\\tvar isBase64 = !! dataUriRegexResult[ 2 ];\\r\\n\\t\\t\\t\\tvar data = dataUriRegexResult[ 3 ];\\r\\n\\r\\n\\t\\t\\t\\tdata = window.decodeURIComponent( data );\\r\\n\\r\\n\\t\\t\\t\\tif ( isBase64 ) data = window.atob( data );\\r\\n\\r\\n\\t\\t\\t\\ttry {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar response;\\r\\n\\t\\t\\t\\t\\tvar responseType = ( this.responseType || '' ).toLowerCase();\\r\\n\\r\\n\\t\\t\\t\\t\\tswitch ( responseType ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'arraybuffer':\\r\\n\\t\\t\\t\\t\\t\\tcase 'blob':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar view = new Uint8Array( data.length );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( var i = 0; i < data.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tview[ i ] = data.charCodeAt( i );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( responseType === 'blob' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tresponse = view.buffer;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'document':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar parser = new DOMParser();\\r\\n\\t\\t\\t\\t\\t\\t\\tresponse = parser.parseFromString( data, mimeType );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'json':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tresponse = JSON.parse( data );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdefault: // 'text' or other\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tresponse = data;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\\r\\n\\t\\t\\t\\t\\twindow.setTimeout( function () {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( onLoad ) onLoad( response );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\r\\n\\t\\t\\t\\t\\t}, 0 );\\r\\n\\r\\n\\t\\t\\t\\t} catch ( error ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\\r\\n\\t\\t\\t\\t\\twindow.setTimeout( function () {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( onError ) onError( error );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\t\\t\\t\\t\\t\\tscope.manager.itemError( url );\\r\\n\\r\\n\\t\\t\\t\\t\\t}, 0 );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// Initialise array for duplicate requests\\r\\n\\r\\n\\t\\t\\t\\tloading[ url ] = [];\\r\\n\\r\\n\\t\\t\\t\\tloading[ url ].push( {\\r\\n\\r\\n\\t\\t\\t\\t\\tonLoad: onLoad,\\r\\n\\t\\t\\t\\t\\tonProgress: onProgress,\\r\\n\\t\\t\\t\\t\\tonError: onError\\r\\n\\r\\n\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t\\tvar request = new XMLHttpRequest();\\r\\n\\r\\n\\t\\t\\t\\trequest.open( 'GET', url, true );\\r\\n\\r\\n\\t\\t\\t\\trequest.addEventListener( 'load', function ( event ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar response = this.response;\\r\\n\\r\\n\\t\\t\\t\\t\\tCache.add( url, response );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar callbacks = loading[ url ];\\r\\n\\r\\n\\t\\t\\t\\t\\tdelete loading[ url ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( this.status === 200 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( callback.onLoad ) callback.onLoad( response );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else if ( this.status === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// Some browsers return HTTP Status 0 when using non-http protocol\\r\\n\\t\\t\\t\\t\\t\\t// e.g. 'file://' or 'data://'. Handle as success.\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( callback.onLoad ) callback.onLoad( response );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( callback.onError ) callback.onError( event );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\t\\t\\t\\t\\t\\tscope.manager.itemError( url );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}, false );\\r\\n\\r\\n\\t\\t\\t\\trequest.addEventListener( 'progress', function ( event ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar callbacks = loading[ url ];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\r\\n\\t\\t\\t\\t\\t\\tif ( callback.onProgress ) callback.onProgress( event );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}, false );\\r\\n\\r\\n\\t\\t\\t\\trequest.addEventListener( 'error', function ( event ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar callbacks = loading[ url ];\\r\\n\\r\\n\\t\\t\\t\\t\\tdelete loading[ url ];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar callback = callbacks[ i ];\\r\\n\\t\\t\\t\\t\\t\\tif ( callback.onError ) callback.onError( event );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\t\\t\\t\\t\\tscope.manager.itemError( url );\\r\\n\\r\\n\\t\\t\\t\\t}, false );\\r\\n\\r\\n\\t\\t\\t\\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\\r\\n\\t\\t\\t\\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\\r\\n\\r\\n\\t\\t\\t\\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var header in this.requestHeader ) {\\r\\n\\r\\n\\t\\t\\t\\t\\trequest.setRequestHeader( header, this.requestHeader[ header ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\trequest.send( null );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tscope.manager.itemStart( url );\\r\\n\\r\\n\\t\\t\\treturn request;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetPath: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.path = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetResponseType: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.responseType = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetWithCredentials: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.withCredentials = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetMimeType: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.mimeType = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetRequestHeader: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.requestHeader = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t *\\r\\n\\t * Abstract Base class to block based textures loader (dds, pvr, ...)\\r\\n\\t */\\r\\n\\r\\n\\tfunction CompressedTextureLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t\\t// override in sub classes\\r\\n\\t\\tthis._parser = null;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( CompressedTextureLoader.prototype, {\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar images = [];\\r\\n\\r\\n\\t\\t\\tvar texture = new CompressedTexture();\\r\\n\\t\\t\\ttexture.image = images;\\r\\n\\r\\n\\t\\t\\tvar loader = new FileLoader( this.manager );\\r\\n\\t\\t\\tloader.setPath( this.path );\\r\\n\\t\\t\\tloader.setResponseType( 'arraybuffer' );\\r\\n\\r\\n\\t\\t\\tfunction loadTexture( i ) {\\r\\n\\r\\n\\t\\t\\t\\tloader.load( url[ i ], function ( buffer ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar texDatas = scope._parser( buffer, true );\\r\\n\\r\\n\\t\\t\\t\\t\\timages[ i ] = {\\r\\n\\t\\t\\t\\t\\t\\twidth: texDatas.width,\\r\\n\\t\\t\\t\\t\\t\\theight: texDatas.height,\\r\\n\\t\\t\\t\\t\\t\\tformat: texDatas.format,\\r\\n\\t\\t\\t\\t\\t\\tmipmaps: texDatas.mipmaps\\r\\n\\t\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\t\\tloaded += 1;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( loaded === 6 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( texDatas.mipmapCount === 1 )\\r\\n\\t\\t\\t\\t\\t\\t\\ttexture.minFilter = LinearFilter;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.format = texDatas.format;\\r\\n\\t\\t\\t\\t\\t\\ttexture.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( onLoad ) onLoad( texture );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( Array.isArray( url ) ) {\\r\\n\\r\\n\\t\\t\\t\\tvar loaded = 0;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tloadTexture( i );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// compressed cubemap texture stored in a single DDS file\\r\\n\\r\\n\\t\\t\\t\\tloader.load( url, function ( buffer ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar texDatas = scope._parser( buffer, true );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( texDatas.isCubemap ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var f = 0; f < faces; f ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\timages[ f ] = { mipmaps: [] };\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\timages[ f ].format = texDatas.format;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\timages[ f ].width = texDatas.width;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\timages[ f ].height = texDatas.height;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.image.width = texDatas.width;\\r\\n\\t\\t\\t\\t\\t\\ttexture.image.height = texDatas.height;\\r\\n\\t\\t\\t\\t\\t\\ttexture.mipmaps = texDatas.mipmaps;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( texDatas.mipmapCount === 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.minFilter = LinearFilter;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.format = texDatas.format;\\r\\n\\t\\t\\t\\t\\ttexture.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( onLoad ) onLoad( texture );\\r\\n\\r\\n\\t\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn texture;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetPath: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.path = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author Nikos M. / https://github.com/foo123/\\r\\n\\t *\\r\\n\\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\\r\\n\\t */\\r\\n\\r\\n\\tfunction DataTextureLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t\\t// override in sub classes\\r\\n\\t\\tthis._parser = null;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( DataTextureLoader.prototype, {\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar texture = new DataTexture();\\r\\n\\r\\n\\t\\t\\tvar loader = new FileLoader( this.manager );\\r\\n\\t\\t\\tloader.setResponseType( 'arraybuffer' );\\r\\n\\r\\n\\t\\t\\tloader.load( url, function ( buffer ) {\\r\\n\\r\\n\\t\\t\\t\\tvar texData = scope._parser( buffer );\\r\\n\\r\\n\\t\\t\\t\\tif ( ! texData ) return;\\r\\n\\r\\n\\t\\t\\t\\tif ( undefined !== texData.image ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.image = texData.image;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( undefined !== texData.data ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.image.width = texData.width;\\r\\n\\t\\t\\t\\t\\ttexture.image.height = texData.height;\\r\\n\\t\\t\\t\\t\\ttexture.image.data = texData.data;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\\r\\n\\t\\t\\t\\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\\r\\n\\r\\n\\t\\t\\t\\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\\r\\n\\t\\t\\t\\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\\r\\n\\r\\n\\t\\t\\t\\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\\r\\n\\r\\n\\t\\t\\t\\tif ( undefined !== texData.format ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.format = texData.format;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif ( undefined !== texData.type ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.type = texData.type;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( undefined !== texData.mipmaps ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.mipmaps = texData.mipmaps;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( 1 === texData.mipmapCount ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.minFilter = LinearFilter;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ttexture.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\tif ( onLoad ) onLoad( texture, texData );\\r\\n\\r\\n\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\r\\n\\t\\t\\treturn texture;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction ImageLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( ImageLoader.prototype, {\\r\\n\\r\\n\\t\\tcrossOrigin: 'Anonymous',\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tif ( url === undefined ) url = '';\\r\\n\\r\\n\\t\\t\\tif ( this.path !== undefined ) url = this.path + url;\\r\\n\\r\\n\\t\\t\\turl = this.manager.resolveURL( url );\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar cached = Cache.get( url );\\r\\n\\r\\n\\t\\t\\tif ( cached !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tscope.manager.itemStart( url );\\r\\n\\r\\n\\t\\t\\t\\tsetTimeout( function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( onLoad ) onLoad( cached );\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\r\\n\\t\\t\\t\\t}, 0 );\\r\\n\\r\\n\\t\\t\\t\\treturn cached;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\\r\\n\\r\\n\\t\\t\\timage.addEventListener( 'load', function () {\\r\\n\\r\\n\\t\\t\\t\\tCache.add( url, this );\\r\\n\\r\\n\\t\\t\\t\\tif ( onLoad ) onLoad( this );\\r\\n\\r\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\r\\n\\t\\t\\t}, false );\\r\\n\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\timage.addEventListener( 'progress', function ( event ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( onProgress ) onProgress( event );\\r\\n\\r\\n\\t\\t\\t}, false );\\r\\n\\t\\t\\t*/\\r\\n\\r\\n\\t\\t\\timage.addEventListener( 'error', function ( event ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( onError ) onError( event );\\r\\n\\r\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\t\\t\\t\\tscope.manager.itemError( url );\\r\\n\\r\\n\\t\\t\\t}, false );\\r\\n\\r\\n\\t\\t\\tif ( url.substr( 0, 5 ) !== 'data:' ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tscope.manager.itemStart( url );\\r\\n\\r\\n\\t\\t\\timage.src = url;\\r\\n\\r\\n\\t\\t\\treturn image;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetCrossOrigin: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.crossOrigin = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetPath: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.path = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction CubeTextureLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( CubeTextureLoader.prototype, {\\r\\n\\r\\n\\t\\tcrossOrigin: 'Anonymous',\\r\\n\\r\\n\\t\\tload: function ( urls, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tvar texture = new CubeTexture();\\r\\n\\r\\n\\t\\t\\tvar loader = new ImageLoader( this.manager );\\r\\n\\t\\t\\tloader.setCrossOrigin( this.crossOrigin );\\r\\n\\t\\t\\tloader.setPath( this.path );\\r\\n\\r\\n\\t\\t\\tvar loaded = 0;\\r\\n\\r\\n\\t\\t\\tfunction loadTexture( i ) {\\r\\n\\r\\n\\t\\t\\t\\tloader.load( urls[ i ], function ( image ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.images[ i ] = image;\\r\\n\\r\\n\\t\\t\\t\\t\\tloaded ++;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( loaded === 6 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( onLoad ) onLoad( texture );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}, undefined, onError );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < urls.length; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tloadTexture( i );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn texture;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetCrossOrigin: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.crossOrigin = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetPath: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.path = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction TextureLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( TextureLoader.prototype, {\\r\\n\\r\\n\\t\\tcrossOrigin: 'Anonymous',\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tvar texture = new Texture();\\r\\n\\r\\n\\t\\t\\tvar loader = new ImageLoader( this.manager );\\r\\n\\t\\t\\tloader.setCrossOrigin( this.crossOrigin );\\r\\n\\t\\t\\tloader.setPath( this.path );\\r\\n\\r\\n\\t\\t\\tloader.load( url, function ( image ) {\\r\\n\\r\\n\\t\\t\\t\\ttexture.image = image;\\r\\n\\r\\n\\t\\t\\t\\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\\r\\n\\t\\t\\t\\tvar isJPEG = url.search( /\\\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\\\:image\\\\/jpeg/ ) === 0;\\r\\n\\r\\n\\t\\t\\t\\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\\r\\n\\t\\t\\t\\ttexture.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\tif ( onLoad !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tonLoad( texture );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\t\\t\\treturn texture;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetCrossOrigin: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.crossOrigin = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetPath: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.path = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t * Extensible curve object\\r\\n\\t *\\r\\n\\t * Some common of curve methods:\\r\\n\\t * .getPoint( t, optionalTarget ), .getTangent( t )\\r\\n\\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\\r\\n\\t * .getPoints(), .getSpacedPoints()\\r\\n\\t * .getLength()\\r\\n\\t * .updateArcLengths()\\r\\n\\t *\\r\\n\\t * This following curves inherit from THREE.Curve:\\r\\n\\t *\\r\\n\\t * -- 2D curves --\\r\\n\\t * THREE.ArcCurve\\r\\n\\t * THREE.CubicBezierCurve\\r\\n\\t * THREE.EllipseCurve\\r\\n\\t * THREE.LineCurve\\r\\n\\t * THREE.QuadraticBezierCurve\\r\\n\\t * THREE.SplineCurve\\r\\n\\t *\\r\\n\\t * -- 3D curves --\\r\\n\\t * THREE.CatmullRomCurve3\\r\\n\\t * THREE.CubicBezierCurve3\\r\\n\\t * THREE.LineCurve3\\r\\n\\t * THREE.QuadraticBezierCurve3\\r\\n\\t *\\r\\n\\t * A series of curves can be represented as a THREE.CurvePath.\\r\\n\\t *\\r\\n\\t **/\\r\\n\\r\\n\\t/**************************************************************\\r\\n\\t *\\tAbstract Curve base class\\r\\n\\t **************************************************************/\\r\\n\\r\\n\\tfunction Curve() {\\r\\n\\r\\n\\t\\tthis.type = 'Curve';\\r\\n\\r\\n\\t\\tthis.arcLengthDivisions = 200;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Curve.prototype, {\\r\\n\\r\\n\\t\\t// Virtual base class method to overwrite and implement in subclasses\\r\\n\\t\\t//\\t- t [0 .. 1]\\r\\n\\r\\n\\t\\tgetPoint: function ( /* t, optionalTarget */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\\r\\n\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Get point at relative position in curve according to arc length\\r\\n\\t\\t// - u [0 .. 1]\\r\\n\\r\\n\\t\\tgetPointAt: function ( u, optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tvar t = this.getUtoTmapping( u );\\r\\n\\t\\t\\treturn this.getPoint( t, optionalTarget );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Get sequence of points using getPoint( t )\\r\\n\\r\\n\\t\\tgetPoints: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\tif ( divisions === undefined ) divisions = 5;\\r\\n\\r\\n\\t\\t\\tvar points = [];\\r\\n\\r\\n\\t\\t\\tfor ( var d = 0; d <= divisions; d ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tpoints.push( this.getPoint( d / divisions ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn points;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Get sequence of points using getPointAt( u )\\r\\n\\r\\n\\t\\tgetSpacedPoints: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\tif ( divisions === undefined ) divisions = 5;\\r\\n\\r\\n\\t\\t\\tvar points = [];\\r\\n\\r\\n\\t\\t\\tfor ( var d = 0; d <= divisions; d ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tpoints.push( this.getPointAt( d / divisions ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn points;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Get total curve arc length\\r\\n\\r\\n\\t\\tgetLength: function () {\\r\\n\\r\\n\\t\\t\\tvar lengths = this.getLengths();\\r\\n\\t\\t\\treturn lengths[ lengths.length - 1 ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Get list of cumulative segment lengths\\r\\n\\r\\n\\t\\tgetLengths: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\\r\\n\\r\\n\\t\\t\\tif ( this.cacheArcLengths &&\\r\\n\\t\\t\\t\\t( this.cacheArcLengths.length === divisions + 1 ) &&\\r\\n\\t\\t\\t\\t! this.needsUpdate ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.cacheArcLengths;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.needsUpdate = false;\\r\\n\\r\\n\\t\\t\\tvar cache = [];\\r\\n\\t\\t\\tvar current, last = this.getPoint( 0 );\\r\\n\\t\\t\\tvar p, sum = 0;\\r\\n\\r\\n\\t\\t\\tcache.push( 0 );\\r\\n\\r\\n\\t\\t\\tfor ( p = 1; p <= divisions; p ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tcurrent = this.getPoint( p / divisions );\\r\\n\\t\\t\\t\\tsum += current.distanceTo( last );\\r\\n\\t\\t\\t\\tcache.push( sum );\\r\\n\\t\\t\\t\\tlast = current;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.cacheArcLengths = cache;\\r\\n\\r\\n\\t\\t\\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateArcLengths: function () {\\r\\n\\r\\n\\t\\t\\tthis.needsUpdate = true;\\r\\n\\t\\t\\tthis.getLengths();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\\r\\n\\r\\n\\t\\tgetUtoTmapping: function ( u, distance ) {\\r\\n\\r\\n\\t\\t\\tvar arcLengths = this.getLengths();\\r\\n\\r\\n\\t\\t\\tvar i = 0, il = arcLengths.length;\\r\\n\\r\\n\\t\\t\\tvar targetArcLength; // The targeted u distance value to get\\r\\n\\r\\n\\t\\t\\tif ( distance ) {\\r\\n\\r\\n\\t\\t\\t\\ttargetArcLength = distance;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\ttargetArcLength = u * arcLengths[ il - 1 ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// binary search for the index with largest value smaller than target u distance\\r\\n\\r\\n\\t\\t\\tvar low = 0, high = il - 1, comparison;\\r\\n\\r\\n\\t\\t\\twhile ( low <= high ) {\\r\\n\\r\\n\\t\\t\\t\\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\\r\\n\\r\\n\\t\\t\\t\\tcomparison = arcLengths[ i ] - targetArcLength;\\r\\n\\r\\n\\t\\t\\t\\tif ( comparison < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tlow = i + 1;\\r\\n\\r\\n\\t\\t\\t\\t} else if ( comparison > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\thigh = i - 1;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\thigh = i;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t// DONE\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\ti = high;\\r\\n\\r\\n\\t\\t\\tif ( arcLengths[ i ] === targetArcLength ) {\\r\\n\\r\\n\\t\\t\\t\\treturn i / ( il - 1 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// we could get finer grain at lengths, or use simple interpolation between two points\\r\\n\\r\\n\\t\\t\\tvar lengthBefore = arcLengths[ i ];\\r\\n\\t\\t\\tvar lengthAfter = arcLengths[ i + 1 ];\\r\\n\\r\\n\\t\\t\\tvar segmentLength = lengthAfter - lengthBefore;\\r\\n\\r\\n\\t\\t\\t// determine where we are between the 'before' and 'after' points\\r\\n\\r\\n\\t\\t\\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\\r\\n\\r\\n\\t\\t\\t// add that fractional amount to t\\r\\n\\r\\n\\t\\t\\tvar t = ( i + segmentFraction ) / ( il - 1 );\\r\\n\\r\\n\\t\\t\\treturn t;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Returns a unit vector tangent at t\\r\\n\\t\\t// In case any sub curve does not implement its tangent derivation,\\r\\n\\t\\t// 2 points a small delta apart will be used to find its gradient\\r\\n\\t\\t// which seems to give a reasonable approximation\\r\\n\\r\\n\\t\\tgetTangent: function ( t ) {\\r\\n\\r\\n\\t\\t\\tvar delta = 0.0001;\\r\\n\\t\\t\\tvar t1 = t - delta;\\r\\n\\t\\t\\tvar t2 = t + delta;\\r\\n\\r\\n\\t\\t\\t// Capping in case of danger\\r\\n\\r\\n\\t\\t\\tif ( t1 < 0 ) t1 = 0;\\r\\n\\t\\t\\tif ( t2 > 1 ) t2 = 1;\\r\\n\\r\\n\\t\\t\\tvar pt1 = this.getPoint( t1 );\\r\\n\\t\\t\\tvar pt2 = this.getPoint( t2 );\\r\\n\\r\\n\\t\\t\\tvar vec = pt2.clone().sub( pt1 );\\r\\n\\t\\t\\treturn vec.normalize();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetTangentAt: function ( u ) {\\r\\n\\r\\n\\t\\t\\tvar t = this.getUtoTmapping( u );\\r\\n\\t\\t\\treturn this.getTangent( t );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcomputeFrenetFrames: function ( segments, closed ) {\\r\\n\\r\\n\\t\\t\\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\\r\\n\\r\\n\\t\\t\\tvar normal = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar tangents = [];\\r\\n\\t\\t\\tvar normals = [];\\r\\n\\t\\t\\tvar binormals = [];\\r\\n\\r\\n\\t\\t\\tvar vec = new Vector3();\\r\\n\\t\\t\\tvar mat = new Matrix4();\\r\\n\\r\\n\\t\\t\\tvar i, u, theta;\\r\\n\\r\\n\\t\\t\\t// compute the tangent vectors for each segment on the curve\\r\\n\\r\\n\\t\\t\\tfor ( i = 0; i <= segments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tu = i / segments;\\r\\n\\r\\n\\t\\t\\t\\ttangents[ i ] = this.getTangentAt( u );\\r\\n\\t\\t\\t\\ttangents[ i ].normalize();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// select an initial normal vector perpendicular to the first tangent vector,\\r\\n\\t\\t\\t// and in the direction of the minimum tangent xyz component\\r\\n\\r\\n\\t\\t\\tnormals[ 0 ] = new Vector3();\\r\\n\\t\\t\\tbinormals[ 0 ] = new Vector3();\\r\\n\\t\\t\\tvar min = Number.MAX_VALUE;\\r\\n\\t\\t\\tvar tx = Math.abs( tangents[ 0 ].x );\\r\\n\\t\\t\\tvar ty = Math.abs( tangents[ 0 ].y );\\r\\n\\t\\t\\tvar tz = Math.abs( tangents[ 0 ].z );\\r\\n\\r\\n\\t\\t\\tif ( tx <= min ) {\\r\\n\\r\\n\\t\\t\\t\\tmin = tx;\\r\\n\\t\\t\\t\\tnormal.set( 1, 0, 0 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( ty <= min ) {\\r\\n\\r\\n\\t\\t\\t\\tmin = ty;\\r\\n\\t\\t\\t\\tnormal.set( 0, 1, 0 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( tz <= min ) {\\r\\n\\r\\n\\t\\t\\t\\tnormal.set( 0, 0, 1 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\\r\\n\\r\\n\\t\\t\\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\\r\\n\\t\\t\\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\\r\\n\\r\\n\\r\\n\\t\\t\\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\\r\\n\\r\\n\\t\\t\\tfor ( i = 1; i <= segments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tnormals[ i ] = normals[ i - 1 ].clone();\\r\\n\\r\\n\\t\\t\\t\\tbinormals[ i ] = binormals[ i - 1 ].clone();\\r\\n\\r\\n\\t\\t\\t\\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\\r\\n\\r\\n\\t\\t\\t\\tif ( vec.length() > Number.EPSILON ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvec.normalize();\\r\\n\\r\\n\\t\\t\\t\\t\\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\\r\\n\\r\\n\\t\\t\\t\\t\\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\\r\\n\\r\\n\\t\\t\\tif ( closed === true ) {\\r\\n\\r\\n\\t\\t\\t\\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\\r\\n\\t\\t\\t\\ttheta /= segments;\\r\\n\\r\\n\\t\\t\\t\\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttheta = - theta;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor ( i = 1; i <= segments; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// twist a little...\\r\\n\\t\\t\\t\\t\\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\\r\\n\\t\\t\\t\\t\\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn {\\r\\n\\t\\t\\t\\ttangents: tangents,\\r\\n\\t\\t\\t\\tnormals: normals,\\r\\n\\t\\t\\t\\tbinormals: binormals\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tthis.arcLengthDivisions = source.arcLengthDivisions;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function () {\\r\\n\\r\\n\\t\\t\\tvar data = {\\r\\n\\t\\t\\t\\tmetadata: {\\r\\n\\t\\t\\t\\t\\tversion: 4.5,\\r\\n\\t\\t\\t\\t\\ttype: 'Curve',\\r\\n\\t\\t\\t\\t\\tgenerator: 'Curve.toJSON'\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tdata.arcLengthDivisions = this.arcLengthDivisions;\\r\\n\\t\\t\\tdata.type = this.type;\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromJSON: function ( json ) {\\r\\n\\r\\n\\t\\t\\tthis.arcLengthDivisions = json.arcLengthDivisions;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'EllipseCurve';\\r\\n\\r\\n\\t\\tthis.aX = aX || 0;\\r\\n\\t\\tthis.aY = aY || 0;\\r\\n\\r\\n\\t\\tthis.xRadius = xRadius || 1;\\r\\n\\t\\tthis.yRadius = yRadius || 1;\\r\\n\\r\\n\\t\\tthis.aStartAngle = aStartAngle || 0;\\r\\n\\t\\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\\r\\n\\r\\n\\t\\tthis.aClockwise = aClockwise || false;\\r\\n\\r\\n\\t\\tthis.aRotation = aRotation || 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tEllipseCurve.prototype = Object.create( Curve.prototype );\\r\\n\\tEllipseCurve.prototype.constructor = EllipseCurve;\\r\\n\\r\\n\\tEllipseCurve.prototype.isEllipseCurve = true;\\r\\n\\r\\n\\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\tvar point = optionalTarget || new Vector2();\\r\\n\\r\\n\\t\\tvar twoPi = Math.PI * 2;\\r\\n\\t\\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\\r\\n\\t\\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\\r\\n\\r\\n\\t\\t// ensures that deltaAngle is 0 .. 2 PI\\r\\n\\t\\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\\r\\n\\t\\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\\r\\n\\r\\n\\t\\tif ( deltaAngle < Number.EPSILON ) {\\r\\n\\r\\n\\t\\t\\tif ( samePoints ) {\\r\\n\\r\\n\\t\\t\\t\\tdeltaAngle = 0;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tdeltaAngle = twoPi;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( this.aClockwise === true && ! samePoints ) {\\r\\n\\r\\n\\t\\t\\tif ( deltaAngle === twoPi ) {\\r\\n\\r\\n\\t\\t\\t\\tdeltaAngle = - twoPi;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tdeltaAngle = deltaAngle - twoPi;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar angle = this.aStartAngle + t * deltaAngle;\\r\\n\\t\\tvar x = this.aX + this.xRadius * Math.cos( angle );\\r\\n\\t\\tvar y = this.aY + this.yRadius * Math.sin( angle );\\r\\n\\r\\n\\t\\tif ( this.aRotation !== 0 ) {\\r\\n\\r\\n\\t\\t\\tvar cos = Math.cos( this.aRotation );\\r\\n\\t\\t\\tvar sin = Math.sin( this.aRotation );\\r\\n\\r\\n\\t\\t\\tvar tx = x - this.aX;\\r\\n\\t\\t\\tvar ty = y - this.aY;\\r\\n\\r\\n\\t\\t\\t// Rotate the point about the center of the ellipse.\\r\\n\\t\\t\\tx = tx * cos - ty * sin + this.aX;\\r\\n\\t\\t\\ty = tx * sin + ty * cos + this.aY;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn point.set( x, y );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tEllipseCurve.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.aX = source.aX;\\r\\n\\t\\tthis.aY = source.aY;\\r\\n\\r\\n\\t\\tthis.xRadius = source.xRadius;\\r\\n\\t\\tthis.yRadius = source.yRadius;\\r\\n\\r\\n\\t\\tthis.aStartAngle = source.aStartAngle;\\r\\n\\t\\tthis.aEndAngle = source.aEndAngle;\\r\\n\\r\\n\\t\\tthis.aClockwise = source.aClockwise;\\r\\n\\r\\n\\t\\tthis.aRotation = source.aRotation;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\r\\n\\tEllipseCurve.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tdata.aX = this.aX;\\r\\n\\t\\tdata.aY = this.aY;\\r\\n\\r\\n\\t\\tdata.xRadius = this.xRadius;\\r\\n\\t\\tdata.yRadius = this.yRadius;\\r\\n\\r\\n\\t\\tdata.aStartAngle = this.aStartAngle;\\r\\n\\t\\tdata.aEndAngle = this.aEndAngle;\\r\\n\\r\\n\\t\\tdata.aClockwise = this.aClockwise;\\r\\n\\r\\n\\t\\tdata.aRotation = this.aRotation;\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tEllipseCurve.prototype.fromJSON = function ( json ) {\\r\\n\\r\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\tthis.aX = json.aX;\\r\\n\\t\\tthis.aY = json.aY;\\r\\n\\r\\n\\t\\tthis.xRadius = json.xRadius;\\r\\n\\t\\tthis.yRadius = json.yRadius;\\r\\n\\r\\n\\t\\tthis.aStartAngle = json.aStartAngle;\\r\\n\\t\\tthis.aEndAngle = json.aEndAngle;\\r\\n\\r\\n\\t\\tthis.aClockwise = json.aClockwise;\\r\\n\\r\\n\\t\\tthis.aRotation = json.aRotation;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\\r\\n\\r\\n\\t\\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\\r\\n\\r\\n\\t\\tthis.type = 'ArcCurve';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\\r\\n\\tArcCurve.prototype.constructor = ArcCurve;\\r\\n\\r\\n\\tArcCurve.prototype.isArcCurve = true;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 https://github.com/zz85\\r\\n\\t *\\r\\n\\t * Centripetal CatmullRom Curve - which is useful for avoiding\\r\\n\\t * cusps and self-intersections in non-uniform catmull rom curves.\\r\\n\\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\\r\\n\\t *\\r\\n\\t * curve.type accepts centripetal(default), chordal and catmullrom\\r\\n\\t * curve.tension is used for catmullrom which defaults to 0.5\\r\\n\\t */\\r\\n\\r\\n\\r\\n\\t/*\\r\\n\\tBased on an optimized c++ solution in\\r\\n\\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\\r\\n\\t - http://ideone.com/NoEbVM\\r\\n\\r\\n\\tThis CubicPoly class could be used for reusing some variables and calculations,\\r\\n\\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\\r\\n\\twhich can be placed in CurveUtils.\\r\\n\\t*/\\r\\n\\r\\n\\tfunction CubicPoly() {\\r\\n\\r\\n\\t\\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\t * Compute coefficients for a cubic polynomial\\r\\n\\t\\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\\r\\n\\t\\t * such that\\r\\n\\t\\t *   p(0) = x0, p(1) = x1\\r\\n\\t\\t *  and\\r\\n\\t\\t *   p'(0) = t0, p'(1) = t1.\\r\\n\\t\\t */\\r\\n\\t\\tfunction init( x0, x1, t0, t1 ) {\\r\\n\\r\\n\\t\\t\\tc0 = x0;\\r\\n\\t\\t\\tc1 = t0;\\r\\n\\t\\t\\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\\r\\n\\t\\t\\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn {\\r\\n\\r\\n\\t\\t\\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\\r\\n\\r\\n\\t\\t\\t\\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\\r\\n\\r\\n\\t\\t\\t\\t// compute tangents when parameterized in [t1,t2]\\r\\n\\t\\t\\t\\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\\r\\n\\t\\t\\t\\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\\r\\n\\r\\n\\t\\t\\t\\t// rescale tangents for parametrization in [0,1]\\r\\n\\t\\t\\t\\tt1 *= dt1;\\r\\n\\t\\t\\t\\tt2 *= dt1;\\r\\n\\r\\n\\t\\t\\t\\tinit( x1, x2, t1, t2 );\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tcalc: function ( t ) {\\r\\n\\r\\n\\t\\t\\t\\tvar t2 = t * t;\\r\\n\\t\\t\\t\\tvar t3 = t2 * t;\\r\\n\\t\\t\\t\\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tvar tmp = new Vector3();\\r\\n\\tvar px = new CubicPoly();\\r\\n\\tvar py = new CubicPoly();\\r\\n\\tvar pz = new CubicPoly();\\r\\n\\r\\n\\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'CatmullRomCurve3';\\r\\n\\r\\n\\t\\tthis.points = points || [];\\r\\n\\t\\tthis.closed = closed || false;\\r\\n\\t\\tthis.curveType = curveType || 'centripetal';\\r\\n\\t\\tthis.tension = tension || 0.5;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\\r\\n\\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\\r\\n\\r\\n\\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\\r\\n\\r\\n\\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\tvar point = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\tvar points = this.points;\\r\\n\\t\\tvar l = points.length;\\r\\n\\r\\n\\t\\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\\r\\n\\t\\tvar intPoint = Math.floor( p );\\r\\n\\t\\tvar weight = p - intPoint;\\r\\n\\r\\n\\t\\tif ( this.closed ) {\\r\\n\\r\\n\\t\\t\\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\\r\\n\\r\\n\\t\\t} else if ( weight === 0 && intPoint === l - 1 ) {\\r\\n\\r\\n\\t\\t\\tintPoint = l - 2;\\r\\n\\t\\t\\tweight = 1;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar p0, p1, p2, p3; // 4 points\\r\\n\\r\\n\\t\\tif ( this.closed || intPoint > 0 ) {\\r\\n\\r\\n\\t\\t\\tp0 = points[ ( intPoint - 1 ) % l ];\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t// extrapolate first point\\r\\n\\t\\t\\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\\r\\n\\t\\t\\tp0 = tmp;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tp1 = points[ intPoint % l ];\\r\\n\\t\\tp2 = points[ ( intPoint + 1 ) % l ];\\r\\n\\r\\n\\t\\tif ( this.closed || intPoint + 2 < l ) {\\r\\n\\r\\n\\t\\t\\tp3 = points[ ( intPoint + 2 ) % l ];\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t// extrapolate last point\\r\\n\\t\\t\\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\\r\\n\\t\\t\\tp3 = tmp;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\\r\\n\\r\\n\\t\\t\\t// init Centripetal / Chordal Catmull-Rom\\r\\n\\t\\t\\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\\r\\n\\t\\t\\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\\r\\n\\t\\t\\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\\r\\n\\t\\t\\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\\r\\n\\r\\n\\t\\t\\t// safety check for repeated points\\r\\n\\t\\t\\tif ( dt1 < 1e-4 ) dt1 = 1.0;\\r\\n\\t\\t\\tif ( dt0 < 1e-4 ) dt0 = dt1;\\r\\n\\t\\t\\tif ( dt2 < 1e-4 ) dt2 = dt1;\\r\\n\\r\\n\\t\\t\\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\\r\\n\\t\\t\\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\\r\\n\\t\\t\\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\\r\\n\\r\\n\\t\\t} else if ( this.curveType === 'catmullrom' ) {\\r\\n\\r\\n\\t\\t\\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\\r\\n\\t\\t\\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\\r\\n\\t\\t\\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpoint.set(\\r\\n\\t\\t\\tpx.calc( weight ),\\r\\n\\t\\t\\tpy.calc( weight ),\\r\\n\\t\\t\\tpz.calc( weight )\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\treturn point;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tCatmullRomCurve3.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.points = [];\\r\\n\\r\\n\\t\\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar point = source.points[ i ];\\r\\n\\r\\n\\t\\t\\tthis.points.push( point.clone() );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.closed = source.closed;\\r\\n\\t\\tthis.curveType = source.curveType;\\r\\n\\t\\tthis.tension = source.tension;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tCatmullRomCurve3.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tdata.points = [];\\r\\n\\r\\n\\t\\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar point = this.points[ i ];\\r\\n\\t\\t\\tdata.points.push( point.toArray() );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdata.closed = this.closed;\\r\\n\\t\\tdata.curveType = this.curveType;\\r\\n\\t\\tdata.tension = this.tension;\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\\r\\n\\r\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\tthis.points = [];\\r\\n\\r\\n\\t\\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar point = json.points[ i ];\\r\\n\\t\\t\\tthis.points.push( new Vector3().fromArray( point ) );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.closed = json.closed;\\r\\n\\t\\tthis.curveType = json.curveType;\\r\\n\\t\\tthis.tension = json.tension;\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t *\\r\\n\\t * Bezier Curves formulas obtained from\\r\\n\\t * http://en.wikipedia.org/wiki/Bézier_curve\\r\\n\\t */\\r\\n\\r\\n\\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\\r\\n\\r\\n\\t\\tvar v0 = ( p2 - p0 ) * 0.5;\\r\\n\\t\\tvar v1 = ( p3 - p1 ) * 0.5;\\r\\n\\t\\tvar t2 = t * t;\\r\\n\\t\\tvar t3 = t * t2;\\r\\n\\t\\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction QuadraticBezierP0( t, p ) {\\r\\n\\r\\n\\t\\tvar k = 1 - t;\\r\\n\\t\\treturn k * k * p;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction QuadraticBezierP1( t, p ) {\\r\\n\\r\\n\\t\\treturn 2 * ( 1 - t ) * t * p;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction QuadraticBezierP2( t, p ) {\\r\\n\\r\\n\\t\\treturn t * t * p;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction QuadraticBezier( t, p0, p1, p2 ) {\\r\\n\\r\\n\\t\\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\\r\\n\\t\\t\\tQuadraticBezierP2( t, p2 );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction CubicBezierP0( t, p ) {\\r\\n\\r\\n\\t\\tvar k = 1 - t;\\r\\n\\t\\treturn k * k * k * p;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction CubicBezierP1( t, p ) {\\r\\n\\r\\n\\t\\tvar k = 1 - t;\\r\\n\\t\\treturn 3 * k * k * t * p;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction CubicBezierP2( t, p ) {\\r\\n\\r\\n\\t\\treturn 3 * ( 1 - t ) * t * t * p;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction CubicBezierP3( t, p ) {\\r\\n\\r\\n\\t\\treturn t * t * t * p;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\\r\\n\\r\\n\\t\\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\\r\\n\\t\\t\\tCubicBezierP3( t, p3 );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'CubicBezierCurve';\\r\\n\\r\\n\\t\\tthis.v0 = v0 || new Vector2();\\r\\n\\t\\tthis.v1 = v1 || new Vector2();\\r\\n\\t\\tthis.v2 = v2 || new Vector2();\\r\\n\\t\\tthis.v3 = v3 || new Vector2();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\\r\\n\\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\\r\\n\\r\\n\\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\\r\\n\\r\\n\\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\tvar point = optionalTarget || new Vector2();\\r\\n\\r\\n\\t\\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\\r\\n\\r\\n\\t\\tpoint.set(\\r\\n\\t\\t\\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\\r\\n\\t\\t\\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\treturn point;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tCubicBezierCurve.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.v0.copy( source.v0 );\\r\\n\\t\\tthis.v1.copy( source.v1 );\\r\\n\\t\\tthis.v2.copy( source.v2 );\\r\\n\\t\\tthis.v3.copy( source.v3 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tCubicBezierCurve.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tdata.v0 = this.v0.toArray();\\r\\n\\t\\tdata.v1 = this.v1.toArray();\\r\\n\\t\\tdata.v2 = this.v2.toArray();\\r\\n\\t\\tdata.v3 = this.v3.toArray();\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\\r\\n\\r\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\tthis.v0.fromArray( json.v0 );\\r\\n\\t\\tthis.v1.fromArray( json.v1 );\\r\\n\\t\\tthis.v2.fromArray( json.v2 );\\r\\n\\t\\tthis.v3.fromArray( json.v3 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'CubicBezierCurve3';\\r\\n\\r\\n\\t\\tthis.v0 = v0 || new Vector3();\\r\\n\\t\\tthis.v1 = v1 || new Vector3();\\r\\n\\t\\tthis.v2 = v2 || new Vector3();\\r\\n\\t\\tthis.v3 = v3 || new Vector3();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\\r\\n\\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\\r\\n\\r\\n\\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\\r\\n\\r\\n\\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\tvar point = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\\r\\n\\r\\n\\t\\tpoint.set(\\r\\n\\t\\t\\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\\r\\n\\t\\t\\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\\r\\n\\t\\t\\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\treturn point;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tCubicBezierCurve3.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.v0.copy( source.v0 );\\r\\n\\t\\tthis.v1.copy( source.v1 );\\r\\n\\t\\tthis.v2.copy( source.v2 );\\r\\n\\t\\tthis.v3.copy( source.v3 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tCubicBezierCurve3.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tdata.v0 = this.v0.toArray();\\r\\n\\t\\tdata.v1 = this.v1.toArray();\\r\\n\\t\\tdata.v2 = this.v2.toArray();\\r\\n\\t\\tdata.v3 = this.v3.toArray();\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\\r\\n\\r\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\tthis.v0.fromArray( json.v0 );\\r\\n\\t\\tthis.v1.fromArray( json.v1 );\\r\\n\\t\\tthis.v2.fromArray( json.v2 );\\r\\n\\t\\tthis.v3.fromArray( json.v3 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tfunction LineCurve( v1, v2 ) {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'LineCurve';\\r\\n\\r\\n\\t\\tthis.v1 = v1 || new Vector2();\\r\\n\\t\\tthis.v2 = v2 || new Vector2();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLineCurve.prototype = Object.create( Curve.prototype );\\r\\n\\tLineCurve.prototype.constructor = LineCurve;\\r\\n\\r\\n\\tLineCurve.prototype.isLineCurve = true;\\r\\n\\r\\n\\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\tvar point = optionalTarget || new Vector2();\\r\\n\\r\\n\\t\\tif ( t === 1 ) {\\r\\n\\r\\n\\t\\t\\tpoint.copy( this.v2 );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tpoint.copy( this.v2 ).sub( this.v1 );\\r\\n\\t\\t\\tpoint.multiplyScalar( t ).add( this.v1 );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn point;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t// Line curve is linear, so we can overwrite default getPointAt\\r\\n\\r\\n\\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\\r\\n\\r\\n\\t\\treturn this.getPoint( u, optionalTarget );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tLineCurve.prototype.getTangent = function ( /* t */ ) {\\r\\n\\r\\n\\t\\tvar tangent = this.v2.clone().sub( this.v1 );\\r\\n\\r\\n\\t\\treturn tangent.normalize();\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tLineCurve.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.v1.copy( source.v1 );\\r\\n\\t\\tthis.v2.copy( source.v2 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tLineCurve.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tdata.v1 = this.v1.toArray();\\r\\n\\t\\tdata.v2 = this.v2.toArray();\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tLineCurve.prototype.fromJSON = function ( json ) {\\r\\n\\r\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\tthis.v1.fromArray( json.v1 );\\r\\n\\t\\tthis.v2.fromArray( json.v2 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tfunction LineCurve3( v1, v2 ) {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'LineCurve3';\\r\\n\\r\\n\\t\\tthis.v1 = v1 || new Vector3();\\r\\n\\t\\tthis.v2 = v2 || new Vector3();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLineCurve3.prototype = Object.create( Curve.prototype );\\r\\n\\tLineCurve3.prototype.constructor = LineCurve3;\\r\\n\\r\\n\\tLineCurve3.prototype.isLineCurve3 = true;\\r\\n\\r\\n\\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\tvar point = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\tif ( t === 1 ) {\\r\\n\\r\\n\\t\\t\\tpoint.copy( this.v2 );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tpoint.copy( this.v2 ).sub( this.v1 );\\r\\n\\t\\t\\tpoint.multiplyScalar( t ).add( this.v1 );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn point;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t// Line curve is linear, so we can overwrite default getPointAt\\r\\n\\r\\n\\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\\r\\n\\r\\n\\t\\treturn this.getPoint( u, optionalTarget );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tLineCurve3.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.v1.copy( source.v1 );\\r\\n\\t\\tthis.v2.copy( source.v2 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tLineCurve3.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tdata.v1 = this.v1.toArray();\\r\\n\\t\\tdata.v2 = this.v2.toArray();\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tLineCurve3.prototype.fromJSON = function ( json ) {\\r\\n\\r\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\tthis.v1.fromArray( json.v1 );\\r\\n\\t\\tthis.v2.fromArray( json.v2 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'QuadraticBezierCurve';\\r\\n\\r\\n\\t\\tthis.v0 = v0 || new Vector2();\\r\\n\\t\\tthis.v1 = v1 || new Vector2();\\r\\n\\t\\tthis.v2 = v2 || new Vector2();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\\r\\n\\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\\r\\n\\r\\n\\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\\r\\n\\r\\n\\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\tvar point = optionalTarget || new Vector2();\\r\\n\\r\\n\\t\\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\\r\\n\\r\\n\\t\\tpoint.set(\\r\\n\\t\\t\\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\\r\\n\\t\\t\\tQuadraticBezier( t, v0.y, v1.y, v2.y )\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\treturn point;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tQuadraticBezierCurve.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.v0.copy( source.v0 );\\r\\n\\t\\tthis.v1.copy( source.v1 );\\r\\n\\t\\tthis.v2.copy( source.v2 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tQuadraticBezierCurve.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tdata.v0 = this.v0.toArray();\\r\\n\\t\\tdata.v1 = this.v1.toArray();\\r\\n\\t\\tdata.v2 = this.v2.toArray();\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\\r\\n\\r\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\tthis.v0.fromArray( json.v0 );\\r\\n\\t\\tthis.v1.fromArray( json.v1 );\\r\\n\\t\\tthis.v2.fromArray( json.v2 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'QuadraticBezierCurve3';\\r\\n\\r\\n\\t\\tthis.v0 = v0 || new Vector3();\\r\\n\\t\\tthis.v1 = v1 || new Vector3();\\r\\n\\t\\tthis.v2 = v2 || new Vector3();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\\r\\n\\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\\r\\n\\r\\n\\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\\r\\n\\r\\n\\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\tvar point = optionalTarget || new Vector3();\\r\\n\\r\\n\\t\\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\\r\\n\\r\\n\\t\\tpoint.set(\\r\\n\\t\\t\\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\\r\\n\\t\\t\\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\\r\\n\\t\\t\\tQuadraticBezier( t, v0.z, v1.z, v2.z )\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\treturn point;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.v0.copy( source.v0 );\\r\\n\\t\\tthis.v1.copy( source.v1 );\\r\\n\\t\\tthis.v2.copy( source.v2 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tQuadraticBezierCurve3.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tdata.v0 = this.v0.toArray();\\r\\n\\t\\tdata.v1 = this.v1.toArray();\\r\\n\\t\\tdata.v2 = this.v2.toArray();\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\\r\\n\\r\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\tthis.v0.fromArray( json.v0 );\\r\\n\\t\\tthis.v1.fromArray( json.v1 );\\r\\n\\t\\tthis.v2.fromArray( json.v2 );\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tfunction SplineCurve( points /* array of Vector2 */ ) {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'SplineCurve';\\r\\n\\r\\n\\t\\tthis.points = points || [];\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSplineCurve.prototype = Object.create( Curve.prototype );\\r\\n\\tSplineCurve.prototype.constructor = SplineCurve;\\r\\n\\r\\n\\tSplineCurve.prototype.isSplineCurve = true;\\r\\n\\r\\n\\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\\r\\n\\r\\n\\t\\tvar point = optionalTarget || new Vector2();\\r\\n\\r\\n\\t\\tvar points = this.points;\\r\\n\\t\\tvar p = ( points.length - 1 ) * t;\\r\\n\\r\\n\\t\\tvar intPoint = Math.floor( p );\\r\\n\\t\\tvar weight = p - intPoint;\\r\\n\\r\\n\\t\\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\\r\\n\\t\\tvar p1 = points[ intPoint ];\\r\\n\\t\\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\\r\\n\\t\\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\\r\\n\\r\\n\\t\\tpoint.set(\\r\\n\\t\\t\\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\\r\\n\\t\\t\\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\treturn point;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tSplineCurve.prototype.copy = function ( source ) {\\r\\n\\r\\n\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\tthis.points = [];\\r\\n\\r\\n\\t\\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar point = source.points[ i ];\\r\\n\\r\\n\\t\\t\\tthis.points.push( point.clone() );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tSplineCurve.prototype.toJSON = function () {\\r\\n\\r\\n\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\tdata.points = [];\\r\\n\\r\\n\\t\\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar point = this.points[ i ];\\r\\n\\t\\t\\tdata.points.push( point.toArray() );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn data;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tSplineCurve.prototype.fromJSON = function ( json ) {\\r\\n\\r\\n\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\tthis.points = [];\\r\\n\\r\\n\\t\\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar point = json.points[ i ];\\r\\n\\t\\t\\tthis.points.push( new Vector2().fromArray( point ) );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\r\\n\\r\\n\\tvar Curves = Object.freeze({\\r\\n\\t\\tArcCurve: ArcCurve,\\r\\n\\t\\tCatmullRomCurve3: CatmullRomCurve3,\\r\\n\\t\\tCubicBezierCurve: CubicBezierCurve,\\r\\n\\t\\tCubicBezierCurve3: CubicBezierCurve3,\\r\\n\\t\\tEllipseCurve: EllipseCurve,\\r\\n\\t\\tLineCurve: LineCurve,\\r\\n\\t\\tLineCurve3: LineCurve3,\\r\\n\\t\\tQuadraticBezierCurve: QuadraticBezierCurve,\\r\\n\\t\\tQuadraticBezierCurve3: QuadraticBezierCurve3,\\r\\n\\t\\tSplineCurve: SplineCurve\\r\\n\\t});\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t *\\r\\n\\t **/\\r\\n\\r\\n\\t/**************************************************************\\r\\n\\t *\\tCurved Path - a curve path is simply a array of connected\\r\\n\\t *  curves, but retains the api of a curve\\r\\n\\t **************************************************************/\\r\\n\\r\\n\\tfunction CurvePath() {\\r\\n\\r\\n\\t\\tCurve.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'CurvePath';\\r\\n\\r\\n\\t\\tthis.curves = [];\\r\\n\\t\\tthis.autoClose = false; // Automatically closes the path\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: CurvePath,\\r\\n\\r\\n\\t\\tadd: function ( curve ) {\\r\\n\\r\\n\\t\\t\\tthis.curves.push( curve );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclosePath: function () {\\r\\n\\r\\n\\t\\t\\t// Add a line curve if start and end of lines are not connected\\r\\n\\t\\t\\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\\r\\n\\t\\t\\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\\r\\n\\r\\n\\t\\t\\tif ( ! startPoint.equals( endPoint ) ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// To get accurate point with reference to\\r\\n\\t\\t// entire path distance at time t,\\r\\n\\t\\t// following has to be done:\\r\\n\\r\\n\\t\\t// 1. Length of each sub path have to be known\\r\\n\\t\\t// 2. Locate and identify type of curve\\r\\n\\t\\t// 3. Get t for the curve\\r\\n\\t\\t// 4. Return curve.getPointAt(t')\\r\\n\\r\\n\\t\\tgetPoint: function ( t ) {\\r\\n\\r\\n\\t\\t\\tvar d = t * this.getLength();\\r\\n\\t\\t\\tvar curveLengths = this.getCurveLengths();\\r\\n\\t\\t\\tvar i = 0;\\r\\n\\r\\n\\t\\t\\t// To think about boundaries points.\\r\\n\\r\\n\\t\\t\\twhile ( i < curveLengths.length ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( curveLengths[ i ] >= d ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar diff = curveLengths[ i ] - d;\\r\\n\\t\\t\\t\\t\\tvar curve = this.curves[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tvar segmentLength = curve.getLength();\\r\\n\\t\\t\\t\\t\\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\\r\\n\\r\\n\\t\\t\\t\\t\\treturn curve.getPointAt( u );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ti ++;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t// loop where sum != 0, sum > d , sum+1 <d\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\\r\\n\\t\\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\\r\\n\\t\\t// getPoint() depends on getLength\\r\\n\\r\\n\\t\\tgetLength: function () {\\r\\n\\r\\n\\t\\t\\tvar lens = this.getCurveLengths();\\r\\n\\t\\t\\treturn lens[ lens.length - 1 ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// cacheLengths must be recalculated.\\r\\n\\t\\tupdateArcLengths: function () {\\r\\n\\r\\n\\t\\t\\tthis.needsUpdate = true;\\r\\n\\t\\t\\tthis.cacheLengths = null;\\r\\n\\t\\t\\tthis.getCurveLengths();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Compute lengths and cache them\\r\\n\\t\\t// We cannot overwrite getLengths() because UtoT mapping uses it.\\r\\n\\r\\n\\t\\tgetCurveLengths: function () {\\r\\n\\r\\n\\t\\t\\t// We use cache values if curves and cache array are same length\\r\\n\\r\\n\\t\\t\\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\\r\\n\\r\\n\\t\\t\\t\\treturn this.cacheLengths;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Get length of sub-curve\\r\\n\\t\\t\\t// Push sums into cached array\\r\\n\\r\\n\\t\\t\\tvar lengths = [], sums = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tsums += this.curves[ i ].getLength();\\r\\n\\t\\t\\t\\tlengths.push( sums );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.cacheLengths = lengths;\\r\\n\\r\\n\\t\\t\\treturn lengths;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetSpacedPoints: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\tif ( divisions === undefined ) divisions = 40;\\r\\n\\r\\n\\t\\t\\tvar points = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i <= divisions; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tpoints.push( this.getPoint( i / divisions ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.autoClose ) {\\r\\n\\r\\n\\t\\t\\t\\tpoints.push( points[ 0 ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn points;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetPoints: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\tdivisions = divisions || 12;\\r\\n\\r\\n\\t\\t\\tvar points = [], last;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar curve = curves[ i ];\\r\\n\\t\\t\\t\\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\\r\\n\\t\\t\\t\\t\\t: ( curve && curve.isLineCurve ) ? 1\\r\\n\\t\\t\\t\\t\\t\\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\\r\\n\\t\\t\\t\\t\\t\\t\\t: divisions;\\r\\n\\r\\n\\t\\t\\t\\tvar pts = curve.getPoints( resolution );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0; j < pts.length; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar point = pts[ j ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\\r\\n\\r\\n\\t\\t\\t\\t\\tpoints.push( point );\\r\\n\\t\\t\\t\\t\\tlast = point;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\\r\\n\\r\\n\\t\\t\\t\\tpoints.push( points[ 0 ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn points;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tCurve.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.curves = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar curve = source.curves[ i ];\\r\\n\\r\\n\\t\\t\\t\\tthis.curves.push( curve.clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.autoClose = source.autoClose;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function () {\\r\\n\\r\\n\\t\\t\\tvar data = Curve.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\t\\tdata.autoClose = this.autoClose;\\r\\n\\t\\t\\tdata.curves = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar curve = this.curves[ i ];\\r\\n\\t\\t\\t\\tdata.curves.push( curve.toJSON() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromJSON: function ( json ) {\\r\\n\\r\\n\\t\\t\\tCurve.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\t\\tthis.autoClose = json.autoClose;\\r\\n\\t\\t\\tthis.curves = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar curve = json.curves[ i ];\\r\\n\\t\\t\\t\\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t * Creates free form 2d path using series of points, lines or curves.\\r\\n\\t **/\\r\\n\\r\\n\\tfunction Path( points ) {\\r\\n\\r\\n\\t\\tCurvePath.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Path';\\r\\n\\r\\n\\t\\tthis.currentPoint = new Vector2();\\r\\n\\r\\n\\t\\tif ( points ) {\\r\\n\\r\\n\\t\\t\\tthis.setFromPoints( points );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Path,\\r\\n\\r\\n\\t\\tsetFromPoints: function ( points ) {\\r\\n\\r\\n\\t\\t\\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\\r\\n\\r\\n\\t\\t\\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.lineTo( points[ i ].x, points[ i ].y );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tmoveTo: function ( x, y ) {\\r\\n\\r\\n\\t\\t\\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlineTo: function ( x, y ) {\\r\\n\\r\\n\\t\\t\\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\\r\\n\\t\\t\\tthis.curves.push( curve );\\r\\n\\r\\n\\t\\t\\tthis.currentPoint.set( x, y );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\\r\\n\\r\\n\\t\\t\\tvar curve = new QuadraticBezierCurve(\\r\\n\\t\\t\\t\\tthis.currentPoint.clone(),\\r\\n\\t\\t\\t\\tnew Vector2( aCPx, aCPy ),\\r\\n\\t\\t\\t\\tnew Vector2( aX, aY )\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tthis.curves.push( curve );\\r\\n\\r\\n\\t\\t\\tthis.currentPoint.set( aX, aY );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\\r\\n\\r\\n\\t\\t\\tvar curve = new CubicBezierCurve(\\r\\n\\t\\t\\t\\tthis.currentPoint.clone(),\\r\\n\\t\\t\\t\\tnew Vector2( aCP1x, aCP1y ),\\r\\n\\t\\t\\t\\tnew Vector2( aCP2x, aCP2y ),\\r\\n\\t\\t\\t\\tnew Vector2( aX, aY )\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tthis.curves.push( curve );\\r\\n\\r\\n\\t\\t\\tthis.currentPoint.set( aX, aY );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsplineThru: function ( pts /*Array of Vector*/ ) {\\r\\n\\r\\n\\t\\t\\tvar npts = [ this.currentPoint.clone() ].concat( pts );\\r\\n\\r\\n\\t\\t\\tvar curve = new SplineCurve( npts );\\r\\n\\t\\t\\tthis.curves.push( curve );\\r\\n\\r\\n\\t\\t\\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\\r\\n\\r\\n\\t\\t\\tvar x0 = this.currentPoint.x;\\r\\n\\t\\t\\tvar y0 = this.currentPoint.y;\\r\\n\\r\\n\\t\\t\\tthis.absarc( aX + x0, aY + y0, aRadius,\\r\\n\\t\\t\\t\\taStartAngle, aEndAngle, aClockwise );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\\r\\n\\r\\n\\t\\t\\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\\r\\n\\r\\n\\t\\t\\tvar x0 = this.currentPoint.x;\\r\\n\\t\\t\\tvar y0 = this.currentPoint.y;\\r\\n\\r\\n\\t\\t\\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\\r\\n\\r\\n\\t\\t\\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\\r\\n\\r\\n\\t\\t\\tif ( this.curves.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t// if a previous curve is present, attempt to join\\r\\n\\t\\t\\t\\tvar firstPoint = curve.getPoint( 0 );\\r\\n\\r\\n\\t\\t\\t\\tif ( ! firstPoint.equals( this.currentPoint ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.lineTo( firstPoint.x, firstPoint.y );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.curves.push( curve );\\r\\n\\r\\n\\t\\t\\tvar lastPoint = curve.getPoint( 1 );\\r\\n\\t\\t\\tthis.currentPoint.copy( lastPoint );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tCurvePath.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.currentPoint.copy( source.currentPoint );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function () {\\r\\n\\r\\n\\t\\t\\tvar data = CurvePath.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\t\\tdata.currentPoint = this.currentPoint.toArray();\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromJSON: function ( json ) {\\r\\n\\r\\n\\t\\t\\tCurvePath.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\t\\tthis.currentPoint.fromArray( json.currentPoint );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t * Defines a 2d shape plane using paths.\\r\\n\\t **/\\r\\n\\r\\n\\t// STEP 1 Create a path.\\r\\n\\t// STEP 2 Turn path into shape.\\r\\n\\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\\r\\n\\t// STEP 3a - Extract points from each shape, turn to vertices\\r\\n\\t// STEP 3b - Triangulate each shape, add faces.\\r\\n\\r\\n\\tfunction Shape( points ) {\\r\\n\\r\\n\\t\\tPath.call( this, points );\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\tthis.type = 'Shape';\\r\\n\\r\\n\\t\\tthis.holes = [];\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Shape,\\r\\n\\r\\n\\t\\tgetPointsHoles: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\tvar holesPts = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn holesPts;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// get points of shape and holes (keypoints based on segments parameter)\\r\\n\\r\\n\\t\\textractPoints: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\treturn {\\r\\n\\r\\n\\t\\t\\t\\tshape: this.getPoints( divisions ),\\r\\n\\t\\t\\t\\tholes: this.getPointsHoles( divisions )\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tPath.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.holes = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar hole = source.holes[ i ];\\r\\n\\r\\n\\t\\t\\t\\tthis.holes.push( hole.clone() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function () {\\r\\n\\r\\n\\t\\t\\tvar data = Path.prototype.toJSON.call( this );\\r\\n\\r\\n\\t\\t\\tdata.uuid = this.uuid;\\r\\n\\t\\t\\tdata.holes = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar hole = this.holes[ i ];\\r\\n\\t\\t\\t\\tdata.holes.push( hole.toJSON() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfromJSON: function ( json ) {\\r\\n\\r\\n\\t\\t\\tPath.prototype.fromJSON.call( this, json );\\r\\n\\r\\n\\t\\t\\tthis.uuid = json.uuid;\\r\\n\\t\\t\\tthis.holes = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar hole = json.holes[ i ];\\r\\n\\t\\t\\t\\tthis.holes.push( new Path().fromJSON( hole ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Light( color, intensity ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Light';\\r\\n\\r\\n\\t\\tthis.color = new Color( color );\\r\\n\\t\\tthis.intensity = intensity !== undefined ? intensity : 1;\\r\\n\\r\\n\\t\\tthis.receiveShadow = undefined;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Light,\\r\\n\\r\\n\\t\\tisLight: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tObject3D.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.color.copy( source.color );\\r\\n\\t\\t\\tthis.intensity = source.intensity;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( meta ) {\\r\\n\\r\\n\\t\\t\\tvar data = Object3D.prototype.toJSON.call( this, meta );\\r\\n\\r\\n\\t\\t\\tdata.object.color = this.color.getHex();\\r\\n\\t\\t\\tdata.object.intensity = this.intensity;\\r\\n\\r\\n\\t\\t\\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\\r\\n\\r\\n\\t\\t\\tif ( this.distance !== undefined ) data.object.distance = this.distance;\\r\\n\\t\\t\\tif ( this.angle !== undefined ) data.object.angle = this.angle;\\r\\n\\t\\t\\tif ( this.decay !== undefined ) data.object.decay = this.decay;\\r\\n\\t\\t\\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\\r\\n\\r\\n\\t\\t\\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\\r\\n\\r\\n\\t\\tLight.call( this, skyColor, intensity );\\r\\n\\r\\n\\t\\tthis.type = 'HemisphereLight';\\r\\n\\r\\n\\t\\tthis.castShadow = undefined;\\r\\n\\r\\n\\t\\tthis.position.copy( Object3D.DefaultUp );\\r\\n\\t\\tthis.updateMatrix();\\r\\n\\r\\n\\t\\tthis.groundColor = new Color( groundColor );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: HemisphereLight,\\r\\n\\r\\n\\t\\tisHemisphereLight: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tLight.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.groundColor.copy( source.groundColor );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction LightShadow( camera ) {\\r\\n\\r\\n\\t\\tthis.camera = camera;\\r\\n\\r\\n\\t\\tthis.bias = 0;\\r\\n\\t\\tthis.radius = 1;\\r\\n\\r\\n\\t\\tthis.mapSize = new Vector2( 512, 512 );\\r\\n\\r\\n\\t\\tthis.map = null;\\r\\n\\t\\tthis.matrix = new Matrix4();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( LightShadow.prototype, {\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tthis.camera = source.camera.clone();\\r\\n\\r\\n\\t\\t\\tthis.bias = source.bias;\\r\\n\\t\\t\\tthis.radius = source.radius;\\r\\n\\r\\n\\t\\t\\tthis.mapSize.copy( source.mapSize );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function () {\\r\\n\\r\\n\\t\\t\\tvar object = {};\\r\\n\\r\\n\\t\\t\\tif ( this.bias !== 0 ) object.bias = this.bias;\\r\\n\\t\\t\\tif ( this.radius !== 1 ) object.radius = this.radius;\\r\\n\\t\\t\\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\\r\\n\\r\\n\\t\\t\\tobject.camera = this.camera.toJSON( false ).object;\\r\\n\\t\\t\\tdelete object.camera.matrix;\\r\\n\\r\\n\\t\\t\\treturn object;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction SpotLightShadow() {\\r\\n\\r\\n\\t\\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: SpotLightShadow,\\r\\n\\r\\n\\t\\tisSpotLightShadow: true,\\r\\n\\r\\n\\t\\tupdate: function ( light ) {\\r\\n\\r\\n\\t\\t\\tvar camera = this.camera;\\r\\n\\r\\n\\t\\t\\tvar fov = _Math.RAD2DEG * 2 * light.angle;\\r\\n\\t\\t\\tvar aspect = this.mapSize.width / this.mapSize.height;\\r\\n\\t\\t\\tvar far = light.distance || camera.far;\\r\\n\\r\\n\\t\\t\\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\\r\\n\\r\\n\\t\\t\\t\\tcamera.fov = fov;\\r\\n\\t\\t\\t\\tcamera.aspect = aspect;\\r\\n\\t\\t\\t\\tcamera.far = far;\\r\\n\\t\\t\\t\\tcamera.updateProjectionMatrix();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\\r\\n\\r\\n\\t\\tLight.call( this, color, intensity );\\r\\n\\r\\n\\t\\tthis.type = 'SpotLight';\\r\\n\\r\\n\\t\\tthis.position.copy( Object3D.DefaultUp );\\r\\n\\t\\tthis.updateMatrix();\\r\\n\\r\\n\\t\\tthis.target = new Object3D();\\r\\n\\r\\n\\t\\tObject.defineProperty( this, 'power', {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\t// intensity = power per solid angle.\\r\\n\\t\\t\\t\\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\\r\\n\\t\\t\\t\\treturn this.intensity * Math.PI;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( power ) {\\r\\n\\r\\n\\t\\t\\t\\t// intensity = power per solid angle.\\r\\n\\t\\t\\t\\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\\r\\n\\t\\t\\t\\tthis.intensity = power / Math.PI;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t} );\\r\\n\\r\\n\\t\\tthis.distance = ( distance !== undefined ) ? distance : 0;\\r\\n\\t\\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\\r\\n\\t\\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\\r\\n\\t\\tthis.decay = ( decay !== undefined ) ? decay : 1;\\t// for physically correct lights, should be 2.\\r\\n\\r\\n\\t\\tthis.shadow = new SpotLightShadow();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: SpotLight,\\r\\n\\r\\n\\t\\tisSpotLight: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tLight.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.distance = source.distance;\\r\\n\\t\\t\\tthis.angle = source.angle;\\r\\n\\t\\t\\tthis.penumbra = source.penumbra;\\r\\n\\t\\t\\tthis.decay = source.decay;\\r\\n\\r\\n\\t\\t\\tthis.target = source.target.clone();\\r\\n\\r\\n\\t\\t\\tthis.shadow = source.shadow.clone();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\r\\n\\tfunction PointLight( color, intensity, distance, decay ) {\\r\\n\\r\\n\\t\\tLight.call( this, color, intensity );\\r\\n\\r\\n\\t\\tthis.type = 'PointLight';\\r\\n\\r\\n\\t\\tObject.defineProperty( this, 'power', {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\t// intensity = power per solid angle.\\r\\n\\t\\t\\t\\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\\r\\n\\t\\t\\t\\treturn this.intensity * 4 * Math.PI;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( power ) {\\r\\n\\r\\n\\t\\t\\t\\t// intensity = power per solid angle.\\r\\n\\t\\t\\t\\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\\r\\n\\t\\t\\t\\tthis.intensity = power / ( 4 * Math.PI );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t} );\\r\\n\\r\\n\\t\\tthis.distance = ( distance !== undefined ) ? distance : 0;\\r\\n\\t\\tthis.decay = ( decay !== undefined ) ? decay : 1;\\t// for physically correct lights, should be 2.\\r\\n\\r\\n\\t\\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: PointLight,\\r\\n\\r\\n\\t\\tisPointLight: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tLight.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.distance = source.distance;\\r\\n\\t\\t\\tthis.decay = source.decay;\\r\\n\\r\\n\\t\\t\\tthis.shadow = source.shadow.clone();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction DirectionalLightShadow( ) {\\r\\n\\r\\n\\t\\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: DirectionalLightShadow\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction DirectionalLight( color, intensity ) {\\r\\n\\r\\n\\t\\tLight.call( this, color, intensity );\\r\\n\\r\\n\\t\\tthis.type = 'DirectionalLight';\\r\\n\\r\\n\\t\\tthis.position.copy( Object3D.DefaultUp );\\r\\n\\t\\tthis.updateMatrix();\\r\\n\\r\\n\\t\\tthis.target = new Object3D();\\r\\n\\r\\n\\t\\tthis.shadow = new DirectionalLightShadow();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: DirectionalLight,\\r\\n\\r\\n\\t\\tisDirectionalLight: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tLight.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.target = source.target.clone();\\r\\n\\r\\n\\t\\t\\tthis.shadow = source.shadow.clone();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction AmbientLight( color, intensity ) {\\r\\n\\r\\n\\t\\tLight.call( this, color, intensity );\\r\\n\\r\\n\\t\\tthis.type = 'AmbientLight';\\r\\n\\r\\n\\t\\tthis.castShadow = undefined;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: AmbientLight,\\r\\n\\r\\n\\t\\tisAmbientLight: true\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author abelnation / http://github.com/abelnation\\r\\n\\t */\\r\\n\\r\\n\\tfunction RectAreaLight( color, intensity, width, height ) {\\r\\n\\r\\n\\t\\tLight.call( this, color, intensity );\\r\\n\\r\\n\\t\\tthis.type = 'RectAreaLight';\\r\\n\\r\\n\\t\\tthis.position.set( 0, 1, 0 );\\r\\n\\t\\tthis.updateMatrix();\\r\\n\\r\\n\\t\\tthis.width = ( width !== undefined ) ? width : 10;\\r\\n\\t\\tthis.height = ( height !== undefined ) ? height : 10;\\r\\n\\r\\n\\t\\t// TODO (abelnation): distance/decay\\r\\n\\r\\n\\t\\t// TODO (abelnation): update method for RectAreaLight to update transform to lookat target\\r\\n\\r\\n\\t\\t// TODO (abelnation): shadows\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// TODO (abelnation): RectAreaLight update when light shape is changed\\r\\n\\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: RectAreaLight,\\r\\n\\r\\n\\t\\tisRectAreaLight: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tLight.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.width = source.width;\\r\\n\\t\\t\\tthis.height = source.height;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( meta ) {\\r\\n\\r\\n\\t\\t\\tvar data = Light.prototype.toJSON.call( this, meta );\\r\\n\\r\\n\\t\\t\\tdata.object.width = this.width;\\r\\n\\t\\t\\tdata.object.height = this.height;\\r\\n\\r\\n\\t\\t\\treturn data;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * A Track that interpolates Strings\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\\r\\n\\r\\n\\t\\tKeyframeTrack.call( this, name, times, values, interpolation );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: StringKeyframeTrack,\\r\\n\\r\\n\\t\\tValueTypeName: 'string',\\r\\n\\t\\tValueBufferType: Array,\\r\\n\\r\\n\\t\\tDefaultInterpolation: InterpolateDiscrete,\\r\\n\\r\\n\\t\\tInterpolantFactoryMethodLinear: undefined,\\r\\n\\r\\n\\t\\tInterpolantFactoryMethodSmooth: undefined\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * A Track of Boolean keyframe values.\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction BooleanKeyframeTrack( name, times, values ) {\\r\\n\\r\\n\\t\\tKeyframeTrack.call( this, name, times, values );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: BooleanKeyframeTrack,\\r\\n\\r\\n\\t\\tValueTypeName: 'bool',\\r\\n\\t\\tValueBufferType: Array,\\r\\n\\r\\n\\t\\tDefaultInterpolation: InterpolateDiscrete,\\r\\n\\r\\n\\t\\tInterpolantFactoryMethodLinear: undefined,\\r\\n\\t\\tInterpolantFactoryMethodSmooth: undefined\\r\\n\\r\\n\\t\\t// Note: Actually this track could have a optimized / compressed\\r\\n\\t\\t// representation of a single value and a custom interpolant that\\r\\n\\t\\t// computes \\\"firstValue ^ isOdd( index )\\\".\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * Abstract base class of interpolants over parametric samples.\\r\\n\\t *\\r\\n\\t * The parameter domain is one dimensional, typically the time or a path\\r\\n\\t * along a curve defined by the data.\\r\\n\\t *\\r\\n\\t * The sample values can have any dimensionality and derived classes may\\r\\n\\t * apply special interpretations to the data.\\r\\n\\t *\\r\\n\\t * This class provides the interval seek in a Template Method, deferring\\r\\n\\t * the actual interpolation to derived classes.\\r\\n\\t *\\r\\n\\t * Time complexity is O(1) for linear access crossing at most two points\\r\\n\\t * and O(log N) for random access, where N is the number of positions.\\r\\n\\t *\\r\\n\\t * References:\\r\\n\\t *\\r\\n\\t * \\t\\thttp://www.oodesign.com/template-method-pattern.html\\r\\n\\t *\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\r\\n\\r\\n\\t\\tthis.parameterPositions = parameterPositions;\\r\\n\\t\\tthis._cachedIndex = 0;\\r\\n\\r\\n\\t\\tthis.resultBuffer = resultBuffer !== undefined ?\\r\\n\\t\\t\\tresultBuffer : new sampleValues.constructor( sampleSize );\\r\\n\\t\\tthis.sampleValues = sampleValues;\\r\\n\\t\\tthis.valueSize = sampleSize;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Interpolant.prototype, {\\r\\n\\r\\n\\t\\tevaluate: function ( t ) {\\r\\n\\r\\n\\t\\t\\tvar pp = this.parameterPositions,\\r\\n\\t\\t\\t\\ti1 = this._cachedIndex,\\r\\n\\r\\n\\t\\t\\t\\tt1 = pp[ i1 ],\\r\\n\\t\\t\\t\\tt0 = pp[ i1 - 1 ];\\r\\n\\r\\n\\t\\t\\tvalidate_interval: {\\r\\n\\r\\n\\t\\t\\t\\tseek: {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar right;\\r\\n\\r\\n\\t\\t\\t\\t\\tlinear_scan: {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t//- See http://jsperf.com/comparison-to-undefined/3\\r\\n\\t\\t\\t\\t\\t\\t//- slower code:\\r\\n\\t\\t\\t\\t\\t\\t//-\\r\\n\\t\\t\\t\\t\\t\\t//- \\t\\t\\t\\tif ( t >= t1 || t1 === undefined ) {\\r\\n\\t\\t\\t\\t\\t\\tforward_scan: if ( ! ( t < t1 ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( var giveUpAt = i1 + 2; ; ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( t1 === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif ( t < t0 ) break forward_scan;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// after end\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ti1 = pp.length;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tthis._cachedIndex = i1;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn this.afterEnd_( i1 - 1, t, t0 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( i1 === giveUpAt ) break; // this loop\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tt0 = t1;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tt1 = pp[ ++ i1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( t < t1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// we have arrived at the sought interval\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak seek;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// prepare binary search on the right side of the index\\r\\n\\t\\t\\t\\t\\t\\t\\tright = pp.length;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak linear_scan;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t//- slower code:\\r\\n\\t\\t\\t\\t\\t\\t//-\\t\\t\\t\\t\\tif ( t < t0 || t0 === undefined ) {\\r\\n\\t\\t\\t\\t\\t\\tif ( ! ( t >= t0 ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// looping?\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar t1global = pp[ 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( t < t1global ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ti1 = 2; // + 1, using the scan for the details\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tt0 = t1global;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// linear reverse scan\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( var giveUpAt = i1 - 2; ; ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( t0 === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// before start\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tthis._cachedIndex = 0;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn this.beforeStart_( 0, t, t1 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( i1 === giveUpAt ) break; // this loop\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tt1 = t0;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tt0 = pp[ -- i1 - 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( t >= t0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// we have arrived at the sought interval\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak seek;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// prepare binary search on the left side of the index\\r\\n\\t\\t\\t\\t\\t\\t\\tright = i1;\\r\\n\\t\\t\\t\\t\\t\\t\\ti1 = 0;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak linear_scan;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// the interval is valid\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak validate_interval;\\r\\n\\r\\n\\t\\t\\t\\t\\t} // linear scan\\r\\n\\r\\n\\t\\t\\t\\t\\t// binary search\\r\\n\\r\\n\\t\\t\\t\\t\\twhile ( i1 < right ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar mid = ( i1 + right ) >>> 1;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( t < pp[ mid ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tright = mid;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ti1 = mid + 1;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tt1 = pp[ i1 ];\\r\\n\\t\\t\\t\\t\\tt0 = pp[ i1 - 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t// check boundary cases, again\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( t0 === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis._cachedIndex = 0;\\r\\n\\t\\t\\t\\t\\t\\treturn this.beforeStart_( 0, t, t1 );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( t1 === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ti1 = pp.length;\\r\\n\\t\\t\\t\\t\\t\\tthis._cachedIndex = i1;\\r\\n\\t\\t\\t\\t\\t\\treturn this.afterEnd_( i1 - 1, t0, t );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} // seek\\r\\n\\r\\n\\t\\t\\t\\tthis._cachedIndex = i1;\\r\\n\\r\\n\\t\\t\\t\\tthis.intervalChanged_( i1, t0, t1 );\\r\\n\\r\\n\\t\\t\\t} // validate_interval\\r\\n\\r\\n\\t\\t\\treturn this.interpolate_( i1, t0, t, t1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsettings: null, // optional, subclass-specific settings structure\\r\\n\\t\\t// Note: The indirection allows central control of many interpolants.\\r\\n\\r\\n\\t\\t// --- Protected interface\\r\\n\\r\\n\\t\\tDefaultSettings_: {},\\r\\n\\r\\n\\t\\tgetSettings_: function () {\\r\\n\\r\\n\\t\\t\\treturn this.settings || this.DefaultSettings_;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopySampleValue_: function ( index ) {\\r\\n\\r\\n\\t\\t\\t// copies a sample value to the result buffer\\r\\n\\r\\n\\t\\t\\tvar result = this.resultBuffer,\\r\\n\\t\\t\\t\\tvalues = this.sampleValues,\\r\\n\\t\\t\\t\\tstride = this.valueSize,\\r\\n\\t\\t\\t\\toffset = index * stride;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tresult[ i ] = values[ offset + i ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Template methods for derived classes:\\r\\n\\r\\n\\t\\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\\r\\n\\r\\n\\t\\t\\tthrow new Error( 'call to abstract method' );\\r\\n\\t\\t\\t// implementations shall return this.resultBuffer\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\\r\\n\\r\\n\\t\\t\\t// empty\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//!\\\\ DECLARE ALIAS AFTER assign prototype !\\r\\n\\tObject.assign( Interpolant.prototype, {\\r\\n\\r\\n\\t\\t//( 0, t, t0 ), returns this.resultBuffer\\r\\n\\t\\tbeforeStart_: Interpolant.prototype.copySampleValue_,\\r\\n\\r\\n\\t\\t//( N-1, tN-1, t ), returns this.resultBuffer\\r\\n\\t\\tafterEnd_: Interpolant.prototype.copySampleValue_,\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * Spherical linear unit quaternion interpolant.\\r\\n\\t *\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\r\\n\\r\\n\\t\\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: QuaternionLinearInterpolant,\\r\\n\\r\\n\\t\\tinterpolate_: function ( i1, t0, t, t1 ) {\\r\\n\\r\\n\\t\\t\\tvar result = this.resultBuffer,\\r\\n\\t\\t\\t\\tvalues = this.sampleValues,\\r\\n\\t\\t\\t\\tstride = this.valueSize,\\r\\n\\r\\n\\t\\t\\t\\toffset = i1 * stride,\\r\\n\\r\\n\\t\\t\\t\\talpha = ( t - t0 ) / ( t1 - t0 );\\r\\n\\r\\n\\t\\t\\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\\r\\n\\r\\n\\t\\t\\t\\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * A Track of quaternion keyframe values.\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\\r\\n\\r\\n\\t\\tKeyframeTrack.call( this, name, times, values, interpolation );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: QuaternionKeyframeTrack,\\r\\n\\r\\n\\t\\tValueTypeName: 'quaternion',\\r\\n\\r\\n\\t\\t// ValueBufferType is inherited\\r\\n\\r\\n\\t\\tDefaultInterpolation: InterpolateLinear,\\r\\n\\r\\n\\t\\tInterpolantFactoryMethodLinear: function ( result ) {\\r\\n\\r\\n\\t\\t\\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * A Track of keyframe values that represent color.\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\\r\\n\\r\\n\\t\\tKeyframeTrack.call( this, name, times, values, interpolation );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: ColorKeyframeTrack,\\r\\n\\r\\n\\t\\tValueTypeName: 'color'\\r\\n\\r\\n\\t\\t// ValueBufferType is inherited\\r\\n\\r\\n\\t\\t// DefaultInterpolation is inherited\\r\\n\\r\\n\\t\\t// Note: Very basic implementation and nothing special yet.\\r\\n\\t\\t// However, this is the place for color space parameterization.\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * A Track of numeric keyframe values.\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\\r\\n\\r\\n\\t\\tKeyframeTrack.call( this, name, times, values, interpolation );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: NumberKeyframeTrack,\\r\\n\\r\\n\\t\\tValueTypeName: 'number'\\r\\n\\r\\n\\t\\t// ValueBufferType is inherited\\r\\n\\r\\n\\t\\t// DefaultInterpolation is inherited\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * Fast and simple cubic spline interpolant.\\r\\n\\t *\\r\\n\\t * It was derived from a Hermitian construction setting the first derivative\\r\\n\\t * at each sample position to the linear slope between neighboring positions\\r\\n\\t * over their parameter interval.\\r\\n\\t *\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\r\\n\\r\\n\\t\\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\\r\\n\\r\\n\\t\\tthis._weightPrev = - 0;\\r\\n\\t\\tthis._offsetPrev = - 0;\\r\\n\\t\\tthis._weightNext = - 0;\\r\\n\\t\\tthis._offsetNext = - 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: CubicInterpolant,\\r\\n\\r\\n\\t\\tDefaultSettings_: {\\r\\n\\r\\n\\t\\t\\tendingStart: ZeroCurvatureEnding,\\r\\n\\t\\t\\tendingEnd: ZeroCurvatureEnding\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintervalChanged_: function ( i1, t0, t1 ) {\\r\\n\\r\\n\\t\\t\\tvar pp = this.parameterPositions,\\r\\n\\t\\t\\t\\tiPrev = i1 - 2,\\r\\n\\t\\t\\t\\tiNext = i1 + 1,\\r\\n\\r\\n\\t\\t\\t\\ttPrev = pp[ iPrev ],\\r\\n\\t\\t\\t\\ttNext = pp[ iNext ];\\r\\n\\r\\n\\t\\t\\tif ( tPrev === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tswitch ( this.getSettings_().endingStart ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase ZeroSlopeEnding:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// f'(t0) = 0\\r\\n\\t\\t\\t\\t\\t\\tiPrev = i1;\\r\\n\\t\\t\\t\\t\\t\\ttPrev = 2 * t0 - t1;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase WrapAroundEnding:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// use the other end of the curve\\r\\n\\t\\t\\t\\t\\t\\tiPrev = pp.length - 2;\\r\\n\\t\\t\\t\\t\\t\\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tdefault: // ZeroCurvatureEnding\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// f''(t0) = 0 a.k.a. Natural Spline\\r\\n\\t\\t\\t\\t\\t\\tiPrev = i1;\\r\\n\\t\\t\\t\\t\\t\\ttPrev = t1;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( tNext === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tswitch ( this.getSettings_().endingEnd ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase ZeroSlopeEnding:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// f'(tN) = 0\\r\\n\\t\\t\\t\\t\\t\\tiNext = i1;\\r\\n\\t\\t\\t\\t\\t\\ttNext = 2 * t1 - t0;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase WrapAroundEnding:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// use the other end of the curve\\r\\n\\t\\t\\t\\t\\t\\tiNext = 1;\\r\\n\\t\\t\\t\\t\\t\\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tdefault: // ZeroCurvatureEnding\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// f''(tN) = 0, a.k.a. Natural Spline\\r\\n\\t\\t\\t\\t\\t\\tiNext = i1 - 1;\\r\\n\\t\\t\\t\\t\\t\\ttNext = t0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar halfDt = ( t1 - t0 ) * 0.5,\\r\\n\\t\\t\\t\\tstride = this.valueSize;\\r\\n\\r\\n\\t\\t\\tthis._weightPrev = halfDt / ( t0 - tPrev );\\r\\n\\t\\t\\tthis._weightNext = halfDt / ( tNext - t1 );\\r\\n\\t\\t\\tthis._offsetPrev = iPrev * stride;\\r\\n\\t\\t\\tthis._offsetNext = iNext * stride;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tinterpolate_: function ( i1, t0, t, t1 ) {\\r\\n\\r\\n\\t\\t\\tvar result = this.resultBuffer,\\r\\n\\t\\t\\t\\tvalues = this.sampleValues,\\r\\n\\t\\t\\t\\tstride = this.valueSize,\\r\\n\\r\\n\\t\\t\\t\\to1 = i1 * stride,\\t\\to0 = o1 - stride,\\r\\n\\t\\t\\t\\toP = this._offsetPrev, \\toN = this._offsetNext,\\r\\n\\t\\t\\t\\twP = this._weightPrev,\\twN = this._weightNext,\\r\\n\\r\\n\\t\\t\\t\\tp = ( t - t0 ) / ( t1 - t0 ),\\r\\n\\t\\t\\t\\tpp = p * p,\\r\\n\\t\\t\\t\\tppp = pp * p;\\r\\n\\r\\n\\t\\t\\t// evaluate polynomials\\r\\n\\r\\n\\t\\t\\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\\r\\n\\t\\t\\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\\r\\n\\t\\t\\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\\r\\n\\t\\t\\tvar sN = wN * ppp - wN * pp;\\r\\n\\r\\n\\t\\t\\t// combine data linearly\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tresult[ i ] =\\r\\n\\t\\t\\t\\t\\t\\tsP * values[ oP + i ] +\\r\\n\\t\\t\\t\\t\\t\\ts0 * values[ o0 + i ] +\\r\\n\\t\\t\\t\\t\\t\\ts1 * values[ o1 + i ] +\\r\\n\\t\\t\\t\\t\\t\\tsN * values[ oN + i ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\r\\n\\r\\n\\t\\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: LinearInterpolant,\\r\\n\\r\\n\\t\\tinterpolate_: function ( i1, t0, t, t1 ) {\\r\\n\\r\\n\\t\\t\\tvar result = this.resultBuffer,\\r\\n\\t\\t\\t\\tvalues = this.sampleValues,\\r\\n\\t\\t\\t\\tstride = this.valueSize,\\r\\n\\r\\n\\t\\t\\t\\toffset1 = i1 * stride,\\r\\n\\t\\t\\t\\toffset0 = offset1 - stride,\\r\\n\\r\\n\\t\\t\\t\\tweight1 = ( t - t0 ) / ( t1 - t0 ),\\r\\n\\t\\t\\t\\tweight0 = 1 - weight1;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tresult[ i ] =\\r\\n\\t\\t\\t\\t\\t\\tvalues[ offset0 + i ] * weight0 +\\r\\n\\t\\t\\t\\t\\t\\tvalues[ offset1 + i ] * weight1;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * Interpolant that evaluates to the sample value at the position preceeding\\r\\n\\t * the parameter.\\r\\n\\t *\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\\r\\n\\r\\n\\t\\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: DiscreteInterpolant,\\r\\n\\r\\n\\t\\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\\r\\n\\r\\n\\t\\t\\treturn this.copySampleValue_( i1 - 1 );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author tschw\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t */\\r\\n\\r\\n\\tvar AnimationUtils = {\\r\\n\\r\\n\\t\\t// same as Array.prototype.slice, but also works on typed arrays\\r\\n\\t\\tarraySlice: function ( array, from, to ) {\\r\\n\\r\\n\\t\\t\\tif ( AnimationUtils.isTypedArray( array ) ) {\\r\\n\\r\\n\\t\\t\\t\\t// in ios9 array.subarray(from, undefined) will return empty array\\r\\n\\t\\t\\t\\t// but array.subarray(from) or array.subarray(from, len) is correct\\r\\n\\t\\t\\t\\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn array.slice( from, to );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// converts an array to a specific type\\r\\n\\t\\tconvertArray: function ( array, type, forceClone ) {\\r\\n\\r\\n\\t\\t\\tif ( ! array || // let 'undefined' and 'null' pass\\r\\n\\t\\t\\t\\t\\t! forceClone && array.constructor === type ) return array;\\r\\n\\r\\n\\t\\t\\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\\r\\n\\r\\n\\t\\t\\t\\treturn new type( array ); // create typed array\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn Array.prototype.slice.call( array ); // create Array\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tisTypedArray: function ( object ) {\\r\\n\\r\\n\\t\\t\\treturn ArrayBuffer.isView( object ) &&\\r\\n\\t\\t\\t\\t\\t! ( object instanceof DataView );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// returns an array by which times and values can be sorted\\r\\n\\t\\tgetKeyframeOrder: function ( times ) {\\r\\n\\r\\n\\t\\t\\tfunction compareTime( i, j ) {\\r\\n\\r\\n\\t\\t\\t\\treturn times[ i ] - times[ j ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar n = times.length;\\r\\n\\t\\t\\tvar result = new Array( n );\\r\\n\\t\\t\\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\\r\\n\\r\\n\\t\\t\\tresult.sort( compareTime );\\r\\n\\r\\n\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// uses the array previously returned by 'getKeyframeOrder' to sort data\\r\\n\\t\\tsortedArray: function ( values, stride, order ) {\\r\\n\\r\\n\\t\\t\\tvar nValues = values.length;\\r\\n\\t\\t\\tvar result = new values.constructor( nValues );\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar srcOffset = order[ i ] * stride;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0; j !== stride; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn result;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// function for parsing AOS keyframe formats\\r\\n\\t\\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\\r\\n\\r\\n\\t\\t\\tvar i = 1, key = jsonKeys[ 0 ];\\r\\n\\r\\n\\t\\t\\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tkey = jsonKeys[ i ++ ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( key === undefined ) return; // no data\\r\\n\\r\\n\\t\\t\\tvar value = key[ valuePropertyName ];\\r\\n\\t\\t\\tif ( value === undefined ) return; // no data\\r\\n\\r\\n\\t\\t\\tif ( Array.isArray( value ) ) {\\r\\n\\r\\n\\t\\t\\t\\tdo {\\r\\n\\r\\n\\t\\t\\t\\t\\tvalue = key[ valuePropertyName ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( value !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttimes.push( key.time );\\r\\n\\t\\t\\t\\t\\t\\tvalues.push.apply( values, value ); // push all elements\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tkey = jsonKeys[ i ++ ];\\r\\n\\r\\n\\t\\t\\t\\t} while ( key !== undefined );\\r\\n\\r\\n\\t\\t\\t} else if ( value.toArray !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// ...assume THREE.Math-ish\\r\\n\\r\\n\\t\\t\\t\\tdo {\\r\\n\\r\\n\\t\\t\\t\\t\\tvalue = key[ valuePropertyName ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( value !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttimes.push( key.time );\\r\\n\\t\\t\\t\\t\\t\\tvalue.toArray( values, values.length );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tkey = jsonKeys[ i ++ ];\\r\\n\\r\\n\\t\\t\\t\\t} while ( key !== undefined );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// otherwise push as-is\\r\\n\\r\\n\\t\\t\\t\\tdo {\\r\\n\\r\\n\\t\\t\\t\\t\\tvalue = key[ valuePropertyName ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( value !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttimes.push( key.time );\\r\\n\\t\\t\\t\\t\\t\\tvalues.push( value );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tkey = jsonKeys[ i ++ ];\\r\\n\\r\\n\\t\\t\\t\\t} while ( key !== undefined );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * A timed sequence of keyframes for a specific property.\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction KeyframeTrack( name, times, values, interpolation ) {\\r\\n\\r\\n\\t\\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\\r\\n\\t\\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\\r\\n\\r\\n\\t\\tthis.name = name;\\r\\n\\r\\n\\t\\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\\r\\n\\t\\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\\r\\n\\r\\n\\t\\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\\r\\n\\r\\n\\t\\tthis.validate();\\r\\n\\t\\tthis.optimize();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// Static methods:\\r\\n\\r\\n\\tObject.assign( KeyframeTrack, {\\r\\n\\r\\n\\t\\t// Serialization (in static context, because of constructor invocation\\r\\n\\t\\t// and automatic invocation of .toJSON):\\r\\n\\r\\n\\t\\tparse: function ( json ) {\\r\\n\\r\\n\\t\\t\\tif ( json.type === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\\r\\n\\r\\n\\t\\t\\tif ( json.times === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar times = [], values = [];\\r\\n\\r\\n\\t\\t\\t\\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\\r\\n\\r\\n\\t\\t\\t\\tjson.times = times;\\r\\n\\t\\t\\t\\tjson.values = values;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// derived classes can define a static parse method\\r\\n\\t\\t\\tif ( trackType.parse !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\treturn trackType.parse( json );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// by default, we assume a constructor compatible with the base\\r\\n\\t\\t\\t\\treturn new trackType( json.name, json.times, json.values, json.interpolation );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( track ) {\\r\\n\\r\\n\\t\\t\\tvar trackType = track.constructor;\\r\\n\\r\\n\\t\\t\\tvar json;\\r\\n\\r\\n\\t\\t\\t// derived classes can define a static toJSON method\\r\\n\\t\\t\\tif ( trackType.toJSON !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tjson = trackType.toJSON( track );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// by default, we assume the data can be serialized as-is\\r\\n\\t\\t\\t\\tjson = {\\r\\n\\r\\n\\t\\t\\t\\t\\t'name': track.name,\\r\\n\\t\\t\\t\\t\\t'times': AnimationUtils.convertArray( track.times, Array ),\\r\\n\\t\\t\\t\\t\\t'values': AnimationUtils.convertArray( track.values, Array )\\r\\n\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\tvar interpolation = track.getInterpolation();\\r\\n\\r\\n\\t\\t\\t\\tif ( interpolation !== track.DefaultInterpolation ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tjson.interpolation = interpolation;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tjson.type = track.ValueTypeName; // mandatory\\r\\n\\r\\n\\t\\t\\treturn json;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_getTrackTypeForValueTypeName: function ( typeName ) {\\r\\n\\r\\n\\t\\t\\tswitch ( typeName.toLowerCase() ) {\\r\\n\\r\\n\\t\\t\\t\\tcase 'scalar':\\r\\n\\t\\t\\t\\tcase 'double':\\r\\n\\t\\t\\t\\tcase 'float':\\r\\n\\t\\t\\t\\tcase 'number':\\r\\n\\t\\t\\t\\tcase 'integer':\\r\\n\\r\\n\\t\\t\\t\\t\\treturn NumberKeyframeTrack;\\r\\n\\r\\n\\t\\t\\t\\tcase 'vector':\\r\\n\\t\\t\\t\\tcase 'vector2':\\r\\n\\t\\t\\t\\tcase 'vector3':\\r\\n\\t\\t\\t\\tcase 'vector4':\\r\\n\\r\\n\\t\\t\\t\\t\\treturn VectorKeyframeTrack;\\r\\n\\r\\n\\t\\t\\t\\tcase 'color':\\r\\n\\r\\n\\t\\t\\t\\t\\treturn ColorKeyframeTrack;\\r\\n\\r\\n\\t\\t\\t\\tcase 'quaternion':\\r\\n\\r\\n\\t\\t\\t\\t\\treturn QuaternionKeyframeTrack;\\r\\n\\r\\n\\t\\t\\t\\tcase 'bool':\\r\\n\\t\\t\\t\\tcase 'boolean':\\r\\n\\r\\n\\t\\t\\t\\t\\treturn BooleanKeyframeTrack;\\r\\n\\r\\n\\t\\t\\t\\tcase 'string':\\r\\n\\r\\n\\t\\t\\t\\t\\treturn StringKeyframeTrack;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( KeyframeTrack.prototype, {\\r\\n\\r\\n\\t\\tconstructor: KeyframeTrack,\\r\\n\\r\\n\\t\\tTimeBufferType: Float32Array,\\r\\n\\r\\n\\t\\tValueBufferType: Float32Array,\\r\\n\\r\\n\\t\\tDefaultInterpolation: InterpolateLinear,\\r\\n\\r\\n\\t\\tInterpolantFactoryMethodDiscrete: function ( result ) {\\r\\n\\r\\n\\t\\t\\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tInterpolantFactoryMethodLinear: function ( result ) {\\r\\n\\r\\n\\t\\t\\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tInterpolantFactoryMethodSmooth: function ( result ) {\\r\\n\\r\\n\\t\\t\\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetInterpolation: function ( interpolation ) {\\r\\n\\r\\n\\t\\t\\tvar factoryMethod;\\r\\n\\r\\n\\t\\t\\tswitch ( interpolation ) {\\r\\n\\r\\n\\t\\t\\t\\tcase InterpolateDiscrete:\\r\\n\\r\\n\\t\\t\\t\\t\\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase InterpolateLinear:\\r\\n\\r\\n\\t\\t\\t\\t\\tfactoryMethod = this.InterpolantFactoryMethodLinear;\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\tcase InterpolateSmooth:\\r\\n\\r\\n\\t\\t\\t\\t\\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\\r\\n\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( factoryMethod === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar message = \\\"unsupported interpolation for \\\" +\\r\\n\\t\\t\\t\\t\\tthis.ValueTypeName + \\\" keyframe track named \\\" + this.name;\\r\\n\\r\\n\\t\\t\\t\\tif ( this.createInterpolant === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// fall back to default, unless the default itself is messed up\\r\\n\\t\\t\\t\\t\\tif ( interpolation !== this.DefaultInterpolation ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.setInterpolation( this.DefaultInterpolation );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthrow new Error( message ); // fatal, in this case\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.KeyframeTrack:', message );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.createInterpolant = factoryMethod;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetInterpolation: function () {\\r\\n\\r\\n\\t\\t\\tswitch ( this.createInterpolant ) {\\r\\n\\r\\n\\t\\t\\t\\tcase this.InterpolantFactoryMethodDiscrete:\\r\\n\\r\\n\\t\\t\\t\\t\\treturn InterpolateDiscrete;\\r\\n\\r\\n\\t\\t\\t\\tcase this.InterpolantFactoryMethodLinear:\\r\\n\\r\\n\\t\\t\\t\\t\\treturn InterpolateLinear;\\r\\n\\r\\n\\t\\t\\t\\tcase this.InterpolantFactoryMethodSmooth:\\r\\n\\r\\n\\t\\t\\t\\t\\treturn InterpolateSmooth;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetValueSize: function () {\\r\\n\\r\\n\\t\\t\\treturn this.values.length / this.times.length;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// move all keyframes either forwards or backwards in time\\r\\n\\t\\tshift: function ( timeOffset ) {\\r\\n\\r\\n\\t\\t\\tif ( timeOffset !== 0.0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar times = this.times;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttimes[ i ] += timeOffset;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\\r\\n\\t\\tscale: function ( timeScale ) {\\r\\n\\r\\n\\t\\t\\tif ( timeScale !== 1.0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar times = this.times;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttimes[ i ] *= timeScale;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\\r\\n\\t\\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\\r\\n\\t\\ttrim: function ( startTime, endTime ) {\\r\\n\\r\\n\\t\\t\\tvar times = this.times,\\r\\n\\t\\t\\t\\tnKeys = times.length,\\r\\n\\t\\t\\t\\tfrom = 0,\\r\\n\\t\\t\\t\\tto = nKeys - 1;\\r\\n\\r\\n\\t\\t\\twhile ( from !== nKeys && times[ from ] < startTime ) {\\r\\n\\r\\n\\t\\t\\t\\t++ from;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\twhile ( to !== - 1 && times[ to ] > endTime ) {\\r\\n\\r\\n\\t\\t\\t\\t-- to;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t++ to; // inclusive -> exclusive bound\\r\\n\\r\\n\\t\\t\\tif ( from !== 0 || to !== nKeys ) {\\r\\n\\r\\n\\t\\t\\t\\t// empty tracks are forbidden, so keep at least one keyframe\\r\\n\\t\\t\\t\\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\\r\\n\\r\\n\\t\\t\\t\\tvar stride = this.getValueSize();\\r\\n\\t\\t\\t\\tthis.times = AnimationUtils.arraySlice( times, from, to );\\r\\n\\t\\t\\t\\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\\r\\n\\t\\tvalidate: function () {\\r\\n\\r\\n\\t\\t\\tvar valid = true;\\r\\n\\r\\n\\t\\t\\tvar valueSize = this.getValueSize();\\r\\n\\t\\t\\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\\r\\n\\t\\t\\t\\tvalid = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar times = this.times,\\r\\n\\t\\t\\t\\tvalues = this.values,\\r\\n\\r\\n\\t\\t\\t\\tnKeys = times.length;\\r\\n\\r\\n\\t\\t\\tif ( nKeys === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\\r\\n\\t\\t\\t\\tvalid = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar prevTime = null;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== nKeys; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar currTime = times[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\\r\\n\\t\\t\\t\\t\\tvalid = false;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( prevTime !== null && prevTime > currTime ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\\r\\n\\t\\t\\t\\t\\tvalid = false;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tprevTime = currTime;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( values !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( AnimationUtils.isTypedArray( values ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar value = values[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( isNaN( value ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\\r\\n\\t\\t\\t\\t\\t\\t\\tvalid = false;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn valid;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// removes equivalent sequential keys as common in morph target sequences\\r\\n\\t\\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --\x3e (0,0,1,1,0,0)\\r\\n\\t\\toptimize: function () {\\r\\n\\r\\n\\t\\t\\tvar times = this.times,\\r\\n\\t\\t\\t\\tvalues = this.values,\\r\\n\\t\\t\\t\\tstride = this.getValueSize(),\\r\\n\\r\\n\\t\\t\\t\\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\\r\\n\\r\\n\\t\\t\\t\\twriteIndex = 1,\\r\\n\\t\\t\\t\\tlastIndex = times.length - 1;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 1; i < lastIndex; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar keep = false;\\r\\n\\r\\n\\t\\t\\t\\tvar time = times[ i ];\\r\\n\\t\\t\\t\\tvar timeNext = times[ i + 1 ];\\r\\n\\r\\n\\t\\t\\t\\t// remove adjacent keyframes scheduled at the same time\\r\\n\\r\\n\\t\\t\\t\\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ! smoothInterpolation ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// remove unnecessary keyframes same as their neighbors\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar offset = i * stride,\\r\\n\\t\\t\\t\\t\\t\\t\\toffsetP = offset - stride,\\r\\n\\t\\t\\t\\t\\t\\t\\toffsetN = offset + stride;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var j = 0; j !== stride; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar value = values[ offset + j ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( value !== values[ offsetP + j ] ||\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvalue !== values[ offsetN + j ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tkeep = true;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tkeep = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// in-place compaction\\r\\n\\r\\n\\t\\t\\t\\tif ( keep ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( i !== writeIndex ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttimes[ writeIndex ] = times[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar readOffset = i * stride,\\r\\n\\t\\t\\t\\t\\t\\t\\twriteOffset = writeIndex * stride;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var j = 0; j !== stride; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvalues[ writeOffset + j ] = values[ readOffset + j ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t++ writeIndex;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// flush last keyframe (compaction looks ahead)\\r\\n\\r\\n\\t\\t\\tif ( lastIndex > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\ttimes[ writeIndex ] = times[ lastIndex ];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvalues[ writeOffset + j ] = values[ readOffset + j ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t++ writeIndex;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( writeIndex !== times.length ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\\r\\n\\t\\t\\t\\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * A Track of vectored keyframe values.\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\\r\\n\\r\\n\\t\\tKeyframeTrack.call( this, name, times, values, interpolation );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: VectorKeyframeTrack,\\r\\n\\r\\n\\t\\tValueTypeName: 'vector'\\r\\n\\r\\n\\t\\t// ValueBufferType is inherited\\r\\n\\r\\n\\t\\t// DefaultInterpolation is inherited\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * Reusable set of Tracks that represent an animation.\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t */\\r\\n\\r\\n\\tfunction AnimationClip( name, duration, tracks ) {\\r\\n\\r\\n\\t\\tthis.name = name;\\r\\n\\t\\tthis.tracks = tracks;\\r\\n\\t\\tthis.duration = ( duration !== undefined ) ? duration : - 1;\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\t// this means it should figure out its duration by scanning the tracks\\r\\n\\t\\tif ( this.duration < 0 ) {\\r\\n\\r\\n\\t\\t\\tthis.resetDuration();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.optimize();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( AnimationClip, {\\r\\n\\r\\n\\t\\tparse: function ( json ) {\\r\\n\\r\\n\\t\\t\\tvar tracks = [],\\r\\n\\t\\t\\t\\tjsonTracks = json.tracks,\\r\\n\\t\\t\\t\\tframeTime = 1.0 / ( json.fps || 1.0 );\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn new AnimationClip( json.name, json.duration, tracks );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoJSON: function ( clip ) {\\r\\n\\r\\n\\t\\t\\tvar tracks = [],\\r\\n\\t\\t\\t\\tclipTracks = clip.tracks;\\r\\n\\r\\n\\t\\t\\tvar json = {\\r\\n\\r\\n\\t\\t\\t\\t'name': clip.name,\\r\\n\\t\\t\\t\\t'duration': clip.duration,\\r\\n\\t\\t\\t\\t'tracks': tracks\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn json;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\\r\\n\\r\\n\\t\\t\\tvar numMorphTargets = morphTargetSequence.length;\\r\\n\\t\\t\\tvar tracks = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar times = [];\\r\\n\\t\\t\\t\\tvar values = [];\\r\\n\\r\\n\\t\\t\\t\\ttimes.push(\\r\\n\\t\\t\\t\\t\\t( i + numMorphTargets - 1 ) % numMorphTargets,\\r\\n\\t\\t\\t\\t\\ti,\\r\\n\\t\\t\\t\\t\\t( i + 1 ) % numMorphTargets );\\r\\n\\r\\n\\t\\t\\t\\tvalues.push( 0, 1, 0 );\\r\\n\\r\\n\\t\\t\\t\\tvar order = AnimationUtils.getKeyframeOrder( times );\\r\\n\\t\\t\\t\\ttimes = AnimationUtils.sortedArray( times, 1, order );\\r\\n\\t\\t\\t\\tvalues = AnimationUtils.sortedArray( values, 1, order );\\r\\n\\r\\n\\t\\t\\t\\t// if there is a key at the first frame, duplicate it as the\\r\\n\\t\\t\\t\\t// last frame as well for perfect loop.\\r\\n\\t\\t\\t\\tif ( ! noLoop && times[ 0 ] === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttimes.push( numMorphTargets );\\r\\n\\t\\t\\t\\t\\tvalues.push( values[ 0 ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\ttracks.push(\\r\\n\\t\\t\\t\\t\\tnew NumberKeyframeTrack(\\r\\n\\t\\t\\t\\t\\t\\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\\r\\n\\t\\t\\t\\t\\t\\ttimes, values\\r\\n\\t\\t\\t\\t\\t).scale( 1.0 / fps ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn new AnimationClip( name, - 1, tracks );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfindByName: function ( objectOrClipArray, name ) {\\r\\n\\r\\n\\t\\t\\tvar clipArray = objectOrClipArray;\\r\\n\\r\\n\\t\\t\\tif ( ! Array.isArray( objectOrClipArray ) ) {\\r\\n\\r\\n\\t\\t\\t\\tvar o = objectOrClipArray;\\r\\n\\t\\t\\t\\tclipArray = o.geometry && o.geometry.animations || o.animations;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < clipArray.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( clipArray[ i ].name === name ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn clipArray[ i ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\\r\\n\\r\\n\\t\\t\\tvar animationToMorphTargets = {};\\r\\n\\r\\n\\t\\t\\t// tested with https://regex101.com/ on trick sequences\\r\\n\\t\\t\\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\\r\\n\\t\\t\\tvar pattern = /^([\\\\w-]*?)([\\\\d]+)$/;\\r\\n\\r\\n\\t\\t\\t// sort morph target names into animation groups based\\r\\n\\t\\t\\t// patterns like Walk_001, Walk_002, Run_001, Run_002\\r\\n\\t\\t\\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar morphTarget = morphTargets[ i ];\\r\\n\\t\\t\\t\\tvar parts = morphTarget.name.match( pattern );\\r\\n\\r\\n\\t\\t\\t\\tif ( parts && parts.length > 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar name = parts[ 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\tvar animationMorphTargets = animationToMorphTargets[ name ];\\r\\n\\t\\t\\t\\t\\tif ( ! animationMorphTargets ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tanimationMorphTargets.push( morphTarget );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar clips = [];\\r\\n\\r\\n\\t\\t\\tfor ( var name in animationToMorphTargets ) {\\r\\n\\r\\n\\t\\t\\t\\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn clips;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// parse the animation.hierarchy format\\r\\n\\t\\tparseAnimation: function ( animation, bones ) {\\r\\n\\r\\n\\t\\t\\tif ( ! animation ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\\r\\n\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\\r\\n\\r\\n\\t\\t\\t\\t// only return track if there are actually keys.\\r\\n\\t\\t\\t\\tif ( animationKeys.length !== 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar times = [];\\r\\n\\t\\t\\t\\t\\tvar values = [];\\r\\n\\r\\n\\t\\t\\t\\t\\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\\r\\n\\r\\n\\t\\t\\t\\t\\t// empty keys are filtered out, so check again\\r\\n\\t\\t\\t\\t\\tif ( times.length !== 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdestTracks.push( new trackType( trackName, times, values ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tvar tracks = [];\\r\\n\\r\\n\\t\\t\\tvar clipName = animation.name || 'default';\\r\\n\\t\\t\\t// automatic length determination in AnimationClip.\\r\\n\\t\\t\\tvar duration = animation.length || - 1;\\r\\n\\t\\t\\tvar fps = animation.fps || 30;\\r\\n\\r\\n\\t\\t\\tvar hierarchyTracks = animation.hierarchy || [];\\r\\n\\r\\n\\t\\t\\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar animationKeys = hierarchyTracks[ h ].keys;\\r\\n\\r\\n\\t\\t\\t\\t// skip empty tracks\\r\\n\\t\\t\\t\\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\\r\\n\\r\\n\\t\\t\\t\\t// process morph targets\\r\\n\\t\\t\\t\\tif ( animationKeys[ 0 ].morphTargets ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// figure out all morph targets used in this track\\r\\n\\t\\t\\t\\t\\tvar morphTargetNames = {};\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( animationKeys[ k ].morphTargets ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t// create a track for each morph target with all zero\\r\\n\\t\\t\\t\\t\\t// morphTargetInfluences except for the keys in which\\r\\n\\t\\t\\t\\t\\t// the morphTarget is named.\\r\\n\\t\\t\\t\\t\\tfor ( var morphTargetName in morphTargetNames ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar times = [];\\r\\n\\t\\t\\t\\t\\t\\tvar values = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar animationKey = animationKeys[ k ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\ttimes.push( animationKey.time );\\r\\n\\t\\t\\t\\t\\t\\t\\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tduration = morphTargetNames.length * ( fps || 1.0 );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// ...assume skeletal animation\\r\\n\\r\\n\\t\\t\\t\\t\\tvar boneName = '.bones[' + bones[ h ].name + ']';\\r\\n\\r\\n\\t\\t\\t\\t\\taddNonemptyTrack(\\r\\n\\t\\t\\t\\t\\t\\tVectorKeyframeTrack, boneName + '.position',\\r\\n\\t\\t\\t\\t\\t\\tanimationKeys, 'pos', tracks );\\r\\n\\r\\n\\t\\t\\t\\t\\taddNonemptyTrack(\\r\\n\\t\\t\\t\\t\\t\\tQuaternionKeyframeTrack, boneName + '.quaternion',\\r\\n\\t\\t\\t\\t\\t\\tanimationKeys, 'rot', tracks );\\r\\n\\r\\n\\t\\t\\t\\t\\taddNonemptyTrack(\\r\\n\\t\\t\\t\\t\\t\\tVectorKeyframeTrack, boneName + '.scale',\\r\\n\\t\\t\\t\\t\\t\\tanimationKeys, 'scl', tracks );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( tracks.length === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar clip = new AnimationClip( clipName, duration, tracks );\\r\\n\\r\\n\\t\\t\\treturn clip;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( AnimationClip.prototype, {\\r\\n\\r\\n\\t\\tresetDuration: function () {\\r\\n\\r\\n\\t\\t\\tvar tracks = this.tracks, duration = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar track = this.tracks[ i ];\\r\\n\\r\\n\\t\\t\\t\\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.duration = duration;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttrim: function () {\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.tracks[ i ].trim( 0, this.duration );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\toptimize: function () {\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.tracks[ i ].optimize();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction MaterialLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\t\\tthis.textures = {};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( MaterialLoader.prototype, {\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar loader = new FileLoader( scope.manager );\\r\\n\\t\\t\\tloader.load( url, function ( text ) {\\r\\n\\r\\n\\t\\t\\t\\tonLoad( scope.parse( JSON.parse( text ) ) );\\r\\n\\r\\n\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetTextures: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.textures = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparse: function ( json ) {\\r\\n\\r\\n\\t\\t\\tvar textures = this.textures;\\r\\n\\r\\n\\t\\t\\tfunction getTexture( name ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( textures[ name ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn textures[ name ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar material = new Materials[ json.type ]();\\r\\n\\r\\n\\t\\t\\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\\r\\n\\t\\t\\tif ( json.name !== undefined ) material.name = json.name;\\r\\n\\t\\t\\tif ( json.color !== undefined ) material.color.setHex( json.color );\\r\\n\\t\\t\\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\\r\\n\\t\\t\\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\\r\\n\\t\\t\\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\\r\\n\\t\\t\\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\\r\\n\\t\\t\\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\\r\\n\\t\\t\\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\\r\\n\\t\\t\\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\\r\\n\\t\\t\\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\\r\\n\\t\\t\\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\\r\\n\\t\\t\\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\\r\\n\\t\\t\\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\\r\\n\\t\\t\\tif ( json.fog !== undefined ) material.fog = json.fog;\\r\\n\\t\\t\\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\\r\\n\\t\\t\\tif ( json.blending !== undefined ) material.blending = json.blending;\\r\\n\\t\\t\\tif ( json.side !== undefined ) material.side = json.side;\\r\\n\\t\\t\\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\\r\\n\\t\\t\\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\\r\\n\\t\\t\\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\\r\\n\\t\\t\\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\\r\\n\\t\\t\\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\\r\\n\\t\\t\\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\\r\\n\\t\\t\\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\\r\\n\\t\\t\\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\\r\\n\\t\\t\\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\\r\\n\\t\\t\\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\\r\\n\\r\\n\\t\\t\\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\\r\\n\\r\\n\\t\\t\\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\\r\\n\\t\\t\\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\\r\\n\\t\\t\\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\\r\\n\\t\\t\\tif ( json.scale !== undefined ) material.scale = json.scale;\\r\\n\\r\\n\\t\\t\\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\\r\\n\\t\\t\\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\\r\\n\\t\\t\\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\\r\\n\\r\\n\\t\\t\\tif ( json.visible !== undefined ) material.visible = json.visible;\\r\\n\\t\\t\\tif ( json.userData !== undefined ) material.userData = json.userData;\\r\\n\\r\\n\\t\\t\\t// Deprecated\\r\\n\\r\\n\\t\\t\\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\\r\\n\\r\\n\\t\\t\\t// for PointsMaterial\\r\\n\\r\\n\\t\\t\\tif ( json.size !== undefined ) material.size = json.size;\\r\\n\\t\\t\\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\\r\\n\\r\\n\\t\\t\\t// maps\\r\\n\\r\\n\\t\\t\\tif ( json.map !== undefined ) material.map = getTexture( json.map );\\r\\n\\r\\n\\t\\t\\tif ( json.alphaMap !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tmaterial.alphaMap = getTexture( json.alphaMap );\\r\\n\\t\\t\\t\\tmaterial.transparent = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\\r\\n\\t\\t\\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\\r\\n\\r\\n\\t\\t\\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\\r\\n\\t\\t\\tif ( json.normalScale !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar normalScale = json.normalScale;\\r\\n\\r\\n\\t\\t\\t\\tif ( Array.isArray( normalScale ) === false ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// Blender exporter used to export a scalar. See #7459\\r\\n\\r\\n\\t\\t\\t\\t\\tnormalScale = [ normalScale, normalScale ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tmaterial.normalScale = new Vector2().fromArray( normalScale );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\\r\\n\\t\\t\\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\\r\\n\\t\\t\\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\\r\\n\\r\\n\\t\\t\\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\\r\\n\\t\\t\\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\\r\\n\\r\\n\\t\\t\\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\\r\\n\\t\\t\\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\\r\\n\\r\\n\\t\\t\\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\\r\\n\\r\\n\\t\\t\\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\\r\\n\\r\\n\\t\\t\\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\\r\\n\\r\\n\\t\\t\\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\\r\\n\\t\\t\\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\\r\\n\\r\\n\\t\\t\\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\\r\\n\\t\\t\\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\\r\\n\\r\\n\\t\\t\\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\\r\\n\\r\\n\\t\\t\\treturn material;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction BufferGeometryLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( BufferGeometryLoader.prototype, {\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar loader = new FileLoader( scope.manager );\\r\\n\\t\\t\\tloader.load( url, function ( text ) {\\r\\n\\r\\n\\t\\t\\t\\tonLoad( scope.parse( JSON.parse( text ) ) );\\r\\n\\r\\n\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparse: function ( json ) {\\r\\n\\r\\n\\t\\t\\tvar geometry = new BufferGeometry();\\r\\n\\r\\n\\t\\t\\tvar index = json.data.index;\\r\\n\\r\\n\\t\\t\\tif ( index !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\\r\\n\\t\\t\\t\\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar attributes = json.data.attributes;\\r\\n\\r\\n\\t\\t\\tfor ( var key in attributes ) {\\r\\n\\r\\n\\t\\t\\t\\tvar attribute = attributes[ key ];\\r\\n\\t\\t\\t\\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\\r\\n\\r\\n\\t\\t\\t\\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\\r\\n\\r\\n\\t\\t\\tif ( groups !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar group = groups[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tgeometry.addGroup( group.start, group.count, group.materialIndex );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar boundingSphere = json.data.boundingSphere;\\r\\n\\r\\n\\t\\t\\tif ( boundingSphere !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar center = new Vector3();\\r\\n\\r\\n\\t\\t\\t\\tif ( boundingSphere.center !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcenter.fromArray( boundingSphere.center );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn geometry;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tvar TYPED_ARRAYS = {\\r\\n\\t\\tInt8Array: Int8Array,\\r\\n\\t\\tUint8Array: Uint8Array,\\r\\n\\t\\t// Workaround for IE11 pre KB2929437. See #11440\\r\\n\\t\\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\\r\\n\\t\\tInt16Array: Int16Array,\\r\\n\\t\\tUint16Array: Uint16Array,\\r\\n\\t\\tInt32Array: Int32Array,\\r\\n\\t\\tUint32Array: Uint32Array,\\r\\n\\t\\tFloat32Array: Float32Array,\\r\\n\\t\\tFloat64Array: Float64Array\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Loader() {\\r\\n\\r\\n\\t\\tthis.onLoadStart = function () {};\\r\\n\\t\\tthis.onLoadProgress = function () {};\\r\\n\\t\\tthis.onLoadComplete = function () {};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tLoader.Handlers = {\\r\\n\\r\\n\\t\\thandlers: [],\\r\\n\\r\\n\\t\\tadd: function ( regex, loader ) {\\r\\n\\r\\n\\t\\t\\tthis.handlers.push( regex, loader );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tget: function ( file ) {\\r\\n\\r\\n\\t\\t\\tvar handlers = this.handlers;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar regex = handlers[ i ];\\r\\n\\t\\t\\t\\tvar loader = handlers[ i + 1 ];\\r\\n\\r\\n\\t\\t\\t\\tif ( regex.test( file ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn loader;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tObject.assign( Loader.prototype, {\\r\\n\\r\\n\\t\\tcrossOrigin: undefined,\\r\\n\\r\\n\\t\\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\\r\\n\\r\\n\\t\\t\\tvar array = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < materials.length; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcreateMaterial: ( function () {\\r\\n\\r\\n\\t\\t\\tvar BlendingMode = {\\r\\n\\t\\t\\t\\tNoBlending: NoBlending,\\r\\n\\t\\t\\t\\tNormalBlending: NormalBlending,\\r\\n\\t\\t\\t\\tAdditiveBlending: AdditiveBlending,\\r\\n\\t\\t\\t\\tSubtractiveBlending: SubtractiveBlending,\\r\\n\\t\\t\\t\\tMultiplyBlending: MultiplyBlending,\\r\\n\\t\\t\\t\\tCustomBlending: CustomBlending\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\tvar color = new Color();\\r\\n\\t\\t\\tvar textureLoader = new TextureLoader();\\r\\n\\t\\t\\tvar materialLoader = new MaterialLoader();\\r\\n\\r\\n\\t\\t\\treturn function createMaterial( m, texturePath, crossOrigin ) {\\r\\n\\r\\n\\t\\t\\t\\t// convert from old material format\\r\\n\\r\\n\\t\\t\\t\\tvar textures = {};\\r\\n\\r\\n\\t\\t\\t\\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar fullPath = texturePath + path;\\r\\n\\t\\t\\t\\t\\tvar loader = Loader.Handlers.get( fullPath );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar texture;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( loader !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture = loader.load( fullPath );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttextureLoader.setCrossOrigin( crossOrigin );\\r\\n\\t\\t\\t\\t\\t\\ttexture = textureLoader.load( fullPath );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( repeat !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.repeat.fromArray( repeat );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\\r\\n\\t\\t\\t\\t\\t\\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( offset !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.offset.fromArray( offset );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( wrap !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\\r\\n\\t\\t\\t\\t\\t\\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\\r\\n\\t\\t\\t\\t\\t\\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( anisotropy !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.anisotropy = anisotropy;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tvar uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\t\\t\\t\\ttextures[ uuid ] = texture;\\r\\n\\r\\n\\t\\t\\t\\t\\treturn uuid;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\t\\tvar json = {\\r\\n\\t\\t\\t\\t\\tuuid: _Math.generateUUID(),\\r\\n\\t\\t\\t\\t\\ttype: 'MeshLambertMaterial'\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\tfor ( var name in m ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar value = m[ name ];\\r\\n\\r\\n\\t\\t\\t\\t\\tswitch ( name ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'DbgColor':\\r\\n\\t\\t\\t\\t\\t\\tcase 'DbgIndex':\\r\\n\\t\\t\\t\\t\\t\\tcase 'opticalDensity':\\r\\n\\t\\t\\t\\t\\t\\tcase 'illumination':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'DbgName':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.name = value;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'blending':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.blending = BlendingMode[ value ];\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'colorAmbient':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAmbient':\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'colorDiffuse':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.color = color.fromArray( value ).getHex();\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'colorSpecular':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.specular = color.fromArray( value ).getHex();\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'colorEmissive':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.emissive = color.fromArray( value ).getHex();\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'specularCoef':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.shininess = value;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'shading':\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapDiffuse':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapDiffuseRepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapDiffuseOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapDiffuseWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapDiffuseAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapEmissive':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapEmissiveRepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapEmissiveOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapEmissiveWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapEmissiveAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapLight':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapLightRepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapLightOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapLightWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapLightAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAO':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAORepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAOOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAOWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAOAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapBump':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapBumpScale':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.bumpScale = value;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapBumpRepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapBumpOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapBumpWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapBumpAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapNormal':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapNormalFactor':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.normalScale = [ value, value ];\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapNormalRepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapNormalOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapNormalWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapNormalAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapSpecular':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapSpecularRepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapSpecularOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapSpecularWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapSpecularAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapMetalness':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapMetalnessRepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapMetalnessOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapMetalnessWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapMetalnessAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapRoughness':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapRoughnessRepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapRoughnessOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapRoughnessWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapRoughnessAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAlpha':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAlphaRepeat':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAlphaOffset':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAlphaWrap':\\r\\n\\t\\t\\t\\t\\t\\tcase 'mapAlphaAnisotropy':\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'flipSided':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.side = BackSide;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'doubleSided':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.side = DoubleSide;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'transparency':\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\\r\\n\\t\\t\\t\\t\\t\\t\\tjson.opacity = value;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'depthTest':\\r\\n\\t\\t\\t\\t\\t\\tcase 'depthWrite':\\r\\n\\t\\t\\t\\t\\t\\tcase 'colorWrite':\\r\\n\\t\\t\\t\\t\\t\\tcase 'opacity':\\r\\n\\t\\t\\t\\t\\t\\tcase 'reflectivity':\\r\\n\\t\\t\\t\\t\\t\\tcase 'transparent':\\r\\n\\t\\t\\t\\t\\t\\tcase 'visible':\\r\\n\\t\\t\\t\\t\\t\\tcase 'wireframe':\\r\\n\\t\\t\\t\\t\\t\\t\\tjson[ name ] = value;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tcase 'vertexColors':\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( value === true ) json.vertexColors = VertexColors;\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( value === 'face' ) json.vertexColors = FaceColors;\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\\r\\n\\t\\t\\t\\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\\r\\n\\r\\n\\t\\t\\t\\tif ( json.opacity < 1 ) json.transparent = true;\\r\\n\\r\\n\\t\\t\\t\\tmaterialLoader.setTextures( textures );\\r\\n\\r\\n\\t\\t\\t\\treturn materialLoader.parse( json );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )()\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author Don McCurdy / https://www.donmccurdy.com\\r\\n\\t */\\r\\n\\r\\n\\tvar LoaderUtils = {\\r\\n\\r\\n\\t\\tdecodeText: function ( array ) {\\r\\n\\r\\n\\t\\t\\tif ( typeof TextDecoder !== 'undefined' ) {\\r\\n\\r\\n\\t\\t\\t\\treturn new TextDecoder().decode( array );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\\r\\n\\t\\t\\t// throws a \\\"maximum call stack size exceeded\\\" error for large arrays.\\r\\n\\r\\n\\t\\t\\tvar s = '';\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t// Implicitly assumes little-endian.\\r\\n\\t\\t\\t\\ts += String.fromCharCode( array[ i ] );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn s;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\textractUrlBase: function ( url ) {\\r\\n\\r\\n\\t\\t\\tvar parts = url.split( '/' );\\r\\n\\r\\n\\t\\t\\tif ( parts.length === 1 ) return './';\\r\\n\\r\\n\\t\\t\\tparts.pop();\\r\\n\\r\\n\\t\\t\\treturn parts.join( '/' ) + '/';\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction JSONLoader( manager ) {\\r\\n\\r\\n\\t\\tif ( typeof manager === 'boolean' ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\\r\\n\\t\\t\\tmanager = undefined;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t\\tthis.withCredentials = false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( JSONLoader.prototype, {\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );\\r\\n\\r\\n\\t\\t\\tvar loader = new FileLoader( this.manager );\\r\\n\\t\\t\\tloader.setWithCredentials( this.withCredentials );\\r\\n\\t\\t\\tloader.load( url, function ( text ) {\\r\\n\\r\\n\\t\\t\\t\\tvar json = JSON.parse( text );\\r\\n\\t\\t\\t\\tvar metadata = json.metadata;\\r\\n\\r\\n\\t\\t\\t\\tif ( metadata !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar type = metadata.type;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( type !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( type.toLowerCase() === 'object' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\\r\\n\\t\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( type.toLowerCase() === 'scene' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\\r\\n\\t\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar object = scope.parse( json, texturePath );\\r\\n\\t\\t\\t\\tonLoad( object.geometry, object.materials );\\r\\n\\r\\n\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetTexturePath: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.texturePath = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparse: ( function () {\\r\\n\\r\\n\\t\\t\\tfunction parseModel( json, geometry ) {\\r\\n\\r\\n\\t\\t\\t\\tfunction isBitSet( value, position ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn value & ( 1 << position );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar i, j, fi,\\r\\n\\r\\n\\t\\t\\t\\t\\toffset, zLength,\\r\\n\\r\\n\\t\\t\\t\\t\\tcolorIndex, normalIndex, uvIndex, materialIndex,\\r\\n\\r\\n\\t\\t\\t\\t\\ttype,\\r\\n\\t\\t\\t\\t\\tisQuad,\\r\\n\\t\\t\\t\\t\\thasMaterial,\\r\\n\\t\\t\\t\\t\\thasFaceVertexUv,\\r\\n\\t\\t\\t\\t\\thasFaceNormal, hasFaceVertexNormal,\\r\\n\\t\\t\\t\\t\\thasFaceColor, hasFaceVertexColor,\\r\\n\\r\\n\\t\\t\\t\\t\\tvertex, face, faceA, faceB, hex, normal,\\r\\n\\r\\n\\t\\t\\t\\t\\tuvLayer, uv, u, v,\\r\\n\\r\\n\\t\\t\\t\\t\\tfaces = json.faces,\\r\\n\\t\\t\\t\\t\\tvertices = json.vertices,\\r\\n\\t\\t\\t\\t\\tnormals = json.normals,\\r\\n\\t\\t\\t\\t\\tcolors = json.colors,\\r\\n\\r\\n\\t\\t\\t\\t\\tscale = json.scale,\\r\\n\\r\\n\\t\\t\\t\\t\\tnUvLayers = 0;\\r\\n\\r\\n\\r\\n\\t\\t\\t\\tif ( json.uvs !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// disregard empty arrays\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( i = 0; i < json.uvs.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( json.uvs[ i ].length ) nUvLayers ++;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( i = 0; i < nUvLayers; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgeometry.faceVertexUvs[ i ] = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\toffset = 0;\\r\\n\\t\\t\\t\\tzLength = vertices.length;\\r\\n\\r\\n\\t\\t\\t\\twhile ( offset < zLength ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvertex = new Vector3();\\r\\n\\r\\n\\t\\t\\t\\t\\tvertex.x = vertices[ offset ++ ] * scale;\\r\\n\\t\\t\\t\\t\\tvertex.y = vertices[ offset ++ ] * scale;\\r\\n\\t\\t\\t\\t\\tvertex.z = vertices[ offset ++ ] * scale;\\r\\n\\r\\n\\t\\t\\t\\t\\tgeometry.vertices.push( vertex );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\toffset = 0;\\r\\n\\t\\t\\t\\tzLength = faces.length;\\r\\n\\r\\n\\t\\t\\t\\twhile ( offset < zLength ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttype = faces[ offset ++ ];\\r\\n\\r\\n\\t\\t\\t\\t\\tisQuad = isBitSet( type, 0 );\\r\\n\\t\\t\\t\\t\\thasMaterial = isBitSet( type, 1 );\\r\\n\\t\\t\\t\\t\\thasFaceVertexUv = isBitSet( type, 3 );\\r\\n\\t\\t\\t\\t\\thasFaceNormal = isBitSet( type, 4 );\\r\\n\\t\\t\\t\\t\\thasFaceVertexNormal = isBitSet( type, 5 );\\r\\n\\t\\t\\t\\t\\thasFaceColor = isBitSet( type, 6 );\\r\\n\\t\\t\\t\\t\\thasFaceVertexColor = isBitSet( type, 7 );\\r\\n\\r\\n\\t\\t\\t\\t\\t// console.log(\\\"type\\\", type, \\\"bits\\\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( isQuad ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfaceA = new Face3();\\r\\n\\t\\t\\t\\t\\t\\tfaceA.a = faces[ offset ];\\r\\n\\t\\t\\t\\t\\t\\tfaceA.b = faces[ offset + 1 ];\\r\\n\\t\\t\\t\\t\\t\\tfaceA.c = faces[ offset + 3 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfaceB = new Face3();\\r\\n\\t\\t\\t\\t\\t\\tfaceB.a = faces[ offset + 1 ];\\r\\n\\t\\t\\t\\t\\t\\tfaceB.b = faces[ offset + 2 ];\\r\\n\\t\\t\\t\\t\\t\\tfaceB.c = faces[ offset + 3 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\toffset += 4;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tmaterialIndex = faces[ offset ++ ];\\r\\n\\t\\t\\t\\t\\t\\t\\tfaceA.materialIndex = materialIndex;\\r\\n\\t\\t\\t\\t\\t\\t\\tfaceB.materialIndex = materialIndex;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// to get face <=> uv index correspondence\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfi = geometry.faces.length;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceVertexUv ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( i = 0; i < nUvLayers; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tuvLayer = json.uvs[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgeometry.faceVertexUvs[ i ][ fi ] = [];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfor ( j = 0; j < 4; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tuvIndex = faces[ offset ++ ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tu = uvLayer[ uvIndex * 2 ];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tv = uvLayer[ uvIndex * 2 + 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tuv = new Vector2( u, v );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceNormal ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tnormalIndex = faces[ offset ++ ] * 3;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfaceA.normal.set(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ++ ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ++ ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ]\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfaceB.normal.copy( faceA.normal );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceVertexNormal ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( i = 0; i < 4; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormalIndex = faces[ offset ++ ] * 3;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormal = new Vector3(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ++ ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ++ ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceColor ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcolorIndex = faces[ offset ++ ];\\r\\n\\t\\t\\t\\t\\t\\t\\thex = colors[ colorIndex ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfaceA.color.setHex( hex );\\r\\n\\t\\t\\t\\t\\t\\t\\tfaceB.color.setHex( hex );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceVertexColor ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( i = 0; i < 4; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcolorIndex = faces[ offset ++ ];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\thex = colors[ colorIndex ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgeometry.faces.push( faceA );\\r\\n\\t\\t\\t\\t\\t\\tgeometry.faces.push( faceB );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tface = new Face3();\\r\\n\\t\\t\\t\\t\\t\\tface.a = faces[ offset ++ ];\\r\\n\\t\\t\\t\\t\\t\\tface.b = faces[ offset ++ ];\\r\\n\\t\\t\\t\\t\\t\\tface.c = faces[ offset ++ ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasMaterial ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tmaterialIndex = faces[ offset ++ ];\\r\\n\\t\\t\\t\\t\\t\\t\\tface.materialIndex = materialIndex;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// to get face <=> uv index correspondence\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfi = geometry.faces.length;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceVertexUv ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( i = 0; i < nUvLayers; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tuvLayer = json.uvs[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgeometry.faceVertexUvs[ i ][ fi ] = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tfor ( j = 0; j < 3; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tuvIndex = faces[ offset ++ ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tu = uvLayer[ uvIndex * 2 ];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tv = uvLayer[ uvIndex * 2 + 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tuv = new Vector2( u, v );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceNormal ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tnormalIndex = faces[ offset ++ ] * 3;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tface.normal.set(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ++ ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ++ ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ]\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceVertexNormal ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( i = 0; i < 3; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormalIndex = faces[ offset ++ ] * 3;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tnormal = new Vector3(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ++ ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ++ ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnormals[ normalIndex ]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tface.vertexNormals.push( normal );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceColor ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcolorIndex = faces[ offset ++ ];\\r\\n\\t\\t\\t\\t\\t\\t\\tface.color.setHex( colors[ colorIndex ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( hasFaceVertexColor ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( i = 0; i < 3; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcolorIndex = faces[ offset ++ ];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgeometry.faces.push( face );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction parseSkin( json, geometry ) {\\r\\n\\r\\n\\t\\t\\t\\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\\r\\n\\r\\n\\t\\t\\t\\tif ( json.skinWeights ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar x = json.skinWeights[ i ];\\r\\n\\t\\t\\t\\t\\t\\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\\r\\n\\t\\t\\t\\t\\t\\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\\r\\n\\t\\t\\t\\t\\t\\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( json.skinIndices ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar a = json.skinIndices[ i ];\\r\\n\\t\\t\\t\\t\\t\\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\\r\\n\\t\\t\\t\\t\\t\\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\\r\\n\\t\\t\\t\\t\\t\\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tgeometry.bones = json.bones;\\r\\n\\r\\n\\t\\t\\t\\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\\r\\n\\t\\t\\t\\t\\t\\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction parseMorphing( json, geometry ) {\\r\\n\\r\\n\\t\\t\\t\\tvar scale = json.scale;\\r\\n\\r\\n\\t\\t\\t\\tif ( json.morphTargets !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tgeometry.morphTargets[ i ] = {};\\r\\n\\t\\t\\t\\t\\t\\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\\r\\n\\t\\t\\t\\t\\t\\tgeometry.morphTargets[ i ].vertices = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar dstVertices = geometry.morphTargets[ i ].vertices;\\r\\n\\t\\t\\t\\t\\t\\tvar srcVertices = json.morphTargets[ i ].vertices;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar vertex = new Vector3();\\r\\n\\t\\t\\t\\t\\t\\t\\tvertex.x = srcVertices[ v ] * scale;\\r\\n\\t\\t\\t\\t\\t\\t\\tvertex.y = srcVertices[ v + 1 ] * scale;\\r\\n\\t\\t\\t\\t\\t\\t\\tvertex.z = srcVertices[ v + 2 ] * scale;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tdstVertices.push( vertex );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.JSONLoader: \\\"morphColors\\\" no longer supported. Using them as face colors.' );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar faces = geometry.faces;\\r\\n\\t\\t\\t\\t\\tvar morphColors = json.morphColors[ 0 ].colors;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfaces[ i ].color.fromArray( morphColors, i * 3 );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction parseAnimations( json, geometry ) {\\r\\n\\r\\n\\t\\t\\t\\tvar outputAnimations = [];\\r\\n\\r\\n\\t\\t\\t\\t// parse old style Bone/Hierarchy animations\\r\\n\\t\\t\\t\\tvar animations = [];\\r\\n\\r\\n\\t\\t\\t\\tif ( json.animation !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tanimations.push( json.animation );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( json.animations !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( json.animations.length ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tanimations = animations.concat( json.animations );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tanimations.push( json.animations );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < animations.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\\r\\n\\t\\t\\t\\t\\tif ( clip ) outputAnimations.push( clip );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// parse implicit morph animations\\r\\n\\t\\t\\t\\tif ( geometry.morphTargets ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\\r\\n\\t\\t\\t\\t\\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\\r\\n\\t\\t\\t\\t\\toutputAnimations = outputAnimations.concat( morphAnimationClips );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn function ( json, texturePath ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( json.data !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// Geometry 4.0 spec\\r\\n\\t\\t\\t\\t\\tjson = json.data;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( json.scale !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tjson.scale = 1.0 / json.scale;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tjson.scale = 1.0;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar geometry = new Geometry();\\r\\n\\r\\n\\t\\t\\t\\tparseModel( json, geometry );\\r\\n\\t\\t\\t\\tparseSkin( json, geometry );\\r\\n\\t\\t\\t\\tparseMorphing( json, geometry );\\r\\n\\t\\t\\t\\tparseAnimations( json, geometry );\\r\\n\\r\\n\\t\\t\\t\\tgeometry.computeFaceNormals();\\r\\n\\t\\t\\t\\tgeometry.computeBoundingSphere();\\r\\n\\r\\n\\t\\t\\t\\tif ( json.materials === undefined || json.materials.length === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn { geometry: geometry };\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\\r\\n\\r\\n\\t\\t\\t\\t\\treturn { geometry: geometry, materials: materials };\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )()\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction ObjectLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\t\\tthis.texturePath = '';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( ObjectLoader.prototype, {\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tif ( this.texturePath === '' ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar loader = new FileLoader( scope.manager );\\r\\n\\t\\t\\tloader.load( url, function ( text ) {\\r\\n\\r\\n\\t\\t\\t\\tvar json = null;\\r\\n\\r\\n\\t\\t\\t\\ttry {\\r\\n\\r\\n\\t\\t\\t\\t\\tjson = JSON.parse( text );\\r\\n\\r\\n\\t\\t\\t\\t} catch ( error ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( onError !== undefined ) onError( error );\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.error( 'THREE:ObjectLoader: Can\\\\'t parse ' + url + '.', error.message );\\r\\n\\r\\n\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar metadata = json.metadata;\\r\\n\\r\\n\\t\\t\\t\\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.ObjectLoader: Can\\\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\\r\\n\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tscope.parse( json, onLoad );\\r\\n\\r\\n\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetTexturePath: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.texturePath = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetCrossOrigin: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.crossOrigin = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparse: function ( json, onLoad ) {\\r\\n\\r\\n\\t\\t\\tvar shapes = this.parseShape( json.shapes );\\r\\n\\t\\t\\tvar geometries = this.parseGeometries( json.geometries, shapes );\\r\\n\\r\\n\\t\\t\\tvar images = this.parseImages( json.images, function () {\\r\\n\\r\\n\\t\\t\\t\\tif ( onLoad !== undefined ) onLoad( object );\\r\\n\\r\\n\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\tvar textures = this.parseTextures( json.textures, images );\\r\\n\\t\\t\\tvar materials = this.parseMaterials( json.materials, textures );\\r\\n\\r\\n\\t\\t\\tvar object = this.parseObject( json.object, geometries, materials );\\r\\n\\r\\n\\t\\t\\tif ( json.animations ) {\\r\\n\\r\\n\\t\\t\\t\\tobject.animations = this.parseAnimations( json.animations );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( json.images === undefined || json.images.length === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( onLoad !== undefined ) onLoad( object );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn object;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparseShape: function ( json ) {\\r\\n\\r\\n\\t\\t\\tvar shapes = {};\\r\\n\\r\\n\\t\\t\\tif ( json !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar shape = new Shape().fromJSON( json[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t\\tshapes[ shape.uuid ] = shape;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn shapes;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparseGeometries: function ( json, shapes ) {\\r\\n\\r\\n\\t\\t\\tvar geometries = {};\\r\\n\\r\\n\\t\\t\\tif ( json !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar geometryLoader = new JSONLoader();\\r\\n\\t\\t\\t\\tvar bufferGeometryLoader = new BufferGeometryLoader();\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar geometry;\\r\\n\\t\\t\\t\\t\\tvar data = json[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tswitch ( data.type ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'PlaneGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'PlaneBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.width,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.height,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.widthSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.heightSegments\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'BoxGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'BoxBufferGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'CubeGeometry': // backwards compatible\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.width,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.height,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.depth,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.widthSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.heightSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.depthSegments\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'CircleGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'CircleBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radius,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.segments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'CylinderGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'CylinderBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radiusTop,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radiusBottom,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.height,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radialSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.heightSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.openEnded,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'ConeGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'ConeBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radius,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.height,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radialSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.heightSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.openEnded,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'SphereGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'SphereBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radius,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.widthSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.heightSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.phiStart,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.phiLength,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'DodecahedronGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'DodecahedronBufferGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'IcosahedronGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'IcosahedronBufferGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'OctahedronGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'OctahedronBufferGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'TetrahedronGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'TetrahedronBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radius,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.detail\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'RingGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'RingBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.innerRadius,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.outerRadius,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.phiSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaStart,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.thetaLength\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'TorusGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'TorusBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radius,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.tube,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radialSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.tubularSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.arc\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'TorusKnotGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'TorusKnotBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radius,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.tube,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.tubularSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radialSegments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.p,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.q\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'LatheGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'LatheBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.points,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.segments,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.phiStart,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.phiLength\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'PolyhedronGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'PolyhedronBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.vertices,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.indices,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.radius,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.details\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'ShapeGeometry':\\r\\n\\t\\t\\t\\t\\t\\tcase 'ShapeBufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar geometryShapes = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tfor ( var i = 0, l = data.shapes.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tvar shape = shapes[ data.shapes[ i ] ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgeometryShapes.push( shape );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = new Geometries[ data.type ](\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tgeometryShapes,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdata.curveSegments\\r\\n\\t\\t\\t\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'BufferGeometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = bufferGeometryLoader.parse( data );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcase 'Geometry':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdefault:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \\\"' + data.type + '\\\"' );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tgeometry.uuid = data.uuid;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.name !== undefined ) geometry.name = data.name;\\r\\n\\r\\n\\t\\t\\t\\t\\tgeometries[ data.uuid ] = geometry;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn geometries;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparseMaterials: function ( json, textures ) {\\r\\n\\r\\n\\t\\t\\tvar materials = {};\\r\\n\\r\\n\\t\\t\\tif ( json !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar loader = new MaterialLoader();\\r\\n\\t\\t\\t\\tloader.setTextures( textures );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar data = json[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.type === 'MultiMaterial' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// Deprecated\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar array = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var j = 0; j < data.materials.length; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tarray.push( loader.parse( data.materials[ j ] ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmaterials[ data.uuid ] = array;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tmaterials[ data.uuid ] = loader.parse( data );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn materials;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparseAnimations: function ( json ) {\\r\\n\\r\\n\\t\\t\\tvar animations = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < json.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar clip = AnimationClip.parse( json[ i ] );\\r\\n\\r\\n\\t\\t\\t\\tanimations.push( clip );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn animations;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparseImages: function ( json, onLoad ) {\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\t\\t\\tvar images = {};\\r\\n\\r\\n\\t\\t\\tfunction loadImage( url ) {\\r\\n\\r\\n\\t\\t\\t\\tscope.manager.itemStart( url );\\r\\n\\r\\n\\t\\t\\t\\treturn loader.load( url, function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\r\\n\\t\\t\\t\\t}, undefined, function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\t\\t\\t\\t\\tscope.manager.itemError( url );\\r\\n\\r\\n\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( json !== undefined && json.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar manager = new LoadingManager( onLoad );\\r\\n\\r\\n\\t\\t\\t\\tvar loader = new ImageLoader( manager );\\r\\n\\t\\t\\t\\tloader.setCrossOrigin( this.crossOrigin );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar image = json[ i ];\\r\\n\\t\\t\\t\\t\\tvar path = /^(\\\\/\\\\/)|([a-z]+:(\\\\/\\\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\\r\\n\\r\\n\\t\\t\\t\\t\\timages[ image.uuid ] = loadImage( path );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn images;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparseTextures: function ( json, images ) {\\r\\n\\r\\n\\t\\t\\tfunction parseConstant( value, type ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( typeof value === 'number' ) return value;\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\\r\\n\\r\\n\\t\\t\\t\\treturn type[ value ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar textures = {};\\r\\n\\r\\n\\t\\t\\tif ( json !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar data = json[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.image === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: No \\\"image\\\" specified for', data.uuid );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( images[ data.image ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tvar texture = new Texture( images[ data.image ] );\\r\\n\\t\\t\\t\\t\\ttexture.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t\\ttexture.uuid = data.uuid;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.name !== undefined ) texture.name = data.name;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\\r\\n\\t\\t\\t\\t\\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\\r\\n\\t\\t\\t\\t\\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\\r\\n\\t\\t\\t\\t\\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.wrap !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\\r\\n\\t\\t\\t\\t\\t\\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\\r\\n\\t\\t\\t\\t\\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\\r\\n\\t\\t\\t\\t\\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\\r\\n\\r\\n\\t\\t\\t\\t\\ttextures[ data.uuid ] = texture;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn textures;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparseObject: function () {\\r\\n\\r\\n\\t\\t\\tvar matrix = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function parseObject( data, geometries, materials ) {\\r\\n\\r\\n\\t\\t\\t\\tvar object;\\r\\n\\r\\n\\t\\t\\t\\tfunction getGeometry( name ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( geometries[ name ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\treturn geometries[ name ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfunction getMaterial( name ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( name === undefined ) return undefined;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( Array.isArray( name ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar array = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar uuid = name[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( materials[ uuid ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tarray.push( materials[ uuid ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\treturn array;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( materials[ name ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\treturn materials[ name ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tswitch ( data.type ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'Scene':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new Scene();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( data.background !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( Number.isInteger( data.background ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tobject.background = new Color( data.background );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( data.fog !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( data.fog.type === 'Fog' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t} else if ( data.fog.type === 'FogExp2' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'PerspectiveCamera':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( data.focus !== undefined ) object.focus = data.focus;\\r\\n\\t\\t\\t\\t\\t\\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\\r\\n\\t\\t\\t\\t\\t\\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\\r\\n\\t\\t\\t\\t\\t\\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\\r\\n\\t\\t\\t\\t\\t\\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'OrthographicCamera':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'AmbientLight':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new AmbientLight( data.color, data.intensity );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'DirectionalLight':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new DirectionalLight( data.color, data.intensity );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'PointLight':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'RectAreaLight':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'SpotLight':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'HemisphereLight':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'SkinnedMesh':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'Mesh':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar geometry = getGeometry( data.geometry );\\r\\n\\t\\t\\t\\t\\t\\tvar material = getMaterial( data.material );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( geometry.bones && geometry.bones.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tobject = new SkinnedMesh( geometry, material );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tobject = new Mesh( geometry, material );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'LOD':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new LOD();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'Line':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'LineLoop':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'LineSegments':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'PointCloud':\\r\\n\\t\\t\\t\\t\\tcase 'Points':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'Sprite':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new Sprite( getMaterial( data.material ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'Group':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new Group();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tdefault:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject = new Object3D();\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tobject.uuid = data.uuid;\\r\\n\\r\\n\\t\\t\\t\\tif ( data.name !== undefined ) object.name = data.name;\\r\\n\\t\\t\\t\\tif ( data.matrix !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tmatrix.fromArray( data.matrix );\\r\\n\\t\\t\\t\\t\\tmatrix.decompose( object.position, object.quaternion, object.scale );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.position !== undefined ) object.position.fromArray( data.position );\\r\\n\\t\\t\\t\\t\\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\\r\\n\\t\\t\\t\\t\\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\\r\\n\\t\\t\\t\\t\\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\\r\\n\\t\\t\\t\\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\\r\\n\\r\\n\\t\\t\\t\\tif ( data.shadow ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\\r\\n\\t\\t\\t\\t\\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\\r\\n\\t\\t\\t\\t\\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\\r\\n\\t\\t\\t\\t\\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( data.visible !== undefined ) object.visible = data.visible;\\r\\n\\t\\t\\t\\tif ( data.userData !== undefined ) object.userData = data.userData;\\r\\n\\r\\n\\t\\t\\t\\tif ( data.children !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar children = data.children;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < children.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( data.type === 'LOD' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar levels = data.levels;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var l = 0; l < levels.length; l ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar level = levels[ l ];\\r\\n\\t\\t\\t\\t\\t\\tvar child = object.getObjectByProperty( 'uuid', level.object );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( child !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tobject.addLevel( child, level.distance );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn object;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}()\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tvar TEXTURE_MAPPING = {\\r\\n\\t\\tUVMapping: UVMapping,\\r\\n\\t\\tCubeReflectionMapping: CubeReflectionMapping,\\r\\n\\t\\tCubeRefractionMapping: CubeRefractionMapping,\\r\\n\\t\\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\\r\\n\\t\\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\\r\\n\\t\\tSphericalReflectionMapping: SphericalReflectionMapping,\\r\\n\\t\\tCubeUVReflectionMapping: CubeUVReflectionMapping,\\r\\n\\t\\tCubeUVRefractionMapping: CubeUVRefractionMapping\\r\\n\\t};\\r\\n\\r\\n\\tvar TEXTURE_WRAPPING = {\\r\\n\\t\\tRepeatWrapping: RepeatWrapping,\\r\\n\\t\\tClampToEdgeWrapping: ClampToEdgeWrapping,\\r\\n\\t\\tMirroredRepeatWrapping: MirroredRepeatWrapping\\r\\n\\t};\\r\\n\\r\\n\\tvar TEXTURE_FILTER = {\\r\\n\\t\\tNearestFilter: NearestFilter,\\r\\n\\t\\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\\r\\n\\t\\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\\r\\n\\t\\tLinearFilter: LinearFilter,\\r\\n\\t\\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\\r\\n\\t\\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author thespite / http://clicktorelease.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction ImageBitmapLoader( manager ) {\\r\\n\\r\\n\\t\\tif ( typeof createImageBitmap === 'undefined' ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( typeof fetch === 'undefined' ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\\r\\n\\t\\tthis.options = undefined;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tImageBitmapLoader.prototype = {\\r\\n\\r\\n\\t\\tconstructor: ImageBitmapLoader,\\r\\n\\r\\n\\t\\tsetOptions: function setOptions( options ) {\\r\\n\\r\\n\\t\\t\\tthis.options = options;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tload: function load( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tif ( url === undefined ) url = '';\\r\\n\\r\\n\\t\\t\\tif ( this.path !== undefined ) url = this.path + url;\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar cached = Cache.get( url );\\r\\n\\r\\n\\t\\t\\tif ( cached !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tscope.manager.itemStart( url );\\r\\n\\r\\n\\t\\t\\t\\tsetTimeout( function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( onLoad ) onLoad( cached );\\r\\n\\r\\n\\t\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\r\\n\\t\\t\\t\\t}, 0 );\\r\\n\\r\\n\\t\\t\\t\\treturn cached;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfetch( url ).then( function ( res ) {\\r\\n\\r\\n\\t\\t\\t\\treturn res.blob();\\r\\n\\r\\n\\t\\t\\t} ).then( function ( blob ) {\\r\\n\\r\\n\\t\\t\\t\\treturn createImageBitmap( blob, scope.options );\\r\\n\\r\\n\\t\\t\\t} ).then( function ( imageBitmap ) {\\r\\n\\r\\n\\t\\t\\t\\tCache.add( url, imageBitmap );\\r\\n\\r\\n\\t\\t\\t\\tif ( onLoad ) onLoad( imageBitmap );\\r\\n\\r\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\r\\n\\t\\t\\t} ).catch( function ( e ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( onError ) onError( e );\\r\\n\\r\\n\\t\\t\\t\\tscope.manager.itemEnd( url );\\r\\n\\t\\t\\t\\tscope.manager.itemError( url );\\r\\n\\r\\n\\t\\t\\t} );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetCrossOrigin: function ( /* value */ ) {\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetPath: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.path = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t * minimal class for proxing functions to Path. Replaces old \\\"extractSubpaths()\\\"\\r\\n\\t **/\\r\\n\\r\\n\\tfunction ShapePath() {\\r\\n\\r\\n\\t\\tthis.type = 'ShapePath';\\r\\n\\r\\n\\t\\tthis.subPaths = [];\\r\\n\\t\\tthis.currentPath = null;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( ShapePath.prototype, {\\r\\n\\r\\n\\t\\tmoveTo: function ( x, y ) {\\r\\n\\r\\n\\t\\t\\tthis.currentPath = new Path();\\r\\n\\t\\t\\tthis.subPaths.push( this.currentPath );\\r\\n\\t\\t\\tthis.currentPath.moveTo( x, y );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tlineTo: function ( x, y ) {\\r\\n\\r\\n\\t\\t\\tthis.currentPath.lineTo( x, y );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\\r\\n\\r\\n\\t\\t\\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\\r\\n\\r\\n\\t\\t\\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsplineThru: function ( pts ) {\\r\\n\\r\\n\\t\\t\\tthis.currentPath.splineThru( pts );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\ttoShapes: function ( isCCW, noHoles ) {\\r\\n\\r\\n\\t\\t\\tfunction toShapesNoHoles( inSubpaths ) {\\r\\n\\r\\n\\t\\t\\t\\tvar shapes = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar tmpPath = inSubpaths[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tvar tmpShape = new Shape();\\r\\n\\t\\t\\t\\t\\ttmpShape.curves = tmpPath.curves;\\r\\n\\r\\n\\t\\t\\t\\t\\tshapes.push( tmpShape );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn shapes;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction isPointInsidePolygon( inPt, inPolygon ) {\\r\\n\\r\\n\\t\\t\\t\\tvar polyLen = inPolygon.length;\\r\\n\\r\\n\\t\\t\\t\\t// inPt on polygon contour => immediate success    or\\r\\n\\t\\t\\t\\t// toggling of inside/outside at every single! intersection point of an edge\\r\\n\\t\\t\\t\\t//  with the horizontal line through inPt, left of inPt\\r\\n\\t\\t\\t\\t//  not counting lowerY endpoints of edges and whole edges on that line\\r\\n\\t\\t\\t\\tvar inside = false;\\r\\n\\t\\t\\t\\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar edgeLowPt = inPolygon[ p ];\\r\\n\\t\\t\\t\\t\\tvar edgeHighPt = inPolygon[ q ];\\r\\n\\r\\n\\t\\t\\t\\t\\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\\r\\n\\t\\t\\t\\t\\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// not parallel\\r\\n\\t\\t\\t\\t\\t\\tif ( edgeDy < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\\r\\n\\t\\t\\t\\t\\t\\t\\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( inPt.y === edgeLowPt.y ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( inPt.x === edgeLowPt.x )\\t\\treturn\\ttrue;\\t\\t// inPt is on contour ?\\r\\n\\t\\t\\t\\t\\t\\t\\t// continue;\\t\\t\\t\\t// no intersection or edgeLowPt => doesn't count !!!\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( perpEdge === 0 )\\t\\t\\t\\treturn\\ttrue;\\t\\t// inPt is on contour ?\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( perpEdge < 0 ) \\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t\\t\\tinside = ! inside;\\t\\t// true intersection left of inPt\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// parallel or collinear\\r\\n\\t\\t\\t\\t\\t\\tif ( inPt.y !== edgeLowPt.y ) \\t\\tcontinue;\\t\\t\\t// parallel\\r\\n\\t\\t\\t\\t\\t\\t// edge lies on the same horizontal line as inPt\\r\\n\\t\\t\\t\\t\\t\\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\\r\\n\\t\\t\\t\\t\\t\\t\\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\\t\\treturn\\ttrue;\\t// inPt: Point on contour !\\r\\n\\t\\t\\t\\t\\t\\t// continue;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn\\tinside;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar isClockWise = ShapeUtils.isClockWise;\\r\\n\\r\\n\\t\\t\\tvar subPaths = this.subPaths;\\r\\n\\t\\t\\tif ( subPaths.length === 0 ) return [];\\r\\n\\r\\n\\t\\t\\tif ( noHoles === true )\\treturn\\ttoShapesNoHoles( subPaths );\\r\\n\\r\\n\\r\\n\\t\\t\\tvar solid, tmpPath, tmpShape, shapes = [];\\r\\n\\r\\n\\t\\t\\tif ( subPaths.length === 1 ) {\\r\\n\\r\\n\\t\\t\\t\\ttmpPath = subPaths[ 0 ];\\r\\n\\t\\t\\t\\ttmpShape = new Shape();\\r\\n\\t\\t\\t\\ttmpShape.curves = tmpPath.curves;\\r\\n\\t\\t\\t\\tshapes.push( tmpShape );\\r\\n\\t\\t\\t\\treturn shapes;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\\r\\n\\t\\t\\tholesFirst = isCCW ? ! holesFirst : holesFirst;\\r\\n\\r\\n\\t\\t\\t// console.log(\\\"Holes first\\\", holesFirst);\\r\\n\\r\\n\\t\\t\\tvar betterShapeHoles = [];\\r\\n\\t\\t\\tvar newShapes = [];\\r\\n\\t\\t\\tvar newShapeHoles = [];\\r\\n\\t\\t\\tvar mainIdx = 0;\\r\\n\\t\\t\\tvar tmpPoints;\\r\\n\\r\\n\\t\\t\\tnewShapes[ mainIdx ] = undefined;\\r\\n\\t\\t\\tnewShapeHoles[ mainIdx ] = [];\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\ttmpPath = subPaths[ i ];\\r\\n\\t\\t\\t\\ttmpPoints = tmpPath.getPoints();\\r\\n\\t\\t\\t\\tsolid = isClockWise( tmpPoints );\\r\\n\\t\\t\\t\\tsolid = isCCW ? ! solid : solid;\\r\\n\\r\\n\\t\\t\\t\\tif ( solid ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\\tmainIdx ++;\\r\\n\\r\\n\\t\\t\\t\\t\\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\\r\\n\\t\\t\\t\\t\\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( holesFirst )\\tmainIdx ++;\\r\\n\\t\\t\\t\\t\\tnewShapeHoles[ mainIdx ] = [];\\r\\n\\r\\n\\t\\t\\t\\t\\t//console.log('cw', i);\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\\r\\n\\r\\n\\t\\t\\t\\t\\t//console.log('ccw', i);\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// only Holes? -> probably all Shapes with wrong orientation\\r\\n\\t\\t\\tif ( ! newShapes[ 0 ] )\\treturn\\ttoShapesNoHoles( subPaths );\\r\\n\\r\\n\\r\\n\\t\\t\\tif ( newShapes.length > 1 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar ambiguous = false;\\r\\n\\t\\t\\t\\tvar toChange = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tbetterShapeHoles[ sIdx ] = [];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar sho = newShapeHoles[ sIdx ];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar ho = sho[ hIdx ];\\r\\n\\t\\t\\t\\t\\t\\tvar hole_unassigned = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( sIdx !== s2Idx )\\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( hole_unassigned ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\thole_unassigned = false;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbetterShapeHoles[ s2Idx ].push( ho );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tambiguous = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif ( hole_unassigned ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbetterShapeHoles[ sIdx ].push( ho );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// console.log(\\\"ambiguous: \\\", ambiguous);\\r\\n\\t\\t\\t\\tif ( toChange.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// console.log(\\\"to change: \\\", toChange);\\r\\n\\t\\t\\t\\t\\tif ( ! ambiguous )\\tnewShapeHoles = betterShapeHoles;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar tmpHoles;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\ttmpShape = newShapes[ i ].s;\\r\\n\\t\\t\\t\\tshapes.push( tmpShape );\\r\\n\\t\\t\\t\\ttmpHoles = newShapeHoles[ i ];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\ttmpShape.holes.push( tmpHoles[ j ].h );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//console.log(\\\"shape\\\", shapes);\\r\\n\\r\\n\\t\\t\\treturn shapes;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author zz85 / http://www.lab4games.net/zz85/blog\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Font( data ) {\\r\\n\\r\\n\\t\\tthis.type = 'Font';\\r\\n\\r\\n\\t\\tthis.data = data;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Font.prototype, {\\r\\n\\r\\n\\t\\tisFont: true,\\r\\n\\r\\n\\t\\tgenerateShapes: function ( text, size, divisions ) {\\r\\n\\r\\n\\t\\t\\tfunction createPaths( text ) {\\r\\n\\r\\n\\t\\t\\t\\tvar chars = String( text ).split( '' );\\r\\n\\t\\t\\t\\tvar scale = size / data.resolution;\\r\\n\\t\\t\\t\\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\\r\\n\\r\\n\\t\\t\\t\\tvar offsetX = 0, offsetY = 0;\\r\\n\\r\\n\\t\\t\\t\\tvar paths = [];\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i < chars.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar char = chars[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( char === '\\\\n' ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\toffsetX = 0;\\r\\n\\t\\t\\t\\t\\t\\toffsetY -= line_height;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar ret = createPath( char, scale, offsetX, offsetY );\\r\\n\\t\\t\\t\\t\\t\\toffsetX += ret.offsetX;\\r\\n\\t\\t\\t\\t\\t\\tpaths.push( ret.path );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn paths;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfunction createPath( c, scale, offsetX, offsetY ) {\\r\\n\\r\\n\\t\\t\\t\\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\\r\\n\\r\\n\\t\\t\\t\\tif ( ! glyph ) return;\\r\\n\\r\\n\\t\\t\\t\\tvar path = new ShapePath();\\r\\n\\r\\n\\t\\t\\t\\tvar pts = [];\\r\\n\\t\\t\\t\\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\\r\\n\\r\\n\\t\\t\\t\\tif ( glyph.o ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, l = outline.length; i < l; ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar action = outline[ i ++ ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tswitch ( action ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcase 'm': // moveTo\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tx = outline[ i ++ ] * scale + offsetX;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ty = outline[ i ++ ] * scale + offsetY;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpath.moveTo( x, y );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcase 'l': // lineTo\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tx = outline[ i ++ ] * scale + offsetX;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\ty = outline[ i ++ ] * scale + offsetY;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpath.lineTo( x, y );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcase 'q': // quadraticCurveTo\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpx = outline[ i ++ ] * scale + offsetX;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpy = outline[ i ++ ] * scale + offsetY;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpx1 = outline[ i ++ ] * scale + offsetX;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpy1 = outline[ i ++ ] * scale + offsetY;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tlaste = pts[ pts.length - 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( laste ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcpx0 = laste.x;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcpy0 = laste.y;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tcase 'b': // bezierCurveTo\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpx = outline[ i ++ ] * scale + offsetX;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpy = outline[ i ++ ] * scale + offsetY;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpx1 = outline[ i ++ ] * scale + offsetX;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpy1 = outline[ i ++ ] * scale + offsetY;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpx2 = outline[ i ++ ] * scale + offsetX;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcpy2 = outline[ i ++ ] * scale + offsetY;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tlaste = pts[ pts.length - 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif ( laste ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcpx0 = laste.x;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcpy0 = laste.y;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn { offsetX: glyph.ha * scale, path: path };\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tif ( size === undefined ) size = 100;\\r\\n\\t\\t\\tif ( divisions === undefined ) divisions = 4;\\r\\n\\r\\n\\t\\t\\tvar data = this.data;\\r\\n\\r\\n\\t\\t\\tvar paths = createPaths( text );\\r\\n\\t\\t\\tvar shapes = [];\\r\\n\\r\\n\\t\\t\\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn shapes;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction FontLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( FontLoader.prototype, {\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tvar loader = new FileLoader( this.manager );\\r\\n\\t\\t\\tloader.setPath( this.path );\\r\\n\\t\\t\\tloader.load( url, function ( text ) {\\r\\n\\r\\n\\t\\t\\t\\tvar json;\\r\\n\\r\\n\\t\\t\\t\\ttry {\\r\\n\\r\\n\\t\\t\\t\\t\\tjson = JSON.parse( text );\\r\\n\\r\\n\\t\\t\\t\\t} catch ( e ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\\r\\n\\t\\t\\t\\t\\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar font = scope.parse( json );\\r\\n\\r\\n\\t\\t\\t\\tif ( onLoad ) onLoad( font );\\r\\n\\r\\n\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparse: function ( json ) {\\r\\n\\r\\n\\t\\t\\treturn new Font( json );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetPath: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.path = value;\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tvar context;\\r\\n\\r\\n\\tvar AudioContext = {\\r\\n\\r\\n\\t\\tgetContext: function () {\\r\\n\\r\\n\\t\\t\\tif ( context === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn context;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetContext: function ( value ) {\\r\\n\\r\\n\\t\\t\\tcontext = value;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction AudioLoader( manager ) {\\r\\n\\r\\n\\t\\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( AudioLoader.prototype, {\\r\\n\\r\\n\\t\\tload: function ( url, onLoad, onProgress, onError ) {\\r\\n\\r\\n\\t\\t\\tvar loader = new FileLoader( this.manager );\\r\\n\\t\\t\\tloader.setResponseType( 'arraybuffer' );\\r\\n\\t\\t\\tloader.load( url, function ( buffer ) {\\r\\n\\r\\n\\t\\t\\t\\tvar context = AudioContext.getContext();\\r\\n\\r\\n\\t\\t\\t\\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tonLoad( audioBuffer );\\r\\n\\r\\n\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t}, onProgress, onError );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction StereoCamera() {\\r\\n\\r\\n\\t\\tthis.type = 'StereoCamera';\\r\\n\\r\\n\\t\\tthis.aspect = 1;\\r\\n\\r\\n\\t\\tthis.eyeSep = 0.064;\\r\\n\\r\\n\\t\\tthis.cameraL = new PerspectiveCamera();\\r\\n\\t\\tthis.cameraL.layers.enable( 1 );\\r\\n\\t\\tthis.cameraL.matrixAutoUpdate = false;\\r\\n\\r\\n\\t\\tthis.cameraR = new PerspectiveCamera();\\r\\n\\t\\tthis.cameraR.layers.enable( 2 );\\r\\n\\t\\tthis.cameraR.matrixAutoUpdate = false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( StereoCamera.prototype, {\\r\\n\\r\\n\\t\\tupdate: ( function () {\\r\\n\\r\\n\\t\\t\\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\\r\\n\\r\\n\\t\\t\\tvar eyeRight = new Matrix4();\\r\\n\\t\\t\\tvar eyeLeft = new Matrix4();\\r\\n\\r\\n\\t\\t\\treturn function update( camera ) {\\r\\n\\r\\n\\t\\t\\t\\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\taspect !== camera.aspect * this.aspect || near !== camera.near ||\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\\r\\n\\r\\n\\t\\t\\t\\tif ( needsUpdate ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tinstance = this;\\r\\n\\t\\t\\t\\t\\tfocus = camera.focus;\\r\\n\\t\\t\\t\\t\\tfov = camera.fov;\\r\\n\\t\\t\\t\\t\\taspect = camera.aspect * this.aspect;\\r\\n\\t\\t\\t\\t\\tnear = camera.near;\\r\\n\\t\\t\\t\\t\\tfar = camera.far;\\r\\n\\t\\t\\t\\t\\tzoom = camera.zoom;\\r\\n\\r\\n\\t\\t\\t\\t\\t// Off-axis stereoscopic effect based on\\r\\n\\t\\t\\t\\t\\t// http://paulbourke.net/stereographics/stereorender/\\r\\n\\r\\n\\t\\t\\t\\t\\tvar projectionMatrix = camera.projectionMatrix.clone();\\r\\n\\t\\t\\t\\t\\teyeSep = this.eyeSep / 2;\\r\\n\\t\\t\\t\\t\\tvar eyeSepOnProjection = eyeSep * near / focus;\\r\\n\\t\\t\\t\\t\\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\\r\\n\\t\\t\\t\\t\\tvar xmin, xmax;\\r\\n\\r\\n\\t\\t\\t\\t\\t// translate xOffset\\r\\n\\r\\n\\t\\t\\t\\t\\teyeLeft.elements[ 12 ] = - eyeSep;\\r\\n\\t\\t\\t\\t\\teyeRight.elements[ 12 ] = eyeSep;\\r\\n\\r\\n\\t\\t\\t\\t\\t// for left eye\\r\\n\\r\\n\\t\\t\\t\\t\\txmin = - ymax * aspect + eyeSepOnProjection;\\r\\n\\t\\t\\t\\t\\txmax = ymax * aspect + eyeSepOnProjection;\\r\\n\\r\\n\\t\\t\\t\\t\\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\\r\\n\\t\\t\\t\\t\\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\\r\\n\\r\\n\\t\\t\\t\\t\\t// for right eye\\r\\n\\r\\n\\t\\t\\t\\t\\txmin = - ymax * aspect - eyeSepOnProjection;\\r\\n\\t\\t\\t\\t\\txmax = ymax * aspect - eyeSepOnProjection;\\r\\n\\r\\n\\t\\t\\t\\t\\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\\r\\n\\t\\t\\t\\t\\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\\r\\n\\t\\t\\t\\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )()\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * Camera for rendering cube maps\\r\\n\\t *\\t- renders scene into axis-aligned cube\\r\\n\\t *\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction CubeCamera( near, far, cubeResolution ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'CubeCamera';\\r\\n\\r\\n\\t\\tvar fov = 90, aspect = 1;\\r\\n\\r\\n\\t\\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\\r\\n\\t\\tcameraPX.up.set( 0, - 1, 0 );\\r\\n\\t\\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\\r\\n\\t\\tthis.add( cameraPX );\\r\\n\\r\\n\\t\\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\\r\\n\\t\\tcameraNX.up.set( 0, - 1, 0 );\\r\\n\\t\\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\\r\\n\\t\\tthis.add( cameraNX );\\r\\n\\r\\n\\t\\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\\r\\n\\t\\tcameraPY.up.set( 0, 0, 1 );\\r\\n\\t\\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\\r\\n\\t\\tthis.add( cameraPY );\\r\\n\\r\\n\\t\\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\\r\\n\\t\\tcameraNY.up.set( 0, 0, - 1 );\\r\\n\\t\\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\\r\\n\\t\\tthis.add( cameraNY );\\r\\n\\r\\n\\t\\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\\r\\n\\t\\tcameraPZ.up.set( 0, - 1, 0 );\\r\\n\\t\\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\\r\\n\\t\\tthis.add( cameraPZ );\\r\\n\\r\\n\\t\\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\\r\\n\\t\\tcameraNZ.up.set( 0, - 1, 0 );\\r\\n\\t\\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\\r\\n\\t\\tthis.add( cameraNZ );\\r\\n\\r\\n\\t\\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\\r\\n\\r\\n\\t\\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\\r\\n\\t\\tthis.renderTarget.texture.name = \\\"CubeCamera\\\";\\r\\n\\r\\n\\t\\tthis.update = function ( renderer, scene ) {\\r\\n\\r\\n\\t\\t\\tif ( this.parent === null ) this.updateMatrixWorld();\\r\\n\\r\\n\\t\\t\\tvar renderTarget = this.renderTarget;\\r\\n\\t\\t\\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\\r\\n\\r\\n\\t\\t\\trenderTarget.texture.generateMipmaps = false;\\r\\n\\r\\n\\t\\t\\trenderTarget.activeCubeFace = 0;\\r\\n\\t\\t\\trenderer.render( scene, cameraPX, renderTarget );\\r\\n\\r\\n\\t\\t\\trenderTarget.activeCubeFace = 1;\\r\\n\\t\\t\\trenderer.render( scene, cameraNX, renderTarget );\\r\\n\\r\\n\\t\\t\\trenderTarget.activeCubeFace = 2;\\r\\n\\t\\t\\trenderer.render( scene, cameraPY, renderTarget );\\r\\n\\r\\n\\t\\t\\trenderTarget.activeCubeFace = 3;\\r\\n\\t\\t\\trenderer.render( scene, cameraNY, renderTarget );\\r\\n\\r\\n\\t\\t\\trenderTarget.activeCubeFace = 4;\\r\\n\\t\\t\\trenderer.render( scene, cameraPZ, renderTarget );\\r\\n\\r\\n\\t\\t\\trenderTarget.texture.generateMipmaps = generateMipmaps;\\r\\n\\r\\n\\t\\t\\trenderTarget.activeCubeFace = 5;\\r\\n\\t\\t\\trenderer.render( scene, cameraNZ, renderTarget );\\r\\n\\r\\n\\t\\t\\trenderer.setRenderTarget( null );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.clear = function ( renderer, color, depth, stencil ) {\\r\\n\\r\\n\\t\\t\\tvar renderTarget = this.renderTarget;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < 6; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\trenderTarget.activeCubeFace = i;\\r\\n\\t\\t\\t\\trenderer.setRenderTarget( renderTarget );\\r\\n\\r\\n\\t\\t\\t\\trenderer.clear( color, depth, stencil );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\trenderer.setRenderTarget( null );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCubeCamera.prototype = Object.create( Object3D.prototype );\\r\\n\\tCubeCamera.prototype.constructor = CubeCamera;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction AudioListener() {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'AudioListener';\\r\\n\\r\\n\\t\\tthis.context = AudioContext.getContext();\\r\\n\\r\\n\\t\\tthis.gain = this.context.createGain();\\r\\n\\t\\tthis.gain.connect( this.context.destination );\\r\\n\\r\\n\\t\\tthis.filter = null;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: AudioListener,\\r\\n\\r\\n\\t\\tgetInput: function () {\\r\\n\\r\\n\\t\\t\\treturn this.gain;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tremoveFilter: function ( ) {\\r\\n\\r\\n\\t\\t\\tif ( this.filter !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.gain.disconnect( this.filter );\\r\\n\\t\\t\\t\\tthis.filter.disconnect( this.context.destination );\\r\\n\\t\\t\\t\\tthis.gain.connect( this.context.destination );\\r\\n\\t\\t\\t\\tthis.filter = null;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetFilter: function () {\\r\\n\\r\\n\\t\\t\\treturn this.filter;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFilter: function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( this.filter !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.gain.disconnect( this.filter );\\r\\n\\t\\t\\t\\tthis.filter.disconnect( this.context.destination );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.gain.disconnect( this.context.destination );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.filter = value;\\r\\n\\t\\t\\tthis.gain.connect( this.filter );\\r\\n\\t\\t\\tthis.filter.connect( this.context.destination );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetMasterVolume: function () {\\r\\n\\r\\n\\t\\t\\treturn this.gain.gain.value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetMasterVolume: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.gain.gain.value = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateMatrixWorld: ( function () {\\r\\n\\r\\n\\t\\t\\tvar position = new Vector3();\\r\\n\\t\\t\\tvar quaternion = new Quaternion();\\r\\n\\t\\t\\tvar scale = new Vector3();\\r\\n\\r\\n\\t\\t\\tvar orientation = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function updateMatrixWorld( force ) {\\r\\n\\r\\n\\t\\t\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\r\\n\\r\\n\\t\\t\\t\\tvar listener = this.context.listener;\\r\\n\\t\\t\\t\\tvar up = this.up;\\r\\n\\r\\n\\t\\t\\t\\tthis.matrixWorld.decompose( position, quaternion, scale );\\r\\n\\r\\n\\t\\t\\t\\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\\r\\n\\r\\n\\t\\t\\t\\tif ( listener.positionX ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\\r\\n\\t\\t\\t\\t\\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\\r\\n\\t\\t\\t\\t\\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\\r\\n\\t\\t\\t\\t\\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\\r\\n\\t\\t\\t\\t\\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\\r\\n\\t\\t\\t\\t\\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\\r\\n\\t\\t\\t\\t\\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\\r\\n\\t\\t\\t\\t\\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\\r\\n\\t\\t\\t\\t\\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tlistener.setPosition( position.x, position.y, position.z );\\r\\n\\t\\t\\t\\t\\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )()\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Audio( listener ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'Audio';\\r\\n\\r\\n\\t\\tthis.context = listener.context;\\r\\n\\r\\n\\t\\tthis.gain = this.context.createGain();\\r\\n\\t\\tthis.gain.connect( listener.getInput() );\\r\\n\\r\\n\\t\\tthis.autoplay = false;\\r\\n\\r\\n\\t\\tthis.buffer = null;\\r\\n\\t\\tthis.loop = false;\\r\\n\\t\\tthis.startTime = 0;\\r\\n\\t\\tthis.offset = 0;\\r\\n\\t\\tthis.playbackRate = 1;\\r\\n\\t\\tthis.isPlaying = false;\\r\\n\\t\\tthis.hasPlaybackControl = true;\\r\\n\\t\\tthis.sourceType = 'empty';\\r\\n\\r\\n\\t\\tthis.filters = [];\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: Audio,\\r\\n\\r\\n\\t\\tgetOutput: function () {\\r\\n\\r\\n\\t\\t\\treturn this.gain;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetNodeSource: function ( audioNode ) {\\r\\n\\r\\n\\t\\t\\tthis.hasPlaybackControl = false;\\r\\n\\t\\t\\tthis.sourceType = 'audioNode';\\r\\n\\t\\t\\tthis.source = audioNode;\\r\\n\\t\\t\\tthis.connect();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetBuffer: function ( audioBuffer ) {\\r\\n\\r\\n\\t\\t\\tthis.buffer = audioBuffer;\\r\\n\\t\\t\\tthis.sourceType = 'buffer';\\r\\n\\r\\n\\t\\t\\tif ( this.autoplay ) this.play();\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tplay: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.isPlaying === true ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.hasPlaybackControl === false ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar source = this.context.createBufferSource();\\r\\n\\r\\n\\t\\t\\tsource.buffer = this.buffer;\\r\\n\\t\\t\\tsource.loop = this.loop;\\r\\n\\t\\t\\tsource.onended = this.onEnded.bind( this );\\r\\n\\t\\t\\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\\r\\n\\t\\t\\tthis.startTime = this.context.currentTime;\\r\\n\\t\\t\\tsource.start( this.startTime, this.offset );\\r\\n\\r\\n\\t\\t\\tthis.isPlaying = true;\\r\\n\\r\\n\\t\\t\\tthis.source = source;\\r\\n\\r\\n\\t\\t\\treturn this.connect();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tpause: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.hasPlaybackControl === false ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.isPlaying === true ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.source.stop();\\r\\n\\t\\t\\t\\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\\r\\n\\t\\t\\t\\tthis.isPlaying = false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tstop: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.hasPlaybackControl === false ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.source.stop();\\r\\n\\t\\t\\tthis.offset = 0;\\r\\n\\t\\t\\tthis.isPlaying = false;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tconnect: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.filters.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.source.connect( this.filters[ 0 ] );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.source.connect( this.getOutput() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdisconnect: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.filters.length > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.source.disconnect( this.filters[ 0 ] );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.source.disconnect( this.getOutput() );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetFilters: function () {\\r\\n\\r\\n\\t\\t\\treturn this.filters;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFilters: function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( ! value ) value = [];\\r\\n\\r\\n\\t\\t\\tif ( this.isPlaying === true ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.disconnect();\\r\\n\\t\\t\\t\\tthis.filters = value;\\r\\n\\t\\t\\t\\tthis.connect();\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.filters = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetFilter: function () {\\r\\n\\r\\n\\t\\t\\treturn this.getFilters()[ 0 ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFilter: function ( filter ) {\\r\\n\\r\\n\\t\\t\\treturn this.setFilters( filter ? [ filter ] : [] );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetPlaybackRate: function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( this.hasPlaybackControl === false ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.playbackRate = value;\\r\\n\\r\\n\\t\\t\\tif ( this.isPlaying === true ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetPlaybackRate: function () {\\r\\n\\r\\n\\t\\t\\treturn this.playbackRate;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tonEnded: function () {\\r\\n\\r\\n\\t\\t\\tthis.isPlaying = false;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetLoop: function () {\\r\\n\\r\\n\\t\\t\\tif ( this.hasPlaybackControl === false ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this.loop;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetLoop: function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( this.hasPlaybackControl === false ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.loop = value;\\r\\n\\r\\n\\t\\t\\tif ( this.isPlaying === true ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.source.loop = this.loop;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetVolume: function () {\\r\\n\\r\\n\\t\\t\\treturn this.gain.gain.value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetVolume: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.gain.gain.value = value;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction PositionalAudio( listener ) {\\r\\n\\r\\n\\t\\tAudio.call( this, listener );\\r\\n\\r\\n\\t\\tthis.panner = this.context.createPanner();\\r\\n\\t\\tthis.panner.connect( this.gain );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: PositionalAudio,\\r\\n\\r\\n\\t\\tgetOutput: function () {\\r\\n\\r\\n\\t\\t\\treturn this.panner;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetRefDistance: function () {\\r\\n\\r\\n\\t\\t\\treturn this.panner.refDistance;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetRefDistance: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.panner.refDistance = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetRolloffFactor: function () {\\r\\n\\r\\n\\t\\t\\treturn this.panner.rolloffFactor;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetRolloffFactor: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.panner.rolloffFactor = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetDistanceModel: function () {\\r\\n\\r\\n\\t\\t\\treturn this.panner.distanceModel;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetDistanceModel: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.panner.distanceModel = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetMaxDistance: function () {\\r\\n\\r\\n\\t\\t\\treturn this.panner.maxDistance;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetMaxDistance: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.panner.maxDistance = value;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tupdateMatrixWorld: ( function () {\\r\\n\\r\\n\\t\\t\\tvar position = new Vector3();\\r\\n\\r\\n\\t\\t\\treturn function updateMatrixWorld( force ) {\\r\\n\\r\\n\\t\\t\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\r\\n\\r\\n\\t\\t\\t\\tposition.setFromMatrixPosition( this.matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\tthis.panner.setPosition( position.x, position.y, position.z );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t} )()\\r\\n\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction AudioAnalyser( audio, fftSize ) {\\r\\n\\r\\n\\t\\tthis.analyser = audio.context.createAnalyser();\\r\\n\\t\\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\\r\\n\\r\\n\\t\\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\\r\\n\\r\\n\\t\\taudio.getOutput().connect( this.analyser );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( AudioAnalyser.prototype, {\\r\\n\\r\\n\\t\\tgetFrequencyData: function () {\\r\\n\\r\\n\\t\\t\\tthis.analyser.getByteFrequencyData( this.data );\\r\\n\\r\\n\\t\\t\\treturn this.data;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetAverageFrequency: function () {\\r\\n\\r\\n\\t\\t\\tvar value = 0, data = this.getFrequencyData();\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i < data.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvalue += data[ i ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn value / data.length;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * Buffered scene graph property that allows weighted accumulation.\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction PropertyMixer( binding, typeName, valueSize ) {\\r\\n\\r\\n\\t\\tthis.binding = binding;\\r\\n\\t\\tthis.valueSize = valueSize;\\r\\n\\r\\n\\t\\tvar bufferType = Float64Array,\\r\\n\\t\\t\\tmixFunction;\\r\\n\\r\\n\\t\\tswitch ( typeName ) {\\r\\n\\r\\n\\t\\t\\tcase 'quaternion':\\r\\n\\t\\t\\t\\tmixFunction = this._slerp;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\tcase 'string':\\r\\n\\t\\t\\tcase 'bool':\\r\\n\\t\\t\\t\\tbufferType = Array;\\r\\n\\t\\t\\t\\tmixFunction = this._select;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\tmixFunction = this._lerp;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.buffer = new bufferType( valueSize * 4 );\\r\\n\\t\\t// layout: [ incoming | accu0 | accu1 | orig ]\\r\\n\\t\\t//\\r\\n\\t\\t// interpolators can use .buffer as their .result\\r\\n\\t\\t// the data then goes to 'incoming'\\r\\n\\t\\t//\\r\\n\\t\\t// 'accu0' and 'accu1' are used frame-interleaved for\\r\\n\\t\\t// the cumulative result and are compared to detect\\r\\n\\t\\t// changes\\r\\n\\t\\t//\\r\\n\\t\\t// 'orig' stores the original state of the property\\r\\n\\r\\n\\t\\tthis._mixBufferRegion = mixFunction;\\r\\n\\r\\n\\t\\tthis.cumulativeWeight = 0;\\r\\n\\r\\n\\t\\tthis.useCount = 0;\\r\\n\\t\\tthis.referenceCount = 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( PropertyMixer.prototype, {\\r\\n\\r\\n\\t\\t// accumulate data in the 'incoming' region into 'accu<i>'\\r\\n\\t\\taccumulate: function ( accuIndex, weight ) {\\r\\n\\r\\n\\t\\t\\t// note: happily accumulating nothing when weight = 0, the caller knows\\r\\n\\t\\t\\t// the weight and shouldn't have made the call in the first place\\r\\n\\r\\n\\t\\t\\tvar buffer = this.buffer,\\r\\n\\t\\t\\t\\tstride = this.valueSize,\\r\\n\\t\\t\\t\\toffset = accuIndex * stride + stride,\\r\\n\\r\\n\\t\\t\\t\\tcurrentWeight = this.cumulativeWeight;\\r\\n\\r\\n\\t\\t\\tif ( currentWeight === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t// accuN := incoming * weight\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tbuffer[ offset + i ] = buffer[ i ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tcurrentWeight = weight;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// accuN := accuN + incoming * weight\\r\\n\\r\\n\\t\\t\\t\\tcurrentWeight += weight;\\r\\n\\t\\t\\t\\tvar mix = weight / currentWeight;\\r\\n\\t\\t\\t\\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.cumulativeWeight = currentWeight;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// apply the state of 'accu<i>' to the binding when accus differ\\r\\n\\t\\tapply: function ( accuIndex ) {\\r\\n\\r\\n\\t\\t\\tvar stride = this.valueSize,\\r\\n\\t\\t\\t\\tbuffer = this.buffer,\\r\\n\\t\\t\\t\\toffset = accuIndex * stride + stride,\\r\\n\\r\\n\\t\\t\\t\\tweight = this.cumulativeWeight,\\r\\n\\r\\n\\t\\t\\t\\tbinding = this.binding;\\r\\n\\r\\n\\t\\t\\tthis.cumulativeWeight = 0;\\r\\n\\r\\n\\t\\t\\tif ( weight < 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t// accuN := accuN + original * ( 1 - cumulativeWeight )\\r\\n\\r\\n\\t\\t\\t\\tvar originalValueOffset = stride * 3;\\r\\n\\r\\n\\t\\t\\t\\tthis._mixBufferRegion(\\r\\n\\t\\t\\t\\t\\tbuffer, offset, originalValueOffset, 1 - weight, stride );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// value has changed -> update scene graph\\r\\n\\r\\n\\t\\t\\t\\t\\tbinding.setValue( buffer, offset );\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// remember the state of the bound property and copy it to both accus\\r\\n\\t\\tsaveOriginalState: function () {\\r\\n\\r\\n\\t\\t\\tvar binding = this.binding;\\r\\n\\r\\n\\t\\t\\tvar buffer = this.buffer,\\r\\n\\t\\t\\t\\tstride = this.valueSize,\\r\\n\\r\\n\\t\\t\\t\\toriginalValueOffset = stride * 3;\\r\\n\\r\\n\\t\\t\\tbinding.getValue( buffer, originalValueOffset );\\r\\n\\r\\n\\t\\t\\t// accu[0..1] := orig -- initially detect changes against the original\\r\\n\\t\\t\\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.cumulativeWeight = 0;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// apply the state previously taken via 'saveOriginalState' to the binding\\r\\n\\t\\trestoreOriginalState: function () {\\r\\n\\r\\n\\t\\t\\tvar originalValueOffset = this.valueSize * 3;\\r\\n\\t\\t\\tthis.binding.setValue( this.buffer, originalValueOffset );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\r\\n\\t\\t// mix functions\\r\\n\\r\\n\\t\\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\\r\\n\\r\\n\\t\\t\\tif ( t >= 0.5 ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\\r\\n\\r\\n\\t\\t\\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\\r\\n\\r\\n\\t\\t\\tvar s = 1 - t;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== stride; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar j = dstOffset + i;\\r\\n\\r\\n\\t\\t\\t\\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * A reference to a real property in the scene graph.\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction Composite( targetGroup, path, optionalParsedPath ) {\\r\\n\\r\\n\\t\\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\\r\\n\\r\\n\\t\\tthis._targetGroup = targetGroup;\\r\\n\\t\\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Composite.prototype, {\\r\\n\\r\\n\\t\\tgetValue: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tthis.bind(); // bind all binding\\r\\n\\r\\n\\t\\t\\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\\r\\n\\t\\t\\t\\tbinding = this._bindings[ firstValidIndex ];\\r\\n\\r\\n\\t\\t\\t// and only call .getValue on the first\\r\\n\\t\\t\\tif ( binding !== undefined ) binding.getValue( array, offset );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetValue: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tvar bindings = this._bindings;\\r\\n\\r\\n\\t\\t\\tfor ( var i = this._targetGroup.nCachedObjects_,\\r\\n\\t\\t\\t\\t\\t  n = bindings.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tbindings[ i ].setValue( array, offset );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tbind: function () {\\r\\n\\r\\n\\t\\t\\tvar bindings = this._bindings;\\r\\n\\r\\n\\t\\t\\tfor ( var i = this._targetGroup.nCachedObjects_,\\r\\n\\t\\t\\t\\t\\t  n = bindings.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tbindings[ i ].bind();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tunbind: function () {\\r\\n\\r\\n\\t\\t\\tvar bindings = this._bindings;\\r\\n\\r\\n\\t\\t\\tfor ( var i = this._targetGroup.nCachedObjects_,\\r\\n\\t\\t\\t\\t\\t  n = bindings.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tbindings[ i ].unbind();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\r\\n\\tfunction PropertyBinding( rootNode, path, parsedPath ) {\\r\\n\\r\\n\\t\\tthis.path = path;\\r\\n\\t\\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\\r\\n\\r\\n\\t\\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\\r\\n\\r\\n\\t\\tthis.rootNode = rootNode;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( PropertyBinding, {\\r\\n\\r\\n\\t\\tComposite: Composite,\\r\\n\\r\\n\\t\\tcreate: function ( root, path, parsedPath ) {\\r\\n\\r\\n\\t\\t\\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\\r\\n\\r\\n\\t\\t\\t\\treturn new PropertyBinding( root, path, parsedPath );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\treturn new PropertyBinding.Composite( root, path, parsedPath );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * Replaces spaces with underscores and removes unsupported characters from\\r\\n\\t\\t * node names, to ensure compatibility with parseTrackName().\\r\\n\\t\\t *\\r\\n\\t\\t * @param  {string} name Node name to be sanitized.\\r\\n\\t\\t * @return {string}\\r\\n\\t\\t */\\r\\n\\t\\tsanitizeNodeName: function ( name ) {\\r\\n\\r\\n\\t\\t\\treturn name.replace( /\\\\s/g, '_' ).replace( /[^\\\\w-]/g, '' );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tparseTrackName: function () {\\r\\n\\r\\n\\t\\t\\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\\r\\n\\t\\t\\t// be matched to parse the rest of the track name.\\r\\n\\t\\t\\tvar directoryRe = /((?:[\\\\w-]+[\\\\/:])*)/;\\r\\n\\r\\n\\t\\t\\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\\r\\n\\t\\t\\tvar nodeRe = /([\\\\w-\\\\.]+)?/;\\r\\n\\r\\n\\t\\t\\t// Object on target node, and accessor. Name may contain only word\\r\\n\\t\\t\\t// characters. Accessor may contain any character except closing bracket.\\r\\n\\t\\t\\tvar objectRe = /(?:\\\\.([\\\\w-]+)(?:\\\\[(.+)\\\\])?)?/;\\r\\n\\r\\n\\t\\t\\t// Property and accessor. May contain only word characters. Accessor may\\r\\n\\t\\t\\t// contain any non-bracket characters.\\r\\n\\t\\t\\tvar propertyRe = /\\\\.([\\\\w-]+)(?:\\\\[(.+)\\\\])?/;\\r\\n\\r\\n\\t\\t\\tvar trackRe = new RegExp( ''\\r\\n\\t\\t\\t\\t+ '^'\\r\\n\\t\\t\\t\\t+ directoryRe.source\\r\\n\\t\\t\\t\\t+ nodeRe.source\\r\\n\\t\\t\\t\\t+ objectRe.source\\r\\n\\t\\t\\t\\t+ propertyRe.source\\r\\n\\t\\t\\t\\t+ '$'\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\\r\\n\\r\\n\\t\\t\\treturn function ( trackName ) {\\r\\n\\r\\n\\t\\t\\t\\tvar matches = trackRe.exec( trackName );\\r\\n\\r\\n\\t\\t\\t\\tif ( ! matches ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar results = {\\r\\n\\t\\t\\t\\t\\t// directoryName: matches[ 1 ], // (tschw) currently unused\\r\\n\\t\\t\\t\\t\\tnodeName: matches[ 2 ],\\r\\n\\t\\t\\t\\t\\tobjectName: matches[ 3 ],\\r\\n\\t\\t\\t\\t\\tobjectIndex: matches[ 4 ],\\r\\n\\t\\t\\t\\t\\tpropertyName: matches[ 5 ], // required\\r\\n\\t\\t\\t\\t\\tpropertyIndex: matches[ 6 ]\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\\r\\n\\r\\n\\t\\t\\t\\tif ( lastDot !== undefined && lastDot !== - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar objectName = results.nodeName.substring( lastDot + 1 );\\r\\n\\r\\n\\t\\t\\t\\t\\t// Object names must be checked against a whitelist. Otherwise, there\\r\\n\\t\\t\\t\\t\\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\\r\\n\\t\\t\\t\\t\\t// 'bar' could be the objectName, or part of a nodeName (which can\\r\\n\\t\\t\\t\\t\\t// include '.' characters).\\r\\n\\t\\t\\t\\t\\tif ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tresults.nodeName = results.nodeName.substring( 0, lastDot );\\r\\n\\t\\t\\t\\t\\t\\tresults.objectName = objectName;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn results;\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\r\\n\\t\\tfindNode: function ( root, nodeName ) {\\r\\n\\r\\n\\t\\t\\tif ( ! nodeName || nodeName === \\\"\\\" || nodeName === \\\"root\\\" || nodeName === \\\".\\\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\\r\\n\\r\\n\\t\\t\\t\\treturn root;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// search into skeleton bones.\\r\\n\\t\\t\\tif ( root.skeleton ) {\\r\\n\\r\\n\\t\\t\\t\\tvar searchSkeleton = function ( skeleton ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < skeleton.bones.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar bone = skeleton.bones[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( bone.name === nodeName ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\treturn bone;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\tvar bone = searchSkeleton( root.skeleton );\\r\\n\\r\\n\\t\\t\\t\\tif ( bone ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn bone;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// search into node subtree.\\r\\n\\t\\t\\tif ( root.children ) {\\r\\n\\r\\n\\t\\t\\t\\tvar searchNodeSubtree = function ( children ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0; i < children.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar childNode = children[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\treturn childNode;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar result = searchNodeSubtree( childNode.children );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( result ) return result;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\tvar subTreeNode = searchNodeSubtree( root.children );\\r\\n\\r\\n\\t\\t\\t\\tif ( subTreeNode ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn subTreeNode;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( PropertyBinding.prototype, { // prototype, continued\\r\\n\\r\\n\\t\\t// these are used to \\\"bind\\\" a nonexistent property\\r\\n\\t\\t_getValue_unavailable: function () {},\\r\\n\\t\\t_setValue_unavailable: function () {},\\r\\n\\r\\n\\t\\tBindingType: {\\r\\n\\t\\t\\tDirect: 0,\\r\\n\\t\\t\\tEntireArray: 1,\\r\\n\\t\\t\\tArrayElement: 2,\\r\\n\\t\\t\\tHasFromToArray: 3\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tVersioning: {\\r\\n\\t\\t\\tNone: 0,\\r\\n\\t\\t\\tNeedsUpdate: 1,\\r\\n\\t\\t\\tMatrixWorldNeedsUpdate: 2\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tGetterByBindingType: [\\r\\n\\r\\n\\t\\t\\tfunction getValue_direct( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\tbuffer[ offset ] = this.node[ this.propertyName ];\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tfunction getValue_array( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\tvar source = this.resolvedProperty;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tbuffer[ offset ++ ] = source[ i ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tfunction getValue_arrayElement( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\tfunction getValue_toArray( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.resolvedProperty.toArray( buffer, offset );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t],\\r\\n\\r\\n\\t\\tSetterByBindingTypeAndVersioning: [\\r\\n\\r\\n\\t\\t\\t[\\r\\n\\t\\t\\t\\t// Direct\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_direct( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\\r\\n\\t\\t\\t\\t\\tthis.targetObject.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\\r\\n\\t\\t\\t\\t\\tthis.targetObject.matrixWorldNeedsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t], [\\r\\n\\r\\n\\t\\t\\t\\t// EntireArray\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_array( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar dest = this.resolvedProperty;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdest[ i ] = buffer[ offset ++ ];\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar dest = this.resolvedProperty;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdest[ i ] = buffer[ offset ++ ];\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.targetObject.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar dest = this.resolvedProperty;\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdest[ i ] = buffer[ offset ++ ];\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.targetObject.matrixWorldNeedsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t], [\\r\\n\\r\\n\\t\\t\\t\\t// ArrayElement\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_arrayElement( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\\r\\n\\t\\t\\t\\t\\tthis.targetObject.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\\r\\n\\t\\t\\t\\t\\tthis.targetObject.matrixWorldNeedsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t], [\\r\\n\\r\\n\\t\\t\\t\\t// HasToFromArray\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_fromArray( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.resolvedProperty.fromArray( buffer, offset );\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.resolvedProperty.fromArray( buffer, offset );\\r\\n\\t\\t\\t\\t\\tthis.targetObject.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t\\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.resolvedProperty.fromArray( buffer, offset );\\r\\n\\t\\t\\t\\t\\tthis.targetObject.matrixWorldNeedsUpdate = true;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t]\\r\\n\\r\\n\\t\\t],\\r\\n\\r\\n\\t\\tgetValue: function getValue_unbound( targetArray, offset ) {\\r\\n\\r\\n\\t\\t\\tthis.bind();\\r\\n\\t\\t\\tthis.getValue( targetArray, offset );\\r\\n\\r\\n\\t\\t\\t// Note: This class uses a State pattern on a per-method basis:\\r\\n\\t\\t\\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\\r\\n\\t\\t\\t// prototype version of these methods with one that represents\\r\\n\\t\\t\\t// the bound state. When the property is not found, the methods\\r\\n\\t\\t\\t// become no-ops.\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetValue: function getValue_unbound( sourceArray, offset ) {\\r\\n\\r\\n\\t\\t\\tthis.bind();\\r\\n\\t\\t\\tthis.setValue( sourceArray, offset );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// create getter / setter pair for a property in the scene graph\\r\\n\\t\\tbind: function () {\\r\\n\\r\\n\\t\\t\\tvar targetObject = this.node,\\r\\n\\t\\t\\t\\tparsedPath = this.parsedPath,\\r\\n\\r\\n\\t\\t\\t\\tobjectName = parsedPath.objectName,\\r\\n\\t\\t\\t\\tpropertyName = parsedPath.propertyName,\\r\\n\\t\\t\\t\\tpropertyIndex = parsedPath.propertyIndex;\\r\\n\\r\\n\\t\\t\\tif ( ! targetObject ) {\\r\\n\\r\\n\\t\\t\\t\\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\\r\\n\\r\\n\\t\\t\\t\\tthis.node = targetObject;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// set fail state so we can just 'return' on error\\r\\n\\t\\t\\tthis.getValue = this._getValue_unavailable;\\r\\n\\t\\t\\tthis.setValue = this._setValue_unavailable;\\r\\n\\r\\n\\t\\t\\t// ensure there is a value node\\r\\n\\t\\t\\tif ( ! targetObject ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\\\'t found.' );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( objectName ) {\\r\\n\\r\\n\\t\\t\\t\\tvar objectIndex = parsedPath.objectIndex;\\r\\n\\r\\n\\t\\t\\t\\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\\r\\n\\t\\t\\t\\tswitch ( objectName ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'materials':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( ! targetObject.material ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\\r\\n\\t\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( ! targetObject.material.materials ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\\r\\n\\t\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttargetObject = targetObject.material.materials;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tcase 'bones':\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( ! targetObject.skeleton ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\\r\\n\\t\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// potential future optimization: skip this if propertyIndex is already an integer\\r\\n\\t\\t\\t\\t\\t\\t// and convert the integer string to a true integer.\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttargetObject = targetObject.skeleton.bones;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// support resolving morphTarget names into indices.\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0; i < targetObject.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( targetObject[ i ].name === objectIndex ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tobjectIndex = i;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\tdefault:\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( targetObject[ objectName ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\\r\\n\\t\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttargetObject = targetObject[ objectName ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t\\tif ( objectIndex !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( targetObject[ objectIndex ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\\r\\n\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\ttargetObject = targetObject[ objectIndex ];\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// resolve property\\r\\n\\t\\t\\tvar nodeProperty = targetObject[ propertyName ];\\r\\n\\r\\n\\t\\t\\tif ( nodeProperty === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar nodeName = parsedPath.nodeName;\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\\r\\n\\t\\t\\t\\t\\t'.' + propertyName + ' but it wasn\\\\'t found.', targetObject );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// determine versioning scheme\\r\\n\\t\\t\\tvar versioning = this.Versioning.None;\\r\\n\\r\\n\\t\\t\\tif ( targetObject.needsUpdate !== undefined ) { // material\\r\\n\\r\\n\\t\\t\\t\\tversioning = this.Versioning.NeedsUpdate;\\r\\n\\t\\t\\t\\tthis.targetObject = targetObject;\\r\\n\\r\\n\\t\\t\\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\\r\\n\\r\\n\\t\\t\\t\\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\\r\\n\\t\\t\\t\\tthis.targetObject = targetObject;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// determine how the property gets bound\\r\\n\\t\\t\\tvar bindingType = this.BindingType.Direct;\\r\\n\\r\\n\\t\\t\\tif ( propertyIndex !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// access a sub element of the property array (only primitives are supported right now)\\r\\n\\r\\n\\t\\t\\t\\tif ( propertyName === \\\"morphTargetInfluences\\\" ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\\r\\n\\r\\n\\t\\t\\t\\t\\t// support resolving morphTarget names into indices.\\r\\n\\t\\t\\t\\t\\tif ( ! targetObject.geometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\\r\\n\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( targetObject.geometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( ! targetObject.geometry.morphAttributes ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\\r\\n\\t\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpropertyIndex = i;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( ! targetObject.geometry.morphTargets ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\\r\\n\\t\\t\\t\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpropertyIndex = i;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tbindingType = this.BindingType.ArrayElement;\\r\\n\\r\\n\\t\\t\\t\\tthis.resolvedProperty = nodeProperty;\\r\\n\\t\\t\\t\\tthis.propertyIndex = propertyIndex;\\r\\n\\r\\n\\t\\t\\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// must use copy for Object3D.Euler/Quaternion\\r\\n\\r\\n\\t\\t\\t\\tbindingType = this.BindingType.HasFromToArray;\\r\\n\\r\\n\\t\\t\\t\\tthis.resolvedProperty = nodeProperty;\\r\\n\\r\\n\\t\\t\\t} else if ( Array.isArray( nodeProperty ) ) {\\r\\n\\r\\n\\t\\t\\t\\tbindingType = this.BindingType.EntireArray;\\r\\n\\r\\n\\t\\t\\t\\tthis.resolvedProperty = nodeProperty;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.propertyName = propertyName;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// select getter / setter\\r\\n\\t\\t\\tthis.getValue = this.GetterByBindingType[ bindingType ];\\r\\n\\t\\t\\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tunbind: function () {\\r\\n\\r\\n\\t\\t\\tthis.node = null;\\r\\n\\r\\n\\t\\t\\t// back to the prototype version of getValue / setValue\\r\\n\\t\\t\\t// note: avoiding to mutate the shape of 'this' via 'delete'\\r\\n\\t\\t\\tthis.getValue = this._getValue_unbound;\\r\\n\\t\\t\\tthis.setValue = this._setValue_unbound;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//!\\\\ DECLARE ALIAS AFTER assign prototype !\\r\\n\\tObject.assign( PropertyBinding.prototype, {\\r\\n\\r\\n\\t\\t// initial state of these methods that calls 'bind'\\r\\n\\t\\t_getValue_unbound: PropertyBinding.prototype.getValue,\\r\\n\\t\\t_setValue_unbound: PropertyBinding.prototype.setValue,\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * A group of objects that receives a shared animation state.\\r\\n\\t *\\r\\n\\t * Usage:\\r\\n\\t *\\r\\n\\t * \\t-\\tAdd objects you would otherwise pass as 'root' to the\\r\\n\\t * \\t\\tconstructor or the .clipAction method of AnimationMixer.\\r\\n\\t *\\r\\n\\t * \\t-\\tInstead pass this object as 'root'.\\r\\n\\t *\\r\\n\\t * \\t-\\tYou can also add and remove objects later when the mixer\\r\\n\\t * \\t\\tis running.\\r\\n\\t *\\r\\n\\t * Note:\\r\\n\\t *\\r\\n\\t *  \\tObjects of this class appear as one object to the mixer,\\r\\n\\t *  \\tso cache control of the individual objects must be done\\r\\n\\t *  \\ton the group.\\r\\n\\t *\\r\\n\\t * Limitation:\\r\\n\\t *\\r\\n\\t * \\t- \\tThe animated properties must be compatible among the\\r\\n\\t * \\t\\tall objects in the group.\\r\\n\\t *\\r\\n\\t *  -\\tA single property can either be controlled through a\\r\\n\\t *  \\ttarget group or directly, but not both.\\r\\n\\t *\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction AnimationObjectGroup() {\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\t// cached objects followed by the active ones\\r\\n\\t\\tthis._objects = Array.prototype.slice.call( arguments );\\r\\n\\r\\n\\t\\tthis.nCachedObjects_ = 0;\\t\\t\\t// threshold\\r\\n\\t\\t// note: read by PropertyBinding.Composite\\r\\n\\r\\n\\t\\tvar indices = {};\\r\\n\\t\\tthis._indicesByUUID = indices;\\t\\t// for bookkeeping\\r\\n\\r\\n\\t\\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\tindices[ arguments[ i ].uuid ] = i;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis._paths = [];\\t\\t\\t\\t\\t// inside: string\\r\\n\\t\\tthis._parsedPaths = [];\\t\\t\\t\\t// inside: { we don't care, here }\\r\\n\\t\\tthis._bindings = []; \\t\\t\\t\\t// inside: Array< PropertyBinding >\\r\\n\\t\\tthis._bindingsIndicesByPath = {}; \\t// inside: indices in these arrays\\r\\n\\r\\n\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\tthis.stats = {\\r\\n\\r\\n\\t\\t\\tobjects: {\\r\\n\\t\\t\\t\\tget total() {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn scope._objects.length;\\r\\n\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tget inUse() {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn this.total - scope.nCachedObjects_;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tget bindingsPerObject() {\\r\\n\\r\\n\\t\\t\\t\\treturn scope._bindings.length;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( AnimationObjectGroup.prototype, {\\r\\n\\r\\n\\t\\tisAnimationObjectGroup: true,\\r\\n\\r\\n\\t\\tadd: function () {\\r\\n\\r\\n\\t\\t\\tvar objects = this._objects,\\r\\n\\t\\t\\t\\tnObjects = objects.length,\\r\\n\\t\\t\\t\\tnCachedObjects = this.nCachedObjects_,\\r\\n\\t\\t\\t\\tindicesByUUID = this._indicesByUUID,\\r\\n\\t\\t\\t\\tpaths = this._paths,\\r\\n\\t\\t\\t\\tparsedPaths = this._parsedPaths,\\r\\n\\t\\t\\t\\tbindings = this._bindings,\\r\\n\\t\\t\\t\\tnBindings = bindings.length;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar object = arguments[ i ],\\r\\n\\t\\t\\t\\t\\tuuid = object.uuid,\\r\\n\\t\\t\\t\\t\\tindex = indicesByUUID[ uuid ],\\r\\n\\t\\t\\t\\t\\tknownObject = undefined;\\r\\n\\r\\n\\t\\t\\t\\tif ( index === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// unknown object -> add it to the ACTIVE region\\r\\n\\r\\n\\t\\t\\t\\t\\tindex = nObjects ++;\\r\\n\\t\\t\\t\\t\\tindicesByUUID[ uuid ] = index;\\r\\n\\t\\t\\t\\t\\tobjects.push( object );\\r\\n\\r\\n\\t\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( index < nCachedObjects ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tknownObject = objects[ index ];\\r\\n\\r\\n\\t\\t\\t\\t\\t// move existing object to the ACTIVE region\\r\\n\\r\\n\\t\\t\\t\\t\\tvar firstActiveIndex = -- nCachedObjects,\\r\\n\\t\\t\\t\\t\\t\\tlastCachedObject = objects[ firstActiveIndex ];\\r\\n\\r\\n\\t\\t\\t\\t\\tindicesByUUID[ lastCachedObject.uuid ] = index;\\r\\n\\t\\t\\t\\t\\tobjects[ index ] = lastCachedObject;\\r\\n\\r\\n\\t\\t\\t\\t\\tindicesByUUID[ uuid ] = firstActiveIndex;\\r\\n\\t\\t\\t\\t\\tobjects[ firstActiveIndex ] = object;\\r\\n\\r\\n\\t\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar bindingsForPath = bindings[ j ],\\r\\n\\t\\t\\t\\t\\t\\t\\tlastCached = bindingsForPath[ firstActiveIndex ],\\r\\n\\t\\t\\t\\t\\t\\t\\tbinding = bindingsForPath[ index ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbindingsForPath[ index ] = lastCached;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( binding === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// since we do not bother to create new bindings\\r\\n\\t\\t\\t\\t\\t\\t\\t// for objects that are cached, the binding may\\r\\n\\t\\t\\t\\t\\t\\t\\t// or may not exist\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbindingsForPath[ firstActiveIndex ] = binding;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t} else if ( objects[ index ] !== knownObject ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\\r\\n\\t\\t\\t\\t\\t\\t\\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\\r\\n\\r\\n\\t\\t\\t\\t} // else the object is already where we want it to be\\r\\n\\r\\n\\t\\t\\t} // for arguments\\r\\n\\r\\n\\t\\t\\tthis.nCachedObjects_ = nCachedObjects;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tremove: function () {\\r\\n\\r\\n\\t\\t\\tvar objects = this._objects,\\r\\n\\t\\t\\t\\tnCachedObjects = this.nCachedObjects_,\\r\\n\\t\\t\\t\\tindicesByUUID = this._indicesByUUID,\\r\\n\\t\\t\\t\\tbindings = this._bindings,\\r\\n\\t\\t\\t\\tnBindings = bindings.length;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar object = arguments[ i ],\\r\\n\\t\\t\\t\\t\\tuuid = object.uuid,\\r\\n\\t\\t\\t\\t\\tindex = indicesByUUID[ uuid ];\\r\\n\\r\\n\\t\\t\\t\\tif ( index !== undefined && index >= nCachedObjects ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// move existing object into the CACHED region\\r\\n\\r\\n\\t\\t\\t\\t\\tvar lastCachedIndex = nCachedObjects ++,\\r\\n\\t\\t\\t\\t\\t\\tfirstActiveObject = objects[ lastCachedIndex ];\\r\\n\\r\\n\\t\\t\\t\\t\\tindicesByUUID[ firstActiveObject.uuid ] = index;\\r\\n\\t\\t\\t\\t\\tobjects[ index ] = firstActiveObject;\\r\\n\\r\\n\\t\\t\\t\\t\\tindicesByUUID[ uuid ] = lastCachedIndex;\\r\\n\\t\\t\\t\\t\\tobjects[ lastCachedIndex ] = object;\\r\\n\\r\\n\\t\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar bindingsForPath = bindings[ j ],\\r\\n\\t\\t\\t\\t\\t\\t\\tfirstActive = bindingsForPath[ lastCachedIndex ],\\r\\n\\t\\t\\t\\t\\t\\t\\tbinding = bindingsForPath[ index ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbindingsForPath[ index ] = firstActive;\\r\\n\\t\\t\\t\\t\\t\\tbindingsForPath[ lastCachedIndex ] = binding;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} // for arguments\\r\\n\\r\\n\\t\\t\\tthis.nCachedObjects_ = nCachedObjects;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// remove & forget\\r\\n\\t\\tuncache: function () {\\r\\n\\r\\n\\t\\t\\tvar objects = this._objects,\\r\\n\\t\\t\\t\\tnObjects = objects.length,\\r\\n\\t\\t\\t\\tnCachedObjects = this.nCachedObjects_,\\r\\n\\t\\t\\t\\tindicesByUUID = this._indicesByUUID,\\r\\n\\t\\t\\t\\tbindings = this._bindings,\\r\\n\\t\\t\\t\\tnBindings = bindings.length;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar object = arguments[ i ],\\r\\n\\t\\t\\t\\t\\tuuid = object.uuid,\\r\\n\\t\\t\\t\\t\\tindex = indicesByUUID[ uuid ];\\r\\n\\r\\n\\t\\t\\t\\tif ( index !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tdelete indicesByUUID[ uuid ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( index < nCachedObjects ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// object is cached, shrink the CACHED region\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar firstActiveIndex = -- nCachedObjects,\\r\\n\\t\\t\\t\\t\\t\\t\\tlastCachedObject = objects[ firstActiveIndex ],\\r\\n\\t\\t\\t\\t\\t\\t\\tlastIndex = -- nObjects,\\r\\n\\t\\t\\t\\t\\t\\t\\tlastObject = objects[ lastIndex ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// last cached object takes this object's place\\r\\n\\t\\t\\t\\t\\t\\tindicesByUUID[ lastCachedObject.uuid ] = index;\\r\\n\\t\\t\\t\\t\\t\\tobjects[ index ] = lastCachedObject;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// last object goes to the activated slot and pop\\r\\n\\t\\t\\t\\t\\t\\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\\r\\n\\t\\t\\t\\t\\t\\tobjects[ firstActiveIndex ] = lastObject;\\r\\n\\t\\t\\t\\t\\t\\tobjects.pop();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar bindingsForPath = bindings[ j ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tlastCached = bindingsForPath[ firstActiveIndex ],\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tlast = bindingsForPath[ lastIndex ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbindingsForPath[ index ] = lastCached;\\r\\n\\t\\t\\t\\t\\t\\t\\tbindingsForPath[ firstActiveIndex ] = last;\\r\\n\\t\\t\\t\\t\\t\\t\\tbindingsForPath.pop();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// object is active, just swap with the last and pop\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar lastIndex = -- nObjects,\\r\\n\\t\\t\\t\\t\\t\\t\\tlastObject = objects[ lastIndex ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tindicesByUUID[ lastObject.uuid ] = index;\\r\\n\\t\\t\\t\\t\\t\\tobjects[ index ] = lastObject;\\r\\n\\t\\t\\t\\t\\t\\tobjects.pop();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// accounting is done, now do the same for all bindings\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar bindingsForPath = bindings[ j ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\\r\\n\\t\\t\\t\\t\\t\\t\\tbindingsForPath.pop();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t} // cached or active\\r\\n\\r\\n\\t\\t\\t\\t} // if object is known\\r\\n\\r\\n\\t\\t\\t} // for arguments\\r\\n\\r\\n\\t\\t\\tthis.nCachedObjects_ = nCachedObjects;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Internal interface used by befriended PropertyBinding.Composite:\\r\\n\\r\\n\\t\\tsubscribe_: function ( path, parsedPath ) {\\r\\n\\r\\n\\t\\t\\t// returns an array of bindings for the given path that is changed\\r\\n\\t\\t\\t// according to the contained objects in the group\\r\\n\\r\\n\\t\\t\\tvar indicesByPath = this._bindingsIndicesByPath,\\r\\n\\t\\t\\t\\tindex = indicesByPath[ path ],\\r\\n\\t\\t\\t\\tbindings = this._bindings;\\r\\n\\r\\n\\t\\t\\tif ( index !== undefined ) return bindings[ index ];\\r\\n\\r\\n\\t\\t\\tvar paths = this._paths,\\r\\n\\t\\t\\t\\tparsedPaths = this._parsedPaths,\\r\\n\\t\\t\\t\\tobjects = this._objects,\\r\\n\\t\\t\\t\\tnObjects = objects.length,\\r\\n\\t\\t\\t\\tnCachedObjects = this.nCachedObjects_,\\r\\n\\t\\t\\t\\tbindingsForPath = new Array( nObjects );\\r\\n\\r\\n\\t\\t\\tindex = bindings.length;\\r\\n\\r\\n\\t\\t\\tindicesByPath[ path ] = index;\\r\\n\\r\\n\\t\\t\\tpaths.push( path );\\r\\n\\t\\t\\tparsedPaths.push( parsedPath );\\r\\n\\t\\t\\tbindings.push( bindingsForPath );\\r\\n\\r\\n\\t\\t\\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar object = objects[ i ];\\r\\n\\t\\t\\t\\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn bindingsForPath;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tunsubscribe_: function ( path ) {\\r\\n\\r\\n\\t\\t\\t// tells the group to forget about a property path and no longer\\r\\n\\t\\t\\t// update the array previously obtained with 'subscribe_'\\r\\n\\r\\n\\t\\t\\tvar indicesByPath = this._bindingsIndicesByPath,\\r\\n\\t\\t\\t\\tindex = indicesByPath[ path ];\\r\\n\\r\\n\\t\\t\\tif ( index !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar paths = this._paths,\\r\\n\\t\\t\\t\\t\\tparsedPaths = this._parsedPaths,\\r\\n\\t\\t\\t\\t\\tbindings = this._bindings,\\r\\n\\t\\t\\t\\t\\tlastBindingsIndex = bindings.length - 1,\\r\\n\\t\\t\\t\\t\\tlastBindings = bindings[ lastBindingsIndex ],\\r\\n\\t\\t\\t\\t\\tlastBindingsPath = path[ lastBindingsIndex ];\\r\\n\\r\\n\\t\\t\\t\\tindicesByPath[ lastBindingsPath ] = index;\\r\\n\\r\\n\\t\\t\\t\\tbindings[ index ] = lastBindings;\\r\\n\\t\\t\\t\\tbindings.pop();\\r\\n\\r\\n\\t\\t\\t\\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\\r\\n\\t\\t\\t\\tparsedPaths.pop();\\r\\n\\r\\n\\t\\t\\t\\tpaths[ index ] = paths[ lastBindingsIndex ];\\r\\n\\t\\t\\t\\tpaths.pop();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * Action provided by AnimationMixer for scheduling clip playback on specific\\r\\n\\t * objects.\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t *\\r\\n\\t */\\r\\n\\r\\n\\tfunction AnimationAction( mixer, clip, localRoot ) {\\r\\n\\r\\n\\t\\tthis._mixer = mixer;\\r\\n\\t\\tthis._clip = clip;\\r\\n\\t\\tthis._localRoot = localRoot || null;\\r\\n\\r\\n\\t\\tvar tracks = clip.tracks,\\r\\n\\t\\t\\tnTracks = tracks.length,\\r\\n\\t\\t\\tinterpolants = new Array( nTracks );\\r\\n\\r\\n\\t\\tvar interpolantSettings = {\\r\\n\\t\\t\\tendingStart: ZeroCurvatureEnding,\\r\\n\\t\\t\\tendingEnd: ZeroCurvatureEnding\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tfor ( var i = 0; i !== nTracks; ++ i ) {\\r\\n\\r\\n\\t\\t\\tvar interpolant = tracks[ i ].createInterpolant( null );\\r\\n\\t\\t\\tinterpolants[ i ] = interpolant;\\r\\n\\t\\t\\tinterpolant.settings = interpolantSettings;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis._interpolantSettings = interpolantSettings;\\r\\n\\r\\n\\t\\tthis._interpolants = interpolants;\\t// bound by the mixer\\r\\n\\r\\n\\t\\t// inside: PropertyMixer (managed by the mixer)\\r\\n\\t\\tthis._propertyBindings = new Array( nTracks );\\r\\n\\r\\n\\t\\tthis._cacheIndex = null;\\t\\t\\t// for the memory manager\\r\\n\\t\\tthis._byClipCacheIndex = null;\\t\\t// for the memory manager\\r\\n\\r\\n\\t\\tthis._timeScaleInterpolant = null;\\r\\n\\t\\tthis._weightInterpolant = null;\\r\\n\\r\\n\\t\\tthis.loop = LoopRepeat;\\r\\n\\t\\tthis._loopCount = - 1;\\r\\n\\r\\n\\t\\t// global mixer time when the action is to be started\\r\\n\\t\\t// it's set back to 'null' upon start of the action\\r\\n\\t\\tthis._startTime = null;\\r\\n\\r\\n\\t\\t// scaled local time of the action\\r\\n\\t\\t// gets clamped or wrapped to 0..clip.duration according to loop\\r\\n\\t\\tthis.time = 0;\\r\\n\\r\\n\\t\\tthis.timeScale = 1;\\r\\n\\t\\tthis._effectiveTimeScale = 1;\\r\\n\\r\\n\\t\\tthis.weight = 1;\\r\\n\\t\\tthis._effectiveWeight = 1;\\r\\n\\r\\n\\t\\tthis.repetitions = Infinity; \\t\\t// no. of repetitions when looping\\r\\n\\r\\n\\t\\tthis.paused = false;\\t\\t\\t\\t// true -> zero effective time scale\\r\\n\\t\\tthis.enabled = true;\\t\\t\\t\\t// false -> zero effective weight\\r\\n\\r\\n\\t\\tthis.clampWhenFinished \\t= false;\\t// keep feeding the last frame?\\r\\n\\r\\n\\t\\tthis.zeroSlopeAtStart \\t= true;\\t\\t// for smooth interpolation w/o separate\\r\\n\\t\\tthis.zeroSlopeAtEnd\\t\\t= true;\\t\\t// clips for start, loop and end\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( AnimationAction.prototype, {\\r\\n\\r\\n\\t\\t// State & Scheduling\\r\\n\\r\\n\\t\\tplay: function () {\\r\\n\\r\\n\\t\\t\\tthis._mixer._activateAction( this );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tstop: function () {\\r\\n\\r\\n\\t\\t\\tthis._mixer._deactivateAction( this );\\r\\n\\r\\n\\t\\t\\treturn this.reset();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\treset: function () {\\r\\n\\r\\n\\t\\t\\tthis.paused = false;\\r\\n\\t\\t\\tthis.enabled = true;\\r\\n\\r\\n\\t\\t\\tthis.time = 0;\\t\\t\\t// restart clip\\r\\n\\t\\t\\tthis._loopCount = - 1;\\t// forget previous loops\\r\\n\\t\\t\\tthis._startTime = null;\\t// forget scheduling\\r\\n\\r\\n\\t\\t\\treturn this.stopFading().stopWarping();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tisRunning: function () {\\r\\n\\r\\n\\t\\t\\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\\r\\n\\t\\t\\t\\t\\tthis._startTime === null && this._mixer._isActiveAction( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// return true when play has been called\\r\\n\\t\\tisScheduled: function () {\\r\\n\\r\\n\\t\\t\\treturn this._mixer._isActiveAction( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tstartAt: function ( time ) {\\r\\n\\r\\n\\t\\t\\tthis._startTime = time;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetLoop: function ( mode, repetitions ) {\\r\\n\\r\\n\\t\\t\\tthis.loop = mode;\\r\\n\\t\\t\\tthis.repetitions = repetitions;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Weight\\r\\n\\r\\n\\t\\t// set the weight stopping any scheduled fading\\r\\n\\t\\t// although .enabled = false yields an effective weight of zero, this\\r\\n\\t\\t// method does *not* change .enabled, because it would be confusing\\r\\n\\t\\tsetEffectiveWeight: function ( weight ) {\\r\\n\\r\\n\\t\\t\\tthis.weight = weight;\\r\\n\\r\\n\\t\\t\\t// note: same logic as when updated at runtime\\r\\n\\t\\t\\tthis._effectiveWeight = this.enabled ? weight : 0;\\r\\n\\r\\n\\t\\t\\treturn this.stopFading();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// return the weight considering fading and .enabled\\r\\n\\t\\tgetEffectiveWeight: function () {\\r\\n\\r\\n\\t\\t\\treturn this._effectiveWeight;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfadeIn: function ( duration ) {\\r\\n\\r\\n\\t\\t\\treturn this._scheduleFading( duration, 0, 1 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tfadeOut: function ( duration ) {\\r\\n\\r\\n\\t\\t\\treturn this._scheduleFading( duration, 1, 0 );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\\r\\n\\r\\n\\t\\t\\tfadeOutAction.fadeOut( duration );\\r\\n\\t\\t\\tthis.fadeIn( duration );\\r\\n\\r\\n\\t\\t\\tif ( warp ) {\\r\\n\\r\\n\\t\\t\\t\\tvar fadeInDuration = this._clip.duration,\\r\\n\\t\\t\\t\\t\\tfadeOutDuration = fadeOutAction._clip.duration,\\r\\n\\r\\n\\t\\t\\t\\t\\tstartEndRatio = fadeOutDuration / fadeInDuration,\\r\\n\\t\\t\\t\\t\\tendStartRatio = fadeInDuration / fadeOutDuration;\\r\\n\\r\\n\\t\\t\\t\\tfadeOutAction.warp( 1.0, startEndRatio, duration );\\r\\n\\t\\t\\t\\tthis.warp( endStartRatio, 1.0, duration );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\\r\\n\\r\\n\\t\\t\\treturn fadeInAction.crossFadeFrom( this, duration, warp );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tstopFading: function () {\\r\\n\\r\\n\\t\\t\\tvar weightInterpolant = this._weightInterpolant;\\r\\n\\r\\n\\t\\t\\tif ( weightInterpolant !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._weightInterpolant = null;\\r\\n\\t\\t\\t\\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Time Scale Control\\r\\n\\r\\n\\t\\t// set the time scale stopping any scheduled warping\\r\\n\\t\\t// although .paused = true yields an effective time scale of zero, this\\r\\n\\t\\t// method does *not* change .paused, because it would be confusing\\r\\n\\t\\tsetEffectiveTimeScale: function ( timeScale ) {\\r\\n\\r\\n\\t\\t\\tthis.timeScale = timeScale;\\r\\n\\t\\t\\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\\r\\n\\r\\n\\t\\t\\treturn this.stopWarping();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// return the time scale considering warping and .paused\\r\\n\\t\\tgetEffectiveTimeScale: function () {\\r\\n\\r\\n\\t\\t\\treturn this._effectiveTimeScale;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetDuration: function ( duration ) {\\r\\n\\r\\n\\t\\t\\tthis.timeScale = this._clip.duration / duration;\\r\\n\\r\\n\\t\\t\\treturn this.stopWarping();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsyncWith: function ( action ) {\\r\\n\\r\\n\\t\\t\\tthis.time = action.time;\\r\\n\\t\\t\\tthis.timeScale = action.timeScale;\\r\\n\\r\\n\\t\\t\\treturn this.stopWarping();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\thalt: function ( duration ) {\\r\\n\\r\\n\\t\\t\\treturn this.warp( this._effectiveTimeScale, 0, duration );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\twarp: function ( startTimeScale, endTimeScale, duration ) {\\r\\n\\r\\n\\t\\t\\tvar mixer = this._mixer, now = mixer.time,\\r\\n\\t\\t\\t\\tinterpolant = this._timeScaleInterpolant,\\r\\n\\r\\n\\t\\t\\t\\ttimeScale = this.timeScale;\\r\\n\\r\\n\\t\\t\\tif ( interpolant === null ) {\\r\\n\\r\\n\\t\\t\\t\\tinterpolant = mixer._lendControlInterpolant();\\r\\n\\t\\t\\t\\tthis._timeScaleInterpolant = interpolant;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar times = interpolant.parameterPositions,\\r\\n\\t\\t\\t\\tvalues = interpolant.sampleValues;\\r\\n\\r\\n\\t\\t\\ttimes[ 0 ] = now;\\r\\n\\t\\t\\ttimes[ 1 ] = now + duration;\\r\\n\\r\\n\\t\\t\\tvalues[ 0 ] = startTimeScale / timeScale;\\r\\n\\t\\t\\tvalues[ 1 ] = endTimeScale / timeScale;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tstopWarping: function () {\\r\\n\\r\\n\\t\\t\\tvar timeScaleInterpolant = this._timeScaleInterpolant;\\r\\n\\r\\n\\t\\t\\tif ( timeScaleInterpolant !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._timeScaleInterpolant = null;\\r\\n\\t\\t\\t\\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Object Accessors\\r\\n\\r\\n\\t\\tgetMixer: function () {\\r\\n\\r\\n\\t\\t\\treturn this._mixer;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetClip: function () {\\r\\n\\r\\n\\t\\t\\treturn this._clip;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetRoot: function () {\\r\\n\\r\\n\\t\\t\\treturn this._localRoot || this._mixer._root;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Interna\\r\\n\\r\\n\\t\\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\\r\\n\\r\\n\\t\\t\\t// called by the mixer\\r\\n\\r\\n\\t\\t\\tif ( ! this.enabled ) {\\r\\n\\r\\n\\t\\t\\t\\t// call ._updateWeight() to update ._effectiveWeight\\r\\n\\r\\n\\t\\t\\t\\tthis._updateWeight( time );\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar startTime = this._startTime;\\r\\n\\r\\n\\t\\t\\tif ( startTime !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t// check for scheduled start of action\\r\\n\\r\\n\\t\\t\\t\\tvar timeRunning = ( time - startTime ) * timeDirection;\\r\\n\\t\\t\\t\\tif ( timeRunning < 0 || timeDirection === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn; // yet to come / don't decide when delta = 0\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// start\\r\\n\\r\\n\\t\\t\\t\\tthis._startTime = null; // unschedule\\r\\n\\t\\t\\t\\tdeltaTime = timeDirection * timeRunning;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// apply time scale and advance time\\r\\n\\r\\n\\t\\t\\tdeltaTime *= this._updateTimeScale( time );\\r\\n\\t\\t\\tvar clipTime = this._updateTime( deltaTime );\\r\\n\\r\\n\\t\\t\\t// note: _updateTime may disable the action resulting in\\r\\n\\t\\t\\t// an effective weight of 0\\r\\n\\r\\n\\t\\t\\tvar weight = this._updateWeight( time );\\r\\n\\r\\n\\t\\t\\tif ( weight > 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tvar interpolants = this._interpolants;\\r\\n\\t\\t\\t\\tvar propertyMixers = this._propertyBindings;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tinterpolants[ j ].evaluate( clipTime );\\r\\n\\t\\t\\t\\t\\tpropertyMixers[ j ].accumulate( accuIndex, weight );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_updateWeight: function ( time ) {\\r\\n\\r\\n\\t\\t\\tvar weight = 0;\\r\\n\\r\\n\\t\\t\\tif ( this.enabled ) {\\r\\n\\r\\n\\t\\t\\t\\tweight = this.weight;\\r\\n\\t\\t\\t\\tvar interpolant = this._weightInterpolant;\\r\\n\\r\\n\\t\\t\\t\\tif ( interpolant !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\\r\\n\\r\\n\\t\\t\\t\\t\\tweight *= interpolantValue;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( time > interpolant.parameterPositions[ 1 ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.stopFading();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( interpolantValue === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// faded out, disable\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.enabled = false;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis._effectiveWeight = weight;\\r\\n\\t\\t\\treturn weight;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_updateTimeScale: function ( time ) {\\r\\n\\r\\n\\t\\t\\tvar timeScale = 0;\\r\\n\\r\\n\\t\\t\\tif ( ! this.paused ) {\\r\\n\\r\\n\\t\\t\\t\\ttimeScale = this.timeScale;\\r\\n\\r\\n\\t\\t\\t\\tvar interpolant = this._timeScaleInterpolant;\\r\\n\\r\\n\\t\\t\\t\\tif ( interpolant !== null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\\r\\n\\r\\n\\t\\t\\t\\t\\ttimeScale *= interpolantValue;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( time > interpolant.parameterPositions[ 1 ] ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis.stopWarping();\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( timeScale === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// motion has halted, pause\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.paused = true;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// warp done - apply final time scale\\r\\n\\t\\t\\t\\t\\t\\t\\tthis.timeScale = timeScale;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis._effectiveTimeScale = timeScale;\\r\\n\\t\\t\\treturn timeScale;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_updateTime: function ( deltaTime ) {\\r\\n\\r\\n\\t\\t\\tvar time = this.time + deltaTime;\\r\\n\\r\\n\\t\\t\\tif ( deltaTime === 0 ) return time;\\r\\n\\r\\n\\t\\t\\tvar duration = this._clip.duration,\\r\\n\\r\\n\\t\\t\\t\\tloop = this.loop,\\r\\n\\t\\t\\t\\tloopCount = this._loopCount;\\r\\n\\r\\n\\t\\t\\tif ( loop === LoopOnce ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( loopCount === - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// just started\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._loopCount = 0;\\r\\n\\t\\t\\t\\t\\tthis._setEndings( true, true, false );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\thandle_stop: {\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( time >= duration ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttime = duration;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else if ( time < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttime = 0;\\r\\n\\r\\n\\t\\t\\t\\t\\t} else break handle_stop;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( this.clampWhenFinished ) this.paused = true;\\r\\n\\t\\t\\t\\t\\telse this.enabled = false;\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._mixer.dispatchEvent( {\\r\\n\\t\\t\\t\\t\\t\\ttype: 'finished', action: this,\\r\\n\\t\\t\\t\\t\\t\\tdirection: deltaTime < 0 ? - 1 : 1\\r\\n\\t\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else { // repetitive Repeat or PingPong\\r\\n\\r\\n\\t\\t\\t\\tvar pingPong = ( loop === LoopPingPong );\\r\\n\\r\\n\\t\\t\\t\\tif ( loopCount === - 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// just started\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( deltaTime >= 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tloopCount = 0;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis._setEndings( true, this.repetitions === 0, pingPong );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// when looping in reverse direction, the initial\\r\\n\\t\\t\\t\\t\\t\\t// transition through zero counts as a repetition,\\r\\n\\t\\t\\t\\t\\t\\t// so leave loopCount at -1\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis._setEndings( this.repetitions === 0, true, pingPong );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( time >= duration || time < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// wrap around\\r\\n\\r\\n\\t\\t\\t\\t\\tvar loopDelta = Math.floor( time / duration ); // signed\\r\\n\\t\\t\\t\\t\\ttime -= duration * loopDelta;\\r\\n\\r\\n\\t\\t\\t\\t\\tloopCount += Math.abs( loopDelta );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar pending = this.repetitions - loopCount;\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( pending < 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// have to stop (switch state, clamp time, fire event)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( this.clampWhenFinished ) this.paused = true;\\r\\n\\t\\t\\t\\t\\t\\telse this.enabled = false;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\ttime = deltaTime > 0 ? duration : 0;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis._mixer.dispatchEvent( {\\r\\n\\t\\t\\t\\t\\t\\t\\ttype: 'finished', action: this,\\r\\n\\t\\t\\t\\t\\t\\t\\tdirection: deltaTime > 0 ? 1 : - 1\\r\\n\\t\\t\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// keep running\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( pending === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t// entering the last round\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tvar atStart = deltaTime < 0;\\r\\n\\t\\t\\t\\t\\t\\t\\tthis._setEndings( atStart, ! atStart, pingPong );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\tthis._setEndings( false, false, pingPong );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis._loopCount = loopCount;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis._mixer.dispatchEvent( {\\r\\n\\t\\t\\t\\t\\t\\t\\ttype: 'loop', action: this, loopDelta: loopDelta\\r\\n\\t\\t\\t\\t\\t\\t} );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// invert time for the \\\"pong round\\\"\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.time = time;\\r\\n\\t\\t\\t\\t\\treturn duration - time;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.time = time;\\r\\n\\t\\t\\treturn time;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_setEndings: function ( atStart, atEnd, pingPong ) {\\r\\n\\r\\n\\t\\t\\tvar settings = this._interpolantSettings;\\r\\n\\r\\n\\t\\t\\tif ( pingPong ) {\\r\\n\\r\\n\\t\\t\\t\\tsettings.endingStart \\t= ZeroSlopeEnding;\\r\\n\\t\\t\\t\\tsettings.endingEnd\\t\\t= ZeroSlopeEnding;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t// assuming for LoopOnce atStart == atEnd == true\\r\\n\\r\\n\\t\\t\\t\\tif ( atStart ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tsettings.endingStart = WrapAroundEnding;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif ( atEnd ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tsettings.endingEnd \\t = WrapAroundEnding;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_scheduleFading: function ( duration, weightNow, weightThen ) {\\r\\n\\r\\n\\t\\t\\tvar mixer = this._mixer, now = mixer.time,\\r\\n\\t\\t\\t\\tinterpolant = this._weightInterpolant;\\r\\n\\r\\n\\t\\t\\tif ( interpolant === null ) {\\r\\n\\r\\n\\t\\t\\t\\tinterpolant = mixer._lendControlInterpolant();\\r\\n\\t\\t\\t\\tthis._weightInterpolant = interpolant;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar times = interpolant.parameterPositions,\\r\\n\\t\\t\\t\\tvalues = interpolant.sampleValues;\\r\\n\\r\\n\\t\\t\\ttimes[ 0 ] = now; \\t\\t\\t\\tvalues[ 0 ] = weightNow;\\r\\n\\t\\t\\ttimes[ 1 ] = now + duration;\\tvalues[ 1 ] = weightThen;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t *\\r\\n\\t * Player for AnimationClips.\\r\\n\\t *\\r\\n\\t *\\r\\n\\t * @author Ben Houston / http://clara.io/\\r\\n\\t * @author David Sarno / http://lighthaus.us/\\r\\n\\t * @author tschw\\r\\n\\t */\\r\\n\\r\\n\\tfunction AnimationMixer( root ) {\\r\\n\\r\\n\\t\\tthis._root = root;\\r\\n\\t\\tthis._initMemoryManager();\\r\\n\\t\\tthis._accuIndex = 0;\\r\\n\\r\\n\\t\\tthis.time = 0;\\r\\n\\r\\n\\t\\tthis.timeScale = 1.0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: AnimationMixer,\\r\\n\\r\\n\\t\\t_bindAction: function ( action, prototypeAction ) {\\r\\n\\r\\n\\t\\t\\tvar root = action._localRoot || this._root,\\r\\n\\t\\t\\t\\ttracks = action._clip.tracks,\\r\\n\\t\\t\\t\\tnTracks = tracks.length,\\r\\n\\t\\t\\t\\tbindings = action._propertyBindings,\\r\\n\\t\\t\\t\\tinterpolants = action._interpolants,\\r\\n\\t\\t\\t\\trootUuid = root.uuid,\\r\\n\\t\\t\\t\\tbindingsByRoot = this._bindingsByRootAndName,\\r\\n\\t\\t\\t\\tbindingsByName = bindingsByRoot[ rootUuid ];\\r\\n\\r\\n\\t\\t\\tif ( bindingsByName === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tbindingsByName = {};\\r\\n\\t\\t\\t\\tbindingsByRoot[ rootUuid ] = bindingsByName;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== nTracks; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar track = tracks[ i ],\\r\\n\\t\\t\\t\\t\\ttrackName = track.name,\\r\\n\\t\\t\\t\\t\\tbinding = bindingsByName[ trackName ];\\r\\n\\r\\n\\t\\t\\t\\tif ( binding !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tbindings[ i ] = binding;\\r\\n\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\tbinding = bindings[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( binding !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// existing binding, make sure the cache knows\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif ( binding._cacheIndex === null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t++ binding.referenceCount;\\r\\n\\t\\t\\t\\t\\t\\t\\tthis._addInactiveBinding( binding, rootUuid, trackName );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tvar path = prototypeAction && prototypeAction.\\r\\n\\t\\t\\t\\t\\t\\t_propertyBindings[ i ].binding.parsedPath;\\r\\n\\r\\n\\t\\t\\t\\t\\tbinding = new PropertyMixer(\\r\\n\\t\\t\\t\\t\\t\\tPropertyBinding.create( root, trackName, path ),\\r\\n\\t\\t\\t\\t\\t\\ttrack.ValueTypeName, track.getValueSize() );\\r\\n\\r\\n\\t\\t\\t\\t\\t++ binding.referenceCount;\\r\\n\\t\\t\\t\\t\\tthis._addInactiveBinding( binding, rootUuid, trackName );\\r\\n\\r\\n\\t\\t\\t\\t\\tbindings[ i ] = binding;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tinterpolants[ i ].resultBuffer = binding.buffer;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_activateAction: function ( action ) {\\r\\n\\r\\n\\t\\t\\tif ( ! this._isActiveAction( action ) ) {\\r\\n\\r\\n\\t\\t\\t\\tif ( action._cacheIndex === null ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// this action has been forgotten by the cache, but the user\\r\\n\\t\\t\\t\\t\\t// appears to be still using it -> rebind\\r\\n\\r\\n\\t\\t\\t\\t\\tvar rootUuid = ( action._localRoot || this._root ).uuid,\\r\\n\\t\\t\\t\\t\\t\\tclipUuid = action._clip.uuid,\\r\\n\\t\\t\\t\\t\\t\\tactionsForClip = this._actionsByClip[ clipUuid ];\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._bindAction( action,\\r\\n\\t\\t\\t\\t\\t\\tactionsForClip && actionsForClip.knownActions[ 0 ] );\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._addInactiveAction( action, clipUuid, rootUuid );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tvar bindings = action._propertyBindings;\\r\\n\\r\\n\\t\\t\\t\\t// increment reference counts / sort out state\\r\\n\\t\\t\\t\\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar binding = bindings[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( binding.useCount ++ === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tthis._lendBinding( binding );\\r\\n\\t\\t\\t\\t\\t\\tbinding.saveOriginalState();\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis._lendAction( action );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_deactivateAction: function ( action ) {\\r\\n\\r\\n\\t\\t\\tif ( this._isActiveAction( action ) ) {\\r\\n\\r\\n\\t\\t\\t\\tvar bindings = action._propertyBindings;\\r\\n\\r\\n\\t\\t\\t\\t// decrement reference counts / sort out state\\r\\n\\t\\t\\t\\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar binding = bindings[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tif ( -- binding.useCount === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tbinding.restoreOriginalState();\\r\\n\\t\\t\\t\\t\\t\\tthis._takeBackBinding( binding );\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tthis._takeBackAction( action );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Memory manager\\r\\n\\r\\n\\t\\t_initMemoryManager: function () {\\r\\n\\r\\n\\t\\t\\tthis._actions = []; // 'nActiveActions' followed by inactive ones\\r\\n\\t\\t\\tthis._nActiveActions = 0;\\r\\n\\r\\n\\t\\t\\tthis._actionsByClip = {};\\r\\n\\t\\t\\t// inside:\\r\\n\\t\\t\\t// {\\r\\n\\t\\t\\t// \\t\\tknownActions: Array< AnimationAction >\\t- used as prototypes\\r\\n\\t\\t\\t// \\t\\tactionByRoot: AnimationAction\\t\\t\\t- lookup\\r\\n\\t\\t\\t// }\\r\\n\\r\\n\\r\\n\\t\\t\\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\\r\\n\\t\\t\\tthis._nActiveBindings = 0;\\r\\n\\r\\n\\t\\t\\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\\r\\n\\r\\n\\r\\n\\t\\t\\tthis._controlInterpolants = []; // same game as above\\r\\n\\t\\t\\tthis._nActiveControlInterpolants = 0;\\r\\n\\r\\n\\t\\t\\tvar scope = this;\\r\\n\\r\\n\\t\\t\\tthis.stats = {\\r\\n\\r\\n\\t\\t\\t\\tactions: {\\r\\n\\t\\t\\t\\t\\tget total() {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\treturn scope._actions.length;\\r\\n\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\tget inUse() {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\treturn scope._nActiveActions;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tbindings: {\\r\\n\\t\\t\\t\\t\\tget total() {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\treturn scope._bindings.length;\\r\\n\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\tget inUse() {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\treturn scope._nActiveBindings;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tcontrolInterpolants: {\\r\\n\\t\\t\\t\\t\\tget total() {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\treturn scope._controlInterpolants.length;\\r\\n\\r\\n\\t\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\tget inUse() {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\treturn scope._nActiveControlInterpolants;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Memory management for AnimationAction objects\\r\\n\\r\\n\\t\\t_isActiveAction: function ( action ) {\\r\\n\\r\\n\\t\\t\\tvar index = action._cacheIndex;\\r\\n\\t\\t\\treturn index !== null && index < this._nActiveActions;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\\r\\n\\r\\n\\t\\t\\tvar actions = this._actions,\\r\\n\\t\\t\\t\\tactionsByClip = this._actionsByClip,\\r\\n\\t\\t\\t\\tactionsForClip = actionsByClip[ clipUuid ];\\r\\n\\r\\n\\t\\t\\tif ( actionsForClip === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tactionsForClip = {\\r\\n\\r\\n\\t\\t\\t\\t\\tknownActions: [ action ],\\r\\n\\t\\t\\t\\t\\tactionByRoot: {}\\r\\n\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\taction._byClipCacheIndex = 0;\\r\\n\\r\\n\\t\\t\\t\\tactionsByClip[ clipUuid ] = actionsForClip;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tvar knownActions = actionsForClip.knownActions;\\r\\n\\r\\n\\t\\t\\t\\taction._byClipCacheIndex = knownActions.length;\\r\\n\\t\\t\\t\\tknownActions.push( action );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\taction._cacheIndex = actions.length;\\r\\n\\t\\t\\tactions.push( action );\\r\\n\\r\\n\\t\\t\\tactionsForClip.actionByRoot[ rootUuid ] = action;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_removeInactiveAction: function ( action ) {\\r\\n\\r\\n\\t\\t\\tvar actions = this._actions,\\r\\n\\t\\t\\t\\tlastInactiveAction = actions[ actions.length - 1 ],\\r\\n\\t\\t\\t\\tcacheIndex = action._cacheIndex;\\r\\n\\r\\n\\t\\t\\tlastInactiveAction._cacheIndex = cacheIndex;\\r\\n\\t\\t\\tactions[ cacheIndex ] = lastInactiveAction;\\r\\n\\t\\t\\tactions.pop();\\r\\n\\r\\n\\t\\t\\taction._cacheIndex = null;\\r\\n\\r\\n\\r\\n\\t\\t\\tvar clipUuid = action._clip.uuid,\\r\\n\\t\\t\\t\\tactionsByClip = this._actionsByClip,\\r\\n\\t\\t\\t\\tactionsForClip = actionsByClip[ clipUuid ],\\r\\n\\t\\t\\t\\tknownActionsForClip = actionsForClip.knownActions,\\r\\n\\r\\n\\t\\t\\t\\tlastKnownAction =\\r\\n\\t\\t\\t\\t\\tknownActionsForClip[ knownActionsForClip.length - 1 ],\\r\\n\\r\\n\\t\\t\\t\\tbyClipCacheIndex = action._byClipCacheIndex;\\r\\n\\r\\n\\t\\t\\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\\r\\n\\t\\t\\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\\r\\n\\t\\t\\tknownActionsForClip.pop();\\r\\n\\r\\n\\t\\t\\taction._byClipCacheIndex = null;\\r\\n\\r\\n\\r\\n\\t\\t\\tvar actionByRoot = actionsForClip.actionByRoot,\\r\\n\\t\\t\\t\\trootUuid = ( action._localRoot || this._root ).uuid;\\r\\n\\r\\n\\t\\t\\tdelete actionByRoot[ rootUuid ];\\r\\n\\r\\n\\t\\t\\tif ( knownActionsForClip.length === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tdelete actionsByClip[ clipUuid ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis._removeInactiveBindingsForAction( action );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_removeInactiveBindingsForAction: function ( action ) {\\r\\n\\r\\n\\t\\t\\tvar bindings = action._propertyBindings;\\r\\n\\t\\t\\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar binding = bindings[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( -- binding.referenceCount === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._removeInactiveBinding( binding );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_lendAction: function ( action ) {\\r\\n\\r\\n\\t\\t\\t// [ active actions |  inactive actions  ]\\r\\n\\t\\t\\t// [  active actions >| inactive actions ]\\r\\n\\t\\t\\t//                 s        a\\r\\n\\t\\t\\t//                  <-swap->\\r\\n\\t\\t\\t//                 a        s\\r\\n\\r\\n\\t\\t\\tvar actions = this._actions,\\r\\n\\t\\t\\t\\tprevIndex = action._cacheIndex,\\r\\n\\r\\n\\t\\t\\t\\tlastActiveIndex = this._nActiveActions ++,\\r\\n\\r\\n\\t\\t\\t\\tfirstInactiveAction = actions[ lastActiveIndex ];\\r\\n\\r\\n\\t\\t\\taction._cacheIndex = lastActiveIndex;\\r\\n\\t\\t\\tactions[ lastActiveIndex ] = action;\\r\\n\\r\\n\\t\\t\\tfirstInactiveAction._cacheIndex = prevIndex;\\r\\n\\t\\t\\tactions[ prevIndex ] = firstInactiveAction;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_takeBackAction: function ( action ) {\\r\\n\\r\\n\\t\\t\\t// [  active actions  | inactive actions ]\\r\\n\\t\\t\\t// [ active actions |< inactive actions  ]\\r\\n\\t\\t\\t//        a        s\\r\\n\\t\\t\\t//         <-swap->\\r\\n\\t\\t\\t//        s        a\\r\\n\\r\\n\\t\\t\\tvar actions = this._actions,\\r\\n\\t\\t\\t\\tprevIndex = action._cacheIndex,\\r\\n\\r\\n\\t\\t\\t\\tfirstInactiveIndex = -- this._nActiveActions,\\r\\n\\r\\n\\t\\t\\t\\tlastActiveAction = actions[ firstInactiveIndex ];\\r\\n\\r\\n\\t\\t\\taction._cacheIndex = firstInactiveIndex;\\r\\n\\t\\t\\tactions[ firstInactiveIndex ] = action;\\r\\n\\r\\n\\t\\t\\tlastActiveAction._cacheIndex = prevIndex;\\r\\n\\t\\t\\tactions[ prevIndex ] = lastActiveAction;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// Memory management for PropertyMixer objects\\r\\n\\r\\n\\t\\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\\r\\n\\r\\n\\t\\t\\tvar bindingsByRoot = this._bindingsByRootAndName,\\r\\n\\t\\t\\t\\tbindingByName = bindingsByRoot[ rootUuid ],\\r\\n\\r\\n\\t\\t\\t\\tbindings = this._bindings;\\r\\n\\r\\n\\t\\t\\tif ( bindingByName === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tbindingByName = {};\\r\\n\\t\\t\\t\\tbindingsByRoot[ rootUuid ] = bindingByName;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tbindingByName[ trackName ] = binding;\\r\\n\\r\\n\\t\\t\\tbinding._cacheIndex = bindings.length;\\r\\n\\t\\t\\tbindings.push( binding );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_removeInactiveBinding: function ( binding ) {\\r\\n\\r\\n\\t\\t\\tvar bindings = this._bindings,\\r\\n\\t\\t\\t\\tpropBinding = binding.binding,\\r\\n\\t\\t\\t\\trootUuid = propBinding.rootNode.uuid,\\r\\n\\t\\t\\t\\ttrackName = propBinding.path,\\r\\n\\t\\t\\t\\tbindingsByRoot = this._bindingsByRootAndName,\\r\\n\\t\\t\\t\\tbindingByName = bindingsByRoot[ rootUuid ],\\r\\n\\r\\n\\t\\t\\t\\tlastInactiveBinding = bindings[ bindings.length - 1 ],\\r\\n\\t\\t\\t\\tcacheIndex = binding._cacheIndex;\\r\\n\\r\\n\\t\\t\\tlastInactiveBinding._cacheIndex = cacheIndex;\\r\\n\\t\\t\\tbindings[ cacheIndex ] = lastInactiveBinding;\\r\\n\\t\\t\\tbindings.pop();\\r\\n\\r\\n\\t\\t\\tdelete bindingByName[ trackName ];\\r\\n\\r\\n\\t\\t\\tremove_empty_map: {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars\\r\\n\\r\\n\\t\\t\\t\\tdelete bindingsByRoot[ rootUuid ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_lendBinding: function ( binding ) {\\r\\n\\r\\n\\t\\t\\tvar bindings = this._bindings,\\r\\n\\t\\t\\t\\tprevIndex = binding._cacheIndex,\\r\\n\\r\\n\\t\\t\\t\\tlastActiveIndex = this._nActiveBindings ++,\\r\\n\\r\\n\\t\\t\\t\\tfirstInactiveBinding = bindings[ lastActiveIndex ];\\r\\n\\r\\n\\t\\t\\tbinding._cacheIndex = lastActiveIndex;\\r\\n\\t\\t\\tbindings[ lastActiveIndex ] = binding;\\r\\n\\r\\n\\t\\t\\tfirstInactiveBinding._cacheIndex = prevIndex;\\r\\n\\t\\t\\tbindings[ prevIndex ] = firstInactiveBinding;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_takeBackBinding: function ( binding ) {\\r\\n\\r\\n\\t\\t\\tvar bindings = this._bindings,\\r\\n\\t\\t\\t\\tprevIndex = binding._cacheIndex,\\r\\n\\r\\n\\t\\t\\t\\tfirstInactiveIndex = -- this._nActiveBindings,\\r\\n\\r\\n\\t\\t\\t\\tlastActiveBinding = bindings[ firstInactiveIndex ];\\r\\n\\r\\n\\t\\t\\tbinding._cacheIndex = firstInactiveIndex;\\r\\n\\t\\t\\tbindings[ firstInactiveIndex ] = binding;\\r\\n\\r\\n\\t\\t\\tlastActiveBinding._cacheIndex = prevIndex;\\r\\n\\t\\t\\tbindings[ prevIndex ] = lastActiveBinding;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\r\\n\\t\\t// Memory management of Interpolants for weight and time scale\\r\\n\\r\\n\\t\\t_lendControlInterpolant: function () {\\r\\n\\r\\n\\t\\t\\tvar interpolants = this._controlInterpolants,\\r\\n\\t\\t\\t\\tlastActiveIndex = this._nActiveControlInterpolants ++,\\r\\n\\t\\t\\t\\tinterpolant = interpolants[ lastActiveIndex ];\\r\\n\\r\\n\\t\\t\\tif ( interpolant === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tinterpolant = new LinearInterpolant(\\r\\n\\t\\t\\t\\t\\tnew Float32Array( 2 ), new Float32Array( 2 ),\\r\\n\\t\\t\\t\\t\\t1, this._controlInterpolantsResultBuffer );\\r\\n\\r\\n\\t\\t\\t\\tinterpolant.__cacheIndex = lastActiveIndex;\\r\\n\\t\\t\\t\\tinterpolants[ lastActiveIndex ] = interpolant;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn interpolant;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_takeBackControlInterpolant: function ( interpolant ) {\\r\\n\\r\\n\\t\\t\\tvar interpolants = this._controlInterpolants,\\r\\n\\t\\t\\t\\tprevIndex = interpolant.__cacheIndex,\\r\\n\\r\\n\\t\\t\\t\\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\\r\\n\\r\\n\\t\\t\\t\\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\\r\\n\\r\\n\\t\\t\\tinterpolant.__cacheIndex = firstInactiveIndex;\\r\\n\\t\\t\\tinterpolants[ firstInactiveIndex ] = interpolant;\\r\\n\\r\\n\\t\\t\\tlastActiveInterpolant.__cacheIndex = prevIndex;\\r\\n\\t\\t\\tinterpolants[ prevIndex ] = lastActiveInterpolant;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\\r\\n\\r\\n\\t\\t// return an action for a clip optionally using a custom root target\\r\\n\\t\\t// object (this method allocates a lot of dynamic memory in case a\\r\\n\\t\\t// previously unknown clip/root combination is specified)\\r\\n\\t\\tclipAction: function ( clip, optionalRoot ) {\\r\\n\\r\\n\\t\\t\\tvar root = optionalRoot || this._root,\\r\\n\\t\\t\\t\\trootUuid = root.uuid,\\r\\n\\r\\n\\t\\t\\t\\tclipObject = typeof clip === 'string' ?\\r\\n\\t\\t\\t\\t\\tAnimationClip.findByName( root, clip ) : clip,\\r\\n\\r\\n\\t\\t\\t\\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\\r\\n\\r\\n\\t\\t\\t\\tactionsForClip = this._actionsByClip[ clipUuid ],\\r\\n\\t\\t\\t\\tprototypeAction = null;\\r\\n\\r\\n\\t\\t\\tif ( actionsForClip !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar existingAction =\\r\\n\\t\\t\\t\\t\\t\\tactionsForClip.actionByRoot[ rootUuid ];\\r\\n\\r\\n\\t\\t\\t\\tif ( existingAction !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\treturn existingAction;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t// we know the clip, so we don't have to parse all\\r\\n\\t\\t\\t\\t// the bindings again but can just copy\\r\\n\\t\\t\\t\\tprototypeAction = actionsForClip.knownActions[ 0 ];\\r\\n\\r\\n\\t\\t\\t\\t// also, take the clip from the prototype action\\r\\n\\t\\t\\t\\tif ( clipObject === null )\\r\\n\\t\\t\\t\\t\\tclipObject = prototypeAction._clip;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// clip must be known when specified via string\\r\\n\\t\\t\\tif ( clipObject === null ) return null;\\r\\n\\r\\n\\t\\t\\t// allocate all resources required to run it\\r\\n\\t\\t\\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\\r\\n\\r\\n\\t\\t\\tthis._bindAction( newAction, prototypeAction );\\r\\n\\r\\n\\t\\t\\t// and make the action known to the memory manager\\r\\n\\t\\t\\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\\r\\n\\r\\n\\t\\t\\treturn newAction;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// get an existing action\\r\\n\\t\\texistingAction: function ( clip, optionalRoot ) {\\r\\n\\r\\n\\t\\t\\tvar root = optionalRoot || this._root,\\r\\n\\t\\t\\t\\trootUuid = root.uuid,\\r\\n\\r\\n\\t\\t\\t\\tclipObject = typeof clip === 'string' ?\\r\\n\\t\\t\\t\\t\\tAnimationClip.findByName( root, clip ) : clip,\\r\\n\\r\\n\\t\\t\\t\\tclipUuid = clipObject ? clipObject.uuid : clip,\\r\\n\\r\\n\\t\\t\\t\\tactionsForClip = this._actionsByClip[ clipUuid ];\\r\\n\\r\\n\\t\\t\\tif ( actionsForClip !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn null;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// deactivates all previously scheduled actions\\r\\n\\t\\tstopAllAction: function () {\\r\\n\\r\\n\\t\\t\\tvar actions = this._actions,\\r\\n\\t\\t\\t\\tnActions = this._nActiveActions,\\r\\n\\t\\t\\t\\tbindings = this._bindings,\\r\\n\\t\\t\\t\\tnBindings = this._nActiveBindings;\\r\\n\\r\\n\\t\\t\\tthis._nActiveActions = 0;\\r\\n\\t\\t\\tthis._nActiveBindings = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== nActions; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tactions[ i ].reset();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== nBindings; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tbindings[ i ].useCount = 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// advance the time and update apply the animation\\r\\n\\t\\tupdate: function ( deltaTime ) {\\r\\n\\r\\n\\t\\t\\tdeltaTime *= this.timeScale;\\r\\n\\r\\n\\t\\t\\tvar actions = this._actions,\\r\\n\\t\\t\\t\\tnActions = this._nActiveActions,\\r\\n\\r\\n\\t\\t\\t\\ttime = this.time += deltaTime,\\r\\n\\t\\t\\t\\ttimeDirection = Math.sign( deltaTime ),\\r\\n\\r\\n\\t\\t\\t\\taccuIndex = this._accuIndex ^= 1;\\r\\n\\r\\n\\t\\t\\t// run active actions\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== nActions; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tvar action = actions[ i ];\\r\\n\\r\\n\\t\\t\\t\\taction._update( time, deltaTime, timeDirection, accuIndex );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// update scene graph\\r\\n\\r\\n\\t\\t\\tvar bindings = this._bindings,\\r\\n\\t\\t\\t\\tnBindings = this._nActiveBindings;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0; i !== nBindings; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\tbindings[ i ].apply( accuIndex );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// return this mixer's root target object\\r\\n\\t\\tgetRoot: function () {\\r\\n\\r\\n\\t\\t\\treturn this._root;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// free all resources specific to a particular clip\\r\\n\\t\\tuncacheClip: function ( clip ) {\\r\\n\\r\\n\\t\\t\\tvar actions = this._actions,\\r\\n\\t\\t\\t\\tclipUuid = clip.uuid,\\r\\n\\t\\t\\t\\tactionsByClip = this._actionsByClip,\\r\\n\\t\\t\\t\\tactionsForClip = actionsByClip[ clipUuid ];\\r\\n\\r\\n\\t\\t\\tif ( actionsForClip !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t// note: just calling _removeInactiveAction would mess up the\\r\\n\\t\\t\\t\\t// iteration state and also require updating the state we can\\r\\n\\t\\t\\t\\t// just throw away\\r\\n\\r\\n\\t\\t\\t\\tvar actionsToRemove = actionsForClip.knownActions;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar action = actionsToRemove[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._deactivateAction( action );\\r\\n\\r\\n\\t\\t\\t\\t\\tvar cacheIndex = action._cacheIndex,\\r\\n\\t\\t\\t\\t\\t\\tlastInactiveAction = actions[ actions.length - 1 ];\\r\\n\\r\\n\\t\\t\\t\\t\\taction._cacheIndex = null;\\r\\n\\t\\t\\t\\t\\taction._byClipCacheIndex = null;\\r\\n\\r\\n\\t\\t\\t\\t\\tlastInactiveAction._cacheIndex = cacheIndex;\\r\\n\\t\\t\\t\\t\\tactions[ cacheIndex ] = lastInactiveAction;\\r\\n\\t\\t\\t\\t\\tactions.pop();\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._removeInactiveBindingsForAction( action );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tdelete actionsByClip[ clipUuid ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// free all resources specific to a particular root target object\\r\\n\\t\\tuncacheRoot: function ( root ) {\\r\\n\\r\\n\\t\\t\\tvar rootUuid = root.uuid,\\r\\n\\t\\t\\t\\tactionsByClip = this._actionsByClip;\\r\\n\\r\\n\\t\\t\\tfor ( var clipUuid in actionsByClip ) {\\r\\n\\r\\n\\t\\t\\t\\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\\r\\n\\t\\t\\t\\t\\taction = actionByRoot[ rootUuid ];\\r\\n\\r\\n\\t\\t\\t\\tif ( action !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tthis._deactivateAction( action );\\r\\n\\t\\t\\t\\t\\tthis._removeInactiveAction( action );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tvar bindingsByRoot = this._bindingsByRootAndName,\\r\\n\\t\\t\\t\\tbindingByName = bindingsByRoot[ rootUuid ];\\r\\n\\r\\n\\t\\t\\tif ( bindingByName !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tfor ( var trackName in bindingByName ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar binding = bindingByName[ trackName ];\\r\\n\\t\\t\\t\\t\\tbinding.restoreOriginalState();\\r\\n\\t\\t\\t\\t\\tthis._removeInactiveBinding( binding );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// remove a targeted clip from the cache\\r\\n\\t\\tuncacheAction: function ( clip, optionalRoot ) {\\r\\n\\r\\n\\t\\t\\tvar action = this.existingAction( clip, optionalRoot );\\r\\n\\r\\n\\t\\t\\tif ( action !== null ) {\\r\\n\\r\\n\\t\\t\\t\\tthis._deactivateAction( action );\\r\\n\\t\\t\\t\\tthis._removeInactiveAction( action );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Uniform( value ) {\\r\\n\\r\\n\\t\\tif ( typeof value === 'string' ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\\r\\n\\t\\t\\tvalue = arguments[ 1 ];\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.value = value;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tUniform.prototype.clone = function () {\\r\\n\\r\\n\\t\\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author benaadams / https://twitter.com/ben_a_adams\\r\\n\\t */\\r\\n\\r\\n\\tfunction InstancedBufferGeometry() {\\r\\n\\r\\n\\t\\tBufferGeometry.call( this );\\r\\n\\r\\n\\t\\tthis.type = 'InstancedBufferGeometry';\\r\\n\\t\\tthis.maxInstancedCount = undefined;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: InstancedBufferGeometry,\\r\\n\\r\\n\\t\\tisInstancedBufferGeometry: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tBufferGeometry.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.maxInstancedCount = source.maxInstancedCount;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author benaadams / https://twitter.com/ben_a_adams\\r\\n\\t */\\r\\n\\r\\n\\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\tthis.data = interleavedBuffer;\\r\\n\\t\\tthis.itemSize = itemSize;\\r\\n\\t\\tthis.offset = offset;\\r\\n\\r\\n\\t\\tthis.normalized = normalized === true;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\\r\\n\\r\\n\\t\\tcount: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this.data.count;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tarray: {\\r\\n\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this.data.array;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( InterleavedBufferAttribute.prototype, {\\r\\n\\r\\n\\t\\tisInterleavedBufferAttribute: true,\\r\\n\\r\\n\\t\\tsetX: function ( index, x ) {\\r\\n\\r\\n\\t\\t\\tthis.data.array[ index * this.data.stride + this.offset ] = x;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetY: function ( index, y ) {\\r\\n\\r\\n\\t\\t\\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetZ: function ( index, z ) {\\r\\n\\r\\n\\t\\t\\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetW: function ( index, w ) {\\r\\n\\r\\n\\t\\t\\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetX: function ( index ) {\\r\\n\\r\\n\\t\\t\\treturn this.data.array[ index * this.data.stride + this.offset ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetY: function ( index ) {\\r\\n\\r\\n\\t\\t\\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetZ: function ( index ) {\\r\\n\\r\\n\\t\\t\\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetW: function ( index ) {\\r\\n\\r\\n\\t\\t\\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetXY: function ( index, x, y ) {\\r\\n\\r\\n\\t\\t\\tindex = index * this.data.stride + this.offset;\\r\\n\\r\\n\\t\\t\\tthis.data.array[ index + 0 ] = x;\\r\\n\\t\\t\\tthis.data.array[ index + 1 ] = y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetXYZ: function ( index, x, y, z ) {\\r\\n\\r\\n\\t\\t\\tindex = index * this.data.stride + this.offset;\\r\\n\\r\\n\\t\\t\\tthis.data.array[ index + 0 ] = x;\\r\\n\\t\\t\\tthis.data.array[ index + 1 ] = y;\\r\\n\\t\\t\\tthis.data.array[ index + 2 ] = z;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetXYZW: function ( index, x, y, z, w ) {\\r\\n\\r\\n\\t\\t\\tindex = index * this.data.stride + this.offset;\\r\\n\\r\\n\\t\\t\\tthis.data.array[ index + 0 ] = x;\\r\\n\\t\\t\\tthis.data.array[ index + 1 ] = y;\\r\\n\\t\\t\\tthis.data.array[ index + 2 ] = z;\\r\\n\\t\\t\\tthis.data.array[ index + 3 ] = w;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author benaadams / https://twitter.com/ben_a_adams\\r\\n\\t */\\r\\n\\r\\n\\tfunction InterleavedBuffer( array, stride ) {\\r\\n\\r\\n\\t\\tthis.uuid = _Math.generateUUID();\\r\\n\\r\\n\\t\\tthis.array = array;\\r\\n\\t\\tthis.stride = stride;\\r\\n\\t\\tthis.count = array !== undefined ? array.length / stride : 0;\\r\\n\\r\\n\\t\\tthis.dynamic = false;\\r\\n\\t\\tthis.updateRange = { offset: 0, count: - 1 };\\r\\n\\r\\n\\t\\tthis.onUploadCallback = function () {};\\r\\n\\r\\n\\t\\tthis.version = 0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\\r\\n\\r\\n\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\tif ( value === true ) this.version ++;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( InterleavedBuffer.prototype, {\\r\\n\\r\\n\\t\\tisInterleavedBuffer: true,\\r\\n\\r\\n\\t\\tsetArray: function ( array ) {\\r\\n\\r\\n\\t\\t\\tif ( Array.isArray( array ) ) {\\r\\n\\r\\n\\t\\t\\t\\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.count = array !== undefined ? array.length / this.stride : 0;\\r\\n\\t\\t\\tthis.array = array;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetDynamic: function ( value ) {\\r\\n\\r\\n\\t\\t\\tthis.dynamic = value;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tthis.array = new source.array.constructor( source.array );\\r\\n\\t\\t\\tthis.count = source.count;\\r\\n\\t\\t\\tthis.stride = source.stride;\\r\\n\\t\\t\\tthis.dynamic = source.dynamic;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopyAt: function ( index1, attribute, index2 ) {\\r\\n\\r\\n\\t\\t\\tindex1 *= this.stride;\\r\\n\\t\\t\\tindex2 *= attribute.stride;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tset: function ( value, offset ) {\\r\\n\\r\\n\\t\\t\\tif ( offset === undefined ) offset = 0;\\r\\n\\r\\n\\t\\t\\tthis.array.set( value, offset );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tonUpload: function ( callback ) {\\r\\n\\r\\n\\t\\t\\tthis.onUploadCallback = callback;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author benaadams / https://twitter.com/ben_a_adams\\r\\n\\t */\\r\\n\\r\\n\\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\\r\\n\\r\\n\\t\\tInterleavedBuffer.call( this, array, stride );\\r\\n\\r\\n\\t\\tthis.meshPerAttribute = meshPerAttribute || 1;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: InstancedInterleavedBuffer,\\r\\n\\r\\n\\t\\tisInstancedInterleavedBuffer: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tInterleavedBuffer.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.meshPerAttribute = source.meshPerAttribute;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author benaadams / https://twitter.com/ben_a_adams\\r\\n\\t */\\r\\n\\r\\n\\tfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\\r\\n\\r\\n\\t\\tBufferAttribute.call( this, array, itemSize );\\r\\n\\r\\n\\t\\tthis.meshPerAttribute = meshPerAttribute || 1;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\\r\\n\\r\\n\\t\\tconstructor: InstancedBufferAttribute,\\r\\n\\r\\n\\t\\tisInstancedBufferAttribute: true,\\r\\n\\r\\n\\t\\tcopy: function ( source ) {\\r\\n\\r\\n\\t\\t\\tBufferAttribute.prototype.copy.call( this, source );\\r\\n\\r\\n\\t\\t\\tthis.meshPerAttribute = source.meshPerAttribute;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author bhouston / http://clara.io/\\r\\n\\t * @author stephomi / http://stephaneginier.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Raycaster( origin, direction, near, far ) {\\r\\n\\r\\n\\t\\tthis.ray = new Ray( origin, direction );\\r\\n\\t\\t// direction is assumed to be normalized (for accurate distance calculations)\\r\\n\\r\\n\\t\\tthis.near = near || 0;\\r\\n\\t\\tthis.far = far || Infinity;\\r\\n\\r\\n\\t\\tthis.params = {\\r\\n\\t\\t\\tMesh: {},\\r\\n\\t\\t\\tLine: {},\\r\\n\\t\\t\\tLOD: {},\\r\\n\\t\\t\\tPoints: { threshold: 1 },\\r\\n\\t\\t\\tSprite: {}\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tObject.defineProperties( this.params, {\\r\\n\\t\\t\\tPointCloud: {\\r\\n\\t\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\t\\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\\r\\n\\t\\t\\t\\t\\treturn this.Points;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t} );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction ascSort( a, b ) {\\r\\n\\r\\n\\t\\treturn a.distance - b.distance;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction intersectObject( object, raycaster, intersects, recursive ) {\\r\\n\\r\\n\\t\\tif ( object.visible === false ) return;\\r\\n\\r\\n\\t\\tobject.raycast( raycaster, intersects );\\r\\n\\r\\n\\t\\tif ( recursive === true ) {\\r\\n\\r\\n\\t\\t\\tvar children = object.children;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tintersectObject( children[ i ], raycaster, intersects, true );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Raycaster.prototype, {\\r\\n\\r\\n\\t\\tlinePrecision: 1,\\r\\n\\r\\n\\t\\tset: function ( origin, direction ) {\\r\\n\\r\\n\\t\\t\\t// direction is assumed to be normalized (for accurate distance calculations)\\r\\n\\r\\n\\t\\t\\tthis.ray.set( origin, direction );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromCamera: function ( coords, camera ) {\\r\\n\\r\\n\\t\\t\\tif ( ( camera && camera.isPerspectiveCamera ) ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\\r\\n\\t\\t\\t\\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\\r\\n\\r\\n\\t\\t\\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\\r\\n\\t\\t\\t\\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectObject: function ( object, recursive ) {\\r\\n\\r\\n\\t\\t\\tvar intersects = [];\\r\\n\\r\\n\\t\\t\\tintersectObject( object, this, intersects, recursive );\\r\\n\\r\\n\\t\\t\\tintersects.sort( ascSort );\\r\\n\\r\\n\\t\\t\\treturn intersects;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tintersectObjects: function ( objects, recursive ) {\\r\\n\\r\\n\\t\\t\\tvar intersects = [];\\r\\n\\r\\n\\t\\t\\tif ( Array.isArray( objects ) === false ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\\r\\n\\t\\t\\t\\treturn intersects;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tintersectObject( objects[ i ], this, intersects, recursive );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tintersects.sort( ascSort );\\r\\n\\r\\n\\t\\t\\treturn intersects;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Clock( autoStart ) {\\r\\n\\r\\n\\t\\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\\r\\n\\r\\n\\t\\tthis.startTime = 0;\\r\\n\\t\\tthis.oldTime = 0;\\r\\n\\t\\tthis.elapsedTime = 0;\\r\\n\\r\\n\\t\\tthis.running = false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Clock.prototype, {\\r\\n\\r\\n\\t\\tstart: function () {\\r\\n\\r\\n\\t\\t\\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\\r\\n\\r\\n\\t\\t\\tthis.oldTime = this.startTime;\\r\\n\\t\\t\\tthis.elapsedTime = 0;\\r\\n\\t\\t\\tthis.running = true;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tstop: function () {\\r\\n\\r\\n\\t\\t\\tthis.getElapsedTime();\\r\\n\\t\\t\\tthis.running = false;\\r\\n\\t\\t\\tthis.autoStart = false;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetElapsedTime: function () {\\r\\n\\r\\n\\t\\t\\tthis.getDelta();\\r\\n\\t\\t\\treturn this.elapsedTime;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetDelta: function () {\\r\\n\\r\\n\\t\\t\\tvar diff = 0;\\r\\n\\r\\n\\t\\t\\tif ( this.autoStart && ! this.running ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.start();\\r\\n\\t\\t\\t\\treturn 0;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.running ) {\\r\\n\\r\\n\\t\\t\\t\\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\\r\\n\\r\\n\\t\\t\\t\\tdiff = ( newTime - this.oldTime ) / 1000;\\r\\n\\t\\t\\t\\tthis.oldTime = newTime;\\r\\n\\r\\n\\t\\t\\t\\tthis.elapsedTime += diff;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn diff;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t *\\r\\n\\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\\r\\n\\t *\\r\\n\\t * The poles (phi) are at the positive and negative y axis.\\r\\n\\t * The equator starts at positive z.\\r\\n\\t */\\r\\n\\r\\n\\tfunction Spherical( radius, phi, theta ) {\\r\\n\\r\\n\\t\\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\\r\\n\\t\\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\\r\\n\\t\\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Spherical.prototype, {\\r\\n\\r\\n\\t\\tset: function ( radius, phi, theta ) {\\r\\n\\r\\n\\t\\t\\tthis.radius = radius;\\r\\n\\t\\t\\tthis.phi = phi;\\r\\n\\t\\t\\tthis.theta = theta;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( other ) {\\r\\n\\r\\n\\t\\t\\tthis.radius = other.radius;\\r\\n\\t\\t\\tthis.phi = other.phi;\\r\\n\\t\\t\\tthis.theta = other.theta;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\t// restrict phi to be betwee EPS and PI-EPS\\r\\n\\t\\tmakeSafe: function () {\\r\\n\\r\\n\\t\\t\\tvar EPS = 0.000001;\\r\\n\\t\\t\\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromVector3: function ( vec3 ) {\\r\\n\\r\\n\\t\\t\\tthis.radius = vec3.length();\\r\\n\\r\\n\\t\\t\\tif ( this.radius === 0 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.theta = 0;\\r\\n\\t\\t\\t\\tthis.phi = 0;\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\\r\\n\\t\\t\\t\\tthis.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t *\\r\\n\\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\\r\\n\\t *\\r\\n\\t */\\r\\n\\r\\n\\tfunction Cylindrical( radius, theta, y ) {\\r\\n\\r\\n\\t\\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\\r\\n\\t\\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\\r\\n\\t\\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tObject.assign( Cylindrical.prototype, {\\r\\n\\r\\n\\t\\tset: function ( radius, theta, y ) {\\r\\n\\r\\n\\t\\t\\tthis.radius = radius;\\r\\n\\t\\t\\tthis.theta = theta;\\r\\n\\t\\t\\tthis.y = y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tclone: function () {\\r\\n\\r\\n\\t\\t\\treturn new this.constructor().copy( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcopy: function ( other ) {\\r\\n\\r\\n\\t\\t\\tthis.radius = other.radius;\\r\\n\\t\\t\\tthis.theta = other.theta;\\r\\n\\t\\t\\tthis.y = other.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsetFromVector3: function ( vec3 ) {\\r\\n\\r\\n\\t\\t\\tthis.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );\\r\\n\\t\\t\\tthis.theta = Math.atan2( vec3.x, vec3.z );\\r\\n\\t\\t\\tthis.y = vec3.y;\\r\\n\\r\\n\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction ImmediateRenderObject( material ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.material = material;\\r\\n\\t\\tthis.render = function ( /* renderCallback */ ) {};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\\r\\n\\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\\r\\n\\r\\n\\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\\r\\n\\r\\n\\t\\tthis.object = object;\\r\\n\\r\\n\\t\\tthis.size = ( size !== undefined ) ? size : 1;\\r\\n\\r\\n\\t\\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\\r\\n\\r\\n\\t\\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar nNormals = 0;\\r\\n\\r\\n\\t\\tvar objGeometry = this.object.geometry;\\r\\n\\r\\n\\t\\tif ( objGeometry && objGeometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\tnNormals = objGeometry.faces.length * 3;\\r\\n\\r\\n\\t\\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\tnNormals = objGeometry.attributes.normal.count;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\r\\n\\t\\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\\r\\n\\r\\n\\t\\tgeometry.addAttribute( 'position', positions );\\r\\n\\r\\n\\t\\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\\r\\n\\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\\r\\n\\r\\n\\tVertexNormalsHelper.prototype.update = ( function () {\\r\\n\\r\\n\\t\\tvar v1 = new Vector3();\\r\\n\\t\\tvar v2 = new Vector3();\\r\\n\\t\\tvar normalMatrix = new Matrix3();\\r\\n\\r\\n\\t\\treturn function update() {\\r\\n\\r\\n\\t\\t\\tvar keys = [ 'a', 'b', 'c' ];\\r\\n\\r\\n\\t\\t\\tthis.object.updateMatrixWorld( true );\\r\\n\\r\\n\\t\\t\\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\\r\\n\\r\\n\\t\\t\\tvar matrixWorld = this.object.matrixWorld;\\r\\n\\r\\n\\t\\t\\tvar position = this.geometry.attributes.position;\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tvar objGeometry = this.object.geometry;\\r\\n\\r\\n\\t\\t\\tif ( objGeometry && objGeometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\tvar vertices = objGeometry.vertices;\\r\\n\\r\\n\\t\\t\\t\\tvar faces = objGeometry.faces;\\r\\n\\r\\n\\t\\t\\t\\tvar idx = 0;\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar face = faces[ i ];\\r\\n\\r\\n\\t\\t\\t\\t\\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar vertex = vertices[ face[ keys[ j ] ] ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tvar normal = face.vertexNormals[ j ];\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tv1.copy( vertex ).applyMatrix4( matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tidx = idx + 1;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tidx = idx + 1;\\r\\n\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\\r\\n\\r\\n\\t\\t\\t\\tvar objPos = objGeometry.attributes.position;\\r\\n\\r\\n\\t\\t\\t\\tvar objNorm = objGeometry.attributes.normal;\\r\\n\\r\\n\\t\\t\\t\\tvar idx = 0;\\r\\n\\r\\n\\t\\t\\t\\t// for simplicity, ignore index and drawcalls, and render every normal\\r\\n\\r\\n\\t\\t\\t\\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\t\\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\\r\\n\\r\\n\\t\\t\\t\\t\\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\\r\\n\\r\\n\\t\\t\\t\\t\\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\\r\\n\\r\\n\\t\\t\\t\\t\\tidx = idx + 1;\\r\\n\\r\\n\\t\\t\\t\\t\\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\\r\\n\\r\\n\\t\\t\\t\\t\\tidx = idx + 1;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tposition.needsUpdate = true;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}() );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction SpotLightHelper( light, color ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.light = light;\\r\\n\\t\\tthis.light.updateMatrixWorld();\\r\\n\\r\\n\\t\\tthis.matrix = light.matrixWorld;\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\r\\n\\t\\tthis.color = color;\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\r\\n\\t\\tvar positions = [\\r\\n\\t\\t\\t0, 0, 0, \\t0, 0, 1,\\r\\n\\t\\t\\t0, 0, 0, \\t1, 0, 1,\\r\\n\\t\\t\\t0, 0, 0,\\t- 1, 0, 1,\\r\\n\\t\\t\\t0, 0, 0, \\t0, 1, 1,\\r\\n\\t\\t\\t0, 0, 0, \\t0, - 1, 1\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\\r\\n\\r\\n\\t\\t\\tvar p1 = ( i / l ) * Math.PI * 2;\\r\\n\\t\\t\\tvar p2 = ( j / l ) * Math.PI * 2;\\r\\n\\r\\n\\t\\t\\tpositions.push(\\r\\n\\t\\t\\t\\tMath.cos( p1 ), Math.sin( p1 ), 1,\\r\\n\\t\\t\\t\\tMath.cos( p2 ), Math.sin( p2 ), 1\\r\\n\\t\\t\\t);\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\\r\\n\\r\\n\\t\\tvar material = new LineBasicMaterial( { fog: false } );\\r\\n\\r\\n\\t\\tthis.cone = new LineSegments( geometry, material );\\r\\n\\t\\tthis.add( this.cone );\\r\\n\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\\r\\n\\tSpotLightHelper.prototype.constructor = SpotLightHelper;\\r\\n\\r\\n\\tSpotLightHelper.prototype.dispose = function () {\\r\\n\\r\\n\\t\\tthis.cone.geometry.dispose();\\r\\n\\t\\tthis.cone.material.dispose();\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tSpotLightHelper.prototype.update = function () {\\r\\n\\r\\n\\t\\tvar vector = new Vector3();\\r\\n\\t\\tvar vector2 = new Vector3();\\r\\n\\r\\n\\t\\treturn function update() {\\r\\n\\r\\n\\t\\t\\tthis.light.updateMatrixWorld();\\r\\n\\r\\n\\t\\t\\tvar coneLength = this.light.distance ? this.light.distance : 1000;\\r\\n\\t\\t\\tvar coneWidth = coneLength * Math.tan( this.light.angle );\\r\\n\\r\\n\\t\\t\\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\\r\\n\\r\\n\\t\\t\\tvector.setFromMatrixPosition( this.light.matrixWorld );\\r\\n\\t\\t\\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\\r\\n\\r\\n\\t\\t\\tthis.cone.lookAt( vector2.sub( vector ) );\\r\\n\\r\\n\\t\\t\\tif ( this.color !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.cone.material.color.set( this.color );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.cone.material.color.copy( this.light.color );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}();\\r\\n\\r\\n\\t/**\\r\\n\\t * @author Sean Griffin / http://twitter.com/sgrif\\r\\n\\t * @author Michael Guerrero / http://realitymeltdown.com\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author ikerr / http://verold.com\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\tfunction getBoneList( object ) {\\r\\n\\r\\n\\t\\tvar boneList = [];\\r\\n\\r\\n\\t\\tif ( object && object.isBone ) {\\r\\n\\r\\n\\t\\t\\tboneList.push( object );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor ( var i = 0; i < object.children.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn boneList;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction SkeletonHelper( object ) {\\r\\n\\r\\n\\t\\tvar bones = getBoneList( object );\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar colors = [];\\r\\n\\r\\n\\t\\tvar color1 = new Color( 0, 0, 1 );\\r\\n\\t\\tvar color2 = new Color( 0, 1, 0 );\\r\\n\\r\\n\\t\\tfor ( var i = 0; i < bones.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\tvar bone = bones[ i ];\\r\\n\\r\\n\\t\\t\\tif ( bone.parent && bone.parent.isBone ) {\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( 0, 0, 0 );\\r\\n\\t\\t\\t\\tvertices.push( 0, 0, 0 );\\r\\n\\t\\t\\t\\tcolors.push( color1.r, color1.g, color1.b );\\r\\n\\t\\t\\t\\tcolors.push( color2.r, color2.g, color2.b );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\r\\n\\r\\n\\t\\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\\r\\n\\r\\n\\t\\tLineSegments.call( this, geometry, material );\\r\\n\\r\\n\\t\\tthis.root = object;\\r\\n\\t\\tthis.bones = bones;\\r\\n\\r\\n\\t\\tthis.matrix = object.matrixWorld;\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\\r\\n\\tSkeletonHelper.prototype.constructor = SkeletonHelper;\\r\\n\\r\\n\\tSkeletonHelper.prototype.updateMatrixWorld = function () {\\r\\n\\r\\n\\t\\tvar vector = new Vector3();\\r\\n\\r\\n\\t\\tvar boneMatrix = new Matrix4();\\r\\n\\t\\tvar matrixWorldInv = new Matrix4();\\r\\n\\r\\n\\t\\treturn function updateMatrixWorld( force ) {\\r\\n\\r\\n\\t\\t\\tvar bones = this.bones;\\r\\n\\r\\n\\t\\t\\tvar geometry = this.geometry;\\r\\n\\t\\t\\tvar position = geometry.getAttribute( 'position' );\\r\\n\\r\\n\\t\\t\\tmatrixWorldInv.getInverse( this.root.matrixWorld );\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar bone = bones[ i ];\\r\\n\\r\\n\\t\\t\\t\\tif ( bone.parent && bone.parent.isBone ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\\r\\n\\t\\t\\t\\t\\tvector.setFromMatrixPosition( boneMatrix );\\r\\n\\t\\t\\t\\t\\tposition.setXYZ( j, vector.x, vector.y, vector.z );\\r\\n\\r\\n\\t\\t\\t\\t\\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\\r\\n\\t\\t\\t\\t\\tvector.setFromMatrixPosition( boneMatrix );\\r\\n\\t\\t\\t\\t\\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\\r\\n\\r\\n\\t\\t\\t\\t\\tj += 2;\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tgeometry.getAttribute( 'position' ).needsUpdate = true;\\r\\n\\r\\n\\t\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}();\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction PointLightHelper( light, sphereSize, color ) {\\r\\n\\r\\n\\t\\tthis.light = light;\\r\\n\\t\\tthis.light.updateMatrixWorld();\\r\\n\\r\\n\\t\\tthis.color = color;\\r\\n\\r\\n\\t\\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\\r\\n\\t\\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\\r\\n\\r\\n\\t\\tMesh.call( this, geometry, material );\\r\\n\\r\\n\\t\\tthis.matrix = this.light.matrixWorld;\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\\r\\n\\t\\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\\r\\n\\r\\n\\t\\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\\r\\n\\t\\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\\r\\n\\r\\n\\t\\tvar d = light.distance;\\r\\n\\r\\n\\t\\tif ( d === 0.0 ) {\\r\\n\\r\\n\\t\\t\\tthis.lightDistance.visible = false;\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tthis.lightDistance.scale.set( d, d, d );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.add( this.lightDistance );\\r\\n\\t\\t*/\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPointLightHelper.prototype = Object.create( Mesh.prototype );\\r\\n\\tPointLightHelper.prototype.constructor = PointLightHelper;\\r\\n\\r\\n\\tPointLightHelper.prototype.dispose = function () {\\r\\n\\r\\n\\t\\tthis.geometry.dispose();\\r\\n\\t\\tthis.material.dispose();\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tPointLightHelper.prototype.update = function () {\\r\\n\\r\\n\\t\\tif ( this.color !== undefined ) {\\r\\n\\r\\n\\t\\t\\tthis.material.color.set( this.color );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tthis.material.color.copy( this.light.color );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\tvar d = this.light.distance;\\r\\n\\r\\n\\t\\tif ( d === 0.0 ) {\\r\\n\\r\\n\\t\\t\\tthis.lightDistance.visible = false;\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tthis.lightDistance.visible = true;\\r\\n\\t\\t\\tthis.lightDistance.scale.set( d, d, d );\\r\\n\\r\\n\\t\\t}\\r\\n\\t\\t*/\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author abelnation / http://github.com/abelnation\\r\\n\\t * @author Mugen87 / http://github.com/Mugen87\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction RectAreaLightHelper( light, color ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.light = light;\\r\\n\\t\\tthis.light.updateMatrixWorld();\\r\\n\\r\\n\\t\\tthis.matrix = light.matrixWorld;\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\r\\n\\t\\tthis.color = color;\\r\\n\\r\\n\\t\\tvar material = new LineBasicMaterial( { fog: false } );\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\r\\n\\t\\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\\r\\n\\r\\n\\t\\tthis.line = new Line( geometry, material );\\r\\n\\t\\tthis.add( this.line );\\r\\n\\r\\n\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\\r\\n\\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\\r\\n\\r\\n\\tRectAreaLightHelper.prototype.dispose = function () {\\r\\n\\r\\n\\t\\tthis.children[ 0 ].geometry.dispose();\\r\\n\\t\\tthis.children[ 0 ].material.dispose();\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tRectAreaLightHelper.prototype.update = function () {\\r\\n\\r\\n\\t\\t// calculate new dimensions of the helper\\r\\n\\r\\n\\t\\tvar hx = this.light.width * 0.5;\\r\\n\\t\\tvar hy = this.light.height * 0.5;\\r\\n\\r\\n\\t\\tvar position = this.line.geometry.attributes.position;\\r\\n\\t\\tvar array = position.array;\\r\\n\\r\\n\\t\\t// update vertices\\r\\n\\r\\n\\t\\tarray[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;\\r\\n\\t\\tarray[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;\\r\\n\\t\\tarray[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;\\r\\n\\t\\tarray[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\\r\\n\\t\\tarray[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;\\r\\n\\r\\n\\t\\tposition.needsUpdate = true;\\r\\n\\r\\n\\t\\tif ( this.color !== undefined ) {\\r\\n\\r\\n\\t\\t\\tthis.line.material.color.set( this.color );\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tthis.line.material.color.copy( this.light.color );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\tfunction HemisphereLightHelper( light, size, color ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.light = light;\\r\\n\\t\\tthis.light.updateMatrixWorld();\\r\\n\\r\\n\\t\\tthis.matrix = light.matrixWorld;\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\r\\n\\t\\tthis.color = color;\\r\\n\\r\\n\\t\\tvar geometry = new OctahedronBufferGeometry( size );\\r\\n\\t\\tgeometry.rotateY( Math.PI * 0.5 );\\r\\n\\r\\n\\t\\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\\r\\n\\t\\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\\r\\n\\r\\n\\t\\tvar position = geometry.getAttribute( 'position' );\\r\\n\\t\\tvar colors = new Float32Array( position.count * 3 );\\r\\n\\r\\n\\t\\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\\r\\n\\r\\n\\t\\tthis.add( new Mesh( geometry, this.material ) );\\r\\n\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\\r\\n\\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\\r\\n\\r\\n\\tHemisphereLightHelper.prototype.dispose = function () {\\r\\n\\r\\n\\t\\tthis.children[ 0 ].geometry.dispose();\\r\\n\\t\\tthis.children[ 0 ].material.dispose();\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tHemisphereLightHelper.prototype.update = function () {\\r\\n\\r\\n\\t\\tvar vector = new Vector3();\\r\\n\\r\\n\\t\\tvar color1 = new Color();\\r\\n\\t\\tvar color2 = new Color();\\r\\n\\r\\n\\t\\treturn function update() {\\r\\n\\r\\n\\t\\t\\tvar mesh = this.children[ 0 ];\\r\\n\\r\\n\\t\\t\\tif ( this.color !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.material.color.set( this.color );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tvar colors = mesh.geometry.getAttribute( 'color' );\\r\\n\\r\\n\\t\\t\\t\\tcolor1.copy( this.light.color );\\r\\n\\t\\t\\t\\tcolor2.copy( this.light.groundColor );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\\r\\n\\r\\n\\t\\t\\t\\t\\tcolors.setXYZ( i, color.r, color.g, color.b );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tcolors.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}();\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction GridHelper( size, divisions, color1, color2 ) {\\r\\n\\r\\n\\t\\tsize = size || 10;\\r\\n\\t\\tdivisions = divisions || 10;\\r\\n\\t\\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\\r\\n\\t\\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\\r\\n\\r\\n\\t\\tvar center = divisions / 2;\\r\\n\\t\\tvar step = size / divisions;\\r\\n\\t\\tvar halfSize = size / 2;\\r\\n\\r\\n\\t\\tvar vertices = [], colors = [];\\r\\n\\r\\n\\t\\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\\r\\n\\r\\n\\t\\t\\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\\r\\n\\t\\t\\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\\r\\n\\r\\n\\t\\t\\tvar color = i === center ? color1 : color2;\\r\\n\\r\\n\\t\\t\\tcolor.toArray( colors, j ); j += 3;\\r\\n\\t\\t\\tcolor.toArray( colors, j ); j += 3;\\r\\n\\t\\t\\tcolor.toArray( colors, j ); j += 3;\\r\\n\\t\\t\\tcolor.toArray( colors, j ); j += 3;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\r\\n\\r\\n\\t\\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\\r\\n\\r\\n\\t\\tLineSegments.call( this, geometry, material );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tGridHelper.prototype = Object.create( LineSegments.prototype );\\r\\n\\tGridHelper.prototype.constructor = GridHelper;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author Mugen87 / http://github.com/Mugen87\\r\\n\\t * @author Hectate / http://www.github.com/Hectate\\r\\n\\t */\\r\\n\\r\\n\\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\\r\\n\\r\\n\\t\\tradius = radius || 10;\\r\\n\\t\\tradials = radials || 16;\\r\\n\\t\\tcircles = circles || 8;\\r\\n\\t\\tdivisions = divisions || 64;\\r\\n\\t\\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\\r\\n\\t\\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\\r\\n\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar colors = [];\\r\\n\\r\\n\\t\\tvar x, z;\\r\\n\\t\\tvar v, i, j, r, color;\\r\\n\\r\\n\\t\\t// create the radials\\r\\n\\r\\n\\t\\tfor ( i = 0; i <= radials; i ++ ) {\\r\\n\\r\\n\\t\\t\\tv = ( i / radials ) * ( Math.PI * 2 );\\r\\n\\r\\n\\t\\t\\tx = Math.sin( v ) * radius;\\r\\n\\t\\t\\tz = Math.cos( v ) * radius;\\r\\n\\r\\n\\t\\t\\tvertices.push( 0, 0, 0 );\\r\\n\\t\\t\\tvertices.push( x, 0, z );\\r\\n\\r\\n\\t\\t\\tcolor = ( i & 1 ) ? color1 : color2;\\r\\n\\r\\n\\t\\t\\tcolors.push( color.r, color.g, color.b );\\r\\n\\t\\t\\tcolors.push( color.r, color.g, color.b );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create the circles\\r\\n\\r\\n\\t\\tfor ( i = 0; i <= circles; i ++ ) {\\r\\n\\r\\n\\t\\t\\tcolor = ( i & 1 ) ? color1 : color2;\\r\\n\\r\\n\\t\\t\\tr = radius - ( radius / circles * i );\\r\\n\\r\\n\\t\\t\\tfor ( j = 0; j < divisions; j ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t// first vertex\\r\\n\\r\\n\\t\\t\\t\\tv = ( j / divisions ) * ( Math.PI * 2 );\\r\\n\\r\\n\\t\\t\\t\\tx = Math.sin( v ) * r;\\r\\n\\t\\t\\t\\tz = Math.cos( v ) * r;\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( x, 0, z );\\r\\n\\t\\t\\t\\tcolors.push( color.r, color.g, color.b );\\r\\n\\r\\n\\t\\t\\t\\t// second vertex\\r\\n\\r\\n\\t\\t\\t\\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\\r\\n\\r\\n\\t\\t\\t\\tx = Math.sin( v ) * r;\\r\\n\\t\\t\\t\\tz = Math.cos( v ) * r;\\r\\n\\r\\n\\t\\t\\t\\tvertices.push( x, 0, z );\\r\\n\\t\\t\\t\\tcolors.push( color.r, color.g, color.b );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\r\\n\\r\\n\\t\\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\\r\\n\\r\\n\\t\\tLineSegments.call( this, geometry, material );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\\r\\n\\tPolarGridHelper.prototype.constructor = PolarGridHelper;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\\r\\n\\r\\n\\t\\t// FaceNormalsHelper only supports THREE.Geometry\\r\\n\\r\\n\\t\\tthis.object = object;\\r\\n\\r\\n\\t\\tthis.size = ( size !== undefined ) ? size : 1;\\r\\n\\r\\n\\t\\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\\r\\n\\r\\n\\t\\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar nNormals = 0;\\r\\n\\r\\n\\t\\tvar objGeometry = this.object.geometry;\\r\\n\\r\\n\\t\\tif ( objGeometry && objGeometry.isGeometry ) {\\r\\n\\r\\n\\t\\t\\tnNormals = objGeometry.faces.length;\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\r\\n\\t\\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\\r\\n\\r\\n\\t\\tgeometry.addAttribute( 'position', positions );\\r\\n\\r\\n\\t\\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\\r\\n\\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\\r\\n\\r\\n\\tFaceNormalsHelper.prototype.update = ( function () {\\r\\n\\r\\n\\t\\tvar v1 = new Vector3();\\r\\n\\t\\tvar v2 = new Vector3();\\r\\n\\t\\tvar normalMatrix = new Matrix3();\\r\\n\\r\\n\\t\\treturn function update() {\\r\\n\\r\\n\\t\\t\\tthis.object.updateMatrixWorld( true );\\r\\n\\r\\n\\t\\t\\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\\r\\n\\r\\n\\t\\t\\tvar matrixWorld = this.object.matrixWorld;\\r\\n\\r\\n\\t\\t\\tvar position = this.geometry.attributes.position;\\r\\n\\r\\n\\t\\t\\t//\\r\\n\\r\\n\\t\\t\\tvar objGeometry = this.object.geometry;\\r\\n\\r\\n\\t\\t\\tvar vertices = objGeometry.vertices;\\r\\n\\r\\n\\t\\t\\tvar faces = objGeometry.faces;\\r\\n\\r\\n\\t\\t\\tvar idx = 0;\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar face = faces[ i ];\\r\\n\\r\\n\\t\\t\\t\\tvar normal = face.normal;\\r\\n\\r\\n\\t\\t\\t\\tv1.copy( vertices[ face.a ] )\\r\\n\\t\\t\\t\\t\\t.add( vertices[ face.b ] )\\r\\n\\t\\t\\t\\t\\t.add( vertices[ face.c ] )\\r\\n\\t\\t\\t\\t\\t.divideScalar( 3 )\\r\\n\\t\\t\\t\\t\\t.applyMatrix4( matrixWorld );\\r\\n\\r\\n\\t\\t\\t\\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\\r\\n\\r\\n\\t\\t\\t\\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\\r\\n\\r\\n\\t\\t\\t\\tidx = idx + 1;\\r\\n\\r\\n\\t\\t\\t\\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\\r\\n\\r\\n\\t\\t\\t\\tidx = idx + 1;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tposition.needsUpdate = true;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}() );\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction DirectionalLightHelper( light, size, color ) {\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tthis.light = light;\\r\\n\\t\\tthis.light.updateMatrixWorld();\\r\\n\\r\\n\\t\\tthis.matrix = light.matrixWorld;\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\r\\n\\t\\tthis.color = color;\\r\\n\\r\\n\\t\\tif ( size === undefined ) size = 1;\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\\r\\n\\t\\t\\t- size, size, 0,\\r\\n\\t\\t\\tsize, size, 0,\\r\\n\\t\\t\\tsize, - size, 0,\\r\\n\\t\\t\\t- size, - size, 0,\\r\\n\\t\\t\\t- size, size, 0\\r\\n\\t\\t], 3 ) );\\r\\n\\r\\n\\t\\tvar material = new LineBasicMaterial( { fog: false } );\\r\\n\\r\\n\\t\\tthis.lightPlane = new Line( geometry, material );\\r\\n\\t\\tthis.add( this.lightPlane );\\r\\n\\r\\n\\t\\tgeometry = new BufferGeometry();\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\\r\\n\\r\\n\\t\\tthis.targetLine = new Line( geometry, material );\\r\\n\\t\\tthis.add( this.targetLine );\\r\\n\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\\r\\n\\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\\r\\n\\r\\n\\tDirectionalLightHelper.prototype.dispose = function () {\\r\\n\\r\\n\\t\\tthis.lightPlane.geometry.dispose();\\r\\n\\t\\tthis.lightPlane.material.dispose();\\r\\n\\t\\tthis.targetLine.geometry.dispose();\\r\\n\\t\\tthis.targetLine.material.dispose();\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tDirectionalLightHelper.prototype.update = function () {\\r\\n\\r\\n\\t\\tvar v1 = new Vector3();\\r\\n\\t\\tvar v2 = new Vector3();\\r\\n\\t\\tvar v3 = new Vector3();\\r\\n\\r\\n\\t\\treturn function update() {\\r\\n\\r\\n\\t\\t\\tv1.setFromMatrixPosition( this.light.matrixWorld );\\r\\n\\t\\t\\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\\r\\n\\t\\t\\tv3.subVectors( v2, v1 );\\r\\n\\r\\n\\t\\t\\tthis.lightPlane.lookAt( v3 );\\r\\n\\r\\n\\t\\t\\tif ( this.color !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.lightPlane.material.color.set( this.color );\\r\\n\\t\\t\\t\\tthis.targetLine.material.color.set( this.color );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tthis.lightPlane.material.color.copy( this.light.color );\\r\\n\\t\\t\\t\\tthis.targetLine.material.color.copy( this.light.color );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.targetLine.lookAt( v3 );\\r\\n\\t\\t\\tthis.targetLine.scale.z = v3.length();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}();\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t * @author Mugen87 / https://github.com/Mugen87\\r\\n\\t *\\r\\n\\t *\\t- shows frustum, line of sight and up of the camera\\r\\n\\t *\\t- suitable for fast updates\\r\\n\\t * \\t- based on frustum visualization in lightgl.js shadowmap example\\r\\n\\t *\\t\\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\\r\\n\\t */\\r\\n\\r\\n\\tfunction CameraHelper( camera ) {\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\t\\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\\r\\n\\r\\n\\t\\tvar vertices = [];\\r\\n\\t\\tvar colors = [];\\r\\n\\r\\n\\t\\tvar pointMap = {};\\r\\n\\r\\n\\t\\t// colors\\r\\n\\r\\n\\t\\tvar colorFrustum = new Color( 0xffaa00 );\\r\\n\\t\\tvar colorCone = new Color( 0xff0000 );\\r\\n\\t\\tvar colorUp = new Color( 0x00aaff );\\r\\n\\t\\tvar colorTarget = new Color( 0xffffff );\\r\\n\\t\\tvar colorCross = new Color( 0x333333 );\\r\\n\\r\\n\\t\\t// near\\r\\n\\r\\n\\t\\taddLine( 'n1', 'n2', colorFrustum );\\r\\n\\t\\taddLine( 'n2', 'n4', colorFrustum );\\r\\n\\t\\taddLine( 'n4', 'n3', colorFrustum );\\r\\n\\t\\taddLine( 'n3', 'n1', colorFrustum );\\r\\n\\r\\n\\t\\t// far\\r\\n\\r\\n\\t\\taddLine( 'f1', 'f2', colorFrustum );\\r\\n\\t\\taddLine( 'f2', 'f4', colorFrustum );\\r\\n\\t\\taddLine( 'f4', 'f3', colorFrustum );\\r\\n\\t\\taddLine( 'f3', 'f1', colorFrustum );\\r\\n\\r\\n\\t\\t// sides\\r\\n\\r\\n\\t\\taddLine( 'n1', 'f1', colorFrustum );\\r\\n\\t\\taddLine( 'n2', 'f2', colorFrustum );\\r\\n\\t\\taddLine( 'n3', 'f3', colorFrustum );\\r\\n\\t\\taddLine( 'n4', 'f4', colorFrustum );\\r\\n\\r\\n\\t\\t// cone\\r\\n\\r\\n\\t\\taddLine( 'p', 'n1', colorCone );\\r\\n\\t\\taddLine( 'p', 'n2', colorCone );\\r\\n\\t\\taddLine( 'p', 'n3', colorCone );\\r\\n\\t\\taddLine( 'p', 'n4', colorCone );\\r\\n\\r\\n\\t\\t// up\\r\\n\\r\\n\\t\\taddLine( 'u1', 'u2', colorUp );\\r\\n\\t\\taddLine( 'u2', 'u3', colorUp );\\r\\n\\t\\taddLine( 'u3', 'u1', colorUp );\\r\\n\\r\\n\\t\\t// target\\r\\n\\r\\n\\t\\taddLine( 'c', 't', colorTarget );\\r\\n\\t\\taddLine( 'p', 'c', colorCross );\\r\\n\\r\\n\\t\\t// cross\\r\\n\\r\\n\\t\\taddLine( 'cn1', 'cn2', colorCross );\\r\\n\\t\\taddLine( 'cn3', 'cn4', colorCross );\\r\\n\\r\\n\\t\\taddLine( 'cf1', 'cf2', colorCross );\\r\\n\\t\\taddLine( 'cf3', 'cf4', colorCross );\\r\\n\\r\\n\\t\\tfunction addLine( a, b, color ) {\\r\\n\\r\\n\\t\\t\\taddPoint( a, color );\\r\\n\\t\\t\\taddPoint( b, color );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfunction addPoint( id, color ) {\\r\\n\\r\\n\\t\\t\\tvertices.push( 0, 0, 0 );\\r\\n\\t\\t\\tcolors.push( color.r, color.g, color.b );\\r\\n\\r\\n\\t\\t\\tif ( pointMap[ id ] === undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tpointMap[ id ] = [];\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\r\\n\\r\\n\\t\\tLineSegments.call( this, geometry, material );\\r\\n\\r\\n\\t\\tthis.camera = camera;\\r\\n\\t\\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\\r\\n\\r\\n\\t\\tthis.matrix = camera.matrixWorld;\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\r\\n\\t\\tthis.pointMap = pointMap;\\r\\n\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tCameraHelper.prototype = Object.create( LineSegments.prototype );\\r\\n\\tCameraHelper.prototype.constructor = CameraHelper;\\r\\n\\r\\n\\tCameraHelper.prototype.update = function () {\\r\\n\\r\\n\\t\\tvar geometry, pointMap;\\r\\n\\r\\n\\t\\tvar vector = new Vector3();\\r\\n\\t\\tvar camera = new Camera();\\r\\n\\r\\n\\t\\tfunction setPoint( point, x, y, z ) {\\r\\n\\r\\n\\t\\t\\tvector.set( x, y, z ).unproject( camera );\\r\\n\\r\\n\\t\\t\\tvar points = pointMap[ point ];\\r\\n\\r\\n\\t\\t\\tif ( points !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tvar position = geometry.getAttribute( 'position' );\\r\\n\\r\\n\\t\\t\\t\\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\t\\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn function update() {\\r\\n\\r\\n\\t\\t\\tgeometry = this.geometry;\\r\\n\\t\\t\\tpointMap = this.pointMap;\\r\\n\\r\\n\\t\\t\\tvar w = 1, h = 1;\\r\\n\\r\\n\\t\\t\\t// we need just camera projection matrix\\r\\n\\t\\t\\t// world matrix must be identity\\r\\n\\r\\n\\t\\t\\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\\r\\n\\r\\n\\t\\t\\t// center / target\\r\\n\\r\\n\\t\\t\\tsetPoint( 'c', 0, 0, - 1 );\\r\\n\\t\\t\\tsetPoint( 't', 0, 0, 1 );\\r\\n\\r\\n\\t\\t\\t// near\\r\\n\\r\\n\\t\\t\\tsetPoint( 'n1', - w, - h, - 1 );\\r\\n\\t\\t\\tsetPoint( 'n2', w, - h, - 1 );\\r\\n\\t\\t\\tsetPoint( 'n3', - w, h, - 1 );\\r\\n\\t\\t\\tsetPoint( 'n4', w, h, - 1 );\\r\\n\\r\\n\\t\\t\\t// far\\r\\n\\r\\n\\t\\t\\tsetPoint( 'f1', - w, - h, 1 );\\r\\n\\t\\t\\tsetPoint( 'f2', w, - h, 1 );\\r\\n\\t\\t\\tsetPoint( 'f3', - w, h, 1 );\\r\\n\\t\\t\\tsetPoint( 'f4', w, h, 1 );\\r\\n\\r\\n\\t\\t\\t// up\\r\\n\\r\\n\\t\\t\\tsetPoint( 'u1', w * 0.7, h * 1.1, - 1 );\\r\\n\\t\\t\\tsetPoint( 'u2', - w * 0.7, h * 1.1, - 1 );\\r\\n\\t\\t\\tsetPoint( 'u3', 0, h * 2, - 1 );\\r\\n\\r\\n\\t\\t\\t// cross\\r\\n\\r\\n\\t\\t\\tsetPoint( 'cf1', - w, 0, 1 );\\r\\n\\t\\t\\tsetPoint( 'cf2', w, 0, 1 );\\r\\n\\t\\t\\tsetPoint( 'cf3', 0, - h, 1 );\\r\\n\\t\\t\\tsetPoint( 'cf4', 0, h, 1 );\\r\\n\\r\\n\\t\\t\\tsetPoint( 'cn1', - w, 0, - 1 );\\r\\n\\t\\t\\tsetPoint( 'cn2', w, 0, - 1 );\\r\\n\\t\\t\\tsetPoint( 'cn3', 0, - h, - 1 );\\r\\n\\t\\t\\tsetPoint( 'cn4', 0, h, - 1 );\\r\\n\\r\\n\\t\\t\\tgeometry.getAttribute( 'position' ).needsUpdate = true;\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}();\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t * @author Mugen87 / http://github.com/Mugen87\\r\\n\\t */\\r\\n\\r\\n\\tfunction BoxHelper( object, color ) {\\r\\n\\r\\n\\t\\tthis.object = object;\\r\\n\\r\\n\\t\\tif ( color === undefined ) color = 0xffff00;\\r\\n\\r\\n\\t\\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\\r\\n\\t\\tvar positions = new Float32Array( 8 * 3 );\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\t\\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\\r\\n\\t\\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\\r\\n\\r\\n\\t\\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\\r\\n\\r\\n\\t\\tthis.matrixAutoUpdate = false;\\r\\n\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tBoxHelper.prototype = Object.create( LineSegments.prototype );\\r\\n\\tBoxHelper.prototype.constructor = BoxHelper;\\r\\n\\r\\n\\tBoxHelper.prototype.update = ( function () {\\r\\n\\r\\n\\t\\tvar box = new Box3();\\r\\n\\r\\n\\t\\treturn function update( object ) {\\r\\n\\r\\n\\t\\t\\tif ( object !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( this.object !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tbox.setFromObject( this.object );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif ( box.isEmpty() ) return;\\r\\n\\r\\n\\t\\t\\tvar min = box.min;\\r\\n\\t\\t\\tvar max = box.max;\\r\\n\\r\\n\\t\\t\\t/*\\r\\n\\t\\t\\t  5____4\\r\\n\\t\\t\\t1/___0/|\\r\\n\\t\\t\\t| 6__|_7\\r\\n\\t\\t\\t2/___3/\\r\\n\\r\\n\\t\\t\\t0: max.x, max.y, max.z\\r\\n\\t\\t\\t1: min.x, max.y, max.z\\r\\n\\t\\t\\t2: min.x, min.y, max.z\\r\\n\\t\\t\\t3: max.x, min.y, max.z\\r\\n\\t\\t\\t4: max.x, max.y, min.z\\r\\n\\t\\t\\t5: min.x, max.y, min.z\\r\\n\\t\\t\\t6: min.x, min.y, min.z\\r\\n\\t\\t\\t7: max.x, min.y, min.z\\r\\n\\t\\t\\t*/\\r\\n\\r\\n\\t\\t\\tvar position = this.geometry.attributes.position;\\r\\n\\t\\t\\tvar array = position.array;\\r\\n\\r\\n\\t\\t\\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\\r\\n\\t\\t\\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\\r\\n\\t\\t\\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\\r\\n\\t\\t\\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\\r\\n\\t\\t\\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\\r\\n\\t\\t\\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\\r\\n\\t\\t\\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\\r\\n\\t\\t\\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\\r\\n\\r\\n\\t\\t\\tposition.needsUpdate = true;\\r\\n\\r\\n\\t\\t\\tthis.geometry.computeBoundingSphere();\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t} )();\\r\\n\\r\\n\\tBoxHelper.prototype.setFromObject = function ( object ) {\\r\\n\\r\\n\\t\\tthis.object = object;\\r\\n\\t\\tthis.update();\\r\\n\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction Box3Helper( box, hex ) {\\r\\n\\r\\n\\t\\tthis.type = 'Box3Helper';\\r\\n\\r\\n\\t\\tthis.box = box;\\r\\n\\r\\n\\t\\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\\r\\n\\r\\n\\t\\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\\r\\n\\r\\n\\t\\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\r\\n\\t\\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\\r\\n\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\\r\\n\\r\\n\\t\\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\\r\\n\\r\\n\\t\\tthis.geometry.computeBoundingSphere();\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tBox3Helper.prototype = Object.create( LineSegments.prototype );\\r\\n\\tBox3Helper.prototype.constructor = Box3Helper;\\r\\n\\r\\n\\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\\r\\n\\r\\n\\t\\tvar box = this.box;\\r\\n\\r\\n\\t\\tif ( box.isEmpty() ) return;\\r\\n\\r\\n\\t\\tbox.getCenter( this.position );\\r\\n\\r\\n\\t\\tbox.getSize( this.scale );\\r\\n\\r\\n\\t\\tthis.scale.multiplyScalar( 0.5 );\\r\\n\\r\\n\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t */\\r\\n\\r\\n\\tfunction PlaneHelper( plane, size, hex ) {\\r\\n\\r\\n\\t\\tthis.type = 'PlaneHelper';\\r\\n\\r\\n\\t\\tthis.plane = plane;\\r\\n\\r\\n\\t\\tthis.size = ( size === undefined ) ? 1 : size;\\r\\n\\r\\n\\t\\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\\r\\n\\r\\n\\t\\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\\r\\n\\t\\tgeometry.computeBoundingSphere();\\r\\n\\r\\n\\t\\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\\r\\n\\r\\n\\t\\t//\\r\\n\\r\\n\\t\\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\\r\\n\\r\\n\\t\\tvar geometry2 = new BufferGeometry();\\r\\n\\t\\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\\r\\n\\t\\tgeometry2.computeBoundingSphere();\\r\\n\\r\\n\\t\\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tPlaneHelper.prototype = Object.create( Line.prototype );\\r\\n\\tPlaneHelper.prototype.constructor = PlaneHelper;\\r\\n\\r\\n\\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\\r\\n\\r\\n\\t\\tvar scale = - this.plane.constant;\\r\\n\\r\\n\\t\\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\\r\\n\\r\\n\\t\\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\\r\\n\\r\\n\\t\\tthis.lookAt( this.plane.normal );\\r\\n\\r\\n\\t\\tObject3D.prototype.updateMatrixWorld.call( this, force );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author WestLangley / http://github.com/WestLangley\\r\\n\\t * @author zz85 / http://github.com/zz85\\r\\n\\t * @author bhouston / http://clara.io\\r\\n\\t *\\r\\n\\t * Creates an arrow for visualizing directions\\r\\n\\t *\\r\\n\\t * Parameters:\\r\\n\\t *  dir - Vector3\\r\\n\\t *  origin - Vector3\\r\\n\\t *  length - Number\\r\\n\\t *  color - color in hex value\\r\\n\\t *  headLength - Number\\r\\n\\t *  headWidth - Number\\r\\n\\t */\\r\\n\\r\\n\\tvar lineGeometry;\\r\\n\\tvar coneGeometry;\\r\\n\\r\\n\\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\\r\\n\\r\\n\\t\\t// dir is assumed to be normalized\\r\\n\\r\\n\\t\\tObject3D.call( this );\\r\\n\\r\\n\\t\\tif ( color === undefined ) color = 0xffff00;\\r\\n\\t\\tif ( length === undefined ) length = 1;\\r\\n\\t\\tif ( headLength === undefined ) headLength = 0.2 * length;\\r\\n\\t\\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\\r\\n\\r\\n\\t\\tif ( lineGeometry === undefined ) {\\r\\n\\r\\n\\t\\t\\tlineGeometry = new BufferGeometry();\\r\\n\\t\\t\\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\\r\\n\\r\\n\\t\\t\\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\\r\\n\\t\\t\\tconeGeometry.translate( 0, - 0.5, 0 );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.position.copy( origin );\\r\\n\\r\\n\\t\\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\\r\\n\\t\\tthis.line.matrixAutoUpdate = false;\\r\\n\\t\\tthis.add( this.line );\\r\\n\\r\\n\\t\\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\\r\\n\\t\\tthis.cone.matrixAutoUpdate = false;\\r\\n\\t\\tthis.add( this.cone );\\r\\n\\r\\n\\t\\tthis.setDirection( dir );\\r\\n\\t\\tthis.setLength( length, headLength, headWidth );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tArrowHelper.prototype = Object.create( Object3D.prototype );\\r\\n\\tArrowHelper.prototype.constructor = ArrowHelper;\\r\\n\\r\\n\\tArrowHelper.prototype.setDirection = ( function () {\\r\\n\\r\\n\\t\\tvar axis = new Vector3();\\r\\n\\t\\tvar radians;\\r\\n\\r\\n\\t\\treturn function setDirection( dir ) {\\r\\n\\r\\n\\t\\t\\t// dir is assumed to be normalized\\r\\n\\r\\n\\t\\t\\tif ( dir.y > 0.99999 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.quaternion.set( 0, 0, 0, 1 );\\r\\n\\r\\n\\t\\t\\t} else if ( dir.y < - 0.99999 ) {\\r\\n\\r\\n\\t\\t\\t\\tthis.quaternion.set( 1, 0, 0, 0 );\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\taxis.set( dir.z, 0, - dir.x ).normalize();\\r\\n\\r\\n\\t\\t\\t\\tradians = Math.acos( dir.y );\\r\\n\\r\\n\\t\\t\\t\\tthis.quaternion.setFromAxisAngle( axis, radians );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}() );\\r\\n\\r\\n\\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\\r\\n\\r\\n\\t\\tif ( headLength === undefined ) headLength = 0.2 * length;\\r\\n\\t\\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\\r\\n\\r\\n\\t\\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\\r\\n\\t\\tthis.line.updateMatrix();\\r\\n\\r\\n\\t\\tthis.cone.scale.set( headWidth, headLength, headWidth );\\r\\n\\t\\tthis.cone.position.y = length;\\r\\n\\t\\tthis.cone.updateMatrix();\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tArrowHelper.prototype.setColor = function ( color ) {\\r\\n\\r\\n\\t\\tthis.line.material.color.copy( color );\\r\\n\\t\\tthis.cone.material.color.copy( color );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author sroucheray / http://sroucheray.org/\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction AxesHelper( size ) {\\r\\n\\r\\n\\t\\tsize = size || 1;\\r\\n\\r\\n\\t\\tvar vertices = [\\r\\n\\t\\t\\t0, 0, 0,\\tsize, 0, 0,\\r\\n\\t\\t\\t0, 0, 0,\\t0, size, 0,\\r\\n\\t\\t\\t0, 0, 0,\\t0, 0, size\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tvar colors = [\\r\\n\\t\\t\\t1, 0, 0,\\t1, 0.6, 0,\\r\\n\\t\\t\\t0, 1, 0,\\t0.6, 1, 0,\\r\\n\\t\\t\\t0, 0, 1,\\t0, 0.6, 1\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tvar geometry = new BufferGeometry();\\r\\n\\t\\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\\r\\n\\t\\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\\r\\n\\r\\n\\t\\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\\r\\n\\r\\n\\t\\tLineSegments.call( this, geometry, material );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tAxesHelper.prototype = Object.create( LineSegments.prototype );\\r\\n\\tAxesHelper.prototype.constructor = AxesHelper;\\r\\n\\r\\n\\t/**\\r\\n\\t * @author alteredq / http://alteredqualia.com/\\r\\n\\t */\\r\\n\\r\\n\\tvar SceneUtils = {\\r\\n\\r\\n\\t\\tcreateMultiMaterialObject: function ( geometry, materials ) {\\r\\n\\r\\n\\t\\t\\tvar group = new Group();\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tgroup.add( new Mesh( geometry, materials[ i ] ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn group;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tdetach: function ( child, parent, scene ) {\\r\\n\\r\\n\\t\\t\\tchild.applyMatrix( parent.matrixWorld );\\r\\n\\t\\t\\tparent.remove( child );\\r\\n\\t\\t\\tscene.add( child );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tattach: function ( child, scene, parent ) {\\r\\n\\r\\n\\t\\t\\tchild.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );\\r\\n\\r\\n\\t\\t\\tscene.remove( child );\\r\\n\\t\\t\\tparent.add( child );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t/**\\r\\n\\t * @author mrdoob / http://mrdoob.com/\\r\\n\\t */\\r\\n\\r\\n\\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\\r\\n\\t\\treturn new Face3( a, b, c, normal, color, materialIndex );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tvar LineStrip = 0;\\r\\n\\r\\n\\tvar LinePieces = 1;\\r\\n\\r\\n\\tfunction MeshFaceMaterial( materials ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\\r\\n\\t\\treturn materials;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction MultiMaterial( materials ) {\\r\\n\\r\\n\\t\\tif ( materials === undefined ) materials = [];\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\\r\\n\\t\\tmaterials.isMultiMaterial = true;\\r\\n\\t\\tmaterials.materials = materials;\\r\\n\\t\\tmaterials.clone = function () {\\r\\n\\r\\n\\t\\t\\treturn materials.slice();\\r\\n\\r\\n\\t\\t};\\r\\n\\t\\treturn materials;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction PointCloud( geometry, material ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\\r\\n\\t\\treturn new Points( geometry, material );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Particle( material ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\\r\\n\\t\\treturn new Sprite( material );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction ParticleSystem( geometry, material ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\\r\\n\\t\\treturn new Points( geometry, material );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction PointCloudMaterial( parameters ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\\r\\n\\t\\treturn new PointsMaterial( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction ParticleBasicMaterial( parameters ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\\r\\n\\t\\treturn new PointsMaterial( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction ParticleSystemMaterial( parameters ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\\r\\n\\t\\treturn new PointsMaterial( parameters );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Vertex( x, y, z ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\\r\\n\\t\\treturn new Vector3( x, y, z );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction DynamicBufferAttribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\\r\\n\\t\\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Int8Attribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\\r\\n\\t\\treturn new Int8BufferAttribute( array, itemSize );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Uint8Attribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\\r\\n\\t\\treturn new Uint8BufferAttribute( array, itemSize );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Uint8ClampedAttribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\\r\\n\\t\\treturn new Uint8ClampedBufferAttribute( array, itemSize );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Int16Attribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\\r\\n\\t\\treturn new Int16BufferAttribute( array, itemSize );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Uint16Attribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\\r\\n\\t\\treturn new Uint16BufferAttribute( array, itemSize );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Int32Attribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\\r\\n\\t\\treturn new Int32BufferAttribute( array, itemSize );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Uint32Attribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\\r\\n\\t\\treturn new Uint32BufferAttribute( array, itemSize );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Float32Attribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\\r\\n\\t\\treturn new Float32BufferAttribute( array, itemSize );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction Float64Attribute( array, itemSize ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\\r\\n\\t\\treturn new Float64BufferAttribute( array, itemSize );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tCurve.create = function ( construct, getPoint ) {\\r\\n\\r\\n\\t\\tconsole.log( 'THREE.Curve.create() has been deprecated' );\\r\\n\\r\\n\\t\\tconstruct.prototype = Object.create( Curve.prototype );\\r\\n\\t\\tconstruct.prototype.constructor = construct;\\r\\n\\t\\tconstruct.prototype.getPoint = getPoint;\\r\\n\\r\\n\\t\\treturn construct;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.assign( CurvePath.prototype, {\\r\\n\\r\\n\\t\\tcreatePointsGeometry: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\\r\\n\\r\\n\\t\\t\\t// generate geometry from path points (for Line or Points objects)\\r\\n\\r\\n\\t\\t\\tvar pts = this.getPoints( divisions );\\r\\n\\t\\t\\treturn this.createGeometry( pts );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcreateSpacedPointsGeometry: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\\r\\n\\r\\n\\t\\t\\t// generate geometry from equidistant sampling along the path\\r\\n\\r\\n\\t\\t\\tvar pts = this.getSpacedPoints( divisions );\\r\\n\\t\\t\\treturn this.createGeometry( pts );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcreateGeometry: function ( points ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\\r\\n\\r\\n\\t\\t\\tvar geometry = new Geometry();\\r\\n\\r\\n\\t\\t\\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\\r\\n\\r\\n\\t\\t\\t\\tvar point = points[ i ];\\r\\n\\t\\t\\t\\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn geometry;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.assign( Path.prototype, {\\r\\n\\r\\n\\t\\tfromPoints: function ( points ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\\r\\n\\t\\t\\tthis.setFromPoints( points );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction ClosedSplineCurve3( points ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\\r\\n\\r\\n\\t\\tCatmullRomCurve3.call( this, points );\\r\\n\\t\\tthis.type = 'catmullrom';\\r\\n\\t\\tthis.closed = true;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction SplineCurve3( points ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\\r\\n\\r\\n\\t\\tCatmullRomCurve3.call( this, points );\\r\\n\\t\\tthis.type = 'catmullrom';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction Spline( points ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\\r\\n\\r\\n\\t\\tCatmullRomCurve3.call( this, points );\\r\\n\\t\\tthis.type = 'catmullrom';\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\\r\\n\\r\\n\\tObject.assign( Spline.prototype, {\\r\\n\\r\\n\\t\\tinitFromArray: function ( /* a */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tgetControlPointsArray: function ( /* optionalTarget */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction AxisHelper( size ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\\r\\n\\t\\treturn new AxesHelper( size );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction BoundingBoxHelper( object, color ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\\r\\n\\t\\treturn new BoxHelper( object, color );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction EdgesHelper( object, hex ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\\r\\n\\t\\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tGridHelper.prototype.setColors = function () {\\r\\n\\r\\n\\t\\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tSkeletonHelper.prototype.update = function () {\\r\\n\\r\\n\\t\\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tfunction WireframeHelper( object, hex ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\\r\\n\\t\\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.assign( Loader.prototype, {\\r\\n\\r\\n\\t\\textractUrlBase: function ( url ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\\r\\n\\t\\t\\treturn LoaderUtils.extractUrlBase( url );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tfunction XHRLoader( manager ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\\r\\n\\t\\treturn new FileLoader( manager );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction BinaryTextureLoader( manager ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\\r\\n\\t\\treturn new DataTextureLoader( manager );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.assign( Box2.prototype, {\\r\\n\\r\\n\\t\\tcenter: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\\r\\n\\t\\t\\treturn this.getCenter( optionalTarget );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tempty: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\\r\\n\\t\\t\\treturn this.isEmpty();\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tisIntersectionBox: function ( box ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\\r\\n\\t\\t\\treturn this.intersectsBox( box );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsize: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\\r\\n\\t\\t\\treturn this.getSize( optionalTarget );\\r\\n\\r\\n\\t\\t}\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Box3.prototype, {\\r\\n\\r\\n\\t\\tcenter: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\\r\\n\\t\\t\\treturn this.getCenter( optionalTarget );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tempty: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\\r\\n\\t\\t\\treturn this.isEmpty();\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tisIntersectionBox: function ( box ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\\r\\n\\t\\t\\treturn this.intersectsBox( box );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tisIntersectionSphere: function ( sphere ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\\r\\n\\t\\t\\treturn this.intersectsSphere( sphere );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsize: function ( optionalTarget ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\\r\\n\\t\\t\\treturn this.getSize( optionalTarget );\\r\\n\\r\\n\\t\\t}\\r\\n\\t} );\\r\\n\\r\\n\\tLine3.prototype.center = function ( optionalTarget ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\\r\\n\\t\\treturn this.getCenter( optionalTarget );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tObject.assign( _Math, {\\r\\n\\r\\n\\t\\trandom16: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\\r\\n\\t\\t\\treturn Math.random();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnearestPowerOfTwo: function ( value ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\\r\\n\\t\\t\\treturn _Math.floorPowerOfTwo( value );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tnextPowerOfTwo: function ( value ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\\r\\n\\t\\t\\treturn _Math.ceilPowerOfTwo( value );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Matrix3.prototype, {\\r\\n\\r\\n\\t\\tflattenToArrayOffset: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( \\\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\\\" );\\r\\n\\t\\t\\treturn this.toArray( array, offset );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tmultiplyVector3: function ( vector ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\\r\\n\\t\\t\\treturn vector.applyMatrix3( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tmultiplyVector3Array: function ( /* a */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\\r\\n\\t\\t\\treturn this.applyToBufferAttribute( buffer );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tapplyToVector3Array: function ( /* array, offset, length */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Matrix4.prototype, {\\r\\n\\r\\n\\t\\textractPosition: function ( m ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\\r\\n\\t\\t\\treturn this.copyPosition( m );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tflattenToArrayOffset: function ( array, offset ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( \\\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\\\" );\\r\\n\\t\\t\\treturn this.toArray( array, offset );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tgetPosition: function () {\\r\\n\\r\\n\\t\\t\\tvar v1;\\r\\n\\r\\n\\t\\t\\treturn function getPosition() {\\r\\n\\r\\n\\t\\t\\t\\tif ( v1 === undefined ) v1 = new Vector3();\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\\r\\n\\t\\t\\t\\treturn v1.setFromMatrixColumn( this, 3 );\\r\\n\\r\\n\\t\\t\\t};\\r\\n\\r\\n\\t\\t}(),\\r\\n\\t\\tsetRotationFromQuaternion: function ( q ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\\r\\n\\t\\t\\treturn this.makeRotationFromQuaternion( q );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tmultiplyToArray: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tmultiplyVector3: function ( vector ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\\r\\n\\t\\t\\treturn vector.applyMatrix4( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tmultiplyVector4: function ( vector ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\\r\\n\\t\\t\\treturn vector.applyMatrix4( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tmultiplyVector3Array: function ( /* a */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\trotateAxis: function ( v ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\\r\\n\\t\\t\\tv.transformDirection( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tcrossVector: function ( vector ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\\r\\n\\t\\t\\treturn vector.applyMatrix4( this );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\ttranslate: function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\trotateX: function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\trotateY: function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\trotateZ: function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\trotateByAxis: function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\\r\\n\\t\\t\\treturn this.applyToBufferAttribute( buffer );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tapplyToVector3Array: function ( /* array, offset, length */ ) {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\\r\\n\\t\\t\\treturn this.makePerspective( left, right, top, bottom, near, far );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tPlane.prototype.isIntersectionLine = function ( line ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\\r\\n\\t\\treturn this.intersectsLine( line );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\\r\\n\\t\\treturn vector.applyQuaternion( this );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tObject.assign( Ray.prototype, {\\r\\n\\r\\n\\t\\tisIntersectionBox: function ( box ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\\r\\n\\t\\t\\treturn this.intersectsBox( box );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tisIntersectionPlane: function ( plane ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\\r\\n\\t\\t\\treturn this.intersectsPlane( plane );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tisIntersectionSphere: function ( sphere ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\\r\\n\\t\\t\\treturn this.intersectsSphere( sphere );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Shape.prototype, {\\r\\n\\r\\n\\t\\textractAllPoints: function ( divisions ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\\r\\n\\t\\t\\treturn this.extractPoints( divisions );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\textrude: function ( options ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\\r\\n\\t\\t\\treturn new ExtrudeGeometry( this, options );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tmakeGeometry: function ( options ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\\r\\n\\t\\t\\treturn new ShapeGeometry( this, options );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Vector2.prototype, {\\r\\n\\r\\n\\t\\tfromAttribute: function ( attribute, index, offset ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\\r\\n\\t\\t\\treturn this.fromBufferAttribute( attribute, index, offset );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tdistanceToManhattan: function ( v ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\\r\\n\\t\\t\\treturn this.manhattanDistanceTo( v );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tlengthManhattan: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\\r\\n\\t\\t\\treturn this.manhattanLength();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Vector3.prototype, {\\r\\n\\r\\n\\t\\tsetEulerFromRotationMatrix: function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsetEulerFromQuaternion: function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tgetPositionFromMatrix: function ( m ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\\r\\n\\t\\t\\treturn this.setFromMatrixPosition( m );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tgetScaleFromMatrix: function ( m ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\\r\\n\\t\\t\\treturn this.setFromMatrixScale( m );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tgetColumnFromMatrix: function ( index, matrix ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\\r\\n\\t\\t\\treturn this.setFromMatrixColumn( matrix, index );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tapplyProjection: function ( m ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\\r\\n\\t\\t\\treturn this.applyMatrix4( m );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tfromAttribute: function ( attribute, index, offset ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\\r\\n\\t\\t\\treturn this.fromBufferAttribute( attribute, index, offset );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tdistanceToManhattan: function ( v ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\\r\\n\\t\\t\\treturn this.manhattanDistanceTo( v );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tlengthManhattan: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\\r\\n\\t\\t\\treturn this.manhattanLength();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( Vector4.prototype, {\\r\\n\\r\\n\\t\\tfromAttribute: function ( attribute, index, offset ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\\r\\n\\t\\t\\treturn this.fromBufferAttribute( attribute, index, offset );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tlengthManhattan: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\\r\\n\\t\\t\\treturn this.manhattanLength();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tGeometry.prototype.computeTangents = function () {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tObject.assign( Object3D.prototype, {\\r\\n\\r\\n\\t\\tgetChildByName: function ( name ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\\r\\n\\t\\t\\treturn this.getObjectByName( name );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\trenderDepth: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\ttranslate: function ( distance, axis ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\\r\\n\\t\\t\\treturn this.translateOnAxis( axis, distance );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperties( Object3D.prototype, {\\r\\n\\r\\n\\t\\teulerOrder: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\\r\\n\\t\\t\\t\\treturn this.rotation.order;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\\r\\n\\t\\t\\t\\tthis.rotation.order = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tuseQuaternion: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperties( LOD.prototype, {\\r\\n\\r\\n\\t\\tobjects: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\\r\\n\\t\\t\\t\\treturn this.levels;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\\r\\n\\r\\n\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tset: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\\r\\n\\r\\n\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\\r\\n\\t\\t\\treturn this.arcLengthDivisions;\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\\r\\n\\t\\t\\tthis.arcLengthDivisions = value;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\\r\\n\\r\\n\\t\\tconsole.warn( \\\"THREE.PerspectiveCamera.setLens is deprecated. \\\" +\\r\\n\\t\\t\\t\\t\\\"Use .setFocalLength and .filmGauge for a photographic setup.\\\" );\\r\\n\\r\\n\\t\\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\\r\\n\\t\\tthis.setFocalLength( focalLength );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.defineProperties( Light.prototype, {\\r\\n\\t\\tonlyShadow: {\\r\\n\\t\\t\\tset: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowCameraFov: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\\r\\n\\t\\t\\t\\tthis.shadow.camera.fov = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowCameraLeft: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\\r\\n\\t\\t\\t\\tthis.shadow.camera.left = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowCameraRight: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\\r\\n\\t\\t\\t\\tthis.shadow.camera.right = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowCameraTop: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\\r\\n\\t\\t\\t\\tthis.shadow.camera.top = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowCameraBottom: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\\r\\n\\t\\t\\t\\tthis.shadow.camera.bottom = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowCameraNear: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\\r\\n\\t\\t\\t\\tthis.shadow.camera.near = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowCameraFar: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\\r\\n\\t\\t\\t\\tthis.shadow.camera.far = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowCameraVisible: {\\r\\n\\t\\t\\tset: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowBias: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\\r\\n\\t\\t\\t\\tthis.shadow.bias = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowDarkness: {\\r\\n\\t\\t\\tset: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowMapWidth: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\\r\\n\\t\\t\\t\\tthis.shadow.mapSize.width = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowMapHeight: {\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\\r\\n\\t\\t\\t\\tthis.shadow.mapSize.height = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.defineProperties( BufferAttribute.prototype, {\\r\\n\\r\\n\\t\\tlength: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\\r\\n\\t\\t\\t\\treturn this.array.length;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.assign( BufferGeometry.prototype, {\\r\\n\\r\\n\\t\\taddIndex: function ( index ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\\r\\n\\t\\t\\tthis.setIndex( index );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\taddDrawCall: function ( start, count, indexOffset ) {\\r\\n\\r\\n\\t\\t\\tif ( indexOffset !== undefined ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\\r\\n\\t\\t\\tthis.addGroup( start, count );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tclearDrawCalls: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\\r\\n\\t\\t\\tthis.clearGroups();\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tcomputeTangents: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tcomputeOffsets: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperties( BufferGeometry.prototype, {\\r\\n\\r\\n\\t\\tdrawcalls: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\\r\\n\\t\\t\\t\\treturn this.groups;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\toffsets: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\\r\\n\\t\\t\\t\\treturn this.groups;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.defineProperties( Uniform.prototype, {\\r\\n\\r\\n\\t\\tdynamic: {\\r\\n\\t\\t\\tset: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tonUpdate: {\\r\\n\\t\\t\\tvalue: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\\r\\n\\t\\t\\t\\treturn this;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.defineProperties( Material.prototype, {\\r\\n\\r\\n\\t\\twrapAround: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\twrapRGB: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\\r\\n\\t\\t\\t\\treturn new Color();\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tshading: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\\r\\n\\t\\t\\t\\tthis.flatShading = ( value === FlatShading );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperties( MeshPhongMaterial.prototype, {\\r\\n\\r\\n\\t\\tmetal: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperties( ShaderMaterial.prototype, {\\r\\n\\r\\n\\t\\tderivatives: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\\r\\n\\t\\t\\t\\treturn this.extensions.derivatives;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\\r\\n\\t\\t\\t\\tthis.extensions.derivatives = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.assign( WebGLRenderer.prototype, {\\r\\n\\r\\n\\t\\tgetCurrentRenderTarget: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\\r\\n\\t\\t\\treturn this.getRenderTarget();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetMaxAnisotropy: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\\r\\n\\t\\t\\treturn this.capabilities.getMaxAnisotropy();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tgetPrecision: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\\r\\n\\t\\t\\treturn this.capabilities.precision;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tresetGLState: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\\r\\n\\t\\t\\treturn this.state.reset();\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tsupportsFloatTextures: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\\\'OES_texture_float\\\\' ).' );\\r\\n\\t\\t\\treturn this.extensions.get( 'OES_texture_float' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsupportsHalfFloatTextures: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\\\'OES_texture_half_float\\\\' ).' );\\r\\n\\t\\t\\treturn this.extensions.get( 'OES_texture_half_float' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsupportsStandardDerivatives: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\\\'OES_standard_derivatives\\\\' ).' );\\r\\n\\t\\t\\treturn this.extensions.get( 'OES_standard_derivatives' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsupportsCompressedTextureS3TC: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\\\'WEBGL_compressed_texture_s3tc\\\\' ).' );\\r\\n\\t\\t\\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsupportsCompressedTexturePVRTC: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\\\'WEBGL_compressed_texture_pvrtc\\\\' ).' );\\r\\n\\t\\t\\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsupportsBlendMinMax: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\\\'EXT_blend_minmax\\\\' ).' );\\r\\n\\t\\t\\treturn this.extensions.get( 'EXT_blend_minmax' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsupportsVertexTextures: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\\r\\n\\t\\t\\treturn this.capabilities.vertexTextures;\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tsupportsInstancedArrays: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\\\'ANGLE_instanced_arrays\\\\' ).' );\\r\\n\\t\\t\\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tenableScissorTest: function ( boolean ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\\r\\n\\t\\t\\tthis.setScissorTest( boolean );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tinitMaterial: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\taddPrePlugin: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\taddPostPlugin: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\t\\tupdateShadowMap: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperties( WebGLRenderer.prototype, {\\r\\n\\r\\n\\t\\tshadowMapEnabled: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this.shadowMap.enabled;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\\r\\n\\t\\t\\t\\tthis.shadowMap.enabled = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowMapType: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this.shadowMap.type;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\\r\\n\\t\\t\\t\\tthis.shadowMap.type = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tshadowMapCullFace: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this.shadowMap.cullFace;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\\r\\n\\t\\t\\t\\tthis.shadowMap.cullFace = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperties( WebGLShadowMap.prototype, {\\r\\n\\r\\n\\t\\tcullFace: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\treturn this.renderReverseSided ? CullFaceFront : CullFaceBack;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( cullFace ) {\\r\\n\\r\\n\\t\\t\\t\\tvar value = ( cullFace !== CullFaceBack );\\r\\n\\t\\t\\t\\tconsole.warn( \\\"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \\\" + value + \\\".\\\" );\\r\\n\\t\\t\\t\\tthis.renderReverseSided = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.defineProperties( WebGLRenderTarget.prototype, {\\r\\n\\r\\n\\t\\twrapS: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\\r\\n\\t\\t\\t\\treturn this.texture.wrapS;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\\r\\n\\t\\t\\t\\tthis.texture.wrapS = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\twrapT: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\\r\\n\\t\\t\\t\\treturn this.texture.wrapT;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\\r\\n\\t\\t\\t\\tthis.texture.wrapT = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tmagFilter: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\\r\\n\\t\\t\\t\\treturn this.texture.magFilter;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\\r\\n\\t\\t\\t\\tthis.texture.magFilter = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tminFilter: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\\r\\n\\t\\t\\t\\treturn this.texture.minFilter;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\\r\\n\\t\\t\\t\\tthis.texture.minFilter = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tanisotropy: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\\r\\n\\t\\t\\t\\treturn this.texture.anisotropy;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\\r\\n\\t\\t\\t\\tthis.texture.anisotropy = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\toffset: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\\r\\n\\t\\t\\t\\treturn this.texture.offset;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\\r\\n\\t\\t\\t\\tthis.texture.offset = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\trepeat: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\\r\\n\\t\\t\\t\\treturn this.texture.repeat;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\\r\\n\\t\\t\\t\\tthis.texture.repeat = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tformat: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\\r\\n\\t\\t\\t\\treturn this.texture.format;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\\r\\n\\t\\t\\t\\tthis.texture.format = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\ttype: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\\r\\n\\t\\t\\t\\treturn this.texture.type;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\\r\\n\\t\\t\\t\\tthis.texture.type = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tgenerateMipmaps: {\\r\\n\\t\\t\\tget: function () {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\\r\\n\\t\\t\\t\\treturn this.texture.generateMipmaps;\\r\\n\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tset: function ( value ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\\r\\n\\t\\t\\t\\tthis.texture.generateMipmaps = value;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tObject.assign( WebVRManager.prototype, {\\r\\n\\r\\n\\t\\tgetStandingMatrix: function () {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.WebVRManager: .getStandingMatrix() has been removed.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\tObject.defineProperties( WebVRManager.prototype, {\\r\\n\\r\\n\\t\\tstanding: {\\r\\n\\t\\t\\tset: function ( /* value */ ) {\\r\\n\\r\\n\\t\\t\\t\\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} );\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tAudio.prototype.load = function ( file ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\\r\\n\\t\\tvar scope = this;\\r\\n\\t\\tvar audioLoader = new AudioLoader();\\r\\n\\t\\taudioLoader.load( file, function ( buffer ) {\\r\\n\\r\\n\\t\\t\\tscope.setBuffer( buffer );\\r\\n\\r\\n\\t\\t} );\\r\\n\\t\\treturn this;\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tAudioAnalyser.prototype.getData = function () {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\\r\\n\\t\\treturn this.getFrequencyData();\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\\r\\n\\r\\n\\t\\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\\r\\n\\t\\treturn this.update( renderer, scene );\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tvar GeometryUtils = {\\r\\n\\r\\n\\t\\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\\r\\n\\t\\t\\tvar matrix;\\r\\n\\r\\n\\t\\t\\tif ( geometry2.isMesh ) {\\r\\n\\r\\n\\t\\t\\t\\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\\r\\n\\r\\n\\t\\t\\t\\tmatrix = geometry2.matrix;\\r\\n\\t\\t\\t\\tgeometry2 = geometry2.geometry;\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tcenter: function ( geometry ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\\r\\n\\t\\t\\treturn geometry.center();\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\tvar ImageUtils = {\\r\\n\\r\\n\\t\\tcrossOrigin: undefined,\\r\\n\\r\\n\\t\\tloadTexture: function ( url, mapping, onLoad, onError ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\\r\\n\\r\\n\\t\\t\\tvar loader = new TextureLoader();\\r\\n\\t\\t\\tloader.setCrossOrigin( this.crossOrigin );\\r\\n\\r\\n\\t\\t\\tvar texture = loader.load( url, onLoad, undefined, onError );\\r\\n\\r\\n\\t\\t\\tif ( mapping ) texture.mapping = mapping;\\r\\n\\r\\n\\t\\t\\treturn texture;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\\r\\n\\r\\n\\t\\t\\tvar loader = new CubeTextureLoader();\\r\\n\\t\\t\\tloader.setCrossOrigin( this.crossOrigin );\\r\\n\\r\\n\\t\\t\\tvar texture = loader.load( urls, onLoad, undefined, onError );\\r\\n\\r\\n\\t\\t\\tif ( mapping ) texture.mapping = mapping;\\r\\n\\r\\n\\t\\t\\treturn texture;\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tloadCompressedTexture: function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\\r\\n\\r\\n\\t\\t},\\r\\n\\r\\n\\t\\tloadCompressedTextureCube: function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t};\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction Projector() {\\r\\n\\r\\n\\t\\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\\r\\n\\r\\n\\t\\tthis.projectVector = function ( vector, camera ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\\r\\n\\t\\t\\tvector.project( camera );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.unprojectVector = function ( vector, camera ) {\\r\\n\\r\\n\\t\\t\\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\\r\\n\\t\\t\\tvector.unproject( camera );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tthis.pickingRay = function () {\\r\\n\\r\\n\\t\\t\\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\\r\\n\\r\\n\\t\\t};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t//\\r\\n\\r\\n\\tfunction CanvasRenderer() {\\r\\n\\r\\n\\t\\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\\r\\n\\r\\n\\t\\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\\r\\n\\t\\tthis.clear = function () {};\\r\\n\\t\\tthis.render = function () {};\\r\\n\\t\\tthis.setClearColor = function () {};\\r\\n\\t\\tthis.setSize = function () {};\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\\r\\n\\texports.WebGLRenderTarget = WebGLRenderTarget;\\r\\n\\texports.WebGLRenderer = WebGLRenderer;\\r\\n\\texports.ShaderLib = ShaderLib;\\r\\n\\texports.UniformsLib = UniformsLib;\\r\\n\\texports.UniformsUtils = UniformsUtils;\\r\\n\\texports.ShaderChunk = ShaderChunk;\\r\\n\\texports.FogExp2 = FogExp2;\\r\\n\\texports.Fog = Fog;\\r\\n\\texports.Scene = Scene;\\r\\n\\texports.LensFlare = LensFlare;\\r\\n\\texports.Sprite = Sprite;\\r\\n\\texports.LOD = LOD;\\r\\n\\texports.SkinnedMesh = SkinnedMesh;\\r\\n\\texports.Skeleton = Skeleton;\\r\\n\\texports.Bone = Bone;\\r\\n\\texports.Mesh = Mesh;\\r\\n\\texports.LineSegments = LineSegments;\\r\\n\\texports.LineLoop = LineLoop;\\r\\n\\texports.Line = Line;\\r\\n\\texports.Points = Points;\\r\\n\\texports.Group = Group;\\r\\n\\texports.VideoTexture = VideoTexture;\\r\\n\\texports.DataTexture = DataTexture;\\r\\n\\texports.CompressedTexture = CompressedTexture;\\r\\n\\texports.CubeTexture = CubeTexture;\\r\\n\\texports.CanvasTexture = CanvasTexture;\\r\\n\\texports.DepthTexture = DepthTexture;\\r\\n\\texports.Texture = Texture;\\r\\n\\texports.CompressedTextureLoader = CompressedTextureLoader;\\r\\n\\texports.DataTextureLoader = DataTextureLoader;\\r\\n\\texports.CubeTextureLoader = CubeTextureLoader;\\r\\n\\texports.TextureLoader = TextureLoader;\\r\\n\\texports.ObjectLoader = ObjectLoader;\\r\\n\\texports.MaterialLoader = MaterialLoader;\\r\\n\\texports.BufferGeometryLoader = BufferGeometryLoader;\\r\\n\\texports.DefaultLoadingManager = DefaultLoadingManager;\\r\\n\\texports.LoadingManager = LoadingManager;\\r\\n\\texports.JSONLoader = JSONLoader;\\r\\n\\texports.ImageLoader = ImageLoader;\\r\\n\\texports.ImageBitmapLoader = ImageBitmapLoader;\\r\\n\\texports.FontLoader = FontLoader;\\r\\n\\texports.FileLoader = FileLoader;\\r\\n\\texports.Loader = Loader;\\r\\n\\texports.LoaderUtils = LoaderUtils;\\r\\n\\texports.Cache = Cache;\\r\\n\\texports.AudioLoader = AudioLoader;\\r\\n\\texports.SpotLightShadow = SpotLightShadow;\\r\\n\\texports.SpotLight = SpotLight;\\r\\n\\texports.PointLight = PointLight;\\r\\n\\texports.RectAreaLight = RectAreaLight;\\r\\n\\texports.HemisphereLight = HemisphereLight;\\r\\n\\texports.DirectionalLightShadow = DirectionalLightShadow;\\r\\n\\texports.DirectionalLight = DirectionalLight;\\r\\n\\texports.AmbientLight = AmbientLight;\\r\\n\\texports.LightShadow = LightShadow;\\r\\n\\texports.Light = Light;\\r\\n\\texports.StereoCamera = StereoCamera;\\r\\n\\texports.PerspectiveCamera = PerspectiveCamera;\\r\\n\\texports.OrthographicCamera = OrthographicCamera;\\r\\n\\texports.CubeCamera = CubeCamera;\\r\\n\\texports.ArrayCamera = ArrayCamera;\\r\\n\\texports.Camera = Camera;\\r\\n\\texports.AudioListener = AudioListener;\\r\\n\\texports.PositionalAudio = PositionalAudio;\\r\\n\\texports.AudioContext = AudioContext;\\r\\n\\texports.AudioAnalyser = AudioAnalyser;\\r\\n\\texports.Audio = Audio;\\r\\n\\texports.VectorKeyframeTrack = VectorKeyframeTrack;\\r\\n\\texports.StringKeyframeTrack = StringKeyframeTrack;\\r\\n\\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\\r\\n\\texports.NumberKeyframeTrack = NumberKeyframeTrack;\\r\\n\\texports.ColorKeyframeTrack = ColorKeyframeTrack;\\r\\n\\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\\r\\n\\texports.PropertyMixer = PropertyMixer;\\r\\n\\texports.PropertyBinding = PropertyBinding;\\r\\n\\texports.KeyframeTrack = KeyframeTrack;\\r\\n\\texports.AnimationUtils = AnimationUtils;\\r\\n\\texports.AnimationObjectGroup = AnimationObjectGroup;\\r\\n\\texports.AnimationMixer = AnimationMixer;\\r\\n\\texports.AnimationClip = AnimationClip;\\r\\n\\texports.Uniform = Uniform;\\r\\n\\texports.InstancedBufferGeometry = InstancedBufferGeometry;\\r\\n\\texports.BufferGeometry = BufferGeometry;\\r\\n\\texports.Geometry = Geometry;\\r\\n\\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\\r\\n\\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\\r\\n\\texports.InterleavedBuffer = InterleavedBuffer;\\r\\n\\texports.InstancedBufferAttribute = InstancedBufferAttribute;\\r\\n\\texports.Face3 = Face3;\\r\\n\\texports.Object3D = Object3D;\\r\\n\\texports.Raycaster = Raycaster;\\r\\n\\texports.Layers = Layers;\\r\\n\\texports.EventDispatcher = EventDispatcher;\\r\\n\\texports.Clock = Clock;\\r\\n\\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\\r\\n\\texports.LinearInterpolant = LinearInterpolant;\\r\\n\\texports.DiscreteInterpolant = DiscreteInterpolant;\\r\\n\\texports.CubicInterpolant = CubicInterpolant;\\r\\n\\texports.Interpolant = Interpolant;\\r\\n\\texports.Triangle = Triangle;\\r\\n\\texports.Math = _Math;\\r\\n\\texports.Spherical = Spherical;\\r\\n\\texports.Cylindrical = Cylindrical;\\r\\n\\texports.Plane = Plane;\\r\\n\\texports.Frustum = Frustum;\\r\\n\\texports.Sphere = Sphere;\\r\\n\\texports.Ray = Ray;\\r\\n\\texports.Matrix4 = Matrix4;\\r\\n\\texports.Matrix3 = Matrix3;\\r\\n\\texports.Box3 = Box3;\\r\\n\\texports.Box2 = Box2;\\r\\n\\texports.Line3 = Line3;\\r\\n\\texports.Euler = Euler;\\r\\n\\texports.Vector4 = Vector4;\\r\\n\\texports.Vector3 = Vector3;\\r\\n\\texports.Vector2 = Vector2;\\r\\n\\texports.Quaternion = Quaternion;\\r\\n\\texports.Color = Color;\\r\\n\\texports.ImmediateRenderObject = ImmediateRenderObject;\\r\\n\\texports.VertexNormalsHelper = VertexNormalsHelper;\\r\\n\\texports.SpotLightHelper = SpotLightHelper;\\r\\n\\texports.SkeletonHelper = SkeletonHelper;\\r\\n\\texports.PointLightHelper = PointLightHelper;\\r\\n\\texports.RectAreaLightHelper = RectAreaLightHelper;\\r\\n\\texports.HemisphereLightHelper = HemisphereLightHelper;\\r\\n\\texports.GridHelper = GridHelper;\\r\\n\\texports.PolarGridHelper = PolarGridHelper;\\r\\n\\texports.FaceNormalsHelper = FaceNormalsHelper;\\r\\n\\texports.DirectionalLightHelper = DirectionalLightHelper;\\r\\n\\texports.CameraHelper = CameraHelper;\\r\\n\\texports.BoxHelper = BoxHelper;\\r\\n\\texports.Box3Helper = Box3Helper;\\r\\n\\texports.PlaneHelper = PlaneHelper;\\r\\n\\texports.ArrowHelper = ArrowHelper;\\r\\n\\texports.AxesHelper = AxesHelper;\\r\\n\\texports.Shape = Shape;\\r\\n\\texports.Path = Path;\\r\\n\\texports.ShapePath = ShapePath;\\r\\n\\texports.Font = Font;\\r\\n\\texports.CurvePath = CurvePath;\\r\\n\\texports.Curve = Curve;\\r\\n\\texports.ShapeUtils = ShapeUtils;\\r\\n\\texports.SceneUtils = SceneUtils;\\r\\n\\texports.WebGLUtils = WebGLUtils;\\r\\n\\texports.WireframeGeometry = WireframeGeometry;\\r\\n\\texports.ParametricGeometry = ParametricGeometry;\\r\\n\\texports.ParametricBufferGeometry = ParametricBufferGeometry;\\r\\n\\texports.TetrahedronGeometry = TetrahedronGeometry;\\r\\n\\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\\r\\n\\texports.OctahedronGeometry = OctahedronGeometry;\\r\\n\\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\\r\\n\\texports.IcosahedronGeometry = IcosahedronGeometry;\\r\\n\\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\\r\\n\\texports.DodecahedronGeometry = DodecahedronGeometry;\\r\\n\\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\\r\\n\\texports.PolyhedronGeometry = PolyhedronGeometry;\\r\\n\\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\\r\\n\\texports.TubeGeometry = TubeGeometry;\\r\\n\\texports.TubeBufferGeometry = TubeBufferGeometry;\\r\\n\\texports.TorusKnotGeometry = TorusKnotGeometry;\\r\\n\\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\\r\\n\\texports.TorusGeometry = TorusGeometry;\\r\\n\\texports.TorusBufferGeometry = TorusBufferGeometry;\\r\\n\\texports.TextGeometry = TextGeometry;\\r\\n\\texports.TextBufferGeometry = TextBufferGeometry;\\r\\n\\texports.SphereGeometry = SphereGeometry;\\r\\n\\texports.SphereBufferGeometry = SphereBufferGeometry;\\r\\n\\texports.RingGeometry = RingGeometry;\\r\\n\\texports.RingBufferGeometry = RingBufferGeometry;\\r\\n\\texports.PlaneGeometry = PlaneGeometry;\\r\\n\\texports.PlaneBufferGeometry = PlaneBufferGeometry;\\r\\n\\texports.LatheGeometry = LatheGeometry;\\r\\n\\texports.LatheBufferGeometry = LatheBufferGeometry;\\r\\n\\texports.ShapeGeometry = ShapeGeometry;\\r\\n\\texports.ShapeBufferGeometry = ShapeBufferGeometry;\\r\\n\\texports.ExtrudeGeometry = ExtrudeGeometry;\\r\\n\\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\\r\\n\\texports.EdgesGeometry = EdgesGeometry;\\r\\n\\texports.ConeGeometry = ConeGeometry;\\r\\n\\texports.ConeBufferGeometry = ConeBufferGeometry;\\r\\n\\texports.CylinderGeometry = CylinderGeometry;\\r\\n\\texports.CylinderBufferGeometry = CylinderBufferGeometry;\\r\\n\\texports.CircleGeometry = CircleGeometry;\\r\\n\\texports.CircleBufferGeometry = CircleBufferGeometry;\\r\\n\\texports.BoxGeometry = BoxGeometry;\\r\\n\\texports.BoxBufferGeometry = BoxBufferGeometry;\\r\\n\\texports.ShadowMaterial = ShadowMaterial;\\r\\n\\texports.SpriteMaterial = SpriteMaterial;\\r\\n\\texports.RawShaderMaterial = RawShaderMaterial;\\r\\n\\texports.ShaderMaterial = ShaderMaterial;\\r\\n\\texports.PointsMaterial = PointsMaterial;\\r\\n\\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\\r\\n\\texports.MeshStandardMaterial = MeshStandardMaterial;\\r\\n\\texports.MeshPhongMaterial = MeshPhongMaterial;\\r\\n\\texports.MeshToonMaterial = MeshToonMaterial;\\r\\n\\texports.MeshNormalMaterial = MeshNormalMaterial;\\r\\n\\texports.MeshLambertMaterial = MeshLambertMaterial;\\r\\n\\texports.MeshDepthMaterial = MeshDepthMaterial;\\r\\n\\texports.MeshDistanceMaterial = MeshDistanceMaterial;\\r\\n\\texports.MeshBasicMaterial = MeshBasicMaterial;\\r\\n\\texports.LineDashedMaterial = LineDashedMaterial;\\r\\n\\texports.LineBasicMaterial = LineBasicMaterial;\\r\\n\\texports.Material = Material;\\r\\n\\texports.Float64BufferAttribute = Float64BufferAttribute;\\r\\n\\texports.Float32BufferAttribute = Float32BufferAttribute;\\r\\n\\texports.Uint32BufferAttribute = Uint32BufferAttribute;\\r\\n\\texports.Int32BufferAttribute = Int32BufferAttribute;\\r\\n\\texports.Uint16BufferAttribute = Uint16BufferAttribute;\\r\\n\\texports.Int16BufferAttribute = Int16BufferAttribute;\\r\\n\\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\\r\\n\\texports.Uint8BufferAttribute = Uint8BufferAttribute;\\r\\n\\texports.Int8BufferAttribute = Int8BufferAttribute;\\r\\n\\texports.BufferAttribute = BufferAttribute;\\r\\n\\texports.ArcCurve = ArcCurve;\\r\\n\\texports.CatmullRomCurve3 = CatmullRomCurve3;\\r\\n\\texports.CubicBezierCurve = CubicBezierCurve;\\r\\n\\texports.CubicBezierCurve3 = CubicBezierCurve3;\\r\\n\\texports.EllipseCurve = EllipseCurve;\\r\\n\\texports.LineCurve = LineCurve;\\r\\n\\texports.LineCurve3 = LineCurve3;\\r\\n\\texports.QuadraticBezierCurve = QuadraticBezierCurve;\\r\\n\\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\\r\\n\\texports.SplineCurve = SplineCurve;\\r\\n\\texports.REVISION = REVISION;\\r\\n\\texports.MOUSE = MOUSE;\\r\\n\\texports.CullFaceNone = CullFaceNone;\\r\\n\\texports.CullFaceBack = CullFaceBack;\\r\\n\\texports.CullFaceFront = CullFaceFront;\\r\\n\\texports.CullFaceFrontBack = CullFaceFrontBack;\\r\\n\\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\\r\\n\\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\\r\\n\\texports.BasicShadowMap = BasicShadowMap;\\r\\n\\texports.PCFShadowMap = PCFShadowMap;\\r\\n\\texports.PCFSoftShadowMap = PCFSoftShadowMap;\\r\\n\\texports.FrontSide = FrontSide;\\r\\n\\texports.BackSide = BackSide;\\r\\n\\texports.DoubleSide = DoubleSide;\\r\\n\\texports.FlatShading = FlatShading;\\r\\n\\texports.SmoothShading = SmoothShading;\\r\\n\\texports.NoColors = NoColors;\\r\\n\\texports.FaceColors = FaceColors;\\r\\n\\texports.VertexColors = VertexColors;\\r\\n\\texports.NoBlending = NoBlending;\\r\\n\\texports.NormalBlending = NormalBlending;\\r\\n\\texports.AdditiveBlending = AdditiveBlending;\\r\\n\\texports.SubtractiveBlending = SubtractiveBlending;\\r\\n\\texports.MultiplyBlending = MultiplyBlending;\\r\\n\\texports.CustomBlending = CustomBlending;\\r\\n\\texports.AddEquation = AddEquation;\\r\\n\\texports.SubtractEquation = SubtractEquation;\\r\\n\\texports.ReverseSubtractEquation = ReverseSubtractEquation;\\r\\n\\texports.MinEquation = MinEquation;\\r\\n\\texports.MaxEquation = MaxEquation;\\r\\n\\texports.ZeroFactor = ZeroFactor;\\r\\n\\texports.OneFactor = OneFactor;\\r\\n\\texports.SrcColorFactor = SrcColorFactor;\\r\\n\\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\\r\\n\\texports.SrcAlphaFactor = SrcAlphaFactor;\\r\\n\\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\\r\\n\\texports.DstAlphaFactor = DstAlphaFactor;\\r\\n\\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\\r\\n\\texports.DstColorFactor = DstColorFactor;\\r\\n\\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\\r\\n\\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\\r\\n\\texports.NeverDepth = NeverDepth;\\r\\n\\texports.AlwaysDepth = AlwaysDepth;\\r\\n\\texports.LessDepth = LessDepth;\\r\\n\\texports.LessEqualDepth = LessEqualDepth;\\r\\n\\texports.EqualDepth = EqualDepth;\\r\\n\\texports.GreaterEqualDepth = GreaterEqualDepth;\\r\\n\\texports.GreaterDepth = GreaterDepth;\\r\\n\\texports.NotEqualDepth = NotEqualDepth;\\r\\n\\texports.MultiplyOperation = MultiplyOperation;\\r\\n\\texports.MixOperation = MixOperation;\\r\\n\\texports.AddOperation = AddOperation;\\r\\n\\texports.NoToneMapping = NoToneMapping;\\r\\n\\texports.LinearToneMapping = LinearToneMapping;\\r\\n\\texports.ReinhardToneMapping = ReinhardToneMapping;\\r\\n\\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\\r\\n\\texports.CineonToneMapping = CineonToneMapping;\\r\\n\\texports.UVMapping = UVMapping;\\r\\n\\texports.CubeReflectionMapping = CubeReflectionMapping;\\r\\n\\texports.CubeRefractionMapping = CubeRefractionMapping;\\r\\n\\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\\r\\n\\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\\r\\n\\texports.SphericalReflectionMapping = SphericalReflectionMapping;\\r\\n\\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\\r\\n\\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\\r\\n\\texports.RepeatWrapping = RepeatWrapping;\\r\\n\\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\\r\\n\\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\\r\\n\\texports.NearestFilter = NearestFilter;\\r\\n\\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\\r\\n\\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\\r\\n\\texports.LinearFilter = LinearFilter;\\r\\n\\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\\r\\n\\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\\r\\n\\texports.UnsignedByteType = UnsignedByteType;\\r\\n\\texports.ByteType = ByteType;\\r\\n\\texports.ShortType = ShortType;\\r\\n\\texports.UnsignedShortType = UnsignedShortType;\\r\\n\\texports.IntType = IntType;\\r\\n\\texports.UnsignedIntType = UnsignedIntType;\\r\\n\\texports.FloatType = FloatType;\\r\\n\\texports.HalfFloatType = HalfFloatType;\\r\\n\\texports.UnsignedShort4444Type = UnsignedShort4444Type;\\r\\n\\texports.UnsignedShort5551Type = UnsignedShort5551Type;\\r\\n\\texports.UnsignedShort565Type = UnsignedShort565Type;\\r\\n\\texports.UnsignedInt248Type = UnsignedInt248Type;\\r\\n\\texports.AlphaFormat = AlphaFormat;\\r\\n\\texports.RGBFormat = RGBFormat;\\r\\n\\texports.RGBAFormat = RGBAFormat;\\r\\n\\texports.LuminanceFormat = LuminanceFormat;\\r\\n\\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\\r\\n\\texports.RGBEFormat = RGBEFormat;\\r\\n\\texports.DepthFormat = DepthFormat;\\r\\n\\texports.DepthStencilFormat = DepthStencilFormat;\\r\\n\\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\\r\\n\\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\\r\\n\\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\\r\\n\\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\\r\\n\\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\\r\\n\\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\\r\\n\\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\\r\\n\\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\\r\\n\\texports.RGB_ETC1_Format = RGB_ETC1_Format;\\r\\n\\texports.LoopOnce = LoopOnce;\\r\\n\\texports.LoopRepeat = LoopRepeat;\\r\\n\\texports.LoopPingPong = LoopPingPong;\\r\\n\\texports.InterpolateDiscrete = InterpolateDiscrete;\\r\\n\\texports.InterpolateLinear = InterpolateLinear;\\r\\n\\texports.InterpolateSmooth = InterpolateSmooth;\\r\\n\\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\\r\\n\\texports.ZeroSlopeEnding = ZeroSlopeEnding;\\r\\n\\texports.WrapAroundEnding = WrapAroundEnding;\\r\\n\\texports.TrianglesDrawMode = TrianglesDrawMode;\\r\\n\\texports.TriangleStripDrawMode = TriangleStripDrawMode;\\r\\n\\texports.TriangleFanDrawMode = TriangleFanDrawMode;\\r\\n\\texports.LinearEncoding = LinearEncoding;\\r\\n\\texports.sRGBEncoding = sRGBEncoding;\\r\\n\\texports.GammaEncoding = GammaEncoding;\\r\\n\\texports.RGBEEncoding = RGBEEncoding;\\r\\n\\texports.LogLuvEncoding = LogLuvEncoding;\\r\\n\\texports.RGBM7Encoding = RGBM7Encoding;\\r\\n\\texports.RGBM16Encoding = RGBM16Encoding;\\r\\n\\texports.RGBDEncoding = RGBDEncoding;\\r\\n\\texports.BasicDepthPacking = BasicDepthPacking;\\r\\n\\texports.RGBADepthPacking = RGBADepthPacking;\\r\\n\\texports.CubeGeometry = BoxGeometry;\\r\\n\\texports.Face4 = Face4;\\r\\n\\texports.LineStrip = LineStrip;\\r\\n\\texports.LinePieces = LinePieces;\\r\\n\\texports.MeshFaceMaterial = MeshFaceMaterial;\\r\\n\\texports.MultiMaterial = MultiMaterial;\\r\\n\\texports.PointCloud = PointCloud;\\r\\n\\texports.Particle = Particle;\\r\\n\\texports.ParticleSystem = ParticleSystem;\\r\\n\\texports.PointCloudMaterial = PointCloudMaterial;\\r\\n\\texports.ParticleBasicMaterial = ParticleBasicMaterial;\\r\\n\\texports.ParticleSystemMaterial = ParticleSystemMaterial;\\r\\n\\texports.Vertex = Vertex;\\r\\n\\texports.DynamicBufferAttribute = DynamicBufferAttribute;\\r\\n\\texports.Int8Attribute = Int8Attribute;\\r\\n\\texports.Uint8Attribute = Uint8Attribute;\\r\\n\\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\\r\\n\\texports.Int16Attribute = Int16Attribute;\\r\\n\\texports.Uint16Attribute = Uint16Attribute;\\r\\n\\texports.Int32Attribute = Int32Attribute;\\r\\n\\texports.Uint32Attribute = Uint32Attribute;\\r\\n\\texports.Float32Attribute = Float32Attribute;\\r\\n\\texports.Float64Attribute = Float64Attribute;\\r\\n\\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\\r\\n\\texports.SplineCurve3 = SplineCurve3;\\r\\n\\texports.Spline = Spline;\\r\\n\\texports.AxisHelper = AxisHelper;\\r\\n\\texports.BoundingBoxHelper = BoundingBoxHelper;\\r\\n\\texports.EdgesHelper = EdgesHelper;\\r\\n\\texports.WireframeHelper = WireframeHelper;\\r\\n\\texports.XHRLoader = XHRLoader;\\r\\n\\texports.BinaryTextureLoader = BinaryTextureLoader;\\r\\n\\texports.GeometryUtils = GeometryUtils;\\r\\n\\texports.ImageUtils = ImageUtils;\\r\\n\\texports.Projector = Projector;\\r\\n\\texports.CanvasRenderer = CanvasRenderer;\\r\\n\\r\\n\\tObject.defineProperty(exports, '__esModule', { value: true });\\r\\n\\r\\n})));\\r\\n\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///931\n")},685:module=>{eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nmodule.exports = function(src) {\n\tfunction log(error) {\n\t\t(typeof console !== "undefined")\n\t\t&& (console.error || console.log)("[Script Loader]", error);\n\t}\n\n\t// Check for IE =< 8\n\tfunction isIE() {\n\t\treturn typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";\n\t}\n\n\ttry {\n\t\tif (typeof execScript !== "undefined" && isIE()) {\n\t\t\texecScript(src);\n\t\t} else if (typeof eval !== "undefined") {\n\t\t\teval.call(null, src);\n\t\t} else {\n\t\t\tlog("EvalError: No eval function available");\n\t\t}\n\t} catch (error) {\n\t\tlog(error);\n\t}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL25vZGVfbW9kdWxlcy9zY3JpcHQtbG9hZGVyL2FkZFNjcmlwdC5qcz9mMmI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EiLCJmaWxlIjoiNjg1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3JjKSB7XG5cdGZ1bmN0aW9uIGxvZyhlcnJvcikge1xuXHRcdCh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIilcblx0XHQmJiAoY29uc29sZS5lcnJvciB8fCBjb25zb2xlLmxvZykoXCJbU2NyaXB0IExvYWRlcl1cIiwgZXJyb3IpO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIElFID08IDhcblx0ZnVuY3Rpb24gaXNJRSgpIHtcblx0XHRyZXR1cm4gdHlwZW9mIGF0dGFjaEV2ZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSBcInVuZGVmaW5lZFwiO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRpZiAodHlwZW9mIGV4ZWNTY3JpcHQgIT09IFwidW5kZWZpbmVkXCIgJiYgaXNJRSgpKSB7XG5cdFx0XHRleGVjU2NyaXB0KHNyYyk7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgZXZhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0ZXZhbC5jYWxsKG51bGwsIHNyYyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxvZyhcIkV2YWxFcnJvcjogTm8gZXZhbCBmdW5jdGlvbiBhdmFpbGFibGVcIik7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGxvZyhlcnJvcik7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///685\n')},782:(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval("__webpack_require__(685)(__webpack_require__(243))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL1V0aWxzLmpzPzdiNWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUJBQU8sQ0FBQyxHQUFnRixFQUFFLG1CQUFPLENBQUMsR0FBeUgiLCJmaWxlIjoiNzgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcIiEhRDpcXFxccHJvamVjdHNcXFxcYXZzXFxcXHRocmVlLWF2cy1kYXNoXFxcXG5vZGVfbW9kdWxlc1xcXFxzY3JpcHQtbG9hZGVyXFxcXGFkZFNjcmlwdC5qc1wiKShyZXF1aXJlKFwiISFEOlxcXFxwcm9qZWN0c1xcXFxhdnNcXFxcdGhyZWUtYXZzLWRhc2hcXFxcbm9kZV9tb2R1bGVzXFxcXHJhdy1sb2FkZXJcXFxcaW5kZXguanMhRDpcXFxccHJvamVjdHNcXFxcYXZzXFxcXHRocmVlLWF2cy1kYXNoXFxcXGpzXFxcXFV0aWxzLmpzXCIpKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///782\n")},643:(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval("__webpack_require__(685)(__webpack_require__(931))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL3ZlbmRvci90aHJlZS5qcz9jOTJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1CQUFPLENBQUMsR0FBZ0YsRUFBRSxtQkFBTyxDQUFDLEdBQTZIIiwiZmlsZSI6IjY0My5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoXCIhIUQ6XFxcXHByb2plY3RzXFxcXGF2c1xcXFx0aHJlZS1hdnMtZGFzaFxcXFxub2RlX21vZHVsZXNcXFxcc2NyaXB0LWxvYWRlclxcXFxhZGRTY3JpcHQuanNcIikocmVxdWlyZShcIiEhRDpcXFxccHJvamVjdHNcXFxcYXZzXFxcXHRocmVlLWF2cy1kYXNoXFxcXG5vZGVfbW9kdWxlc1xcXFxyYXctbG9hZGVyXFxcXGluZGV4LmpzIUQ6XFxcXHByb2plY3RzXFxcXGF2c1xcXFx0aHJlZS1hdnMtZGFzaFxcXFx2ZW5kb3JcXFxcdGhyZWUuanNcIikpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///643\n")},279:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n// EXTERNAL MODULE: ./node_modules/script-loader/index.js!./vendor/three.js\nvar three = __webpack_require__(643);\n// EXTERNAL MODULE: ./node_modules/script-loader/index.js!./js/Utils.js\nvar Utils = __webpack_require__(782);\n;// CONCATENATED MODULE: ./js/GPGPU.js\n/* Partially adapted from https://github.com/turbo/js/blob/master/turbo.js\r\n *\r\n * Turbo.js License:\r\n * Copyright (c) 2016 minxomat\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nconst vertexShaderCode = `#version 300 es\r\nin vec2 position;\r\nin vec2 texture;\r\nout vec2 kernelPosition;\r\n\r\nvoid main(void) {\r\n  kernelPosition = texture;\r\n  gl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n`;\r\n\r\nconst fragmentShaderHeader = `#version 300 es\r\nprecision highp float;\r\nprecision highp int;\r\nprecision highp sampler2D;\r\nprecision highp sampler2DArray;\r\nprecision highp sampler3D;\r\nprecision highp samplerCube;\r\n\r\nin vec2 kernelPosition;\r\nout vec4 kernelOut;\r\nuniform ivec2 kernelSize;\r\n`;\r\n\r\nclass GPGPU {\r\n  static alloc(size, stride) {\r\n    if (!Number.isInteger(stride) || stride < 1 || stride > 4)\r\n      throw new Error(\"Data stride must be an integer between 1 and 4.\");\r\n\r\n    // Find the smallest perfect square greater than or equal to size\r\n    const squareSize = Math.pow(Math.ceil(Math.sqrt(size)), 2);\r\n\r\n    const data = new Float32Array(squareSize * stride);\r\n    data.gpgpuSize = size;\r\n    data.gpgpuStride = stride;\r\n    return data;\r\n  }\r\n\r\n  constructor(configs, shared = {}) {\r\n    this._setUpGL();\r\n\r\n    this.outputTextures = {};\r\n    this.sharedTextures = {};\r\n\r\n    this.programs = configs.map(c => this._prepareProgram(c));\r\n\r\n    for (const name in shared) {\r\n      const options = shared[name];\r\n      const { width, height, channels, data } = options;\r\n      this.sharedTextures[name] = this._createTexture(data, width, height, channels, options);\r\n    }\r\n  }\r\n\r\n  updateSharedTextures(shared) {\r\n    this.sharedTextures = {};\r\n\r\n    for (const name in shared) {\r\n      const options = shared[name];\r\n      const { width, height, channels, data } = options;\r\n      if (this.sharedTextures[name]) this.gl.deleteTexture(this.sharedTextures[name]);\r\n      this.sharedTextures[name] = this._createTexture(data, width, height, channels, options);\r\n    }\r\n  }\r\n\r\n  updateProgram(programOrProgramIndex, config) {\r\n    const program = typeof(programOrProgramIndex) == 'number' ? this.programs[programOrProgramIndex] : programOrProgramIndex;\r\n\r\n    if (!program)\r\n      throw new Error(`Program with index ${programOrProgramIndex} does not exist.`);\r\n\r\n    if (config.inputs)\r\n      throw new Error('The `updateProgram` function cannot be used to update inputs. Use `updateProgramInputs` instead.');\r\n\r\n    if (config.meta)\r\n      program.meta = Object.assign(program.meta, config.meta);\r\n\r\n    if (config.width !== undefined && config.height !== undefined)\r\n      this.updateProgramSize(program, config.width, config.height);\r\n\r\n    if (typeof(config.uniforms) == 'object')\r\n      this.updateProgramUniforms(program, config.uniforms);\r\n  }\r\n\r\n  updateProgramInputs(programIndex, inputs) {\r\n    const program = this.programs[programIndex];\r\n\r\n    if (!program)\r\n      throw new Error(`Program with index ${programIndex} does not exist.`);\r\n\r\n    if (program.inputTextures.length != inputs.length)\r\n      throw new Error(`You must provide the same number of inputs as when the program was set up: got ${inputs.length} but expected ${program.inputTextures.length}.`);\r\n\r\n    const previousInputWidth = program.inputWidth;\r\n    const previousInputHeight = program.inputHeight;\r\n\r\n    const config = program.config;\r\n\r\n    if (config.width === undefined || config.height === undefined) {\r\n      program.inputWidth = undefined;\r\n      program.inputHeight = undefined;\r\n      program.inputDataSize = undefined;\r\n    }\r\n\r\n    this._prepareProgramInputs(program, inputs);\r\n\r\n    if (program.inputWidth != previousInputWidth || program.inputHeight != previousInputHeight) {\r\n      this.gl.useProgram(program.glProgram);\r\n      this.gl.uniform2i(program.kernelSizeLocation, program.inputWidth, program.inputHeight);\r\n      this._prepareProgramOutput(program);\r\n    }\r\n  }\r\n\r\n  updateProgramSize(programOrProgramIndex, width, height) {\r\n    const program = typeof(programOrProgramIndex) == 'number' ? this.programs[programOrProgramIndex] : programOrProgramIndex;\r\n\r\n    if (!program)\r\n      throw new Error(`Program with index ${programOrProgramIndex} does not exist.`);\r\n\r\n    if (program.inputTextures.length != 0)\r\n      throw new Error(`Size can only be updated on programs with no inputs.`);\r\n\r\n    if (width == program.inputWidth && height == program.inputHeight) return;\r\n\r\n    program.inputWidth = width;\r\n    program.inputHeight = height;\r\n    program.inputDataSize = width * height;\r\n\r\n    this.gl.useProgram(program.glProgram);\r\n    this.gl.uniform2i(program.kernelSizeLocation, program.inputWidth, program.inputHeight);\r\n    this._prepareProgramOutput(program);\r\n  }\r\n\r\n  updateProgramUniforms(programOrProgramIndex, uniforms) {\r\n    const program = typeof(programOrProgramIndex) == 'number' ? this.programs[programOrProgramIndex] : programOrProgramIndex;\r\n    this.gl.useProgram(program.glProgram);\r\n\r\n    if (!program)\r\n      throw new Error(`Program with index ${programOrProgramIndex} does not exist.`);\r\n\r\n    for (const uniformName in uniforms) {\r\n      const value = uniforms[uniformName];\r\n      let uniform;\r\n\r\n      if (uniform = program.uniforms[uniformName]) {\r\n        this._setUniform(uniform.type, uniform.location, value)\r\n      } else if (uniform = program.uniformTextures[uniformName]) {\r\n        if (typeof(value) != 'object' || value.type != 'texture')\r\n          throw new Error(`Expected texture type for uniform ${uniformName}.`);\r\n\r\n        const { width, height, channels, data } = uniform;\r\n        if (program.uniformTextures[uniformName].texture) this.gl.deleteTexture(program.uniformTextures[uniformName].texture);\r\n        program.uniformTextures[uniformName].texture = this._createTexture(data, width, height, channels, uniform);\r\n      } else {\r\n        throw new Error(`The uniform ${uniformName} does not exist in this program.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  run() {\r\n    const outputs = [];\r\n\r\n    for (const program of this.programs) {\r\n      this.gl.useProgram(program.glProgram);\r\n      this.gl.viewport(0, 0, program.inputWidth, program.inputHeight);\r\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, program.frameBuffer);\r\n\r\n      for (const [index, inputTexture] of program.inputTextures.entries()) {\r\n        this.gl.activeTexture(this.gl.TEXTURE0 + index);\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, inputTexture);\r\n      }\r\n\r\n      for (const uniformName in program.uniformTextures) {\r\n        const uniformTexture = program.uniformTextures[uniformName];\r\n        this.gl.activeTexture(this.gl.TEXTURE0 + uniformTexture.index);\r\n        this.gl.bindTexture(uniformTexture.target, uniformTexture.texture || this.sharedTextures[uniformTexture.name] || this.outputTextures[uniformTexture.name]);\r\n      }\r\n\r\n      if (typeof(program.draw) == 'function') {\r\n        program.draw(this, program);\r\n      } else {\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.textureBuffer);\r\n        this.gl.enableVertexAttribArray(program.textureLocation);\r\n        this.gl.vertexAttribPointer(program.textureLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\r\n        this.gl.enableVertexAttribArray(program.positionLocation);\r\n        this.gl.vertexAttribPointer(program.positionLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n\r\n        if (program.drawProxy) {\r\n          const draw = (() => this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0)).bind(this);\r\n          program.drawProxy(this, program, draw);\r\n        } else {\r\n          this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\r\n        }\r\n      }\r\n\r\n      if (program.output && program.output.name && !program.output.read) {\r\n        outputs.push(null);\r\n      } else {\r\n        const output = new Float32Array(program.inputWidth * program.inputHeight * 4);\r\n        this.gl.readPixels(0, 0, program.inputWidth, program.inputHeight, this.gl.RGBA, this.gl.FLOAT, output);\r\n        outputs.push(output.subarray(0, program.inputDataSize * 4));\r\n      }\r\n    }\r\n\r\n    return outputs;\r\n  }\r\n\r\n  _setUpGL() {\r\n    let canvas;\r\n\r\n    if (self.document)\r\n      canvas = document.createElement('canvas');\r\n    else if (self.OffscreenCanvas)\r\n      canvas = new OffscreenCanvas(0, 0);\r\n    else\r\n      throw new Error('Could not create a canvas.');\r\n\r\n    const attr = { alpha: false, antialias: false };\r\n    this.gl = canvas.getContext(\"webgl2\", attr) || canvas.getContext(\"experimental-webgl2\", attr);\r\n\r\n    if (!this.gl)\r\n      throw new Error(\"Unable to initialize WebGL2. Your browser may not support it.\");\r\n\r\n    if (!this.gl.getExtension('EXT_color_buffer_float'))\r\n      throw new Error('Required WebGL extension EXT_color_buffer_float not supported.');\r\n\r\n    if (!this.gl.getExtension('OES_texture_float_linear'))\r\n      throw new Error('Required WebGL extension OES_texture_float_linear not supported.');\r\n\r\n    this.positionBuffer = this._newBuffer([-1, -1, 1, -1, 1, 1, -1, 1]);\r\n    this.textureBuffer = this._newBuffer([0, 0, 1, 0, 1, 1, 0, 1]);\r\n    this.indexBuffer = this._newBuffer([1, 2, 0, 3, 0, 2], Uint16Array, this.gl.ELEMENT_ARRAY_BUFFER);\r\n  }\r\n\r\n  _prepareProgram(config) {\r\n    const program = { config };\r\n\r\n    program.draw = config.draw;\r\n    program.drawProxy = config.drawProxy;\r\n    program.meta = Object.assign({}, config.meta);\r\n\r\n    if (config.width && config.height) {\r\n      program.inputWidth = config.width;\r\n      program.inputHeight = config.height;\r\n      program.inputDataSize = config.width * config.height;\r\n    }\r\n\r\n    program.output = config.output;\r\n\r\n    const kernel = config.kernel;\r\n\r\n    if (typeof(kernel) != 'string' || kernel.length == 0)\r\n      throw new Error(\"Kernel code cannot be empty.\");\r\n\r\n    const inputs = config.inputs || [];\r\n    const uniforms = config.uniforms || {};\r\n\r\n    this._prepareProgramInputs(program, inputs);\r\n\r\n    let fragmentShaderConfig = \"\";\r\n    \r\n    for (const index in inputs)\r\n      fragmentShaderConfig += `uniform sampler2D _input${index};\\n`;\r\n\r\n    if (program.inputWidth === undefined || program.inputHeight === undefined)\r\n      throw new Error(\"Unknown kernel size. You must provide either an input or the `width` and `height` parameters in the kernel config.\");\r\n\r\n    program.uniformTextures = {};\r\n    program.uniforms = {};\r\n\r\n    for (const uniformName in uniforms) {\r\n      const uniform = uniforms[uniformName];\r\n\r\n      if (typeof(uniform) == 'number') {\r\n        program.uniforms[uniformName] = {\r\n          type: 'float',\r\n          value: uniform\r\n        };\r\n        fragmentShaderConfig += `uniform float ${uniformName};\\n`;\r\n      } else if (Array.isArray(uniform)) {\r\n        if (uniform.length < 2 || uniform.length > 4)\r\n          throw new Error(`Array uniforms can only have lengths of 2, 3, or 4 elements (corresponding to vec2, vec3, and vec4).`);\r\n\r\n        const type = ['vec2', 'vec3', 'vec4'][uniform.length - 2];\r\n        program.uniforms[uniformName] = {\r\n          type: type,\r\n          value: uniform\r\n        };\r\n        fragmentShaderConfig += `uniform ${type} ${uniformName};\\n`;\r\n      } else {\r\n        const { type, width, height, channels, data, value, length, name } = uniform;\r\n\r\n        if (type == 'texture' || type == 'outputTexture' || type == 'sharedTexture') {\r\n          let target, type;\r\n\r\n          if (uniform.textureType == '3D') {\r\n            target = this.gl.TEXTURE_3D;\r\n            type = 'sampler3D';\r\n          } else if (uniform.textureType == '2DArray') {\r\n            target = this.gl.TEXTURE_2D_ARRAY;\r\n            type = 'sampler2DArray';\r\n          } else {\r\n            target = this.gl.TEXTURE_2D;\r\n            type = 'sampler2D';\r\n          }\r\n\r\n          if (type == 'texture') {\r\n            program.uniformTextures[uniformName] = { target, texture: data ? this._createTexture(data, width, height, channels, uniform) : null };\r\n          } else {\r\n            program.uniformTextures[uniformName] = { target, texture: null, name: name || uniformName };\r\n          }\r\n\r\n          fragmentShaderConfig += `uniform ${type} ${uniformName};\\n`;\r\n        } else {\r\n          program.uniforms[uniformName] = { type, value };\r\n          if (length !== undefined)\r\n            fragmentShaderConfig += `uniform ${type} ${uniformName}[${length}];\\n`;\r\n          else\r\n            fragmentShaderConfig += `uniform ${type} ${uniformName};\\n`;\r\n        }\r\n      }\r\n    }\r\n\r\n    const vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);\r\n    this.gl.shaderSource(vertexShader, config.vertexShader || vertexShaderCode);\r\n    this.gl.compileShader(vertexShader);\r\n\r\n    if (!this.gl.getShaderParameter(vertexShader, this.gl.COMPILE_STATUS)) {\r\n      throw new Error(\r\n        \"Could not build vertex shader (fatal).\\n\" + \"\\n\" +\r\n        \"--- CODE DUMP ---\\n\" + (config.vertexShader || vertexShaderCode) + \"\\n\\n\" +\r\n        \"--- ERROR LOG ---\\n\" + this.gl.getShaderInfoLog(vertexShader)\r\n      );\r\n    }\r\n\r\n    const fragmentShaderMain = `\r\nvoid main() {\r\n  kernelOut = vec4(kernel(${[...Array(inputs.length).keys()].map(i => `texture(_input${i}, kernelPosition)`).join(', ')}));\r\n}\r\n    `;\r\n\r\n    const fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);\r\n    const fragmentShaderSource = fragmentShaderHeader + fragmentShaderConfig + kernel + fragmentShaderMain;\r\n    this.gl.shaderSource(fragmentShader, fragmentShaderSource);\r\n    this.gl.compileShader(fragmentShader);\r\n\r\n    if (!this.gl.getShaderParameter(fragmentShader, this.gl.COMPILE_STATUS)) {\r\n      const source = fragmentShaderSource.split('\\n');\r\n      let dbgMsg = \"ERROR: Could not build shader (fatal).\\n\\n------------------ KERNEL CODE DUMP ------------------\\n\"\r\n\r\n      for (let l = 0; l < source.length; l++)\r\n        dbgMsg += `${l + 1}> ${source[l]}\\n`;\r\n\r\n      dbgMsg += \"\\n--------------------- ERROR  LOG ---------------------\\n\" + this.gl.getShaderInfoLog(fragmentShader);\r\n\r\n      throw new Error(dbgMsg);\r\n    }\r\n\r\n    program.glProgram = this.gl.createProgram();\r\n    this.gl.attachShader(program.glProgram, vertexShader);\r\n    this.gl.attachShader(program.glProgram, fragmentShader);\r\n    this.gl.linkProgram(program.glProgram);\r\n    this.gl.useProgram(program.glProgram);\r\n\r\n    if (!this.gl.getProgramParameter(program.glProgram, this.gl.LINK_STATUS))\r\n      throw new Error('Failed to link GLSL program code.');\r\n\r\n    let textureIndex = 0;\r\n\r\n    for (const input of program.inputTextures) {\r\n      const location = this.gl.getUniformLocation(program.glProgram, `_input${textureIndex}`);\r\n      this.gl.uniform1i(location, textureIndex);\r\n      textureIndex++;\r\n    }\r\n\r\n    for (const uniformName in program.uniformTextures) {\r\n      program.uniformTextures[uniformName].index = textureIndex;\r\n      const location = this.gl.getUniformLocation(program.glProgram, uniformName);\r\n      this.gl.uniform1i(location, textureIndex);\r\n      textureIndex++;\r\n    }\r\n\r\n    for (const uniformName in program.uniforms) {\r\n      const { type, value } = program.uniforms[uniformName];\r\n      const location = program.uniforms[uniformName].location = this.gl.getUniformLocation(program.glProgram, uniformName);\r\n\r\n      if (value !== undefined)\r\n        this._setUniform(type, location, value);\r\n\r\n      delete program.uniforms[uniformName].value;\r\n    }\r\n\r\n    program.kernelSizeLocation = this.gl.getUniformLocation(program.glProgram, 'kernelSize');\r\n    this.gl.uniform2i(program.kernelSizeLocation, program.inputWidth, program.inputHeight);\r\n\r\n    program.positionLocation = this.gl.getAttribLocation(program.glProgram, 'position');\r\n    program.textureLocation = this.gl.getAttribLocation(program.glProgram, 'texture');\r\n\r\n    program.frameBuffer = this.gl.createFramebuffer();\r\n    this._prepareProgramOutput(program);\r\n\r\n    return program;\r\n  }\r\n\r\n  _prepareProgramInputs(program, inputs) {\r\n    if (program.inputTextures)\r\n      program.inputTextures.forEach(t => this.gl.deleteTexture(t));\r\n\r\n    program.inputTextures = [];\r\n\r\n    for (const [index, data] of inputs.entries()) {\r\n      if (data.gpgpuSize === undefined || data.gpgpuStride === undefined)\r\n        throw new Error('GPGPU inputs must be created by the `alloc` function.');\r\n\r\n      const size = Math.sqrt(data.length / data.gpgpuStride);\r\n      if (size <= 0 || size % 1 != 0)\r\n        throw new Error('GPGPU input size is expected to be a perfect square.');\r\n\r\n      if (program.inputWidth === undefined || program.inputHeight === undefined) {\r\n        program.inputWidth = size;\r\n        program.inputHeight = size;\r\n        program.inputDataSize = data.gpgpuSize;\r\n      } else if (size != program.inputWidth || size != program.inputHeight) {\r\n        throw new Error(`All GPGPU inputs must be of the same size. Received ${data.gpgpuSize} (internal ${size * size}) but expected ${program.inputDataSize} (internal ${program.inputWidth * program.inputHeight}).`);\r\n      }\r\n\r\n      program.inputTextures.push(this._createTexture(data, size, size, data.gpgpuStride));\r\n    }\r\n  }\r\n\r\n  _prepareProgramOutput(program) {\r\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, program.frameBuffer);\r\n\r\n    const outputTexture = this._createTexture(null, program.inputWidth, program.inputHeight, 4, program.output);\r\n\r\n    if (program.output && program.output.textureType !== '3D' && program.output.textureType !== '2DArray') {\r\n      this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, outputTexture, 0);\r\n      const frameBufferStatus = (this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER) == this.gl.FRAMEBUFFER_COMPLETE);\r\n      if (!frameBufferStatus)\r\n        throw new Error('Error attaching float texture to framebuffer. Your device is probably incompatible.');\r\n    }\r\n\r\n    if (program.outputTexture !== undefined)\r\n      this.gl.deleteTexture(program.outputTexture);\r\n    program.outputTexture = outputTexture;\r\n\r\n    if (program.output && program.output.name)\r\n      this.outputTextures[program.output.name] = outputTexture;\r\n  }\r\n\r\n  _setUniform(type, location, value) {\r\n    switch (type) {\r\n      case 'int': this.gl.uniform1i(location, value); break;\r\n      case 'float': Array.isArray(value) ? this.gl.uniform1fv(location, value) : this.gl.uniform1f(location, value); break;\r\n      case 'vec2': this.gl.uniform2fv(location, value); break;\r\n      case 'vec3': this.gl.uniform3fv(location, value); break;\r\n      case 'vec4': this.gl.uniform4fv(location, value); break;\r\n      case 'mat3': this.gl.uniformMatrix3fv(location, value); break;\r\n      default: throw new Error(`Unknown uniform type ${type}.`);\r\n    }\r\n  }\r\n\r\n  _newBuffer(data, klass, target) {\r\n    const buf = this.gl.createBuffer();\r\n\r\n    this.gl.bindBuffer((target || this.gl.ARRAY_BUFFER), buf);\r\n    this.gl.bufferData((target || this.gl.ARRAY_BUFFER), new (klass || Float32Array)(data), this.gl.STATIC_DRAW);\r\n\r\n    return buf;\r\n  }\r\n\r\n  _createTexture(data, width, height, channels, options = {}) {\r\n    const texture = this.gl.createTexture();\r\n\r\n    let internalFormat, format;\r\n\r\n    switch (channels) {\r\n      case 1:\r\n        internalFormat = this.gl.R32F;\r\n        format = this.gl.RED;\r\n        break;\r\n      case 2:\r\n        internalFormat = this.gl.RG32F;\r\n        format = this.gl.RG;\r\n        break;\r\n      case 3:\r\n        internalFormat = this.gl.RGB32F;\r\n        format = this.gl.RGB;\r\n        break;\r\n      case 4:\r\n        internalFormat = this.gl.RGBA32F;\r\n        format = this.gl.RGBA;\r\n        break;\r\n      default:\r\n        throw(\"Texture channels must between 1 and 4.\");\r\n    }\r\n\r\n    const target = options.textureType == '3D' ? this.gl.TEXTURE_3D : options.textureType == '2DArray' ? this.gl.TEXTURE_2D_ARRAY : this.gl.TEXTURE_2D;\r\n\r\n    this.gl.bindTexture(target, texture);\r\n    this.gl.texParameteri(target, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\r\n    this.gl.texParameteri(target, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\r\n    this.gl.texParameteri(target, this.gl.TEXTURE_WRAP_R, this.gl.CLAMP_TO_EDGE);\r\n    this.gl.texParameteri(target, this.gl.TEXTURE_MIN_FILTER, options.filter == 'linear' ? this.gl.LINEAR : this.gl.NEAREST);\r\n    this.gl.texParameteri(target, this.gl.TEXTURE_MAG_FILTER, options.filter == 'linear' ? this.gl.LINEAR : this.gl.NEAREST);\r\n\r\n    if (options.textureType == '3D' || options.textureType == '2DArray') {\r\n      this.gl.texImage3D(target, 0, internalFormat, width, height, options.depth, 0, format, this.gl.FLOAT, data);\r\n    } else {\r\n      this.gl.texImage2D(target, 0, internalFormat, width, height, 0, format, this.gl.FLOAT, data);\r\n    }\r\n\r\n    this.gl.bindTexture(target, null);\r\n\r\n    return texture;\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./js/physics/Car.js\nclass Car {\r\n\r\n\tconstructor( x = 0, y = 0, rotation = 0 ) {\r\n\r\n\t\tthis.setPose( x, y, rotation );\r\n\r\n\t\tthis.score = 100;\r\n    \tthis.lastTimeLogger = new Date().getTime();\r\n\r\n\t}\r\n\r\n  static getFrontAxlePosition(pos, rot) {\r\n    return THREE.Vector2.fromAngle(rot).multiplyScalar(Car.WHEEL_BASE).add(pos);\r\n  }\r\n\r\n  static getFakeAxlePosition(pos, rot) {\r\n    return Car.frontToRearAxlePosition(pos, rot);\r\n  }\r\n\r\n  static centerToRearAxlePosition(pos, rot) {\r\n    return THREE.Vector2.fromAngle(rot).multiplyScalar(Car.REAR_AXLE_POS).add(pos);\r\n  }\r\n\r\n  static frontToRearAxlePosition(pos, rot) {\r\n    return THREE.Vector2.fromAngle(rot).multiplyScalar(-Car.WHEEL_BASE).add(pos);\r\n  }\r\n\r\n  get pose() {\r\n    return { pos: this.rearAxlePosition.clone(), rot: this.rotation, velocity: this.velocity, curv: this.curvature, dCurv: this.dCurv, ddCurv: this.ddCurv };\r\n  }\r\n\r\n  get curvature() {\r\n    return Math.tan(this.wheelAngle) / Car.WHEEL_BASE;\r\n  }\r\n\r\n  get rearAxlePosition() {\r\n    const { x, y } = this.position;\r\n    const rot = this.rotation;\r\n    return new THREE.Vector2(x + Math.cos(rot) * Car.REAR_AXLE_POS, y + Math.sin(rot) * Car.REAR_AXLE_POS);\r\n  }\r\n\r\n  get frontAxlePosition() {\r\n    const { x, y } = this.position;\r\n    const rot = this.rotation;\r\n    return new THREE.Vector2(x + Math.cos(rot) * Car.FRONT_AXLE_POS, y + Math.sin(rot) * Car.FRONT_AXLE_POS);\r\n  }\r\n\r\n  setPose(x, y, rotation) {\r\n    // Translate so that x and y become the center of the vehicle (instead of the center of the rear axle)\r\n    x -= Car.REAR_AXLE_POS * Math.cos(rotation);\r\n    y -= Car.REAR_AXLE_POS * Math.sin(rotation);\r\n\r\n    this.position = new THREE.Vector2(x, y);\r\n    this.rotation = Math.wrapAngle(rotation);\r\n    this.velocity = 0;\r\n    this.acceleration = 0;\r\n    this.wheelAngle = 0;\r\n    this.wheelAngularVelocity = 0;\r\n    this.dCurv = 0; // derivative with respect to arc length\r\n    this.ddCurv = 0; // derivative with respect to arc length\r\n  }\r\n\r\n\tstep ( delta ) {\r\n\r\n\t\tconst curvPrev = this.curvature;\r\n\t\tconst dCurvPrev = this.dCurv;\r\n\r\n\t\tconst drag = ( 0.5 * Car.DRAG_COEFF * Car.FRONTAL_AREA * Car.DENSITY_OF_AIR * Math.abs( this.velocity ) + Car.ROLL_RESIST ) * -this.velocity;\r\n\t\tthis.velocity += ( this.acceleration + drag / Car.MASS ) * delta;\r\n\r\n\t\tconst velocitySq = this.velocity * this.velocity;\r\n\t\tconst maxWheelAngle = Math.clamp( Math.atan( Car.MAX_LATERAL_ACCEL * Car.WHEEL_BASE / velocitySq ), 0.07, Car.MAX_WHEEL_ANGLE );\r\n\t\tthis.wheelAngle = Math.clamp( Math.wrapAngle( this.wheelAngle + this.wheelAngularVelocity * delta ), -maxWheelAngle, maxWheelAngle);\r\n\r\n\t\tconst angularVelocity = this.velocity * this.curvature;\r\n\t\tthis.rotation = Math.wrapAngle( this.rotation + angularVelocity * delta );\r\n\r\n\t\tconst dist = this.velocity * delta;\r\n\t\tthis.position = THREE.Vector2.fromAngle( this.rotation ).multiplyScalar( dist ).add( this.position );\r\n\r\n\t\tthis.dCurv = dist > 0.1 ? ( this.curvature - curvPrev ) / dist : 0;\r\n\t\tthis.ddCurv = dist > 0.1 ? ( this.dCurv - dCurvPrev ) / dist : 0;\r\n\r\n\t}\r\n\r\n\tupdate ( controls, delta ) {\r\n\r\n\t\tconst gas = Math.clamp( controls.gas, -1, +1 );\r\n\t\tconst brake = Math.clamp( controls.brake, 0, 1 );\r\n\t\tconst steer = Math.clamp( controls.steer, -1, +1 );\r\n\r\n\t\tif ( brake > 0 ) {\r\n\r\n\t\t\tthis.acceleration = -Math.sign( this.velocity ) * Car.MAX_BRAKE_DECEL * brake;\r\n\t\t\tconst newVelocity = this.velocity + this.acceleration * delta;\r\n\r\n\t\t\t// If applying the braking deceleration at the next step would cause the velocity\r\n\t\t\t// to change directions, then just set the car as stopped.\r\n\t\t\tif ( Math.sign( newVelocity ) != Math.sign( this.velocity ) ) {\r\n\r\n\t\t\t\tthis.velocity = 0;\r\n\t\t\t\tthis.acceleration = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.acceleration = Car.MAX_GAS_ACCEL * gas;\r\n\r\n\t\t}\r\n\r\n\t\tif ( steer != 0 ) {\r\n\r\n\t\t\tthis.wheelAngularVelocity = steer * Car.MAX_STEER_SPEED;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.wheelAngularVelocity = Math.clamp( -this.wheelAngle / Car.MAX_WHEEL_ANGLE * this.velocity * this.velocity * delta, -Car.MAX_STEER_SPEED, Car.MAX_STEER_SPEED );\r\n\r\n\t\t}\r\n\r\n\t\tif ( new Date().getTime() - this.lastTimeLogger > 5000 ) {\r\n\r\n\t\t\tthis.lastTimeLogger = new Date().getTime();\r\n\t\t\tconsole.log( this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nCar.HALF_CAR_LENGTH = 2.5; // meters\r\nCar.HALF_CAR_WIDTH = 1; // meters\r\nCar.HALF_WHEEL_LENGTH = 0.38; // meters\r\nCar.HALF_WHEEL_WIDTH = 0.12; // meters\r\nCar.MAX_WHEEL_ANGLE = 32 / 180 * Math.PI; // radians\r\nCar.MASS = 1600; // kg\r\nCar.DRAG_COEFF = 0.7;\r\nCar.DENSITY_OF_AIR = 1.8580608; // (kg/m^3)\r\nCar.FRONTAL_AREA = 1.85; // m^2\r\nCar.ROLL_RESIST = 0;\r\nCar.MAX_STEER_SPEED = 0.8;//1.2; // Radians per second\r\nCar.MAX_GAS_ACCEL = 3.5; // m / s^2\r\nCar.MAX_BRAKE_DECEL = 6.5; // m / s^2\r\nCar.WHEEL_LATERAL_POS = 0.843; // meters\r\nCar.FRONT_AXLE_POS = 1.6; // meters\r\nCar.REAR_AXLE_POS = -1.43; // meters\r\nCar.WHEEL_BASE = Car.FRONT_AXLE_POS - Car.REAR_AXLE_POS; // meters\r\nCar.MAX_LATERAL_ACCEL = 9.81; // m / s^2\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/CubicPath.js\nconst SIMPSONS_INTERVALS = 8;\r\nconst NEWTON_ITERATIONS = 16;\r\nconst RELAXATION_ITERATIONS = 32;\r\nconst CONVERGENCE_ERROR = 0.01;\r\n\r\nconst jacobian = new THREE.Matrix3();\r\nconst invJacobian = new THREE.Matrix3();\r\n\r\n// Alternate reference implementation: https://github.com/ApolloAuto/apollo/blob/master/modules/planning/math/spiral_curve/cubic_spiral_curve.cc\r\nclass CubicPath {\r\n  constructor(start, end, params = null) {\r\n    this.start = Object.assign({}, start);\r\n    this.end = Object.assign({}, end);\r\n\r\n    if (start.pos) {\r\n      this.start.x = start.pos.x;\r\n      this.start.y = start.pos.y\r\n    }\r\n\r\n    if (end.pos) {\r\n      this.end.x = end.pos.x;\r\n      this.end.y = end.pos.y\r\n    }\r\n\r\n    const diffX = this.end.x - this.start.x;\r\n    const diffY = this.end.y - this.start.y;\r\n    const sinRot = Math.sin(this.start.rot);\r\n    const cosRot = Math.cos(this.start.rot);\r\n\r\n    this.goal = {\r\n      x: cosRot * diffX + sinRot * diffY,\r\n      y: -sinRot * diffX + cosRot * diffY,\r\n      rot: Math.wrapAngle(this.end.rot - this.start.rot),\r\n      curv: this.end.curv\r\n    };\r\n\r\n    if (params)\r\n      this.params = Object.assign({}, params, { p0: this.start.curv, p3: this.end.curv });\r\n    else\r\n      this.guessInitialParams();\r\n\r\n    this.converged = false;\r\n  }\r\n\r\n  guessInitialParams() {\r\n    const originalGoal = this.goal;\r\n    const dStartCurv = this.start.curv / RELAXATION_ITERATIONS;\r\n    const dGoalY = originalGoal.y / RELAXATION_ITERATIONS;\r\n    const dGoalRot = originalGoal.rot / RELAXATION_ITERATIONS;\r\n    const dGoalCurv = originalGoal.curv / RELAXATION_ITERATIONS;\r\n\r\n    this.goal = {\r\n      x: originalGoal.x,\r\n      y: 0,\r\n      rot: 0,\r\n      curv: 0\r\n    };\r\n\r\n    this.params = {\r\n      p0: 0,\r\n      p1: 0,\r\n      p2: 0,\r\n      p3: 0,\r\n      sG: originalGoal.x\r\n    };\r\n\r\n    for (let i = 0; i < RELAXATION_ITERATIONS; i++) {\r\n      this.params.p0 += dStartCurv;\r\n      this.params.p3 += dGoalCurv;\r\n      this.goal.y += dGoalY;\r\n      this.goal.rot += dGoalRot;\r\n      this.goal.curv += dGoalCurv;\r\n\r\n      this.iterate();\r\n    }\r\n\r\n    this.goal = originalGoal;\r\n  }\r\n\r\n  optimize() {\r\n    for (let i = 0; i < NEWTON_ITERATIONS; i++) {\r\n      if (this.iterate()) {\r\n        this.converged = true;\r\n        return true;\r\n      }\r\n    }\r\n\r\n    this.converged = false;\r\n    return false;\r\n  }\r\n\r\n  iterate() {\r\n    const { p0, p1, p2, p3, sG } = this.params;\r\n\r\n    const ds = sG / SIMPSONS_INTERVALS;\r\n    const sG_2 = sG * sG;\r\n    const sG_3 = sG_2 * sG;\r\n\r\n    let dX_p1 = 0;\r\n    let dX_p2 = 0;\r\n    let dX_sG = 0;\r\n    let dY_p1 = 0;\r\n    let dY_p2 = 0;\r\n    let dY_sG = 0;\r\n    let guessX = 0;\r\n    let guessY = 0;\r\n\r\n    let theta, cosTheta, sinTheta, dT_p1, dT_p2, dT_sG;\r\n\r\n    for (let i = 0, s = 0; i <= SIMPSONS_INTERVALS; i++, s += ds) {\r\n      const coeff = i == 0 || i == SIMPSONS_INTERVALS ? 1 : i % 2 == 0 ? 2 : 4;\r\n\r\n      const a = p0;\r\n      const b = (-5.5 * p0 + 9 * p1 - 4.5 * p2 + p3) / sG;\r\n      const c = (9 * p0 - 22.5 * p1 + 18 * p2 - 4.5 * p3) / sG_2;\r\n      const d = (-4.5 * (p0 - 3 * p1 + 3 * p2 - p3)) / sG_3;\r\n\r\n      theta = (((d * s / 4 + c / 3) * s + b / 2) * s + a) * s;\r\n      cosTheta = Math.cos(theta);\r\n      sinTheta = Math.sin(theta);\r\n\r\n      const s_sG = s / sG;\r\n      dT_p1 = ((3.375 * s_sG - 7.5) * s_sG + 4.5) * s_sG * s;\r\n      dT_p2 = ((-3.375 * s_sG + 6) * s_sG - 2.25) * s_sG * s;\r\n      dT_sG = ((3.375 * (p0 - 3 * p1 + 3 * p2 - p3) * s_sG - 3 * (2 * p0 - 5 * p1 + 4 * p2 - p3)) * s_sG + 0.25 * (11 * p0 - 18 * p1 + 9 * p2 - 2 * p3)) * s_sG * s_sG;\r\n\r\n      dX_p1 -= coeff * sinTheta * dT_p1;\r\n      dX_p2 -= coeff * sinTheta * dT_p2;\r\n      dX_sG -= coeff * sinTheta * dT_sG;\r\n\r\n      dY_p1 += coeff * cosTheta * dT_p1;\r\n      dY_p2 += coeff * cosTheta * dT_p2;\r\n      dY_sG += coeff * cosTheta * dT_sG;\r\n\r\n      guessX += coeff * cosTheta;\r\n      guessY += coeff * sinTheta;\r\n    }\r\n\r\n    // After the Simpson's integration loop, `theta`, `cosTheta`, `sinTheta`,\r\n    // `dT_p1`, `dT_p2`, and `dT_sG` hold the appropriate values for `sG`.\r\n\r\n    const hOver3 = sG / SIMPSONS_INTERVALS / 3;\r\n\r\n    const deltaX = this.goal.x - guessX * hOver3;\r\n    const deltaY = this.goal.y - guessY * hOver3;\r\n    const deltaRot = Math.wrapAngle(this.goal.rot - theta);\r\n\r\n    if (Math.abs(deltaX) + Math.abs(deltaY) + Math.abs(deltaRot) < CONVERGENCE_ERROR)\r\n      return true;\r\n\r\n    jacobian.set(\r\n      dX_p1 * hOver3, dX_p2 * hOver3, cosTheta + dX_sG * hOver3,\r\n      dY_p1 * hOver3, dY_p2 * hOver3, sinTheta + dY_sG * hOver3,\r\n      dT_p1, dT_p2, dT_sG\r\n    );\r\n\r\n    const [m11, m21, m31, m12, m22, m32, m13, m23, m33] = invJacobian.getInverse(jacobian).elements;\r\n\r\n    this.params.p1 += m11 * deltaX + m12 * deltaY + m13 * deltaRot;\r\n    this.params.p2 += m21 * deltaX + m22 * deltaY + m23 * deltaRot;\r\n    this.params.sG += m31 * deltaX + m32 * deltaY + m33 * deltaRot;\r\n\r\n    return false;\r\n  }\r\n\r\n  buildPath(num) {\r\n    const { p0, p1, p2, p3, sG } = this.params;\r\n\r\n    const sG_2 = sG * sG;\r\n    const sG_3 = sG_2 * sG;\r\n\r\n    const a = p0;\r\n    const b = (-5.5 * p0 + 9 * p1 - 4.5 * p2 + p3) / sG;\r\n    const c = (9 * p0 - 22.5 * p1 + 18 * p2 - 4.5 * p3) / sG_2;\r\n    const d = (-4.5 * (p0 - 3 * p1 + 3 * p2 - p3)) / sG_3;\r\n\r\n    const path = [{ pos: new THREE.Vector2(this.start.x, this.start.y), rot: this.start.rot, curv: this.start.curv }];\r\n    const ds = sG / (num - 1);\r\n    let s = ds;\r\n    let dx = 0;\r\n    let dy = 0;\r\n    let prevCosRot = Math.cos(path[0].rot);\r\n    let prevSinRot = Math.sin(path[0].rot);\r\n\r\n    for (let i = 1; i < num - 1; i++) {\r\n      const rot = (((d * s / 4 + c / 3) * s + b / 2) * s + a) * s + this.start.rot;\r\n      const curv = ((d * s + c) * s + b) * s + a;\r\n      const cosRot = Math.cos(rot);\r\n      const sinRot = Math.sin(rot);\r\n\r\n      dx = dx * (i - 1) / i + (cosRot + prevCosRot) / (2 * i);\r\n      dy = dy * (i - 1) / i + (sinRot + prevSinRot) / (2 * i);\r\n\r\n      path.push({ pos: new THREE.Vector2(s * dx + this.start.x, s * dy + this.start.y), rot: rot, curv: curv });\r\n\r\n      s += ds;\r\n      prevCosRot = cosRot;\r\n      prevSinRot = sinRot;\r\n    }\r\n\r\n    path.push({ pos: new THREE.Vector2(this.end.x, this.end.y), rot: this.end.rot, curv: this.end.curv });\r\n\r\n    return path;\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/QuinticPath.js\nclass QuinticPath {\r\n  constructor(start, end, params) {\r\n    this.start = Object.assign({}, start);\r\n    this.end = Object.assign({}, end);\r\n\r\n    if (start.pos) {\r\n      this.start.x = start.pos.x;\r\n      this.start.y = start.pos.y\r\n    }\r\n\r\n    if (end.pos) {\r\n      this.end.x = end.pos.x;\r\n      this.end.y = end.pos.y\r\n    }\r\n\r\n    const diffX = this.end.x - this.start.x;\r\n    const diffY = this.end.y - this.start.y;\r\n    const sinRot = Math.sin(this.start.rot);\r\n    const cosRot = Math.cos(this.start.rot);\r\n\r\n    this.goal = {\r\n      x: cosRot * diffX + sinRot * diffY,\r\n      y: -sinRot * diffX + cosRot * diffY,\r\n      rot: Math.wrapAngle(this.end.rot - this.start.rot),\r\n      curv: this.end.curv\r\n    };\r\n\r\n    this.params = Object.assign({}, params, { p0: this.start.curv, p1: this.start.dCurv || 0, p2: this.start.ddCurv || 0, p5: this.end.curv });\r\n  }\r\n\r\n  buildPath(num) {\r\n    const { p0, p1, p2, p3, p4, p5, sG } = this.params;\r\n\r\n    const sG_2 = sG * sG;\r\n    const sG_3 = sG_2 * sG;\r\n\r\n    const a = p0;\r\n    const b = p1;\r\n    const c = p2 / 2.0;\r\n    const d = (-71.875 * p0 + 81.0 * p3 - 10.125 * p4 + p5 - 21.25 * p1 * sG - 2.75 * p2 * sG_2) / sG_3;\r\n    const e = (166.5 * p0 - 202.5 * p3 + 40.5 * p4 - 4.5 * p5 + 45.0 * p1 * sG + 4.5 * p2 * sG_2) / (sG_2 * sG_2);\r\n    const f = (-95.625 * p0 + 121.5 * p3 - 30.375 * p4 + 4.5 * p5 - 24.75 * p1 * sG - 2.25 * p2 * sG_2) / (sG_2 * sG_3);\r\n\r\n    const path = [{ pos: new THREE.Vector2(this.start.x, this.start.y), rot: this.start.rot, curv: this.start.curv }];\r\n    const ds = sG / (num - 1);\r\n    let s = ds;\r\n    let dx = 0;\r\n    let dy = 0;\r\n    let prevCosRot = Math.cos(path[0].rot);\r\n    let prevSinRot = Math.sin(path[0].rot);\r\n\r\n    for (let i = 1; i < num - 1; i++) {\r\n      const rot = (((((f * s / 6.0 + e / 5.0) * s + d / 4.0) * s + c / 3.0) * s + b / 2.0) * s + a) * s + this.start.rot;\r\n      const curv = ((((f * s + e) * s + d) * s + c) * s + b) * s + a;\r\n      const cosRot = Math.cos(rot);\r\n      const sinRot = Math.sin(rot);\r\n\r\n      dx = dx * (i - 1) / i + (cosRot + prevCosRot) / (2 * i);\r\n      dy = dy * (i - 1) / i + (sinRot + prevSinRot) / (2 * i);\r\n\r\n      path.push({ pos: new THREE.Vector2(s * dx + this.start.x, s * dy + this.start.y), rot: rot, curv: curv });\r\n\r\n      s += ds;\r\n      prevCosRot = cosRot;\r\n      prevSinRot = sinRot;\r\n    }\r\n\r\n    path.push({ pos: new THREE.Vector2(this.end.x, this.end.y), rot: this.end.rot, curv: this.end.curv });\r\n\r\n    return path;\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/xyObstacleGrid.js\nconst OBSTACLE_VERTEX_SHADER = `#version 300 es\r\nuniform mat3 xform;\r\nin vec2 position;\r\n\r\nvoid main(void) {\r\n  gl_Position = vec4((xform * vec3(position, 1)).xy, 0, 1);\r\n}\r\n`;\r\n\r\nconst OBSTACLE_KERNEL = `\r\n  vec4 kernel() {\r\n    return vec4(1, 0, 0, 1);\r\n  }\r\n`;\r\n\r\nlet obstacleVertices;\r\nlet obstacleXform;\r\n\r\n// Draw obstacle triangles to XY-space obstacle grid\r\n/* harmony default export */ const xyObstacleGrid = ({\r\n  setUp() {\r\n    return {\r\n      kernel: OBSTACLE_KERNEL,\r\n      vertexShader: OBSTACLE_VERTEX_SHADER,\r\n      output: { name: 'xyObstacleGrid' },\r\n      draw: (gpgpu, program) => {\r\n        const gl = gpgpu.gl;\r\n\r\n        gl.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n        if (obstacleVertices.length > 0) {\r\n          const buf = gl.createBuffer();\r\n\r\n          gl.bindBuffer(gl.ARRAY_BUFFER, buf);\r\n          gl.bufferData(gl.ARRAY_BUFFER, obstacleVertices, gl.STATIC_DRAW);\r\n          gl.enableVertexAttribArray(program.positionLocation);\r\n          gl.vertexAttribPointer(program.positionLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n          const xformLocation = gl.getUniformLocation(program.glProgram, 'xform');\r\n          gl.uniformMatrix3fv(xformLocation, false, obstacleXform.elements);\r\n\r\n          gl.drawArrays(gl.TRIANGLES, 0, obstacleVertices.length / 2);\r\n\r\n          gl.deleteBuffer(buf);\r\n        }\r\n      }\r\n    };\r\n  },\r\n\r\n  update(config, xyWidth, xyHeight, xyCenterPoint, vehicleXform, obstacles) {\r\n    obstacleVertices = new Float32Array(Array.prototype.concat.apply([], obstacles.map(o => o.vertices)));\r\n\r\n    const translate = new THREE.Matrix3();\r\n    translate.set(\r\n      1, 0, -xyCenterPoint.x,\r\n      0, 1, -xyCenterPoint.y,\r\n      0, 0, 1\r\n    );\r\n\r\n    const scale = new THREE.Matrix3();\r\n    scale.set(\r\n      2 / (xyWidth * config.xyGridCellSize), 0, 0,\r\n      0, 2 / (xyHeight * config.xyGridCellSize), 0,\r\n      0, 0, 1\r\n    );\r\n\r\n    obstacleXform = scale.multiply(translate).multiply(vehicleXform);\r\n\r\n    return {\r\n      width: xyWidth,\r\n      height: xyHeight\r\n    }\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/slObstacleGrid.js\nconst SL_OBSTACLE_KERNEL = `\r\n\r\nvec4 kernel() {\r\n  float centerlineWidth = float(textureSize(centerline, 0).x);\r\n\r\n  vec2 sl = (kernelPosition - 0.5) * vec2(kernelSize) * vec2(slGridCellSize) + slCenterPoint;\r\n  float centerlineCoord = sl.x / centerlineStationInterval / centerlineWidth * (centerlineWidth - 1.0) / centerlineWidth + (0.5 / centerlineWidth);\r\n  if (centerlineCoord < 0.0 || centerlineCoord > 1.0) return vec4(0);\r\n\r\n  vec3 centerlineSample = texture(centerline, vec2(centerlineCoord, 0)).xyz;\r\n  float perpindicular = centerlineSample.z + radians(90.0);\r\n  vec2 xy = centerlineSample.xy + sl.yy * vec2(cos(perpindicular), sin(perpindicular));\r\n\r\n  vec2 xyTexCoords = (xy - xyCenterPoint) / vec2(textureSize(xyObstacleGrid, 0)) / vec2(xyGridCellSize) + 0.5;\r\n  return texture(xyObstacleGrid, xyTexCoords);\r\n}\r\n\r\n`;\r\n\r\n// Convert XY-space obstacle grid to SL-space obstacle grid\r\n/* harmony default export */ const slObstacleGrid = ({\r\n  setUp() {\r\n    return {\r\n      kernel: SL_OBSTACLE_KERNEL,\r\n      output: { name: 'slObstacleGrid' },\r\n      uniforms: {\r\n        xyObstacleGrid: { type: 'outputTexture' },\r\n        slGridCellSize: { type: 'float' },\r\n        xyGridCellSize: { type: 'float' },\r\n        slCenterPoint: { type: 'vec2' },\r\n        xyCenterPoint: { type: 'vec2' },\r\n        centerlineStationInterval: { type: 'float' },\r\n        centerline: { type: 'sharedTexture' }\r\n      }\r\n    }\r\n  },\r\n\r\n  update(config, slWidth, slHeight, slCenterPoint, xyCenterPoint) {\r\n    return {\r\n      width: slWidth,\r\n      height: slHeight,\r\n      uniforms: {\r\n        slGridCellSize: config.slGridCellSize,\r\n        xyGridCellSize: config.xyGridCellSize,\r\n        slCenterPoint: [slCenterPoint.x, slCenterPoint.y],\r\n        xyCenterPoint: [xyCenterPoint.x, xyCenterPoint.y],\r\n        centerlineStationInterval: config.centerlineStationInterval\r\n      }\r\n    }\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/slObstacleGridDilation.js\nconst SL_OBSTACLE_DILATION_KERNEL = `\r\n\r\n// TODO: test performance of returning early if non-zero pixel found\r\nvec4 kernel() {\r\n  float val = 0.0;\r\n\r\n  for (int d = 0; d <= collisionDilation; d++) {\r\n    val = max(val, texture(slObstacleGrid, kernelPosition + delta * vec2(d)).r);\r\n    val = max(val, texture(slObstacleGrid, kernelPosition + delta * vec2(-d)).r);\r\n  }\r\n\r\n  for (int d = collisionDilation + 1; d <= collisionDilation + hazardDilation; d++) {\r\n    val = max(val, texture(slObstacleGrid, kernelPosition + delta * vec2(d)).r * 0.5);\r\n    val = max(val, texture(slObstacleGrid, kernelPosition + delta * vec2(-d)).r * 0.5);\r\n  }\r\n\r\n  val = max(val, step(0.1, val) * 0.5);\r\n\r\n  return vec4(val, 0, 0, 1);\r\n}\r\n\r\n`;\r\n\r\n/* harmony default export */ const slObstacleGridDilation = ({\r\n  setUp() {\r\n    return [\r\n      { // SL-space obstacle grid S dilation\r\n        kernel: SL_OBSTACLE_DILATION_KERNEL,\r\n        output: { name: 'slObstacleGridStationDilated' },\r\n        uniforms: {\r\n          slObstacleGrid: { type: 'outputTexture' },\r\n          delta: { type: 'vec2' },\r\n          collisionDilation: { type: 'int' },\r\n          hazardDilation: { type: 'int' }\r\n        }\r\n      },\r\n      { // SL-space obstacle grid L dilation\r\n        kernel: SL_OBSTACLE_DILATION_KERNEL,\r\n        output: { name: 'slObstacleGridDilated' },\r\n        uniforms: {\r\n          slObstacleGrid: { type: 'outputTexture', name: 'slObstacleGridStationDilated' },\r\n          delta: { type: 'vec2' },\r\n          collisionDilation: { type: 'int' },\r\n          hazardDilation: { type: 'int' }\r\n        }\r\n      }\r\n    ];\r\n  },\r\n\r\n  update(config, slWidth, slHeight) {\r\n    return [\r\n      { // SL-space obstacle grid S dilation\r\n        width: slWidth,\r\n        height: slHeight,\r\n        uniforms: {\r\n          delta: [1 / slWidth, 0],\r\n          collisionDilation: Math.ceil(config.collisionDilationS / config.slGridCellSize),\r\n          hazardDilation: Math.ceil(config.hazardDilationS / config.slGridCellSize)\r\n        }\r\n      },\r\n      { // SL-space obstacle grid L dilation\r\n        width: slWidth,\r\n        height: slHeight,\r\n        uniforms: {\r\n          delta: [0, 1 / slHeight],\r\n          collisionDilation: Math.ceil(config.collisionDilationL / config.slGridCellSize),\r\n          hazardDilation: Math.ceil(config.hazardDilationL / config.slGridCellSize)\r\n        }\r\n      }\r\n    ];\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/slDynamicObstacleGrid.js\nconst DYNAMIC_OBSTACLE_VERTEX_SHADER = `#version 300 es\r\nuniform mat3 xform;\r\nin vec3 position;\r\nout float color;\r\n\r\nvoid main(void) {\r\n  gl_Position = vec4((xform * vec3(position.xy, 1)).xy, position.z, 1);\r\n\r\n  // The z coordinate is 0.25 for collision zone and 0.75 for hazard zone,\r\n  // so that the collision zone is drawn on top.\r\n  // Convert this to 1.0 for collision zone, 0.5 for hazard zone\r\n  color = (1.0 - step(0.5, position.z)) * 0.5 + 0.5;\r\n}\r\n`;\r\n\r\nconst DYNAMIC_OBSTACLE_KERNEL = `\r\n  in float color;\r\n\r\n  vec4 kernel() {\r\n    return vec4(color, 0, 0, 1);\r\n  }\r\n`;\r\n\r\nlet slDynamicObstacleGrid_obstacleVertices;\r\nlet slDynamicObstacleGrid_obstacleXform;\r\nconst numDynamicFrames = 20;\r\n\r\n// Draw dynamic obstacle triangles to SL-space obstacle grid\r\n/* harmony default export */ const slDynamicObstacleGrid = ({\r\n  setUp() {\r\n    return {\r\n      kernel: DYNAMIC_OBSTACLE_KERNEL,\r\n      vertexShader: DYNAMIC_OBSTACLE_VERTEX_SHADER,\r\n      output: { name: 'slDynamicObstacleGrid', textureType: '2DArray', depth: numDynamicFrames },\r\n      draw: (gpgpu, program) => {\r\n        const gl = gpgpu.gl;\r\n\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        const renderbuffer = gl.createRenderbuffer();\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\r\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, program.inputWidth, program.inputHeight);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\r\n\r\n        for (let frame = 0; frame < numDynamicFrames; frame++) {\r\n          gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, program.outputTexture, 0, frame);\r\n          const frameBufferStatus = (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE);\r\n          if (!frameBufferStatus)\r\n            throw new Error('Error attaching float texture to framebuffer. Your device is probably incompatible.');\r\n\r\n          gl.clearColor(0, 0, 0, 0);\r\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n          if (slDynamicObstacleGrid_obstacleVertices[frame].length > 0) {\r\n            const buf = gl.createBuffer();\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, buf);\r\n            gl.bufferData(gl.ARRAY_BUFFER, slDynamicObstacleGrid_obstacleVertices[frame], gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(program.positionLocation);\r\n            gl.vertexAttribPointer(program.positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n            const xformLocation = gl.getUniformLocation(program.glProgram, 'xform');\r\n            gl.uniformMatrix3fv(xformLocation, false, slDynamicObstacleGrid_obstacleXform.elements);\r\n\r\n            gl.drawArrays(gl.TRIANGLES, 0, slDynamicObstacleGrid_obstacleVertices[frame].length / 3);\r\n\r\n            if (frame == 0) {\r\n              const obstacleGrid = new Float32Array(program.inputWidth * program.inputHeight * 4);\r\n              gl.readPixels(0, 0, program.inputWidth, program.inputHeight, gl.RGBA, gl.FLOAT, obstacleGrid);\r\n              gpgpu._dynamicObstacleGrid = obstacleGrid;\r\n            }\r\n\r\n            gl.deleteBuffer(buf);\r\n          }\r\n        }\r\n\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n        gl.deleteRenderbuffer(renderbuffer);\r\n        gl.disable(gl.DEPTH_TEST);\r\n      }\r\n    };\r\n  },\r\n\r\n  update(config, slWidth, slHeight, slCenterPoint, vehicleStation, startTime, dynamicFrameTime, dynamicObstacles) {\r\n    slDynamicObstacleGrid_obstacleVertices = [];\r\n\r\n    let time = startTime;\r\n    for (let frame = 0; frame < numDynamicFrames; frame++) {\r\n      const vertices = Array.prototype.concat.apply([], dynamicObstacles.map(o => o.verticesInTimeRange(time, time + dynamicFrameTime, config)));\r\n      slDynamicObstacleGrid_obstacleVertices.push(new Float32Array(vertices));\r\n      time += dynamicFrameTime;\r\n    }\r\n\r\n    const translate = new THREE.Matrix3();\r\n    translate.set(\r\n      1, 0, -slCenterPoint.x - vehicleStation,\r\n      0, 1, -slCenterPoint.y,\r\n      0, 0, 1\r\n    );\r\n\r\n    const scale = new THREE.Matrix3();\r\n    scale.set(\r\n      2 / (slWidth * config.slGridCellSize), 0, 0,\r\n      0, 2 / (slHeight * config.slGridCellSize), 0,\r\n      0, 0, 1\r\n    );\r\n\r\n    slDynamicObstacleGrid_obstacleXform = scale.multiply(translate);\r\n\r\n    return {\r\n      width: slWidth,\r\n      height: slHeight\r\n    }\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/xyslMap.js\nconst XYSL_MAP_KERNEL = `\r\n\r\nvec4 kernel() {\r\n  vec2 xy = (kernelPosition - 0.5) * vec2(kernelSize) * vec2(xyGridCellSize) + xyCenterPoint;\r\n\r\n  int numSamples = textureSize(centerline, 0).x;\r\n  int closest = 0;\r\n  float closestDist = distance(xy, texelFetch(centerline, ivec2(0, 0), 0).xy);\r\n  for (int i = 1; i < numSamples; i++) {\r\n    float dist = distance(xy, texelFetch(centerline, ivec2(i, 0), 0).xy);\r\n    if (dist < closestDist) {\r\n      closestDist = dist;\r\n      closest = i;\r\n    }\r\n  }\r\n\r\n  vec2 closestPos = texelFetch(centerline, ivec2(closest, 0), 0).xy;\r\n  vec2 prev, next;\r\n  int prevIndex, nextIndex;\r\n\r\n  if (closest == 0) {\r\n    prevIndex = 0;\r\n    nextIndex = 1;\r\n    prev = closestPos;\r\n    next = texelFetch(centerline, ivec2(1, 0), 0).xy;\r\n  } else if (closest == numSamples - 1) {\r\n    prevIndex = closest - 1;\r\n    nextIndex = closest;\r\n    prev = texelFetch(centerline, ivec2(prevIndex, 0), 0).xy;\r\n    next = closestPos;\r\n  } else {\r\n    vec2 before = texelFetch(centerline, ivec2(closest - 1, 0), 0).xy;\r\n    vec2 after = texelFetch(centerline, ivec2(closest + 1, 0), 0).xy;\r\n\r\n    if (distance(before, xy) < distance(after, xy)) {\r\n      prevIndex = closest - 1;\r\n      nextIndex = closest;\r\n      prev = before;\r\n      next = closestPos;\r\n    } else {\r\n      prevIndex = closest;\r\n      nextIndex = closest + 1;\r\n      prev = closestPos;\r\n      next = after;\r\n    }\r\n  }\r\n\r\n  float dist = distance(prev, next);\r\n  float progress = clamp(dot(xy - prev, next - prev) / dist / dist, 0.0, 1.0);\r\n  vec2 projectedPos = (next - prev) * vec2(progress) + prev;\r\n\r\n  return vec4(\r\n    (float(prevIndex) + progress) * centerlineStationInterval,\r\n    sign(determinant(mat2(next - prev, xy - prev))) * distance(xy, projectedPos),\r\n    0,\r\n    0\r\n  );\r\n}\r\n\r\n`;\r\n\r\n// Build XY-SL map\r\n/* harmony default export */ const xyslMap = ({\r\n  setUp() {\r\n    return {\r\n      kernel: XYSL_MAP_KERNEL,\r\n      output: { name: 'xyslMap', filter: 'linear' },\r\n      uniforms: {\r\n        centerline: { type: 'sharedTexture' },\r\n        xyCenterPoint: { type: 'vec2' },\r\n        xyGridCellSize: { type: 'float'},\r\n        centerlineStationInterval: { type: 'float'}\r\n      }\r\n    };\r\n  },\r\n\r\n  update(config, xyWidth, xyHeight, xyCenterPoint) {\r\n    return {\r\n      width: xyWidth,\r\n      height: xyHeight,\r\n      uniforms: {\r\n        xyCenterPoint: [xyCenterPoint.x, xyCenterPoint.y],\r\n        xyGridCellSize: config.xyGridCellSize,\r\n        centerlineStationInterval: config.centerlineStationInterval\r\n      }\r\n    };\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/optimizeCubicPaths.js\n// Config:\r\n// num stations\r\n// num latitudes\r\n// station connectivity\r\n// latitude connectivity\r\n//\r\n// Shared:\r\n// lattice\r\n\r\nconst OPTIMIZE_CUBIC_SHARED = `\r\n\r\nconst int NEWTON_ITERATIONS = 16;\r\nconst int RELAXATION_ITERATIONS = 16;\r\nconst float CONVERGENCE_ERROR = 0.01;\r\n\r\n// These two consts must stay in sync.\r\nconst int SIMPSONS_INTERVALS = 8;\r\n//const float SIMPSONS_COEFFS[SIMPSONS_INTERVALS + 1] = float[](1.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 1.0);\r\nconst float SIMPSONS_COEFFS[SIMPSONS_INTERVALS + 1] = float[](1.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 1.0);\r\n\r\nconst float PI = 3.1415926535897932384626433832795;\r\nconst float TWO_PI = PI + PI;\r\n\r\nconst float RELAXATION_ITERATIONS_F = float(RELAXATION_ITERATIONS);\r\nconst float SIMPSONS_INTERVALS_F = float(SIMPSONS_INTERVALS);\r\n\r\nfloat wrapAngle(float angle) {\r\n  angle = mod(angle, TWO_PI);\r\n  if (angle <= -PI) return angle + TWO_PI;\r\n  else if (angle > PI) return angle - TWO_PI;\r\n  return angle;\r\n}\r\n\r\nvec4 iterate(vec4 goal, float p0, float p1, float p2, float p3, float sG) {\r\n  float ds = sG / SIMPSONS_INTERVALS_F;\r\n  float sG_2 = sG * sG;\r\n  float sG_3 = sG_2 * sG;\r\n\r\n  vec3 dX_p = vec3(0.0);\r\n  vec3 dY_p = vec3(0.0);\r\n  vec2 guess = vec2(0.0);\r\n  float s = 0.0;\r\n\r\n  float theta, cosTheta, sinTheta;\r\n  vec3 dT_p;\r\n\r\n  for (int i = 0; i <= SIMPSONS_INTERVALS; i++) {\r\n    float coeff = SIMPSONS_COEFFS[i];\r\n\r\n    float a = p0;\r\n    float b = (-5.5 * p0 + 9.0 * p1 - 4.5 * p2 + p3) / sG;\r\n    float c = (9.0 * p0 - 22.5 * p1 + 18.0 * p2 - 4.5 * p3) / sG_2;\r\n    float d = (-4.5 * (p0 - 3.0 * p1 + 3.0 * p2 - p3)) / sG_3;\r\n\r\n    theta = (((d * s / 4.0 + c / 3.0) * s + b / 2.0) * s + a) * s;\r\n    cosTheta = cos(theta);\r\n    sinTheta = sin(theta);\r\n\r\n    float s_sG = s / sG;\r\n\r\n    dT_p = vec3(\r\n      // p1\r\n      ((3.375 * s_sG - 7.5) * s_sG + 4.5) * s_sG * s,\r\n\r\n      // p2\r\n      ((-3.375 * s_sG + 6.0) * s_sG - 2.25) * s_sG * s,\r\n\r\n      // sG\r\n      ((3.375 * (p0 - 3.0 * p1 + 3.0 * p2 - p3) * s_sG - 3.0 * (2.0 * p0 - 5.0 * p1 + 4.0 * p2 - p3)) * s_sG + 0.25 * (11.0 * p0 - 18.0 * p1 + 9.0 * p2 - 2.0 * p3)) * s_sG * s_sG\r\n    );\r\n\r\n    dX_p -= coeff * sinTheta * dT_p;\r\n    dY_p += coeff * cosTheta * dT_p;\r\n\r\n    guess += coeff * vec2(cosTheta, sinTheta);\r\n\r\n    s += ds;\r\n  }\r\n\r\n  float hOver3 = sG / SIMPSONS_INTERVALS_F / 3.0;\r\n\r\n  vec3 delta;\r\n  delta.xy = goal.xy - guess * hOver3;\r\n  delta.z = wrapAngle(goal.z - theta);\r\n\r\n  if (abs(delta.x) + abs(delta.y) + abs(delta.z) < CONVERGENCE_ERROR)\r\n    return vec4(p1, p2, sG, 1.0);\r\n\r\n  dX_p.xyz *= hOver3;\r\n  dY_p.xyz *= hOver3;\r\n  dX_p.z += cosTheta;\r\n  dY_p.z += sinTheta;\r\n\r\n  mat3 invJacobian = inverse(transpose(mat3(dX_p, dY_p, dT_p)));\r\n\r\n  vec3 deltaP = invJacobian * delta;\r\n  vec4 params = vec4(p1, p2, sG, 0.0);\r\n  params.xyz += deltaP;\r\n\r\n  return params;\r\n}\r\n\r\n/* Input:\r\n *   start: (vec4)\r\n *     x: x position,\r\n *     y: y position,\r\n *     z: theta rotation,\r\n *     w: k curvature\r\n *   end: (vec4)\r\n *     x: x position,\r\n *     y: y position,\r\n *     z: theta rotation,\r\n *     w: k curvature\r\n *\r\n * Output: (vec4)\r\n *   x: p1,\r\n *   y: p2,\r\n *   z: sG,\r\n *   w: 1 if converged, 0 if not\r\n */\r\n\r\nvec4 optimize(vec4 start, vec4 end) {\r\n  // Translate and rotate start and end so that start is at the origin\r\n  float sinRot = sin(start.z);\r\n  float cosRot = cos(start.z);\r\n\r\n  vec4 diff = end - start;\r\n  vec4 goal;\r\n  goal.xy = mat2(cosRot, -sinRot, sinRot, cosRot) * diff.xy;\r\n  goal.z = wrapAngle(diff.z);\r\n  goal.w = end.w;\r\n\r\n  vec4 originalGoal = goal;\r\n  vec4 dGoal;\r\n  dGoal.x = 0.0;\r\n  dGoal.yzw = goal.yzw / RELAXATION_ITERATIONS_F;\r\n  float dK0 = start.w / RELAXATION_ITERATIONS_F;\r\n\r\n  // Relax the goal to (x, 0, 0, 0)\r\n  goal.yzw = vec3(0, 0, 0);\r\n\r\n  // Relax the params to (0, 0, 0, 0, goal.x)\r\n  float p0 = 0.0;\r\n  float p1 = 0.0;\r\n  float p2 = 0.0;\r\n  float p3 = 0.0;\r\n  float sG = goal.x;\r\n\r\n  if (sG < 0.1) return vec4(0.0);\r\n\r\n  for (int i = 0; i < RELAXATION_ITERATIONS; i++) {\r\n    p0 += dK0;\r\n    p3 += dGoal.w;\r\n    goal += dGoal;\r\n    \r\n    vec4 result = iterate(goal, p0, p1, p2, p3, sG);\r\n    p1 = result.x;\r\n    p2 = result.y;\r\n    sG = result.z;\r\n  }\r\n\r\n  goal = originalGoal;\r\n\r\n  for (int i = 0; i < NEWTON_ITERATIONS; i++) {\r\n    vec4 result = iterate(goal, p0, p1, p2, p3, sG);\r\n    if (result.w == 1.0) {\r\n      result.w = step(0.0, result.z);\r\n      return result;\r\n    }\r\n\r\n    p1 = result.x;\r\n    p2 = result.y;\r\n    sG = result.z;\r\n  }\r\n\r\n  return vec4(p1, p2, sG, 0.0);\r\n}\r\n\r\n`;\r\n\r\nconst OPTIMIZE_CUBIC_KERNEL = OPTIMIZE_CUBIC_SHARED + `\r\n\r\n// width: station * latitude index\r\n// height: station_conn * lattice_conn\r\n//\r\n// lattice:\r\n// width: latitudes\r\n// height: stations\r\n\r\nvec4 kernel() {\r\n  ivec2 indexes = ivec2(kernelPosition * vec2(kernelSize));\r\n\r\n  int endStation = indexes.x / numLatitudes;\r\n  int endLatitude = int(mod(float(indexes.x), float(numLatitudes)));\r\n\r\n  int startStation = endStation - stationConnectivity + indexes.y / latitudeConnectivity;\r\n  int startLatitude = endLatitude - latitudeConnectivity / 2 + int(mod(float(indexes.y), float(latitudeConnectivity)));\r\n\r\n  if (startStation < 0 || startStation >= numStations || startLatitude < 0 || startLatitude >= numLatitudes)\r\n    return vec4(0.0);\r\n\r\n  vec4 start = texelFetch(lattice, ivec2(startLatitude, startStation), 0);\r\n  vec4 end = texelFetch(lattice, ivec2(endLatitude, endStation), 0);\r\n\r\n  return optimize(start, end);\r\n}\r\n\r\n`;\r\n\r\nconst OPTIMIZE_CUBIC_FROM_VEHICLE_KERNEL = OPTIMIZE_CUBIC_SHARED + `\r\n\r\nvec4 kernel() {\r\n  ivec2 indexes = ivec2(kernelPosition * vec2(kernelSize));\r\n\r\n  vec4 start = vec4(0, 0, 0, curvVehicle);\r\n  vec4 end = texelFetch(lattice, indexes, 0);\r\n\r\n  return optimize(start, end);\r\n}\r\n\r\n`;\r\n\r\n/* harmony default export */ const optimizeCubicPaths = ({\r\n  setUp() {\r\n    return [\r\n      { // Cubic paths between lattice nodes\r\n        kernel: OPTIMIZE_CUBIC_KERNEL,\r\n        output: { name: 'cubicPaths', read: true },\r\n        uniforms: {\r\n          lattice: { type: 'sharedTexture' },\r\n          numStations: { type: 'int' },\r\n          numLatitudes: { type: 'int' },\r\n          stationConnectivity: { type: 'int' },\r\n          latitudeConnectivity: { type: 'int' }\r\n        }\r\n      },\r\n      { // Cubic paths from vehicle to lattice nodes\r\n        kernel: OPTIMIZE_CUBIC_FROM_VEHICLE_KERNEL,\r\n        output: { name: 'cubicPathsFromVehicle', read: true },\r\n        uniforms: {\r\n          lattice: { type: 'sharedTexture' },\r\n          curvVehicle: { type: 'float' }\r\n        }\r\n      }\r\n    ]\r\n  },\r\n\r\n  update(config, pose) {\r\n    return [\r\n      { // Cubic paths between lattice nodes\r\n        width: config.lattice.numStations * config.lattice.numLatitudes,\r\n        height: config.lattice.stationConnectivity * config.lattice.latitudeConnectivity,\r\n        uniforms: {\r\n          numStations: config.lattice.numStations,\r\n          numLatitudes: config.lattice.numLatitudes,\r\n          stationConnectivity: config.lattice.stationConnectivity,\r\n          latitudeConnectivity: config.lattice.latitudeConnectivity,\r\n        }\r\n      },\r\n      { // Cubic paths from vehicle to lattice nodes\r\n        width: config.lattice.numLatitudes,\r\n        height: config.lattice.stationConnectivity,\r\n        uniforms: {\r\n          curvVehicle: pose.curv\r\n        }\r\n      }\r\n    ];\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/optimizeQuinticPaths.js\nconst OPTIMIZE_KERNEL = `\r\n\r\nconst int NEWTON_ITERATIONS = 32;\r\nconst int RELAXATION_ITERATIONS = 32;\r\nconst float CONVERGENCE_ERROR = 0.01;\r\n\r\n// These two consts must stay in sync.\r\nconst int SIMPSONS_INTERVALS = 8;\r\nconst float SIMPSONS_COEFFS[SIMPSONS_INTERVALS + 1] = float[](1.0, 4.0, 2.0, 4.0, 2.0, 4.0, 2.0, 4.0, 1.0);\r\n\r\nconst float PI = 3.1415926535897932384626433832795;\r\nconst float TWO_PI = PI + PI;\r\n\r\nconst float RELAXATION_ITERATIONS_F = float(RELAXATION_ITERATIONS);\r\nconst float SIMPSONS_INTERVALS_F = float(SIMPSONS_INTERVALS);\r\n\r\nfloat wrapAngle(float angle) {\r\n  angle = mod(angle, TWO_PI);\r\n  if (angle <= -PI) return angle + TWO_PI;\r\n  else if (angle > PI) return angle - TWO_PI;\r\n  return angle;\r\n}\r\n\r\nvec4 iterate(vec4 goal, float p0, float p1, float p2, float p3, float p4, float p5, float sG) {\r\n  float ds = sG / SIMPSONS_INTERVALS_F;\r\n  float sG_2 = sG * sG;\r\n  float sG_3 = sG_2 * sG;\r\n\r\n  vec3 dX_p = vec3(0.0);\r\n  vec3 dY_p = vec3(0.0);\r\n  vec2 guess = vec2(0.0);\r\n  float s = 0.0;\r\n\r\n  float theta, cosTheta, sinTheta;\r\n  vec3 dT_p;\r\n\r\n  for (int i = 0; i <= SIMPSONS_INTERVALS; i++) {\r\n    float coeff = SIMPSONS_COEFFS[i];\r\n\r\n    float a = p0;\r\n    float b = p1;\r\n    float c = p2 / 2.0;\r\n    float d = (-71.875 * p0 + 81.0 * p3 - 10.125 * p4 + p5 - 21.25 * p1 * sG - 2.75 * p2 * sG_2) / sG_3;\r\n    float e = (166.5 * p0 - 202.5 * p3 + 40.5 * p4 - 4.5 * p5 + 45.0 * p1 * sG + 4.5 * p2 * sG_2) / (sG_2 * sG_2);\r\n    float f = (-95.625 * p0 + 121.5 * p3 - 30.375 * p4 + 4.5 * p5 - 24.75 * p1 * sG - 2.25 * p2 * sG_2) / (sG_2 * sG_3);\r\n\r\n    theta = (((((f * s / 6.0 + e / 5.0) * s + d / 4.0) * s + c / 3.0) * s + b / 2.0) * s + a) * s;\r\n    cosTheta = cos(theta);\r\n    sinTheta = sin(theta);\r\n\r\n    float s_2 = s * s;\r\n    float s_sG = s / sG;\r\n    float s_sG_2 = s_sG * s_sG;\r\n    float s_sG_3 = s_sG_2 * s_sG;\r\n    float s_sG_4 = s_sG_3 * s_sG;\r\n    float s_sG_5 = s_sG_4 * s_sG;\r\n\r\n    dT_p = vec3(\r\n      // p3\r\n      ((20.25 * s_sG - 40.5) * s_sG + 20.25) * s_sG_3 * s,\r\n\r\n      // p4\r\n      ((-5.0625 * s_sG + 8.1) * s_sG - 2.53125) * s_sG_3 * s,\r\n\r\n      // sG\r\n      (53.90625 * p0 - 60.75 * p3 + 7.59375 * p4 - 0.75 * p5) * s_sG_4 + 10.625 * p1 * s * s_sG_3 + 0.6875 * p2 * s_2 * s_sG_2 + (-133.2 * p0 + 162.0 * p3 - 32.4 * p4 + 3.6 * p5) * s_sG_5 + (-27.0) * p1 * s * s_sG_4 - 1.8 * p2 * s_2 * s_sG_3 + (79.6875 * p0 - 101.25 * p3 + 25.3125 * p4 - 3.75 * p5) * s_sG_5 * s_sG + 16.5 * p1 * s * s_sG_5 + 1.125 * p2 * s_2 * s_sG_4\r\n    );\r\n\r\n    dX_p -= coeff * sinTheta * dT_p;\r\n    dY_p += coeff * cosTheta * dT_p;\r\n\r\n    guess += coeff * vec2(cosTheta, sinTheta);\r\n\r\n    s += ds;\r\n  }\r\n\r\n  float hOver3 = sG / SIMPSONS_INTERVALS_F / 3.0;\r\n\r\n  vec3 delta;\r\n  delta.xy = goal.xy - guess * hOver3;\r\n  delta.z = wrapAngle(goal.z - theta);\r\n\r\n  if (abs(delta.x) + abs(delta.y) + abs(delta.z) < CONVERGENCE_ERROR)\r\n    return vec4(p3, p4, sG, 1.0);\r\n\r\n  dX_p.xyz *= hOver3;\r\n  dY_p.xyz *= hOver3;\r\n  dX_p.z += cosTheta;\r\n  dY_p.z += sinTheta;\r\n\r\n  mat3 invJacobian = inverse(transpose(mat3(dX_p, dY_p, dT_p)));\r\n\r\n  vec3 deltaP = invJacobian * delta;\r\n  vec4 params = vec4(p3, p4, sG, 0.0);\r\n  params.xyz += deltaP;\r\n\r\n  return params;\r\n}\r\n\r\nvec4 optimize(vec4 start, vec4 end) {\r\n  // Translate and rotate start and end so that start is at the origin\r\n  float sinRot = sin(start.z);\r\n  float cosRot = cos(start.z);\r\n\r\n  vec4 diff = end - start;\r\n  vec4 goal;\r\n  goal.xy = mat2(cosRot, -sinRot, sinRot, cosRot) * diff.xy;\r\n  goal.z = wrapAngle(diff.z);\r\n  goal.w = end.w;\r\n\r\n  vec4 originalGoal = goal;\r\n  vec4 dGoal;\r\n  dGoal.x = 0.0;\r\n  dGoal.yzw = goal.yzw / RELAXATION_ITERATIONS_F;\r\n  float d_K0 = start.w / RELAXATION_ITERATIONS_F;\r\n  float d_dK0 = dCurvVehicle / RELAXATION_ITERATIONS_F;\r\n  float d_ddK0 = ddCurvVehicle / RELAXATION_ITERATIONS_F;\r\n\r\n  // Relax the goal to (x, 0, 0, 0)\r\n  goal.yzw = vec3(0, 0, 0);\r\n\r\n  // Relax the params to (0, 0, 0, 0, goal.x)\r\n  float p0 = 0.0;\r\n  float p1 = 0.0;\r\n  float p2 = 0.0;\r\n  float p3 = 0.0;\r\n  float p4 = 0.0;\r\n  float p5 = 0.0;\r\n  float sG = goal.x;\r\n\r\n  if (sG < 0.1) return vec4(0.0);\r\n\r\n  for (int i = 0; i < RELAXATION_ITERATIONS; i++) {\r\n    p0 += d_K0;\r\n    p1 += d_dK0;\r\n    p2 += d_ddK0;\r\n    p5 += dGoal.w;\r\n    goal += dGoal;\r\n    \r\n    vec4 result = iterate(goal, p0, p1, p2, p3, p4, p5, sG);\r\n    p3 = result.x;\r\n    p4 = result.y;\r\n    sG = result.z;\r\n  }\r\n\r\n  goal = originalGoal;\r\n\r\n  for (int i = 0; i < NEWTON_ITERATIONS; i++) {\r\n    vec4 result = iterate(goal, p0, p1, p2, p3, p4, p5, sG);\r\n    if (result.w == 1.0) {\r\n      result.w = step(0.0, result.z);\r\n      return result;\r\n    }\r\n\r\n    p3 = result.x;\r\n    p4 = result.y;\r\n    sG = result.z;\r\n  }\r\n\r\n  return vec4(p3, p4, sG, 0.0);\r\n}\r\n\r\nvec4 kernel() {\r\n  ivec2 latticeIndexes = ivec2(kernelPosition * vec2(kernelSize));\r\n\r\n  vec4 start = vec4(0, 0, 0, curvVehicle);\r\n  vec4 end = texelFetch(lattice, latticeIndexes, 0);\r\n\r\n  return optimize(start, end);\r\n}\r\n\r\n`;\r\n\r\n// Quintic spiral path optimizer\r\n//   * Start of paths is the vehicle pose\r\n//     * x-pos, y-pos, and rotation aren't needed, since the lattice origin is the vehicle pose\r\n//     * So assume position and rotation are 0\r\n//   * Ends of paths are all latitudes within the first (stationConnectivity) stations\r\n/* harmony default export */ const optimizeQuinticPaths = ({\r\n  setUp() {\r\n    return {\r\n      kernel: OPTIMIZE_KERNEL,\r\n      output: { name: 'quinticPathsFromVehicle', read: true },\r\n      uniforms: {\r\n        lattice: { type: 'sharedTexture' },\r\n        curvVehicle: { type: 'float' },\r\n        dCurvVehicle: { type: 'float' },\r\n        ddCurvVehicle: { type: 'float' }\r\n      }\r\n    };\r\n  },\r\n\r\n  update(config, pose) {\r\n    return {\r\n      width: config.lattice.numLatitudes,\r\n      height: config.lattice.stationConnectivity,\r\n      uniforms: {\r\n        curvVehicle: pose.curv,\r\n        dCurvVehicle: pose.dCurv,\r\n        ddCurvVehicle: pose.ddCurv\r\n      }\r\n    };\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/graphSearchShared.js\nconst SHARED_SHADER = `\r\n\r\nconst float smallV = 0.01;\r\nvec4 pathSamples[128];\r\nfloat pathSampleCurvRates[128];\r\n\r\nfloat calculateAcceleration(int index, float initialVelocitySq, float distance) {\r\n  if (index <= 4) {\r\n    // [aMaxHard, aMinHard, aMaxSoft, aMinSoft, 0]\r\n    return accelerationProfiles[index];\r\n  } else {\r\n    float finalVelocity = finalVelocityProfiles[index - 5];\r\n    if (distance < 0.001) return 0.0;\r\n    return clamp((finalVelocity * finalVelocity - initialVelocitySq) / (2.0 * distance), accelerationProfiles[1], accelerationProfiles[0]);\r\n  }\r\n}\r\n\r\nvec2 xy2sl(vec4 xytk) {\r\n  vec2 xy = xytk.xy + rearAxleToCenter * vec2(cos(xytk.z), sin(xytk.z));\r\n  vec2 xyTexCoords = (xy - xyCenterPoint) / vec2(textureSize(xyslMap, 0)) / vec2(xyGridCellSize) + 0.5;\r\n  return texture(xyslMap, xyTexCoords).xy;\r\n}\r\n\r\nfloat sampleStaticCost(vec4 xytk) {\r\n  vec2 sl = xy2sl(xytk);\r\n  vec2 slTexCoords = (sl - slCenterPoint) / vec2(textureSize(slObstacleGrid, 0)) / vec2(slGridCellSize) + 0.5;\r\n  float obstacleCost = texture(slObstacleGrid, slTexCoords).r;\r\n\r\n  if (obstacleCost >= 0.75) return -1.0; // Infinite cost\r\n\r\n  obstacleCost = step(0.25, obstacleCost) * obstacleHazardCost;\r\n\r\n  float absLatitude = abs(sl.y);\r\n  if (absLatitude >= laneShoulderLatitude) return -1.0;\r\n\r\n  float laneCost = abs(absLatitude - laneCenterLatitude) * laneCostSlope + step(0.0, -sl.y * sign(lanePreference)) * lanePreferenceDiscount;\r\n\r\n  return obstacleCost + laneCost;\r\n}\r\n\r\nfloat sampleDynamicCost(vec4 xytk, float time, float velocity, float acceleration) {\r\n  vec2 sl = xy2sl(xytk);\r\n  vec2 slTexCoords = (sl - slCenterPoint) / vec2(textureSize(slDynamicObstacleGrid, 0).xy) / vec2(slGridCellSize) + 0.5;\r\n  float dynamicFrame = floor(time / dynamicFrameTime);\r\n\r\n  float obstacleCost = texture(slDynamicObstacleGrid, vec3(slTexCoords, dynamicFrame)).r;\r\n\r\n  if (obstacleCost > 0.75) return -1.0; // Infinite cost\r\n\r\n  return step(0.25, obstacleCost) * obstacleHazardCost;\r\n}\r\n\r\nfloat calculateAverageStaticCost(int numSamples) {\r\n  float averageStaticCost = 0.0;\r\n\r\n  for (int i = 0; i < numSamples; i++) {\r\n    float cost = sampleStaticCost(pathSamples[i]);\r\n\r\n    if (cost < 0.0) return cost;\r\n\r\n    averageStaticCost += cost;\r\n  }\r\n\r\n  averageStaticCost /= float(numSamples);\r\n\r\n  return averageStaticCost;\r\n}\r\n\r\nfloat calculateAverageDynamicCost(int numSamples, float pathLength, float initialTime, float initialVelocity, float acceleration, float abandonThreshold) {\r\n  float s = 0.0;\r\n  float ds = pathLength / float(numSamples - 1);\r\n  float averageDynamicCost = 0.0;\r\n  float maxVelocity = 0.0;\r\n  float maxLateralAcceleration = 0.0;\r\n  float numSamples_f = float(numSamples);\r\n\r\n  for (int i = 0; i < numSamples; i++) {\r\n    vec4 pathSample = pathSamples[i]; // vec4(x-pos, y-pos, theta (rotation), kappa (curvature))\r\n\r\n    float velocitySq = 2.0 * acceleration * s + initialVelocity * initialVelocity;\r\n    float velocity = max(smallV, sqrt(max(0.0, velocitySq)));\r\n    maxVelocity = max(maxVelocity, velocity);\r\n    maxLateralAcceleration = max(maxLateralAcceleration, abs(pathSample.w * velocity * velocity));\r\n\r\n    float time = 2.0 * s / (initialVelocity + velocity) + initialTime;\r\n\r\n    float dCurv = pathSampleCurvRates[i] * velocity;\r\n    if (dCurv > dCurvatureMax) return -1.0;\r\n\r\n    float cost = sampleDynamicCost(pathSample, time, velocity, acceleration);\r\n    if (cost < 0.0) return cost;\r\n\r\n    averageDynamicCost += cost;\r\n    if (averageDynamicCost / numSamples_f >= abandonThreshold) return -1.0;\r\n\r\n    s += ds;\r\n  }\r\n\r\n  averageDynamicCost /= numSamples_f;\r\n\r\n  // Apply speeding penality if any velocity along the trajectory is over the speed limit\r\n  averageDynamicCost += step(speedLimit, maxVelocity) * speedLimitPenalty;\r\n\r\n  // Apply hard acceleration/deceleration penalties if the acceleration/deceleration exceeds the soft limits\r\n  averageDynamicCost += step(accelerationProfiles[2] + 0.0001, acceleration) * hardAccelerationPenalty;\r\n  averageDynamicCost += (1.0 - step(accelerationProfiles[3], acceleration)) * hardDecelerationPenalty;\r\n\r\n  // Penalize lateral acceleration\r\n  averageDynamicCost += step(softLateralAccelerationLimit, maxLateralAcceleration) * softLateralAccelerationPenalty;\r\n  averageDynamicCost += linearLateralAccelerationPenalty * maxLateralAcceleration;\r\n\r\n  return averageDynamicCost;\r\n}\r\n\r\nvec3 calculateAVT(int accelerationIndex, float initialVelocity, float initialTime, float pathLength) {\r\n  float initialVelocitySq = initialVelocity * initialVelocity;\r\n  float acceleration = calculateAcceleration(accelerationIndex, initialVelocitySq, pathLength);\r\n\r\n  float finalVelocitySq = 2.0 * acceleration * pathLength + initialVelocitySq;\r\n  float finalVelocity = max(smallV, sqrt(max(0.0, finalVelocitySq)));\r\n\r\n  float finalTime = initialTime;\r\n\r\n  if (acceleration == 0.0) {\r\n    finalTime += pathLength / finalVelocity;\r\n  } else if (finalVelocitySq <= 0.0) { // Calculate final time if the vehicle stops before the end of the trajectory\r\n    float distanceLeft = pathLength - (smallV * smallV - initialVelocitySq) / (2.0 * acceleration);\r\n    finalTime += (finalVelocity - initialVelocity) / acceleration + distanceLeft / smallV;\r\n  } else {\r\n    finalTime += 2.0 * pathLength / (finalVelocity + initialVelocity);\r\n  }\r\n\r\n  return vec3(acceleration, finalVelocity, finalTime);\r\n}\r\n\r\n`;\r\n\r\nconst SAMPLE_CUBIC_PATH_FN = `\r\n\r\nint sampleCubicPath(vec4 start, vec4 end, vec4 cubicPathParams) {\r\n  float p0 = start.w;\r\n  float p1 = cubicPathParams.x;\r\n  float p2 = cubicPathParams.y;\r\n  float p3 = end.w;\r\n  float sG = cubicPathParams.z;\r\n\r\n  if (sG <= 0.0) return 0;\r\n\r\n  int numSamples = int(ceil(sG / pathSamplingStep)) + 1;\r\n\r\n  float sG_2 = sG * sG;\r\n  float sG_3 = sG_2 * sG;\r\n\r\n  float a = p0;\r\n  float b = (-5.5 * p0 + 9.0 * p1 - 4.5 * p2 + p3) / sG;\r\n  float c = (9.0 * p0 - 22.5 * p1 + 18.0 * p2 - 4.5 * p3) / sG_2;\r\n  float d = (-4.5 * (p0 - 3.0 * p1 + 3.0 * p2 - p3)) / sG_3;\r\n\r\n  pathSamples[0] = start;\r\n\r\n  float ds = sG / float(numSamples - 1);\r\n  float s = ds;\r\n  vec2 dxy = vec2(0);\r\n  vec2 prevCosSin = vec2(cos(start.z), sin(start.z));\r\n\r\n  for (int i = 1; i < numSamples; i++) {\r\n    float rot = (((d * s / 4.0 + c / 3.0) * s + b / 2.0) * s + a) * s + start.z;\r\n    float curv = ((d * s + c) * s + b) * s + a;\r\n\r\n    vec2 cosSin = vec2(cos(rot), sin(rot));\r\n    dxy = dxy * vec2(float(i - 1) / float(i)) + (cosSin + prevCosSin) / vec2(2 * i);\r\n\r\n    pathSamples[i] = vec4(dxy * vec2(s) + start.xy, rot, curv);\r\n    pathSampleCurvRates[i] = b + s * (2.0 * c + 3.0 * d * s);\r\n\r\n    s += ds;\r\n    prevCosSin = cosSin;\r\n  }\r\n\r\n  return numSamples;\r\n}\r\n\r\n`;\r\n\r\nconst SAMPLE_QUINTIC_PATH_FN = `\r\n\r\nint sampleQuinticPath(vec4 start, vec4 end, vec4 quinticPathParams) {\r\n  float p0 = start.w;\r\n  float p1 = dCurvVehicle;\r\n  float p2 = ddCurvVehicle;\r\n  float p3 = quinticPathParams.x;\r\n  float p4 = quinticPathParams.y;\r\n  float p5 = end.w;\r\n  float sG = quinticPathParams.z;\r\n\r\n  if (sG <= 0.0) return 0;\r\n\r\n  int numSamples = int(ceil(sG / pathSamplingStep)) + 1;\r\n\r\n  float sG_2 = sG * sG;\r\n  float sG_3 = sG_2 * sG;\r\n\r\n  float a = p0;\r\n  float b = p1;\r\n  float c = p2 / 2.0;\r\n  float d = (-71.875 * p0 + 81.0 * p3 - 10.125 * p4 + p5 - 21.25 * p1 * sG - 2.75 * p2 * sG_2) / sG_3;\r\n  float e = (166.5 * p0 - 202.5 * p3 + 40.5 * p4 - 4.5 * p5 + 45.0 * p1 * sG + 4.5 * p2 * sG_2) / (sG_2 * sG_2);\r\n  float f = (-95.625 * p0 + 121.5 * p3 - 30.375 * p4 + 4.5 * p5 - 24.75 * p1 * sG - 2.25 * p2 * sG_2) / (sG_2 * sG_3);\r\n\r\n  pathSamples[0] = start;\r\n\r\n  float ds = sG / float(numSamples - 1);\r\n  float s = ds;\r\n  vec2 dxy = vec2(0);\r\n  vec2 prevCosSin = vec2(cos(start.z), sin(start.z));\r\n\r\n  for (int i = 1; i < numSamples; i++) {\r\n    float rot = (((((f * s / 6.0 + e / 5.0) * s + d / 4.0) * s + c / 3.0) * s + b / 2.0) * s + a) * s + start.z;\r\n    float curv = ((((f * s + e) * s + d) * s + c) * s + b) * s + a;\r\n\r\n    vec2 cosSin = vec2(cos(rot), sin(rot));\r\n    dxy = dxy * vec2(float(i - 1) / float(i)) + (cosSin + prevCosSin) / vec2(2 * i);\r\n\r\n    pathSamples[i] = vec4(dxy * vec2(s) + start.xy, rot, curv);\r\n    pathSampleCurvRates[i] = b + s * (2.0 * c + s * (3.0 * d + s * (4.0 * e + 5.0 * f * s)));\r\n\r\n    s += ds;\r\n    prevCosSin = cosSin;\r\n  }\r\n\r\n  return numSamples;\r\n}\r\n\r\n`;\r\n\r\nconst NUM_ACCELERATION_PROFILES = 8;\r\nconst NUM_VELOCITY_RANGES = 4;\r\nconst NUM_TIME_RANGES = 2;\r\n\r\nconst SHARED_UNIFORMS = {\r\n  xyslMap: { type: 'outputTexture' },\r\n  slObstacleGrid: { type: 'outputTexture', name: 'slObstacleGridDilated' },\r\n  slDynamicObstacleGrid: { type: 'outputTexture', name: 'slDynamicObstacleGrid', textureType: '2DArray' },\r\n  accelerationProfiles: { type: 'float', length: 5 },\r\n  finalVelocityProfiles: { type: 'float', length: 3 },\r\n  xyCenterPoint: { type: 'vec2' },\r\n  xyGridCellSize: { type: 'float' },\r\n  slCenterPoint: { type: 'vec2' },\r\n  slGridCellSize: { type: 'float'},\r\n  laneCenterLatitude: { type: 'float'},\r\n  laneShoulderLatitude: { type: 'float'},\r\n  laneCostSlope: { type: 'float'},\r\n  lanePreference: { type: 'float' },\r\n  lanePreferenceDiscount: { type: 'float' },\r\n  obstacleHazardCost: { type: 'float' },\r\n  speedLimit: { type: 'float' },\r\n  speedLimitPenalty: { type: 'float' },\r\n  hardAccelerationPenalty: { type: 'float' },\r\n  hardDecelerationPenalty: { type: 'float' },\r\n  softLateralAccelerationLimit: { type: 'float' },\r\n  softLateralAccelerationPenalty: { type: 'float' },\r\n  linearLateralAccelerationPenalty: { type: 'float' },\r\n  dCurvatureMax: { type: 'float' },\r\n  pathSamplingStep: { type: 'float' },\r\n  rearAxleToCenter: { type: 'float' },\r\n  dynamicFrameTime: { type: 'float' }\r\n};\r\n\r\nfunction buildUniformValues(config, xyCenterPoint, slCenterPoint, dynamicFrameTime) {\r\n  return {\r\n    accelerationProfiles: [3.5, -6.5, 2.0, -3.0, 0],\r\n    finalVelocityProfiles: [0.999 * config.speedLimit, 1.0, 0.01],\r\n    xyCenterPoint: [xyCenterPoint.x, xyCenterPoint.y],\r\n    xyGridCellSize: config.xyGridCellSize,\r\n    slCenterPoint: [slCenterPoint.x, slCenterPoint.y],\r\n    slGridCellSize: config.slGridCellSize,\r\n    laneCenterLatitude: config.laneCenterLatitude,\r\n    laneShoulderLatitude: config.laneShoulderLatitude,\r\n    laneCostSlope: config.laneCostSlope,\r\n    lanePreference: config.lanePreference,\r\n    lanePreferenceDiscount: config.lanePreferenceDiscount,\r\n    obstacleHazardCost: config.obstacleHazardCost,\r\n    speedLimit: config.speedLimit,\r\n    speedLimitPenalty: config.speedLimitPenalty,\r\n    hardAccelerationPenalty: config.hardAccelerationPenalty,\r\n    hardDecelerationPenalty: config.hardDecelerationPenalty,\r\n    softLateralAccelerationLimit: config.softLateralAccelerationLimit,\r\n    softLateralAccelerationPenalty: config.softLateralAccelerationPenalty,\r\n    linearLateralAccelerationPenalty: config.linearLateralAccelerationPenalty,\r\n    dCurvatureMax: config.dCurvatureMax,\r\n    pathSamplingStep: config.pathSamplingStep,\r\n    rearAxleToCenter: config.rearAxleToCenter,\r\n    dynamicFrameTime: dynamicFrameTime\r\n  };\r\n}\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/pathFromVehicleCosts.js\n\r\n\r\nfunction fromVehiclePathCostsKernel(pathType) {\r\n  return SHARED_SHADER + (pathType == 'cubic' ? SAMPLE_CUBIC_PATH_FN : SAMPLE_QUINTIC_PATH_FN) +\r\n\r\n`\r\n\r\n/* Calculate cost of a {cubic|quintic} path from vehicle to (stationConnectivity * numLatitudes * numAccelerations) nodes\r\n *   width: numLatitudes\r\n *   height: station * numAccelerations\r\n */\r\nvec4 kernel() {\r\n  ivec2 indexes = ivec2(kernelPosition * vec2(kernelSize));\r\n\r\n  int latitude = indexes.x;\r\n  int station = indexes.y / numAccelerations;\r\n  int accelerationIndex = int(mod(float(indexes.y), float(numAccelerations)));\r\n\r\n  vec4 pathStart = vec4(0, 0, 0, curvVehicle);\r\n  vec4 pathEnd = texelFetch(lattice, ivec2(latitude, station), 0);\r\n\r\n  vec4 pathParams = texelFetch(pathsFromVehicle, ivec2(latitude, station), 0);\r\n\r\n  // If the path didn't converge\r\n  if (pathParams.w == 0.0) return vec4(-1);\r\n\r\n  int numSamples = ${pathType == 'cubic' ? 'sampleCubicPath' : 'sampleQuinticPath'}(pathStart, pathEnd, pathParams);\r\n  float pathLength = pathParams.z;\r\n\r\n  if (numSamples < 2) return vec4(-1);\r\n\r\n  float averageStaticCost = calculateAverageStaticCost(numSamples);\r\n  if (averageStaticCost < 0.0) return vec4(-1);\r\n\r\n  int slIndex = station * kernelSize.x + latitude;\r\n  float hysteresisAdjustment = (slIndex == firstLatticePoint || slIndex == secondLatticePoint) ?  0.0 : hysteresisDiscount;\r\n  averageStaticCost += hysteresisAdjustment;\r\n\r\n  vec3 avt = calculateAVT(accelerationIndex, velocityVehicle, 0.0, pathLength);\r\n  float acceleration = avt.x;\r\n  float finalVelocity = avt.y;\r\n  float finalTime = avt.z;\r\n\r\n  float averageDynamicCost = calculateAverageDynamicCost(numSamples, pathLength, 0.0, velocityVehicle, acceleration, 1.0 / 0.0);\r\n  if (averageDynamicCost < 0.0) return vec4(-1);\r\n\r\n  averageDynamicCost += accelerationChangePenalty;\r\n\r\n  // The cost of a trajectory is the average sample cost scaled by the path length\r\n  float totalCost = (averageStaticCost + averageDynamicCost + ${pathType == 'cubic' ? '(cubicPathPenalty * velocityVehicle * velocityVehicle)' : '0.0'}) * pathLength;\r\n  ${pathType != 'cubic' ? 'totalCost = -1.0;' : ''}\r\n\r\n  return vec4(totalCost, finalVelocity, finalTime, ${pathType == 'cubic' ? '-2' : '-1'});\r\n}\r\n\r\n`;\r\n}\r\n\r\n/* harmony default export */ const pathFromVehicleCosts = ({\r\n  setUp() {\r\n    return [\r\n      {\r\n        kernel: fromVehiclePathCostsKernel('cubic'),\r\n        output: { name: 'cubicPathFromVehicleCosts' },\r\n        uniforms: Object.assign({}, SHARED_UNIFORMS, {\r\n          lattice: { type: 'sharedTexture' },\r\n          pathsFromVehicle: { type: 'outputTexture', name: 'cubicPathsFromVehicle' },\r\n          firstLatticePoint: { type: 'int' },\r\n          secondLatticePoint: { type: 'int' },\r\n          velocityVehicle: { type: 'float' },\r\n          curvVehicle: { type: 'float' },\r\n          numAccelerations: { type: 'int' },\r\n          cubicPathPenalty: { type: 'float' },\r\n          hysteresisDiscount: { type: 'float' },\r\n          accelerationChangePenalty: { type: 'float' }\r\n        })\r\n      },\r\n      {\r\n        kernel: fromVehiclePathCostsKernel('quintic'),\r\n        output: { name: 'quinticPathFromVehicleCosts' },\r\n        uniforms: Object.assign({}, SHARED_UNIFORMS, {\r\n          lattice: { type: 'sharedTexture' },\r\n          pathsFromVehicle: { type: 'outputTexture', name: 'quinticPathsFromVehicle' },\r\n          firstLatticePoint: { type: 'int' },\r\n          secondLatticePoint: { type: 'int' },\r\n          velocityVehicle: { type: 'float' },\r\n          curvVehicle: { type: 'float' },\r\n          dCurvVehicle: { type: 'float' },\r\n          ddCurvVehicle: { type: 'float' },\r\n          numAccelerations: { type: 'int' },\r\n          hysteresisDiscount: { type: 'float' },\r\n          accelerationChangePenalty: { type: 'float' }\r\n        })\r\n      }\r\n    ];\r\n  },\r\n\r\n  update(config, pose, xyCenterPoint, slCenterPoint, firstLatticePoint, secondLatticePoint, dynamicFrameTime) {\r\n    return [\r\n      {\r\n        width: config.lattice.numLatitudes,\r\n        height: config.lattice.stationConnectivity * NUM_ACCELERATION_PROFILES,\r\n        uniforms: Object.assign({}, buildUniformValues(config, xyCenterPoint, slCenterPoint, dynamicFrameTime), {\r\n          firstLatticePoint: firstLatticePoint,\r\n          secondLatticePoint: secondLatticePoint,\r\n          velocityVehicle: pose.velocity,\r\n          curvVehicle: pose.curv,\r\n          numAccelerations: NUM_ACCELERATION_PROFILES,\r\n          cubicPathPenalty: config.cubicPathPenalty,\r\n          hysteresisDiscount: config.hysteresisDiscount,\r\n          accelerationChangePenalty: config.accelerationChangePenalty\r\n        })\r\n      },\r\n      {\r\n        width: config.lattice.numLatitudes,\r\n        height: config.lattice.stationConnectivity * NUM_ACCELERATION_PROFILES,\r\n        uniforms: Object.assign({}, buildUniformValues(config, xyCenterPoint, slCenterPoint, dynamicFrameTime), {\r\n          firstLatticePoint: firstLatticePoint,\r\n          secondLatticePoint: secondLatticePoint,\r\n          velocityVehicle: pose.velocity,\r\n          curvVehicle: pose.curv,\r\n          dCurvVehicle: pose.dCurv,\r\n          ddCurvVehicle: pose.ddCurv,\r\n          numAccelerations: NUM_ACCELERATION_PROFILES,\r\n          hysteresisDiscount: config.hysteresisDiscount,\r\n          accelerationChangePenalty: config.accelerationChangePenalty\r\n        })\r\n      }\r\n    ];\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/graphSearch.js\n/* State Lattice Cost Map\r\n * \r\n * 5-dimensional node: station, latitude, acceleration profile, velocity, time\r\n *\r\n * A draw call per station s\r\n *   * Input to kernel: latitude l, acceleration profile a, velocity range v, time range t\r\n *   * Find all SL vertices that can connect to this node\r\n *   * For each of those vertices, check if any terminate in this specific velocity and time range\r\n *     * Based on initial velocity, initial time, and acceleration\r\n *     * Each connected SL vertex should have a * v * t nodes that could possibly terminate at this node\r\n *   * For all valid edges, find the one with the lowest cost\r\n *\r\n * Input:\r\n *   * 2D texture array cost map\r\n *     * Height: num of latitudes (~20)\r\n *     * Width: num of acceleration profiles * num of time ranges * num of velocity ranges (8 * 2 * 4 = ~64)\r\n *       * A flattened 3D array:\r\n *         d1: acceleration\r\n *         d2: velocity\r\n *         d3: time\r\n *     * Layer: num of stations (~10)\r\n *   \r\n * Output:\r\n *   * 2D texture slice of the next station in the input 2D texture array cost map\r\n *\r\n * Cost Map Elements:\r\n *   * Traversal cost so far\r\n *   * Ending velocity\r\n *   * Ending time\r\n *   * Index of parent node\r\n *\r\n * Since one cubic path can be shared between multiple trajectories, they need to be pre-optimized.\r\n *\r\n * Quintic Paths:\r\n *   Stations 0 through (numStations - 1) correspond to the stations on the lattice; however,\r\n *   a new station (station -1) will be used to signifiy the single vehicle pose node. Either\r\n *   a cubic path or quintic path can be used to connect this single node to the lattice\r\n *   (depending on vehicle velocity). At station -1, latitude 0 will correspond to a cubic path,\r\n *   and latitude 1 will correspond to a quintic path. All other latitudes will be skipped.\r\n */\r\n\r\n\r\n\r\nconst SOLVE_STATION_KERNEL =\r\n  SHARED_SHADER +\r\n  SAMPLE_CUBIC_PATH_FN +\r\n  SAMPLE_QUINTIC_PATH_FN +\r\n\r\n`\r\n\r\nvec4 kernel() {\r\n  ivec2 indexes = ivec2(kernelPosition * vec2(kernelSize));\r\n\r\n  int latitude = indexes.y;\r\n\r\n  int numPerTime = numAccelerations * numVelocities;\r\n  int timeIndex = indexes.x / numPerTime;\r\n  indexes.x -= timeIndex * numPerTime;\r\n  int velocityIndex = indexes.x / numAccelerations;\r\n  int accelerationIndex = int(mod(float(indexes.x), float(numAccelerations)));\r\n\r\n  int minLatitude = max(latitude - latitudeConnectivity / 2, 0);\r\n  int maxLatitude = min(latitude + latitudeConnectivity / 2, numLatitudes - 1);\r\n\r\n  int slIndex = station * numLatitudes + latitude;\r\n\r\n  vec4 pathEnd = texelFetch(lattice, ivec2(latitude, station), 0);\r\n\r\n  float minVelocity = velocityRanges[velocityIndex];\r\n  float maxVelocity = velocityRanges[velocityIndex + 1];\r\n\r\n  float minTime = timeRanges[timeIndex];\r\n  float maxTime = timeRanges[timeIndex + 1];\r\n\r\n  vec4 bestTrajectory = vec4(-1); // -1 means infinite cost\r\n  float bestTerminalCost = 1.0 / 0.0;\r\n\r\n  float hysteresisAdjustment = (slIndex == firstLatticePoint || slIndex == secondLatticePoint) ?  0.0 : hysteresisDiscount;\r\n\r\n  for (int prevStation = max(station - stationConnectivity, 0); prevStation < station; prevStation++) {\r\n    int stationConnectivityIndex = prevStation - station + stationConnectivity;\r\n\r\n    for (int prevLatitude = minLatitude; prevLatitude <= maxLatitude; prevLatitude++) {\r\n      int latitudeConnectivityIndex = prevLatitude - latitude + latitudeConnectivity / 2;\r\n      int connectivityIndex = stationConnectivityIndex * latitudeConnectivity + latitudeConnectivityIndex;\r\n\r\n      vec4 pathStart = texelFetch(lattice, ivec2(prevLatitude, prevStation), 0);\r\n      vec4 cubicPathParams = texelFetch(cubicPaths, ivec2(slIndex, connectivityIndex), 0);\r\n\r\n      // If the path didn't converge\r\n      if (cubicPathParams.w == 0.0) continue;\r\n\r\n      int numSamples = sampleCubicPath(pathStart, pathEnd, cubicPathParams);\r\n      float pathLength = cubicPathParams.z;\r\n\r\n      if (numSamples < 2) continue;\r\n\r\n      float averageStaticCost = calculateAverageStaticCost(numSamples);\r\n      if (averageStaticCost < 0.0) continue;\r\n\r\n      averageStaticCost += hysteresisAdjustment;\r\n\r\n      if (averageStaticCost * pathLength >= bestTerminalCost) continue;\r\n\r\n      for (int prevVelocity = 0; prevVelocity < numVelocities; prevVelocity++) {\r\n        for (int prevTime = 0; prevTime < numTimes; prevTime++) {\r\n          for (int prevAccel = 0; prevAccel < numAccelerations; prevAccel++) {\r\n            int avtIndex = prevTime * numPerTime + prevVelocity * numAccelerations + prevAccel;\r\n\r\n            // Cost table entry:\r\n            //   x: cost so far\r\n            //   y: end velocity\r\n            //   z: end time\r\n            //   w: parent index\r\n            vec4 costTableEntry = texelFetch(costTable, ivec3(avtIndex, prevLatitude, prevStation), 0);\r\n\r\n            // If cost entry is infinity\r\n            if (costTableEntry.x < 0.0 || averageStaticCost * pathLength + costTableEntry.x >= bestTerminalCost) continue;\r\n\r\n            vec3 avt = calculateAVT(accelerationIndex, costTableEntry.y, costTableEntry.z, pathLength);\r\n            float acceleration = avt.x;\r\n            float finalVelocity = avt.y;\r\n            float finalTime = avt.z;\r\n\r\n            if (averageStaticCost * pathLength + costTableEntry.x + extraTimePenalty * finalTime >= bestTerminalCost) continue;\r\n\r\n            // If the calculated final velocity does not match this fragment's velocity range, then skip this trajectory\r\n            if (finalVelocity < minVelocity || finalVelocity >= maxVelocity) continue;\r\n\r\n            // If the calculated final time does not match this fragment's time range, then skip this trajectory\r\n            if (finalTime < minTime || finalTime >= maxTime) continue;\r\n\r\n            float abandonThreshold = (bestTerminalCost - extraTimePenalty * finalTime - costTableEntry.x) / pathLength - averageStaticCost;\r\n            float averageDynamicCost = calculateAverageDynamicCost(numSamples, pathLength, costTableEntry.z, costTableEntry.y, acceleration, abandonThreshold);\r\n            if (averageDynamicCost < 0.0) continue;\r\n\r\n            if (accelerationIndex != prevAccel)\r\n              averageDynamicCost += accelerationChangePenalty;\r\n\r\n            // The cost of a trajectory is the average sample cost scaled by the path length\r\n            float totalCost = (averageStaticCost + averageDynamicCost) * pathLength + costTableEntry.x;\r\n\r\n            float terminalCost = totalCost + extraTimePenalty * finalTime;\r\n            if (terminalCost >= bestTerminalCost) continue;\r\n            bestTerminalCost = terminalCost;\r\n\r\n            int incomingIndex = avtIndex + numPerTime * numTimes * (prevLatitude + numLatitudes * prevStation);\r\n            bestTrajectory = vec4(totalCost, finalVelocity, finalTime, incomingIndex);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (station < stationConnectivity) {\r\n    ivec2 slaIndex = ivec2(latitude, station * numAccelerations + accelerationIndex);\r\n\r\n    vec4 costTableEntry = texelFetch(cubicPathFromVehicleCosts, slaIndex, 0);\r\n    float terminalCost;\r\n\r\n    if (costTableEntry.x >= 0.0) {\r\n      terminalCost = costTableEntry.x + extraTimePenalty * costTableEntry.z;\r\n\r\n      if (terminalCost < bestTerminalCost) {\r\n        bestTerminalCost = terminalCost;\r\n        bestTrajectory = costTableEntry;\r\n      }\r\n    }\r\n\r\n    costTableEntry = texelFetch(quinticPathFromVehicleCosts, slaIndex, 0);\r\n\r\n    if (costTableEntry.x >= 0.0) {\r\n      terminalCost = costTableEntry.x + extraTimePenalty * costTableEntry.z;\r\n\r\n      if (terminalCost < bestTerminalCost) {\r\n        bestTerminalCost = terminalCost;\r\n        bestTrajectory = costTableEntry;\r\n      }\r\n    }\r\n  }\r\n\r\n  return bestTrajectory;\r\n}\r\n\r\n`;\r\n\r\n/* harmony default export */ const graphSearch = ({\r\n  setUp() {\r\n    return {\r\n      kernel: SOLVE_STATION_KERNEL,\r\n      output: { name: 'graphSearch' },\r\n      uniforms: Object.assign({}, SHARED_UNIFORMS, {\r\n        lattice: { type: 'sharedTexture' },\r\n        costTable: { type: 'sharedTexture', textureType: '2DArray' },\r\n        cubicPaths: { type: 'outputTexture' },\r\n        cubicPathFromVehicleCosts: { type: 'outputTexture' },\r\n        quinticPathFromVehicleCosts: { type: 'outputTexture' },\r\n        firstLatticePoint: { type: 'int' },\r\n        secondLatticePoint: { type: 'int' },\r\n        velocityVehicle: { type: 'float' },\r\n        curvVehicle: { type: 'float' },\r\n        dCurvVehicle: { type: 'float' },\r\n        ddCurvVehicle: { type: 'float' },\r\n        extraTimePenalty: { type: 'float' },\r\n        hysteresisDiscount: { type: 'float' },\r\n        accelerationChangePenalty: { type: 'float' },\r\n        numStations: { type: 'int' },\r\n        numLatitudes: { type: 'int' },\r\n        numAccelerations: { type: 'int' },\r\n        numVelocities: { type: 'int' },\r\n        numTimes: { type: 'int' },\r\n        stationConnectivity: { type: 'int' },\r\n        latitudeConnectivity: { type: 'int' },\r\n        velocityRanges: { type: 'float', length: NUM_VELOCITY_RANGES + 1 },\r\n        timeRanges: { type: 'float', length: NUM_TIME_RANGES + 1 },\r\n        station: { type: 'int' } // Updated in `drawProxy`\r\n      }),\r\n      drawProxy: (gpgpu, program, draw) => {\r\n        const width = NUM_ACCELERATION_PROFILES * NUM_VELOCITY_RANGES * NUM_TIME_RANGES;\r\n        const height = program.meta.lattice.numLatitudes;\r\n        const costTable = new Float32Array(width * height * program.meta.lattice.numStations * 4);\r\n\r\n        for (let s = 0; s < program.meta.lattice.numStations; s++) {\r\n          gpgpu.updateProgramUniforms(program, { station: s });\r\n          draw();\r\n\r\n          gpgpu.gl.readPixels(0, 0, width, height, gpgpu.gl.RGBA, gpgpu.gl.FLOAT, costTable, s * width * height * 4);\r\n\r\n          gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D_ARRAY, gpgpu.sharedTextures.costTable);\r\n          gpgpu.gl.copyTexSubImage3D(gpgpu.gl.TEXTURE_2D_ARRAY, 0, 0, 0, s, 0, 0, width, height);\r\n        }\r\n\r\n        gpgpu._graphSearchCostTable = costTable;\r\n      }\r\n    };\r\n  },\r\n\r\n  update(config, pose, xyCenterPoint, slCenterPoint, firstLatticePoint, secondLatticePoint, dynamicFrameTime) {\r\n    return {\r\n      width: NUM_ACCELERATION_PROFILES * NUM_VELOCITY_RANGES * NUM_TIME_RANGES,\r\n      height: config.lattice.numLatitudes,\r\n      meta: {\r\n        lattice: config.lattice\r\n      },\r\n      uniforms: Object.assign({}, buildUniformValues(config, xyCenterPoint, slCenterPoint, dynamicFrameTime), {\r\n        firstLatticePoint: firstLatticePoint,\r\n        secondLatticePoint: secondLatticePoint,\r\n        velocityVehicle: pose.velocity,\r\n        curvVehicle: pose.curv,\r\n        dCurvVehicle: pose.dCurv,\r\n        ddCurvVehicle: pose.ddCurv,\r\n        extraTimePenalty: config.extraTimePenalty,\r\n        hysteresisDiscount: config.hysteresisDiscount,\r\n        accelerationChangePenalty: config.accelerationChangePenalty,\r\n        numStations: config.lattice.numStations,\r\n        numLatitudes: config.lattice.numLatitudes,\r\n        numAccelerations: NUM_ACCELERATION_PROFILES,\r\n        numVelocities: NUM_VELOCITY_RANGES,\r\n        numTimes: NUM_TIME_RANGES,\r\n        stationConnectivity: config.lattice.stationConnectivity,\r\n        latitudeConnectivity: config.lattice.latitudeConnectivity,\r\n        velocityRanges: [0, config.speedLimit / 3, config.speedLimit * 2 / 3, config.speedLimit, 1000000],\r\n        timeRanges: [0, 10, 1000000]\r\n      })\r\n    };\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/gpgpu-programs/xyObstacleCostGrid.js\nconst XY_OBSTACLE_COST_KERNEL = `\r\n\r\nvec4 kernel() {\r\n  vec2 xy = (kernelPosition - 0.5) * vec2(kernelSize) * vec2(xyGridCellSize) + xyCenterPoint;\r\n\r\n  vec2 xyTexCoords = (xy - xyCenterPoint) / vec2(textureSize(xyslMap, 0)) / vec2(xyGridCellSize) + 0.5;\r\n  vec2 sl = texture(xyslMap, xyTexCoords).xy;\r\n\r\n  vec2 slTexCoords = (sl - slCenterPoint) / vec2(textureSize(slObstacleGrid, 0)) / vec2(slGridCellSize) + 0.5;\r\n  return texture(slObstacleGrid, slTexCoords);\r\n}\r\n\r\n`;\r\n\r\n// Build XY obstacle costs using XYSL map\r\n/* harmony default export */ const xyObstacleCostGrid = ({\r\n  setUp() {\r\n    return {\r\n      kernel: XY_OBSTACLE_COST_KERNEL,\r\n      output: { name: 'xyObstacleCostGrid', read: true },\r\n      uniforms: {\r\n        xyslMap: { type: 'outputTexture' },\r\n        slObstacleGrid: { type: 'outputTexture', name: 'slObstacleGridDilated' },\r\n        xyCenterPoint: { type: 'vec2' },\r\n        xyGridCellSize: { type: 'float'},\r\n        slCenterPoint: { type: 'vec2' },\r\n        slGridCellSize: { type: 'float'}\r\n      }\r\n    };\r\n  },\r\n\r\n  update(config, xyWidth, xyHeight, xyCenterPoint, slCenterPoint) {\r\n    return {\r\n      width: xyWidth,\r\n      height: xyHeight,\r\n      uniforms: {\r\n        xyCenterPoint: [xyCenterPoint.x, xyCenterPoint.y],\r\n        xyGridCellSize: config.xyGridCellSize,\r\n        slCenterPoint: [slCenterPoint.x, slCenterPoint.y],\r\n        slGridCellSize: config.slGridCellSize\r\n      }\r\n    };\r\n  }\r\n});\r\n\n;// CONCATENATED MODULE: ./js/autonomy/path-planning/PathPlanner.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst PathPlanner_NUM_ACCELERATION_PROFILES = 8;\r\nconst PathPlanner_NUM_VELOCITY_RANGES = 4;\r\nconst PathPlanner_NUM_TIME_RANGES = 2;\r\n\r\n/* Obstacle cost map:\r\n *\r\n * 1. Rasterize triangles from polygonal obstacles into XY-space occupancy grid\r\n * 2. Convert occupancy grid to SL-space\r\n *    * Width is spatial horizon of the state lattice\r\n *    * Height is lane width\r\n *    * Resolution should be higher than XY-grid\r\n *    * Get XY position from centerline texture\r\n *    * Lookup XY in XY occupancy grid (nearest)\r\n * 3. Dilate SL-space grid using two passes (along station, then along latitude)\r\n *    * collision area: half car size + 0.3m\r\n *    * high cost area: 1 meter\r\n * 4. Convert back to XY-space using XYSL map\r\n */\r\n\r\nclass PathPlanner {\r\n  constructor() {\r\n    this.previousStartStation = null;\r\n    this.previousFirstLatticePoint = -1;\r\n    this.previousSecondLatticePoint = -1;\r\n    this.previousFirstAcceleration = -1;\r\n    this.previousSecondLatticePoint = -1;\r\n\r\n    let start = performance.now();\r\n    const programs = [\r\n      xyObstacleGrid.setUp(),\r\n      slObstacleGrid.setUp(),\r\n      ...slObstacleGridDilation.setUp(),\r\n      slDynamicObstacleGrid.setUp(),\r\n      xyslMap.setUp(),\r\n      ...optimizeCubicPaths.setUp(),\r\n      optimizeQuinticPaths.setUp(),\r\n      ...pathFromVehicleCosts.setUp(),\r\n      graphSearch.setUp(),\r\n    ].map(p => Object.assign({}, p, { width: 1, height: 1 }));\r\n\r\n    this.gpgpu = new GPGPU(programs);\r\n  }\r\n\r\n  reset() {\r\n    this.previousStartStation = null;\r\n    this.previousFirstLatticePoint = -1;\r\n    this.previousSecondLatticePoint = -1;\r\n    this.previousFirstAcceleration = -1;\r\n    this.previousSecondLatticePoint = -1;\r\n  }\r\n\r\n  plan(vehiclePose, vehicleStation, lanePath, startTime, staticObstacles, dynamicObstacles) {\r\n    const latticeStationInterval = this._latticeStationInterval();\r\n\r\n    const centerlineRaw = lanePath.sampleStations(vehicleStation, Math.ceil((this.config.spatialHorizon + latticeStationInterval) / this.config.centerlineStationInterval) + 1, this.config.centerlineStationInterval);\r\n\r\n    // Transform all centerline points into vehicle frame\r\n    const vehicleXform = vehicleTransform(vehiclePose);\r\n    const centerline = centerlineRaw.map(c => { return { pos: c.pos.clone().applyMatrix3(vehicleXform), rot: c.rot - vehiclePose.rot, curv: c.curv } });\r\n\r\n    const centerlineData = new Float32Array(centerline.length * 3);\r\n    const maxPoint = new THREE.Vector2(0, 0);\r\n    const minPoint = new THREE.Vector2(0, 0);\r\n\r\n    for (let i = 0; i < centerline.length; i++) {\r\n      const sample = centerline[i];\r\n      const pos = sample.pos;\r\n      centerlineData[i * 3 + 0] = pos.x;\r\n      centerlineData[i * 3 + 1] = pos.y;\r\n      centerlineData[i * 3 + 2] = sample.rot;\r\n\r\n      maxPoint.max(pos);\r\n      minPoint.min(pos);\r\n    }\r\n\r\n    const diff = maxPoint.clone().sub(minPoint);\r\n    const xyCenterPoint = minPoint.clone().add(maxPoint).divideScalar(2);\r\n\r\n    // Sizes of the xy grids (in pixels, not meters)\r\n    const xyWidth = Math.ceil((diff.x + this.config.gridMargin * 2) / this.config.xyGridCellSize);\r\n    const xyHeight = Math.ceil((diff.y + this.config.gridMargin * 2) / this.config.xyGridCellSize);\r\n\r\n    const stationWidth = this.config.spatialHorizon + latticeStationInterval * 2;\r\n    const slCenterPoint = new THREE.Vector2(this.config.spatialHorizon / 2, 0);\r\n\r\n    // Sizes of the sl grids (in pixels, not meters)\r\n    const slWidth = Math.ceil(stationWidth / this.config.slGridCellSize);\r\n    const slHeight = Math.ceil((this.config.roadWidth + this.config.gridMargin * 2) / this.config.slGridCellSize);\r\n\r\n    let startStation;\r\n\r\n    if (this.previousStartStation === null || vehicleStation + latticeStationInterval / 2 > this.previousStartStation) {\r\n      startStation = (this.previousStartStation === null ? vehicleStation : this.previousStartStation) + latticeStationInterval;\r\n      this.previousStartStation = startStation;\r\n      this.previousFirstLatticePoint -= this.config.lattice.numLatitudes;\r\n      this.previousSecondLatticePoint -= this.config.lattice.numLatitudes;\r\n    } else {\r\n      startStation = this.previousStartStation;\r\n    }\r\n\r\n    const lattice = this._buildLattice(lanePath, startStation, vehiclePose.rot, vehicleXform);\r\n\r\n    const temporalHorizon = this.config.spatialHorizon / this.config.speedLimit;\r\n    const dynamicFrameTime = temporalHorizon / this.config.numDynamicFrames;\r\n\r\n    for (const [i, p] of [\r\n      xyObstacleGrid.update(this.config, xyWidth, xyHeight, xyCenterPoint, vehicleXform, staticObstacles),\r\n      slObstacleGrid.update(this.config, slWidth, slHeight, slCenterPoint, xyCenterPoint),\r\n      ...slObstacleGridDilation.update(this.config, slWidth, slHeight),\r\n      slDynamicObstacleGrid.update(this.config, slWidth, slHeight, slCenterPoint, vehicleStation, startTime, dynamicFrameTime, dynamicObstacles),\r\n      xyslMap.update(this.config, xyWidth, xyHeight, xyCenterPoint),\r\n      ...optimizeCubicPaths.update(this.config, vehiclePose),\r\n      optimizeQuinticPaths.update(this.config, vehiclePose),\r\n      ...pathFromVehicleCosts.update(this.config, vehiclePose, xyCenterPoint, slCenterPoint, this.previousFirstLatticePoint, this.previousSecondLatticePoint, dynamicFrameTime),\r\n      graphSearch.update(this.config, vehiclePose, xyCenterPoint, slCenterPoint, this.previousFirstLatticePoint, this.previousSecondLatticePoint, dynamicFrameTime)\r\n    ].entries()) {\r\n      this.gpgpu.updateProgram(i, p);\r\n    }\r\n\r\n    this.gpgpu.updateSharedTextures({\r\n      centerline: {\r\n        width: centerline.length,\r\n        height: 1,\r\n        channels: 3,\r\n        filter: 'linear',\r\n        data: centerlineData\r\n      },\r\n      costTable: {\r\n        width: PathPlanner_NUM_ACCELERATION_PROFILES * PathPlanner_NUM_VELOCITY_RANGES * PathPlanner_NUM_TIME_RANGES,\r\n        height: this.config.lattice.numLatitudes,\r\n        depth: this.config.lattice.numStations,\r\n        channels: 4,\r\n        textureType: '2DArray'\r\n      },\r\n      lattice: {\r\n        width: this.config.lattice.numLatitudes,\r\n        height: this.config.lattice.numStations,\r\n        channels: 4,\r\n        data: lattice\r\n      }\r\n    });\r\n\r\n    this.gpgpu._graphSearchCostTable = null;\r\n    this.gpgpu._dynamicObstacleGrid = null;\r\n\r\n    let start = performance.now();\r\n    const outputs = this.gpgpu.run();\r\n    const costTable = this.gpgpu._graphSearchCostTable;\r\n    const cubicPathParams = outputs[6];\r\n    const cubicPathFromVehicleParams = outputs[7];\r\n    const quinticPathFromVehicleParams = outputs[8];\r\n\r\n    let bestEntry = [Number.POSITIVE_INFINITY];\r\n    let bestEntryIndex;\r\n    const numEntries = costTable.length / 4;\r\n\r\n    for (let i = 0; i < numEntries; i++) {\r\n      const entryUnpacked = this._unpackCostTableIndex(i);\r\n      const entry = [\r\n        costTable[i * 4],\r\n        costTable[i * 4 + 1],\r\n        costTable[i * 4 + 2],\r\n        costTable[i * 4 + 3]\r\n      ];\r\n\r\n      if (entry[0] < 0) continue;\r\n\r\n      entry[0] += this._terminalCost(entryUnpacked, entry);\r\n\r\n      if (entry[0] < bestEntry[0]) {\r\n        bestEntryIndex = i;\r\n        bestEntry = entry;\r\n      }\r\n    }\r\n\r\n    const inverseVehicleXform = (new THREE.Matrix3()).getInverse(vehicleXform);\r\n    let bestTrajectory = null;\r\n    let fromVehicleSegment = null;\r\n    let fromVehicleParams = null;\r\n    let firstLatticePoint = -1;\r\n    let firstAcceleration = -1;\r\n    let secondLatticePoint = -1;\r\n    let secondAcceleration = -1;\r\n\r\n    if (isFinite(bestEntry[0])) {\r\n      [bestTrajectory, fromVehicleSegment, fromVehicleParams, firstLatticePoint, firstAcceleration, secondLatticePoint, secondAcceleration] = this._reconstructTrajectory(\r\n        bestEntryIndex,\r\n        costTable,\r\n        cubicPathParams,\r\n        cubicPathFromVehicleParams,\r\n        quinticPathFromVehicleParams,\r\n        vehiclePose,\r\n        lattice\r\n      );\r\n\r\n      fromVehicleSegment.forEach(p => {\r\n        p.pos = p.pos.applyMatrix3(inverseVehicleXform);\r\n        p.rot += vehiclePose.rot;\r\n      });\r\n\r\n      bestTrajectory.forEach(p => {\r\n        p.pos = p.pos.applyMatrix3(inverseVehicleXform);\r\n        p.rot += vehiclePose.rot;\r\n      });\r\n    }\r\n\r\n    this.previousFirstLatticePoint = firstLatticePoint;\r\n    this.previousFirstAcceleration = firstAcceleration;\r\n    this.previousSecondLatticePoint = secondLatticePoint;\r\n    this.previousSecondAcceleration = secondAcceleration;\r\n\r\n    return {\r\n      path: bestTrajectory,\r\n      fromVehicleSegment: fromVehicleSegment,\r\n      fromVehicleParams: fromVehicleParams,\r\n      latticeStartStation: this.previousStartStation,\r\n      dynamicObstacleGrid: { data: this.gpgpu._dynamicObstacleGrid, width: slWidth, height: slHeight }\r\n    };\r\n  }\r\n\r\n  _buildLattice(lanePath, startStation, vehicleRot, vehicleXform) {\r\n    const centerline = lanePath.sampleStations(startStation, this.config.lattice.numStations, this._latticeStationInterval());\r\n    const offset = Math.floor(this.config.lattice.numLatitudes / 2);\r\n    const lattice = new Float32Array(this.config.lattice.numStations * this.config.lattice.numLatitudes * 4);\r\n    let index = 0;\r\n\r\n    for (let s = 0; s < centerline.length; s++) {\r\n      const sample = centerline[s];\r\n\r\n      for (let l = 0; l < this.config.lattice.numLatitudes; l++) {\r\n        const latitude = (l - offset) / offset * this.config.roadWidth / 2;\r\n        const rot = sample.rot - vehicleRot;\r\n        const pos = THREE.Vector2.fromAngle(rot + Math.PI / 2).multiplyScalar(latitude).add(sample.pos.clone().applyMatrix3(vehicleXform));\r\n        const curv = sample.curv == 0 ? 0 : 1 / (1 / sample.curv - latitude);\r\n\r\n        lattice[index++] = pos.x;\r\n        lattice[index++] = pos.y;\r\n        lattice[index++] = rot;\r\n        lattice[index++] = curv;\r\n      }\r\n    }\r\n\r\n    return lattice;\r\n  }\r\n\r\n  _latticeStationInterval() {\r\n    return this.config.spatialHorizon / this.config.lattice.numStations;\r\n  }\r\n\r\n  _terminalCost([stationIndex, latitudeIndex, timeIndex, velocityIndex, accelerationIndex], [cost, finalVelocity, finalTime, incomingIndex]) {\r\n    // Only consider vertices that reach the end of the spatial or temporal horizon\r\n    if (stationIndex != this.config.lattice.numStations - 1 && finalVelocity > 0.05)\r\n      return Number.POSITIVE_INFINITY;\r\n\r\n    const station = (this.config.spatialHorizon / this.config.lattice.numStations) * (stationIndex + 1);\r\n\r\n    return station * -this.config.stationReachDiscount + finalTime * this.config.extraTimePenalty;\r\n  }\r\n\r\n  _unpackCostTableIndex(index) {\r\n    if (index < 0) return [-1, index + 2, null, null, null];\r\n\r\n    const numPerTime = PathPlanner_NUM_ACCELERATION_PROFILES * PathPlanner_NUM_VELOCITY_RANGES;\r\n    const numPerLatitude = numPerTime * PathPlanner_NUM_TIME_RANGES;\r\n    const numPerStation = this.config.lattice.numLatitudes * numPerLatitude;\r\n\r\n    const stationIndex = Math.floor(index / numPerStation);\r\n    index -= stationIndex * numPerStation;\r\n\r\n    const latitudeIndex = Math.floor(index / numPerLatitude);\r\n    index -= latitudeIndex * numPerLatitude;\r\n\r\n    const timeIndex = Math.floor(index / numPerTime);\r\n    index -= timeIndex * numPerTime;\r\n\r\n    const velocityIndex = Math.floor(index / PathPlanner_NUM_ACCELERATION_PROFILES);\r\n    const accelerationIndex = index % PathPlanner_NUM_ACCELERATION_PROFILES;\r\n\r\n    return [stationIndex, latitudeIndex, timeIndex, velocityIndex, accelerationIndex];\r\n  }\r\n\r\n  _reconstructTrajectory(index, costTable, cubicPathParams, cubicPathFromVehicleParams, quinticPathFromVehicleParams, vehiclePose, lattice) {\r\n    let unpacked = this._unpackCostTableIndex(index);\r\n    unpacked.push(costTable[index * 4 + 1]);\r\n    const nodes = [unpacked];\r\n\r\n    let count = 0;\r\n    while (unpacked[0] >= 0 && count++ < 100) {\r\n      index = costTable[index * 4 + 3];\r\n      unpacked = this._unpackCostTableIndex(index);\r\n\r\n      const finalVelocity = unpacked[0] >= 0 ? costTable[index * 4 + 1] : vehiclePose.velocity;\r\n      unpacked.push(finalVelocity);\r\n\r\n      nodes.unshift(unpacked);\r\n    }\r\n    if (count >= 100) throw new Error('Infinite loop encountered while reconstructing trajectory.');\r\n\r\n    const points = [];\r\n    let fromVehicleSegment = [];\r\n    let fromVehicleParams = null;\r\n\r\n    for (let i = 0; i < nodes.length - 1; i++) {\r\n      const [prevStation, prevLatitude, _pt, _pv, _pa, prevVelocity] = nodes[i];\r\n      const [station, latitude, _t, _v, _a, velocity] = nodes[i + 1];\r\n\r\n      let length;\r\n      let pathBuilder;\r\n\r\n      if (prevStation < 0) {\r\n        const start = {\r\n          pos: new THREE.Vector2(0, 0),\r\n          rot: 0,\r\n          curv: vehiclePose.curv\r\n        };\r\n\r\n        const endIndex = (station * this.config.lattice.numLatitudes + latitude) * 4;\r\n        const end = {\r\n          pos: new THREE.Vector2(lattice[endIndex], lattice[endIndex + 1]),\r\n          rot: lattice[endIndex + 2],\r\n          curv: lattice[endIndex + 3]\r\n        };\r\n\r\n        if (prevLatitude == 0) { // Cubic path from vehicle to lattice node\r\n          length = cubicPathFromVehicleParams[endIndex + 2];\r\n\r\n          const params = {\r\n            p1: cubicPathFromVehicleParams[endIndex],\r\n            p2: cubicPathFromVehicleParams[endIndex + 1],\r\n            sG: length\r\n          };\r\n\r\n          pathBuilder = new CubicPath(start, end, params);\r\n\r\n          fromVehicleParams = { type: 'cubic', params: params };\r\n        } else { // Quintic path from vehicle to lattice node\r\n          length = quinticPathFromVehicleParams[endIndex + 2];\r\n\r\n          const params = {\r\n            p3: quinticPathFromVehicleParams[endIndex],\r\n            p4: quinticPathFromVehicleParams[endIndex + 1],\r\n            sG: length\r\n          };\r\n\r\n          pathBuilder = new QuinticPath(start, end, params);\r\n\r\n          fromVehicleParams = { type: 'quintic', params: params };\r\n        }\r\n      } else {\r\n        const startIndex = (prevStation * this.config.lattice.numLatitudes + prevLatitude) * 4;\r\n        const endIndex = (station * this.config.lattice.numLatitudes + latitude) * 4;\r\n\r\n        const start = {\r\n          pos: new THREE.Vector2(lattice[startIndex], lattice[startIndex + 1]),\r\n          rot: lattice[startIndex + 2],\r\n          curv: lattice[startIndex + 3]\r\n        };\r\n\r\n        const end = {\r\n          pos: new THREE.Vector2(lattice[endIndex], lattice[endIndex + 1]),\r\n          rot: lattice[endIndex + 2],\r\n          curv: lattice[endIndex + 3]\r\n        };\r\n\r\n        const slIndex = station * this.config.lattice.numLatitudes + latitude;\r\n        const connectivityIndex = (prevStation - station + this.config.lattice.stationConnectivity) * this.config.lattice.latitudeConnectivity + prevLatitude - latitude + Math.floor(this.config.lattice.latitudeConnectivity / 2);\r\n        const cubicPathIndex = (connectivityIndex * this.config.lattice.numStations * this.config.lattice.numLatitudes + slIndex) * 4;\r\n\r\n        length = cubicPathParams[cubicPathIndex + 2];\r\n\r\n        pathBuilder = new CubicPath(start, end, {\r\n          p1: cubicPathParams[cubicPathIndex],\r\n          p2: cubicPathParams[cubicPathIndex + 1],\r\n          sG: length\r\n        });\r\n      }\r\n\r\n      const path = pathBuilder.buildPath(Math.ceil(length / 0.25));\r\n\r\n      const prevVelocitySq = prevVelocity * prevVelocity;\r\n      const accel = (velocity * velocity - prevVelocitySq) / 2 / length;\r\n      const ds = length / (path.length - 1);\r\n      let s = 0;\r\n\r\n      for (let p = 0; p < path.length; p++) {\r\n        path[p].velocity = Math.sqrt(2 * accel * s + prevVelocitySq);\r\n        path[p].acceleration = accel;\r\n        s += ds;\r\n      }\r\n\r\n      if (prevStation < 0) {\r\n        fromVehicleSegment = path;\r\n      } else {\r\n        if (i > 0) path.shift();\r\n        points.push(...path);\r\n      }\r\n    }\r\n\r\n    let firstLatticePoint = null\r\n    let firstAcceleration = null;\r\n    let secondLatticePoint = null;\r\n    let secondAcceleration = null;\r\n\r\n    if (nodes.length >= 2) {\r\n      firstLatticePoint = nodes[1][0] * this.config.lattice.numLatitudes + nodes[1][1];\r\n      firstAcceleration = nodes[1][4];\r\n    }\r\n\r\n    if (nodes.length >= 3) {\r\n      secondLatticePoint = nodes[2][0] * this.config.lattice.numLatitudes + nodes[2][1];\r\n      secondAcceleration = nodes[2][4];\r\n    }\r\n\r\n    return [points, fromVehicleSegment, fromVehicleParams, firstLatticePoint, firstAcceleration, secondLatticePoint, secondAcceleration];\r\n  }\r\n}\r\n\r\nfunction vehicleTransform({ pos, rot }) {\r\n  const translate = new THREE.Matrix3();\r\n  translate.set(\r\n    1, 0, -pos.x,\r\n    0, 1, -pos.y,\r\n    0, 0, 1\r\n  );\r\n\r\n  const cosRot = Math.cos(rot);\r\n  const sinRot = Math.sin(rot);\r\n\r\n  const rotate = new THREE.Matrix3();\r\n  rotate.set(\r\n    cosRot, sinRot, 0,\r\n    -sinRot, cosRot, 0,\r\n    0, 0, 1\r\n  );\r\n\r\n  return rotate.multiply(translate);\r\n}\r\n\r\nfunction obstacleTransform(vehicleXform, xyCenterPoint, width, height) {\r\n  const translate = new THREE.Matrix3();\r\n  translate.set(\r\n    1, 0, -xyCenterPoint.x,\r\n    0, 1, -xyCenterPoint.y,\r\n    0, 0, 1\r\n  );\r\n\r\n  const scale = new THREE.Matrix3();\r\n  scale.set(\r\n    2 / width, 0, 0,\r\n    0, 2 / height, 0,\r\n    0, 0, 1\r\n  );\r\n\r\n  return scale.multiply(translate).multiply(vehicleXform);\r\n}\r\n\n;// CONCATENATED MODULE: ./js/autonomy/LanePath.js\nconst halfLaneWidth = 3.7;\r\n\r\nconst centerlineGeometry = new THREE.Geometry();\r\nconst leftBoundaryGeometry = new THREE.Geometry();\r\nconst rightBoundaryGeometry = new THREE.Geometry();\r\n\r\nclass LanePath {\r\n  static hydrate(obj) {\r\n    Object.setPrototypeOf(obj, LanePath.prototype);\r\n  }\r\n\r\n  constructor() {\r\n    this.anchors = [];\r\n    this.centerlines = [];\r\n    this.sampleLengths = [];\r\n    this.arcLengths = [];\r\n    this.leftBoundaries = [];\r\n    this.rightBoundaries = [];\r\n  }\r\n\r\n  get centerline() {\r\n    return [].concat(...this.centerlines);\r\n  }\r\n\r\n  get leftBoundary() {\r\n    return [].concat(...this.leftBoundaries);\r\n  }\r\n\r\n  get rightBoundary() {\r\n    return [].concat(...this.rightBoundaries);\r\n  }\r\n\r\n  get arcLength() {\r\n    return this.arcLengths.reduce((sum, l) => sum + l, 0);\r\n  }\r\n\r\n  sampleStations(startStation, num, interval) {\r\n    const samples = [];\r\n    let anchorIndex = 0;\r\n    let sampleIndex = 0;\r\n    let totalLength = 0;\r\n    let nextStation = startStation;\r\n\r\n    while (totalLength + this.arcLengths[anchorIndex] < nextStation) {\r\n      totalLength += this.arcLengths[anchorIndex];\r\n\r\n      if (++anchorIndex >= this.arcLengths.length)\r\n        return samples;\r\n    }\r\n\r\n    for (let i = 0; i < num; i++) {\r\n      let length = this.sampleLengths[anchorIndex][sampleIndex];\r\n      while (totalLength + length < nextStation) {\r\n        totalLength += length;\r\n\r\n        if (++sampleIndex >= this.sampleLengths[anchorIndex].length) {\r\n          sampleIndex = 0;\r\n\r\n          if (++anchorIndex >= this.sampleLengths.length)\r\n            return samples;\r\n        }\r\n\r\n        length = this.sampleLengths[anchorIndex][sampleIndex];\r\n      }\r\n\r\n      const [p0, p1, p2, p3] = this.anchorsForSplineIndex(anchorIndex);\r\n      const weight = (sampleIndex + (nextStation - totalLength) / length) / this.sampleLengths[anchorIndex].length;\r\n      const pos = catmullRomVec(weight, p0, p1, p2, p3);\r\n      const tangent = tangentAt(weight, p0, p1, p2, p3);\r\n      const rot = Math.atan2(tangent.y, tangent.x);\r\n      const curv = curvatureAt(weight, p0, p1, p2, p3);\r\n\r\n      samples.push({ pos, rot, curv });\r\n      nextStation += interval;\r\n    }\r\n\r\n    return samples;\r\n  }\r\n\r\n  stationLatitudeFromPosition(position, aroundAnchorIndex = null) {\r\n    const [anchorIndex, sampleIndex, sampleStation, prevSampleStation] = this._findClosestSample(position, aroundAnchorIndex);\r\n\r\n    if (anchorIndex === undefined) return [0, 0, 0];\r\n\r\n    let prevPoint;\r\n    let nextPoint;\r\n    let prevStation;\r\n    let nextStation;\r\n\r\n    if (anchorIndex == 0 && sampleIndex == 0) {\r\n      prevPoint = this.centerlines[anchorIndex][sampleIndex];\r\n      nextPoint = this.centerlines[anchorIndex][sampleIndex + 1];\r\n      prevStation = 0;\r\n      nextStation = this.sampleLengths[anchorIndex][sampleIndex];\r\n    } else if (anchorIndex == this.centerlines.length - 1 && sampleIndex == this.centerlines[anchorIndex].length - 1) {\r\n      prevPoint = this.centerlines[anchorIndex][sampleIndex - 1];\r\n      nextPoint = this.centerlines[anchorIndex][sampleIndex];\r\n      prevStation = prevSampleStation;\r\n      nextStation = sampleStation;\r\n    } else {\r\n      prevPoint = sampleIndex == 0 ? this.centerlines[anchorIndex - 1][this.centerlines[anchorIndex - 1].length - 1] : this.centerlines[anchorIndex][sampleIndex - 1];\r\n      nextPoint = sampleIndex == this.centerlines[anchorIndex].length - 1 ? this.centerlines[anchorIndex + 1][0] : this.centerlines[anchorIndex][sampleIndex + 1];\r\n\r\n      const possibleNext = this.centerlines[anchorIndex][sampleIndex];\r\n      const possibleProgress = position.clone().sub(prevPoint).dot(possibleNext.clone().sub(prevPoint)) / prevPoint.distanceToSquared(possibleNext);\r\n\r\n      if (possibleProgress < 1) {\r\n        nextPoint = possibleNext;\r\n        prevStation = prevSampleStation;\r\n        nextStation = sampleStation;\r\n      } else {\r\n        prevPoint = possibleNext;\r\n        prevStation = sampleStation;\r\n        nextStation = sampleStation + this.sampleLengths[anchorIndex][sampleIndex];\r\n      }\r\n    }\r\n\r\n    const progress = Math.clamp(position.clone().sub(prevPoint).dot(nextPoint.clone().sub(prevPoint)) / prevPoint.distanceToSquared(nextPoint), 0, 1);\r\n    const projectedPosition = nextPoint.clone().sub(prevPoint).multiplyScalar(progress).add(prevPoint);\r\n\r\n    const station = prevStation + (nextStation - prevStation) * progress;\r\n    const latitude = Math.sign((nextPoint.x - prevPoint.x) * (position.y - prevPoint.y) - (nextPoint.y - prevPoint.y) * (position.x - prevPoint.x)) * position.distanceTo(projectedPosition);\r\n\r\n    return [station, latitude, anchorIndex];\r\n  }\r\n\r\n  _findClosestSample(position, aroundAnchorIndex = null) {\r\n    let closest = Number.POSITIVE_INFINITY;\r\n    let bestAnchorIndex;\r\n    let bestSampleIndex;\r\n    let bestStation;\r\n    let bestPrevStation;\r\n\r\n    let currStation = 0;\r\n    let prevStation = 0;\r\n\r\n    let startAnchorIndex = 0;\r\n    let endAnchorIndex = this.centerlines.length - 1;\r\n\r\n    if (aroundAnchorIndex !== null) {\r\n      startAnchorIndex = Math.max(0, aroundAnchorIndex - 2);\r\n      endAnchorIndex = Math.min(this.centerlines.length - 1, aroundAnchorIndex + 2);\r\n    }\r\n\r\n    if (startAnchorIndex > 0) {\r\n      for (let anchorIndex = 0; anchorIndex < startAnchorIndex; anchorIndex++) {\r\n        currStation += this.arcLengths[anchorIndex];\r\n      }\r\n\r\n      prevStation = currStation - this.sampleLengths[startAnchorIndex - 1][this.sampleLengths[startAnchorIndex - 1].length - 1];\r\n    }\r\n\r\n    for (let anchorIndex = startAnchorIndex; anchorIndex <= endAnchorIndex; anchorIndex++) {\r\n      const centerline = this.centerlines[anchorIndex];\r\n      for (let sampleIndex = 0; sampleIndex < centerline.length; sampleIndex++) {\r\n        const distSq = position.distanceToSquared(centerline[sampleIndex]);\r\n        if (distSq < closest) {\r\n          closest = distSq;\r\n          bestAnchorIndex = anchorIndex;\r\n          bestSampleIndex = sampleIndex;\r\n          bestStation = currStation;\r\n          bestPrevStation = prevStation;\r\n        }\r\n\r\n        prevStation = currStation;\r\n        currStation += this.sampleLengths[anchorIndex][sampleIndex];\r\n      }\r\n    }\r\n\r\n    return [bestAnchorIndex, bestSampleIndex, bestStation, bestPrevStation];\r\n  }\r\n\r\n  addAnchor(position, resample = true) {\r\n    const index = this.anchors.push(position) - 1;\r\n\r\n    if (resample) {\r\n      for (let i = index - 2; i < index; i++)\r\n        this.resample(i);\r\n    }\r\n  }\r\n\r\n  updateAnchor(index, position) {\r\n    this.anchors[index] = position;\r\n\r\n    for (let i = index - 2; i <= index + 1; i++)\r\n      this.resample(i);\r\n  }\r\n\r\n  removeAnchor(index) {\r\n    if (index < 0 || index >= this.anchors.length) return;\r\n\r\n    this.anchors.splice(index, 1);\r\n\r\n    const segmentIndex = index < this.anchors.length ? index : index - 1;\r\n    this.centerlines.splice(segmentIndex, 1);\r\n    this.sampleLengths.splice(segmentIndex, 1);\r\n    this.leftBoundaries.splice(segmentIndex, 1);\r\n    this.rightBoundaries.splice(segmentIndex, 1);\r\n    this.arcLengths.splice(segmentIndex, 1);\r\n\r\n    for (let i = segmentIndex - 2; i <= segmentIndex; i++)\r\n      this.resample(i);\r\n  }\r\n\r\n  resample(index) {\r\n    if (index < 0 || index > this.anchors.length - 2) return;\r\n\r\n    const [p0, p1, p2, p3] = this.anchorsForSplineIndex(index);\r\n    const points = [];\r\n    const lengths = [];\r\n    const leftBoundary = [];\r\n    const rightBoundary = [];\r\n    let prevPoint = null;\r\n\r\n    const pointsPerSegment = Math.max(10, Math.ceil(p1.distanceTo(p2) / 1));\r\n    const numPoints = index == this.anchors.length - 2 ? pointsPerSegment + 1 : pointsPerSegment;\r\n\r\n    for (let i = 0; i < numPoints; i++) {\r\n      const t = i / pointsPerSegment;\r\n      const point = catmullRomVec(t, p0, p1, p2, p3);\r\n      points.push(point);\r\n\r\n      if (prevPoint != null)\r\n        lengths.push(prevPoint.distanceTo(point));\r\n      prevPoint = point;\r\n\r\n      const tangent = tangentAt(t, p0, p1, p2, p3);\r\n      const normal = new THREE.Vector2(-tangent.y, tangent.x);\r\n\r\n      leftBoundary.push(normal.clone().multiplyScalar(-halfLaneWidth).add(point));\r\n      rightBoundary.push(normal.clone().multiplyScalar(halfLaneWidth).add(point));\r\n    }\r\n\r\n    lengths.push(prevPoint.distanceTo(p2));\r\n\r\n    this.centerlines[index] = points;\r\n    this.sampleLengths[index] = lengths;\r\n    this.leftBoundaries[index] = leftBoundary;\r\n    this.rightBoundaries[index] = rightBoundary;\r\n    this.arcLengths[index] = lengths.reduce((sum, l) => sum + l, 0);\r\n  }\r\n\r\n  resampleAll() {\r\n    for (let i = 0; i < this.anchors.length; i++)\r\n      this.resample(i);\r\n  }\r\n\r\n  anchorsForSplineIndex(index) {\r\n    let p;\r\n    if (index == 0)\r\n      p = [this.anchors[0]].concat(this.anchors.slice(0, 3));\r\n    else\r\n      p = this.anchors.slice(index - 1, index + 3);\r\n\r\n    if (p[3] === undefined)\r\n      p[3] = p[2];\r\n\r\n    return p;\r\n  }\r\n}\r\n\r\nfunction catmullRom(t, p0, p1, p2, p3) {\r\n  const v0 = (p2 - p0) * 0.5;\r\n  const v1 = (p3 - p1) * 0.5;\r\n  const t2 = t * t;\r\n  const t3 = t * t2;\r\n  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\r\n}\r\n\r\nfunction catmullRomVec(t, p0, p1, p2, p3) {\r\n  return new THREE.Vector2(catmullRom(t, p0.x, p1.x, p2.x, p3.x), catmullRom(t, p0.y, p1.y, p2.y, p3.y));\r\n}\r\n\r\nfunction tangentAt(t, p0, p1, p2, p3) {\r\n  const delta = 0.0001;\r\n  let t1 = t - delta;\r\n  let t2 = t + delta;\r\n\r\n  if (t1 < 0) t1 = 0;\r\n  if (t2 > 1) t2 = 1;\r\n\r\n  const prev = catmullRomVec(t1, p0, p1, p2, p3);\r\n  const next = catmullRomVec(t2, p0, p1, p2, p3);\r\n\r\n  return next.sub(prev).normalize();\r\n}\r\n\r\nfunction curvatureAt(t2, p0, p1, p2, p3) {\r\n  const delta = 0.0001;\r\n\r\n  // If we're estimating curvature at one of the endpoints of the spline,\r\n  // slightly shift it inwards to avoid infinite curvature.\r\n  if (t2 == 0) t2 = delta;\r\n  if (t2 == 1) t2 = 1 - delta;\r\n\r\n  let t1 = t2 - delta;\r\n  let t3 = t2 + delta;\r\n\r\n  if (t1 < 0) t1 = 0;\r\n  if (t3 > 1) t3 = 1;\r\n\r\n  const pt1 = catmullRomVec(t1, p0, p1, p2, p3);\r\n  const pt2 = catmullRomVec(t2, p0, p1, p2, p3);\r\n  const pt3 = catmullRomVec(t3, p0, p1, p2, p3);\r\n\r\n  return (Math.atan2(pt3.y - pt2.y, pt3.x - pt2.x) - Math.atan2(pt2.y - pt1.y, pt2.x - pt1.x)) / pt2.distanceTo(pt1);\r\n}\r\n\n;// CONCATENATED MODULE: ./js/autonomy/StaticObstacle.js\nclass StaticObstacle {\r\n  static hydrate(obj) {\r\n    Object.setPrototypeOf(obj, StaticObstacle.prototype);\r\n    Object.setPrototypeOf(obj.pos, THREE.Vector2.prototype);\r\n  }\r\n\r\n  static fromJSON(json) {\r\n    return new StaticObstacle(new THREE.Vector2(json.p[0], json.p[1]), json.r, json.w, json.h);\r\n  }\r\n\r\n  constructor(pos, rot, width, height) {\r\n    this.pos = pos;\r\n    this.rot = rot;\r\n    this.width = width;\r\n    this.height = height;\r\n\r\n    this.updateVertices();\r\n  }\r\n\r\n  toJSON() {\r\n    const trunc = n => +n.toFixed(5);\r\n\r\n    return {\r\n      p: [trunc(this.pos.x), trunc(this.pos.y)],\r\n      r: trunc(this.rot),\r\n      w: trunc(this.width),\r\n      h: trunc(this.height)\r\n    };\r\n  }\r\n\r\n  updateVertices() {\r\n    this.vertices = [];\r\n\r\n    const cosRot = Math.cos(this.rot);\r\n    const sinRot = Math.sin(this.rot);\r\n    const halfWidth = this.width / 2;\r\n    const halfHeight = this.height / 2;\r\n\r\n    const hWcR = halfWidth * cosRot;\r\n    const hWsR = halfWidth * sinRot;\r\n    const hHcR = halfHeight * cosRot;\r\n    const hHsR = halfHeight * sinRot;\r\n\r\n    const v1 = [-hWcR - hHsR + this.pos.x, -hWsR + hHcR + this.pos.y];\r\n    const v2 = [-hWcR + hHsR + this.pos.x, -hWsR - hHcR + this.pos.y];\r\n    const v3 = [hWcR + hHsR + this.pos.x, hWsR - hHcR + this.pos.y];\r\n    const v4 = [hWcR - hHsR + this.pos.x, hWsR + hHcR + this.pos.y];\r\n\r\n    this.vertices = [\r\n      v1[0], v1[1],\r\n      v2[0], v2[1],\r\n      v3[0], v3[1],\r\n      v3[0], v3[1],\r\n      v4[0], v4[1],\r\n      v1[0], v1[1]\r\n    ];\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./js/autonomy/DynamicObstacle.js\n// Half width and half height\r\nconst VEHICLE_SIZE = { w: 2.5, h: 1 };\r\nconst CYCLIST_SIZE = { w: 1.2, h: 0.6 };\r\nconst PEDESTRIAN_SIZE = { w: 0.6, h: 0.6 };\r\n\r\nclass DynamicObstacle {\r\n  static hydrate(obj) {\r\n    Object.setPrototypeOf(obj, DynamicObstacle.prototype);\r\n    Object.setPrototypeOf(obj.startPos, THREE.Vector2.prototype);\r\n    Object.setPrototypeOf(obj.velocity, THREE.Vector2.prototype);\r\n  }\r\n\r\n  constructor(type, startPos, velocity, parallel) {\r\n    this.type = type;\r\n    this.startPos = startPos;\r\n    this.velocity = velocity;\r\n    this.parallel = parallel;\r\n\r\n    switch (type) {\r\n        case 'cyclist':\r\n          this.size = Object.assign({}, CYCLIST_SIZE);\r\n          break;\r\n\r\n        case 'pedestrian':\r\n          this.size = Object.assign({}, PEDESTRIAN_SIZE);\r\n          break;\r\n\r\n        default:\r\n          this.size = Object.assign({}, VEHICLE_SIZE);\r\n    }\r\n\r\n    if (!parallel)\r\n      [this.size.w, this.size.h] = [this.size.h, this.size.w];\r\n  }\r\n\r\n  positionAtTime(time) {\r\n    return this.velocity.clone().multiplyScalar(time).add(this.startPos);\r\n  }\r\n\r\n  positionsInTimeRange(startTime, endTime, numFrames) {\r\n    const dt = (endTime - startTime) / numFrames;\r\n    const positions = [];\r\n    let time = startTime;\r\n\r\n    for (let i = 0; i <= numFrames; i++) {\r\n      positions.push(this.positionAtTime(time));\r\n      time += dt;\r\n    }\r\n\r\n    return positions;\r\n  }\r\n\r\n  verticesInTimeRange(startTime, endTime, config) {\r\n    const positions = this.positionsInTimeRange(startTime, endTime, config.numDynamicSubframes);\r\n    const vertices = [];\r\n\r\n    // Hazard dilation (drawn behind, z = 0.75)\r\n    const hazardHalfWidth = this.size.w + config.dynamicHazardDilationS + config.collisionDilationS;\r\n    const hazardHalfHeight = this.size.h + config.dynamicHazardDilationL + config.collisionDilationL;\r\n\r\n    positions.forEach(p => {\r\n      const v1 = [-hazardHalfWidth + p.x, hazardHalfHeight + p.y];\r\n      const v2 = [hazardHalfWidth + p.x, hazardHalfHeight + p.y];\r\n      const v3 = [hazardHalfWidth + p.x, -hazardHalfHeight + p.y];\r\n      const v4 = [-hazardHalfWidth + p.x, -hazardHalfHeight + p.y];\r\n\r\n      vertices.push(\r\n        v1[0], v1[1], 0.75,\r\n        v2[0], v2[1], 0.75,\r\n        v3[0], v3[1], 0.75,\r\n        v3[0], v3[1], 0.75,\r\n        v4[0], v4[1], 0.75,\r\n        v1[0], v1[1], 0.75\r\n      );\r\n    });\r\n    \r\n    // Collision dilation (drawn in front, z = 0.25)\r\n    const collisionHalfWidth = this.size.w + config.collisionDilationS;\r\n    const collisionHalfHeight = this.size.h + config.collisionDilationL;\r\n\r\n    positions.forEach(p => {\r\n      const v1 = [-collisionHalfWidth + p.x, collisionHalfHeight + p.y];\r\n      const v2 = [collisionHalfWidth + p.x, collisionHalfHeight + p.y];\r\n      const v3 = [collisionHalfWidth + p.x, -collisionHalfHeight + p.y];\r\n      const v4 = [-collisionHalfWidth + p.x, -collisionHalfHeight + p.y];\r\n\r\n      vertices.push(\r\n        v1[0], v1[1], 0.25,\r\n        v2[0], v2[1], 0.25,\r\n        v3[0], v3[1], 0.25,\r\n        v3[0], v3[1], 0.25,\r\n        v4[0], v4[1], 0.25,\r\n        v1[0], v1[1], 0.25\r\n      );\r\n    });\r\n\r\n    return vertices;\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./workers/PathPlannerWorker.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction init () {\r\n  let pathPlanner;\r\n  try {\r\n    pathPlanner = new PathPlanner();\r\n  } catch (e) {\r\n    console.log('Error initializing path planner:');\r\n    console.log(e);\r\n\r\n    self.postMessage({ error: true });\r\n\r\n    return;\r\n  }\r\n\r\n  self.onmessage = function(event) {\r\n    const { config, vehiclePose, vehicleStation, lanePath, startTime, staticObstacles, dynamicObstacles, reset } = event.data;\r\n\r\n    LanePath.hydrate(lanePath);\r\n    staticObstacles.forEach(o => StaticObstacle.hydrate(o));\r\n    dynamicObstacles.forEach(o => DynamicObstacle.hydrate(o));\r\n\r\n    if (reset) pathPlanner.reset();\r\n\r\n    pathPlanner.config = config;\r\n\r\n    try {\r\n      const { path, fromVehicleSegment, fromVehicleParams, latticeStartStation, dynamicObstacleGrid } = pathPlanner.plan(vehiclePose, vehicleStation, lanePath, startTime, staticObstacles, dynamicObstacles);\r\n\r\n      self.postMessage({ path, fromVehicleSegment, fromVehicleParams, vehiclePose, vehicleStation, latticeStartStation, config, dynamicObstacleGrid });\r\n    } catch (error) {\r\n      console.log('PathPlannerWorker error');\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nif (typeof(window) === 'undefined') {\r\n  init();\r\n} else {\r\n  window.dash_initPathPlannerWorker = init;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL0dQR1BVLmpzPzQ0MmEiLCJ3ZWJwYWNrOi8vdGhyZWUtYXZzLWRhc2gvLi9qcy9waHlzaWNzL0Nhci5qcz8yYzBlIiwid2VicGFjazovL3RocmVlLWF2cy1kYXNoLy4vanMvYXV0b25vbXkvcGF0aC1wbGFubmluZy9DdWJpY1BhdGguanM/OTQwYyIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvUXVpbnRpY1BhdGguanM/OGM2NSIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvZ3BncHUtcHJvZ3JhbXMveHlPYnN0YWNsZUdyaWQuanM/ZDc4YyIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvZ3BncHUtcHJvZ3JhbXMvc2xPYnN0YWNsZUdyaWQuanM/ZTU0YiIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvZ3BncHUtcHJvZ3JhbXMvc2xPYnN0YWNsZUdyaWREaWxhdGlvbi5qcz8xNzQ5Iiwid2VicGFjazovL3RocmVlLWF2cy1kYXNoLy4vanMvYXV0b25vbXkvcGF0aC1wbGFubmluZy9ncGdwdS1wcm9ncmFtcy9zbER5bmFtaWNPYnN0YWNsZUdyaWQuanM/NmMwZSIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvZ3BncHUtcHJvZ3JhbXMveHlzbE1hcC5qcz81YmE5Iiwid2VicGFjazovL3RocmVlLWF2cy1kYXNoLy4vanMvYXV0b25vbXkvcGF0aC1wbGFubmluZy9ncGdwdS1wcm9ncmFtcy9vcHRpbWl6ZUN1YmljUGF0aHMuanM/MTUzZCIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvZ3BncHUtcHJvZ3JhbXMvb3B0aW1pemVRdWludGljUGF0aHMuanM/YzA1ZCIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvZ3BncHUtcHJvZ3JhbXMvZ3JhcGhTZWFyY2hTaGFyZWQuanM/MjA1MiIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvZ3BncHUtcHJvZ3JhbXMvcGF0aEZyb21WZWhpY2xlQ29zdHMuanM/ZTUwYyIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvZ3BncHUtcHJvZ3JhbXMvZ3JhcGhTZWFyY2guanM/NGM4OCIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvZ3BncHUtcHJvZ3JhbXMveHlPYnN0YWNsZUNvc3RHcmlkLmpzP2M5NzQiLCJ3ZWJwYWNrOi8vdGhyZWUtYXZzLWRhc2gvLi9qcy9hdXRvbm9teS9wYXRoLXBsYW5uaW5nL1BhdGhQbGFubmVyLmpzP2QzMjYiLCJ3ZWJwYWNrOi8vdGhyZWUtYXZzLWRhc2gvLi9qcy9hdXRvbm9teS9MYW5lUGF0aC5qcz8wZmE0Iiwid2VicGFjazovL3RocmVlLWF2cy1kYXNoLy4vanMvYXV0b25vbXkvU3RhdGljT2JzdGFjbGUuanM/ODkwNiIsIndlYnBhY2s6Ly90aHJlZS1hdnMtZGFzaC8uL2pzL2F1dG9ub215L0R5bmFtaWNPYnN0YWNsZS5qcz8yZTcwIiwid2VicGFjazovL3RocmVlLWF2cy1kYXNoLy4vd29ya2Vycy9QYXRoUGxhbm5lcldvcmtlci5qcz80ZTc2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLGdDQUFnQztBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNENBQTRDLHNCQUFzQjs7QUFFbEU7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsYUFBYTs7QUFFekQ7QUFDQSx3R0FBd0csY0FBYyxnQkFBZ0IsNkJBQTZCOztBQUVuSztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsc0JBQXNCOztBQUVsRTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsc0JBQXNCOztBQUVsRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLCtEQUErRCxZQUFZOztBQUUzRSxlQUFlLGdDQUFnQztBQUMvQztBQUNBO0FBQ0EsT0FBTztBQUNQLHVDQUF1QyxZQUFZO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBLG1DQUFtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSx5REFBeUQsT0FBTzs7QUFFaEU7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxhQUFhO0FBQzlELE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsS0FBSyxHQUFHLGFBQWE7QUFDaEUsT0FBTztBQUNQLGVBQWUsMkRBQTJEOztBQUUxRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9EQUFvRDtBQUNwRCxXQUFXO0FBQ1gsb0RBQW9EO0FBQ3BEOztBQUVBLDZDQUE2QyxLQUFLLEdBQUcsYUFBYTtBQUNsRSxTQUFTO0FBQ1QsMkNBQTJDO0FBQzNDO0FBQ0EsK0NBQStDLEtBQUssR0FBRyxZQUFZLEdBQUcsT0FBTyxFQUFFO0FBQy9FO0FBQ0EsK0NBQStDLEtBQUssR0FBRyxhQUFhO0FBQ3BFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QiwyREFBMkQsRUFBRSwrQkFBK0I7QUFDeEg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLG1CQUFtQjtBQUN4QyxxQkFBcUIsTUFBTSxJQUFJLFVBQVU7O0FBRXpDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsOEVBQThFLGFBQWE7QUFDM0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsY0FBYztBQUMzQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCwrRUFBK0UsZUFBZSxhQUFhLFlBQVksaUJBQWlCLHNCQUFzQixhQUFhLHlDQUF5QztBQUNwTjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JELG9IQUFvSDtBQUNwSCx1REFBdUQ7QUFDdkQsdURBQXVEO0FBQ3ZELHVEQUF1RDtBQUN2RCw2REFBNkQ7QUFDN0QsdURBQXVELEtBQUs7QUFDNUQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw0REFBNEQ7QUFDNUQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7O0FDN2hCZTs7QUFFZjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsR0FBRzs7QUFFSDs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVIOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsMEJBQTBCO0FBQzFCLHVCQUF1QjtBQUN2Qiw2QkFBNkI7QUFDN0IsNEJBQTRCO0FBQzVCLHlDQUF5QztBQUN6QyxnQkFBZ0I7QUFDaEI7QUFDQSwrQkFBK0I7QUFDL0Isd0JBQXdCO0FBQ3hCO0FBQ0EsMEJBQTBCLE1BQU07QUFDaEMsd0JBQXdCO0FBQ3hCLDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQix3REFBd0Q7QUFDeEQsNkJBQTZCOzs7QUNySjdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDZTtBQUNmO0FBQ0EsaUNBQWlDO0FBQ2pDLCtCQUErQjs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLFdBQVcseUNBQXlDO0FBQ3hGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiwyQkFBMkI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxxQkFBcUI7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLDBCQUEwQix5QkFBeUI7QUFDbkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcscUJBQXFCOztBQUVoQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixpR0FBaUc7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixhQUFhO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLDZGQUE2Rjs7QUFFOUc7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSx5RkFBeUY7O0FBRXhHO0FBQ0E7QUFDQTs7O0FDNU1lO0FBQ2Y7QUFDQSxpQ0FBaUM7QUFDakMsK0JBQStCOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0NBQWtDLFdBQVcsZ0dBQWdHO0FBQzdJOztBQUVBO0FBQ0EsV0FBVyw2QkFBNkI7O0FBRXhDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixpR0FBaUc7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixhQUFhO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLDZGQUE2Rjs7QUFFOUc7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSx5RkFBeUY7O0FBRXhHO0FBQ0E7QUFDQTs7O0FDdkVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxREFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5QkFBeUI7QUFDeEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUMxRUQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHFEQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5QkFBeUI7QUFDeEM7QUFDQSx5QkFBeUIsd0JBQXdCO0FBQ2pELHlCQUF5QixnQkFBZ0I7QUFDekMseUJBQXlCLGdCQUFnQjtBQUN6Qyx3QkFBd0IsZUFBZTtBQUN2Qyx3QkFBd0IsZUFBZTtBQUN2QyxvQ0FBb0MsZ0JBQWdCO0FBQ3BELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQ2xERDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLHdCQUF3QjtBQUN6QztBQUNBO0FBQ0E7O0FBRUEscUNBQXFDLHlDQUF5QztBQUM5RTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSw2REFBZTtBQUNmO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxpQkFBaUIsdUNBQXVDO0FBQ3hEO0FBQ0EsMkJBQTJCLHdCQUF3QjtBQUNuRCxrQkFBa0IsZUFBZTtBQUNqQyw4QkFBOEIsY0FBYztBQUM1QywyQkFBMkI7QUFDM0I7QUFDQSxPQUFPO0FBQ1AsT0FBTztBQUNQO0FBQ0EsaUJBQWlCLGdDQUFnQztBQUNqRDtBQUNBLDJCQUEyQiw4REFBOEQ7QUFDekYsa0JBQWtCLGVBQWU7QUFDakMsOEJBQThCLGNBQWM7QUFDNUMsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUN2RUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLHNDQUFnQjtBQUNwQixJQUFJLG1DQUFhO0FBQ2pCOztBQUVBO0FBQ0EsNERBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUZBQWlGO0FBQ2hHO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLDBCQUEwQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGNBQWMsc0NBQWdCO0FBQzlCOztBQUVBO0FBQ0EsMkNBQTJDLHNDQUFnQjtBQUMzRDtBQUNBOztBQUVBO0FBQ0Esc0RBQXNELG1DQUFhOztBQUVuRSwyQ0FBMkMsc0NBQWdCOztBQUUzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLElBQUksc0NBQWdCOztBQUVwQjtBQUNBLHVCQUF1QiwwQkFBMEI7QUFDakQ7QUFDQSxNQUFNLHNDQUFnQjtBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxtQ0FBYTs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQ2xIRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsOENBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBLHFCQUFxQix3QkFBd0I7QUFDN0Msd0JBQXdCLGVBQWU7QUFDdkMseUJBQXlCLGVBQWU7QUFDeEMsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUN2RkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQix5QkFBeUI7QUFDMUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIsMkJBQTJCO0FBQzVDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlCQUFpQix1QkFBdUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSx5REFBZTtBQUNmO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxpQkFBaUIsaUNBQWlDO0FBQ2xEO0FBQ0Esb0JBQW9CLHdCQUF3QjtBQUM1Qyx3QkFBd0IsY0FBYztBQUN0Qyx5QkFBeUIsY0FBYztBQUN2QyxnQ0FBZ0MsY0FBYztBQUM5QyxpQ0FBaUM7QUFDakM7QUFDQSxPQUFPO0FBQ1AsT0FBTztBQUNQO0FBQ0EsaUJBQWlCLDRDQUE0QztBQUM3RDtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUMsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FDNVFEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQix5QkFBeUI7QUFDMUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIsMkJBQTJCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIsdUJBQXVCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxlQUFlLDhDQUE4QztBQUM3RDtBQUNBLGtCQUFrQix3QkFBd0I7QUFDMUMsc0JBQXNCLGdCQUFnQjtBQUN0Qyx1QkFBdUIsZ0JBQWdCO0FBQ3ZDLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FDM01EOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDOztBQUV4Qzs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsdUNBQXVDOztBQUV2QztBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLGdCQUFnQjtBQUNqQzs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGdCQUFnQjtBQUNqQyxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUcsbUNBQW1DO0FBQ3RDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDLG1CQUFtQix1REFBdUQ7QUFDMUUsMEJBQTBCLCtFQUErRTtBQUN6Ryx5QkFBeUIsMkJBQTJCO0FBQ3BELDBCQUEwQiwyQkFBMkI7QUFDckQsa0JBQWtCLGVBQWU7QUFDakMsbUJBQW1CLGdCQUFnQjtBQUNuQyxrQkFBa0IsZUFBZTtBQUNqQyxtQkFBbUIsZUFBZTtBQUNsQyx1QkFBdUIsZUFBZTtBQUN0Qyx5QkFBeUIsZUFBZTtBQUN4QyxrQkFBa0IsZUFBZTtBQUNqQyxtQkFBbUIsZ0JBQWdCO0FBQ25DLDJCQUEyQixnQkFBZ0I7QUFDM0MsdUJBQXVCLGdCQUFnQjtBQUN2QyxlQUFlLGdCQUFnQjtBQUMvQixzQkFBc0IsZ0JBQWdCO0FBQ3RDLDRCQUE0QixnQkFBZ0I7QUFDNUMsNEJBQTRCLGdCQUFnQjtBQUM1QyxpQ0FBaUMsZ0JBQWdCO0FBQ2pELG1DQUFtQyxnQkFBZ0I7QUFDbkQscUNBQXFDLGdCQUFnQjtBQUNyRCxrQkFBa0IsZ0JBQWdCO0FBQ2xDLHFCQUFxQixnQkFBZ0I7QUFDckMscUJBQXFCLGdCQUFnQjtBQUNyQyxxQkFBcUI7QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQWFDOzs7QUNuVG9LOztBQUVySztBQUNBLFNBQVMsYUFBYSwwQkFBMEIsb0JBQW9CLEdBQUcsc0JBQXNCOztBQUU3Rjs7QUFFQSx3QkFBd0IsY0FBYztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEscUJBQXFCLDhEQUE4RDtBQUNuRjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsZ0VBQWdFLHVGQUF1RjtBQUN2SixJQUFJLHdDQUF3Qzs7QUFFNUMscURBQXFELGtDQUFrQztBQUN2Rjs7QUFFQTtBQUNBOztBQUVBLDJEQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JELGtDQUFrQyxFQUFFLGVBQWU7QUFDbkQsb0JBQW9CLHdCQUF3QjtBQUM1Qyw2QkFBNkIsdURBQXVEO0FBQ3BGLDhCQUE4QixjQUFjO0FBQzVDLCtCQUErQixjQUFjO0FBQzdDLDRCQUE0QixnQkFBZ0I7QUFDNUMsd0JBQXdCLGdCQUFnQjtBQUN4Qyw2QkFBNkIsY0FBYztBQUMzQyw2QkFBNkIsZ0JBQWdCO0FBQzdDLCtCQUErQixnQkFBZ0I7QUFDL0Msc0NBQXNDO0FBQ3RDLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLGlCQUFpQixzQ0FBc0M7QUFDdkQsa0NBQWtDLEVBQUUsZUFBZTtBQUNuRCxvQkFBb0Isd0JBQXdCO0FBQzVDLDZCQUE2Qix5REFBeUQ7QUFDdEYsOEJBQThCLGNBQWM7QUFDNUMsK0JBQStCLGNBQWM7QUFDN0MsNEJBQTRCLGdCQUFnQjtBQUM1Qyx3QkFBd0IsZ0JBQWdCO0FBQ3hDLHlCQUF5QixnQkFBZ0I7QUFDekMsMEJBQTBCLGdCQUFnQjtBQUMxQyw2QkFBNkIsY0FBYztBQUMzQywrQkFBK0IsZ0JBQWdCO0FBQy9DLHNDQUFzQztBQUN0QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQseUJBQXlCO0FBQzlFLGtDQUFrQyxFQUFFLGtCQUFrQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5QkFBeUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EscURBQXFELHlCQUF5QjtBQUM5RSxrQ0FBa0MsRUFBRSxrQkFBa0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHlCQUF5QjtBQUNyRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQ2xJRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUyTTs7QUFFM007QUFDQSxFQUFFLGFBQWE7QUFDZixFQUFFLG9CQUFvQjtBQUN0QixFQUFFLHNCQUFzQjs7QUFFeEI7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlDQUFpQztBQUNqQzs7QUFFQTs7QUFFQSwrREFBK0QsdUJBQXVCO0FBQ3RGOztBQUVBLHdDQUF3Qyw2QkFBNkI7QUFDckU7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGdDQUFnQyw4QkFBOEI7QUFDOUQsOEJBQThCLHFCQUFxQjtBQUNuRCxpQ0FBaUMsOEJBQThCO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsa0RBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQyxnQ0FBZ0MsRUFBRSxlQUFlO0FBQ2pELGtCQUFrQix3QkFBd0I7QUFDMUMsb0JBQW9CLGdEQUFnRDtBQUNwRSxxQkFBcUIsd0JBQXdCO0FBQzdDLG9DQUFvQyx3QkFBd0I7QUFDNUQsc0NBQXNDLHdCQUF3QjtBQUM5RCw0QkFBNEIsY0FBYztBQUMxQyw2QkFBNkIsY0FBYztBQUMzQywwQkFBMEIsZ0JBQWdCO0FBQzFDLHNCQUFzQixnQkFBZ0I7QUFDdEMsdUJBQXVCLGdCQUFnQjtBQUN2Qyx3QkFBd0IsZ0JBQWdCO0FBQ3hDLDJCQUEyQixnQkFBZ0I7QUFDM0MsNkJBQTZCLGdCQUFnQjtBQUM3QyxvQ0FBb0MsZ0JBQWdCO0FBQ3BELHNCQUFzQixjQUFjO0FBQ3BDLHVCQUF1QixjQUFjO0FBQ3JDLDJCQUEyQixjQUFjO0FBQ3pDLHdCQUF3QixjQUFjO0FBQ3RDLG1CQUFtQixjQUFjO0FBQ2pDLDhCQUE4QixjQUFjO0FBQzVDLCtCQUErQixjQUFjO0FBQzdDLHlCQUF5Qix3QkFBd0IsbUJBQW1CLE1BQU07QUFDMUUscUJBQXFCLHdCQUF3QixlQUFlLE1BQU07QUFDbEUsa0JBQWtCLGNBQWM7QUFDaEMsT0FBTztBQUNQO0FBQ0Esc0JBQXNCLHlCQUF5QixHQUFHLG1CQUFtQixHQUFHLGVBQWU7QUFDdkY7QUFDQTs7QUFFQSx1QkFBdUIsc0NBQXNDO0FBQzdELGdEQUFnRCxhQUFhO0FBQzdEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxhQUFhLHlCQUF5QixHQUFHLG1CQUFtQixHQUFHLGVBQWU7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLGdDQUFnQyxFQUFFLGtCQUFrQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHlCQUF5QjtBQUNuRCx1QkFBdUIsbUJBQW1CO0FBQzFDLGtCQUFrQixlQUFlO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxDQUFDOzs7QUMxUUQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHlEQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5Q0FBeUM7QUFDeEQ7QUFDQSxrQkFBa0Isd0JBQXdCO0FBQzFDLHlCQUF5Qix1REFBdUQ7QUFDaEYsd0JBQXdCLGVBQWU7QUFDdkMseUJBQXlCLGVBQWU7QUFDeEMsd0JBQXdCLGVBQWU7QUFDdkMseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQzNDa0M7QUFDSTtBQUNBO0FBQ0k7QUFDcUI7QUFDQTtBQUNnQjtBQUNGO0FBQzVCO0FBQ3NCO0FBQ0k7QUFDQTtBQUNsQjtBQUNjOztBQUV4RSxNQUFNLHFDQUF5QjtBQUMvQixNQUFNLCtCQUFtQjtBQUN6QixNQUFNLDJCQUFlOztBQUVyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNLG9CQUFvQjtBQUMxQixNQUFNLG9CQUFvQjtBQUMxQixTQUFTLDRCQUE0QjtBQUNyQyxNQUFNLDJCQUEyQjtBQUNqQyxNQUFNLGFBQWE7QUFDbkIsU0FBUyx3QkFBd0I7QUFDakMsTUFBTSwwQkFBMEI7QUFDaEMsU0FBUywwQkFBMEI7QUFDbkMsTUFBTSxpQkFBaUI7QUFDdkIsK0JBQStCLE1BQU0sc0JBQXNCOztBQUUzRCxxQkFBcUIsS0FBSztBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSwrQ0FBK0MsU0FBUyw0RkFBNEYsRUFBRTs7QUFFdEo7QUFDQTtBQUNBOztBQUVBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLHFCQUFxQjtBQUMzQixNQUFNLHFCQUFxQjtBQUMzQixTQUFTLDZCQUE2QjtBQUN0QyxNQUFNLDRCQUE0QjtBQUNsQyxNQUFNLGNBQWM7QUFDcEIsU0FBUyx5QkFBeUI7QUFDbEMsTUFBTSwyQkFBMkI7QUFDakMsU0FBUywyQkFBMkI7QUFDcEMsTUFBTSxrQkFBa0I7QUFDeEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsZUFBZSxxQ0FBeUIsR0FBRywrQkFBbUIsR0FBRywyQkFBZTtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsdUJBQXVCO0FBQzFDOztBQUVBLHFCQUFxQixzQ0FBc0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIscUNBQXlCLEdBQUcsK0JBQW1CO0FBQ3RFLHdDQUF3QywyQkFBZTtBQUN2RDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw2Q0FBNkMscUNBQXlCO0FBQ3RFLHNDQUFzQyxxQ0FBeUI7O0FBRS9EO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCLFNBQVM7O0FBRXJDLCtCQUErQjtBQUMvQixTQUFTLE9BQU87QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsV0FBVzs7QUFFdkMsK0JBQStCO0FBQy9CO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSwwQkFBMEIsU0FBUztBQUNuQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FDcmRBOztBQUVBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLGdDQUFnQztBQUMvRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNENBQTRDLCtCQUErQjtBQUMzRTtBQUNBLCtCQUErQixpQ0FBaUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkIsV0FBVztBQUN4QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwyQkFBMkIsZ0JBQWdCO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0NBQWtDLG1CQUFtQjtBQUNyRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUJBQW1CLGVBQWU7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIseUJBQXlCO0FBQzVDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FDbFRlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3pEQTtBQUNBLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIseUJBQXlCOztBQUVWO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7O0FBRUE7QUFDQSxzQ0FBc0M7QUFDdEM7O0FBRUE7QUFDQSxzQ0FBc0M7QUFDdEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7OztBQ2xHcUQ7QUFDSjtBQUNxQjtBQUNwQjtBQUNZO0FBQ0U7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixXQUFXO0FBQ2pDLEdBQUc7QUFDSDtBQUNBOztBQUVBLHNCQUFzQixjQUFjOztBQUVwQztBQUNBOztBQUVBO0FBQ0EsV0FBVyxxR0FBcUc7O0FBRWhILElBQUksZ0JBQWdCO0FBQ3BCLGlDQUFpQyxzQkFBc0I7QUFDdkQsa0NBQWtDLHVCQUF1Qjs7QUFFekQ7O0FBRUE7O0FBRUE7QUFDQSxhQUFhLHdGQUF3Rjs7QUFFckcsd0JBQXdCLDZIQUE2SDtBQUNySixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiMjc5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogUGFydGlhbGx5IGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdHVyYm8vanMvYmxvYi9tYXN0ZXIvdHVyYm8uanNcclxuICpcclxuICogVHVyYm8uanMgTGljZW5zZTpcclxuICogQ29weXJpZ2h0IChjKSAyMDE2IG1pbnhvbWF0XHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxyXG4gKiBTT0ZUV0FSRS5cclxuICovXHJcblxyXG5jb25zdCB2ZXJ0ZXhTaGFkZXJDb2RlID0gYCN2ZXJzaW9uIDMwMCBlc1xyXG5pbiB2ZWMyIHBvc2l0aW9uO1xyXG5pbiB2ZWMyIHRleHR1cmU7XHJcbm91dCB2ZWMyIGtlcm5lbFBvc2l0aW9uO1xyXG5cclxudm9pZCBtYWluKHZvaWQpIHtcclxuICBrZXJuZWxQb3NpdGlvbiA9IHRleHR1cmU7XHJcbiAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLnh5LCAwLjAsIDEuMCk7XHJcbn1cclxuYDtcclxuXHJcbmNvbnN0IGZyYWdtZW50U2hhZGVySGVhZGVyID0gYCN2ZXJzaW9uIDMwMCBlc1xyXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XHJcbnByZWNpc2lvbiBoaWdocCBpbnQ7XHJcbnByZWNpc2lvbiBoaWdocCBzYW1wbGVyMkQ7XHJcbnByZWNpc2lvbiBoaWdocCBzYW1wbGVyMkRBcnJheTtcclxucHJlY2lzaW9uIGhpZ2hwIHNhbXBsZXIzRDtcclxucHJlY2lzaW9uIGhpZ2hwIHNhbXBsZXJDdWJlO1xyXG5cclxuaW4gdmVjMiBrZXJuZWxQb3NpdGlvbjtcclxub3V0IHZlYzQga2VybmVsT3V0O1xyXG51bmlmb3JtIGl2ZWMyIGtlcm5lbFNpemU7XHJcbmA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHUEdQVSB7XHJcbiAgc3RhdGljIGFsbG9jKHNpemUsIHN0cmlkZSkge1xyXG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHN0cmlkZSkgfHwgc3RyaWRlIDwgMSB8fCBzdHJpZGUgPiA0KVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhIHN0cmlkZSBtdXN0IGJlIGFuIGludGVnZXIgYmV0d2VlbiAxIGFuZCA0LlwiKTtcclxuXHJcbiAgICAvLyBGaW5kIHRoZSBzbWFsbGVzdCBwZXJmZWN0IHNxdWFyZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gc2l6ZVxyXG4gICAgY29uc3Qgc3F1YXJlU2l6ZSA9IE1hdGgucG93KE1hdGguY2VpbChNYXRoLnNxcnQoc2l6ZSkpLCAyKTtcclxuXHJcbiAgICBjb25zdCBkYXRhID0gbmV3IEZsb2F0MzJBcnJheShzcXVhcmVTaXplICogc3RyaWRlKTtcclxuICAgIGRhdGEuZ3BncHVTaXplID0gc2l6ZTtcclxuICAgIGRhdGEuZ3BncHVTdHJpZGUgPSBzdHJpZGU7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZ3MsIHNoYXJlZCA9IHt9KSB7XHJcbiAgICB0aGlzLl9zZXRVcEdMKCk7XHJcblxyXG4gICAgdGhpcy5vdXRwdXRUZXh0dXJlcyA9IHt9O1xyXG4gICAgdGhpcy5zaGFyZWRUZXh0dXJlcyA9IHt9O1xyXG5cclxuICAgIHRoaXMucHJvZ3JhbXMgPSBjb25maWdzLm1hcChjID0+IHRoaXMuX3ByZXBhcmVQcm9ncmFtKGMpKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gc2hhcmVkKSB7XHJcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBzaGFyZWRbbmFtZV07XHJcbiAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgY2hhbm5lbHMsIGRhdGEgfSA9IG9wdGlvbnM7XHJcbiAgICAgIHRoaXMuc2hhcmVkVGV4dHVyZXNbbmFtZV0gPSB0aGlzLl9jcmVhdGVUZXh0dXJlKGRhdGEsIHdpZHRoLCBoZWlnaHQsIGNoYW5uZWxzLCBvcHRpb25zKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZVNoYXJlZFRleHR1cmVzKHNoYXJlZCkge1xyXG4gICAgdGhpcy5zaGFyZWRUZXh0dXJlcyA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgbmFtZSBpbiBzaGFyZWQpIHtcclxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHNoYXJlZFtuYW1lXTtcclxuICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBjaGFubmVscywgZGF0YSB9ID0gb3B0aW9ucztcclxuICAgICAgaWYgKHRoaXMuc2hhcmVkVGV4dHVyZXNbbmFtZV0pIHRoaXMuZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLnNoYXJlZFRleHR1cmVzW25hbWVdKTtcclxuICAgICAgdGhpcy5zaGFyZWRUZXh0dXJlc1tuYW1lXSA9IHRoaXMuX2NyZWF0ZVRleHR1cmUoZGF0YSwgd2lkdGgsIGhlaWdodCwgY2hhbm5lbHMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlUHJvZ3JhbShwcm9ncmFtT3JQcm9ncmFtSW5kZXgsIGNvbmZpZykge1xyXG4gICAgY29uc3QgcHJvZ3JhbSA9IHR5cGVvZihwcm9ncmFtT3JQcm9ncmFtSW5kZXgpID09ICdudW1iZXInID8gdGhpcy5wcm9ncmFtc1twcm9ncmFtT3JQcm9ncmFtSW5kZXhdIDogcHJvZ3JhbU9yUHJvZ3JhbUluZGV4O1xyXG5cclxuICAgIGlmICghcHJvZ3JhbSlcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm9ncmFtIHdpdGggaW5kZXggJHtwcm9ncmFtT3JQcm9ncmFtSW5kZXh9IGRvZXMgbm90IGV4aXN0LmApO1xyXG5cclxuICAgIGlmIChjb25maWcuaW5wdXRzKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgdXBkYXRlUHJvZ3JhbWAgZnVuY3Rpb24gY2Fubm90IGJlIHVzZWQgdG8gdXBkYXRlIGlucHV0cy4gVXNlIGB1cGRhdGVQcm9ncmFtSW5wdXRzYCBpbnN0ZWFkLicpO1xyXG5cclxuICAgIGlmIChjb25maWcubWV0YSlcclxuICAgICAgcHJvZ3JhbS5tZXRhID0gT2JqZWN0LmFzc2lnbihwcm9ncmFtLm1ldGEsIGNvbmZpZy5tZXRhKTtcclxuXHJcbiAgICBpZiAoY29uZmlnLndpZHRoICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmhlaWdodCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICB0aGlzLnVwZGF0ZVByb2dyYW1TaXplKHByb2dyYW0sIGNvbmZpZy53aWR0aCwgY29uZmlnLmhlaWdodCk7XHJcblxyXG4gICAgaWYgKHR5cGVvZihjb25maWcudW5pZm9ybXMpID09ICdvYmplY3QnKVxyXG4gICAgICB0aGlzLnVwZGF0ZVByb2dyYW1Vbmlmb3Jtcyhwcm9ncmFtLCBjb25maWcudW5pZm9ybXMpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlUHJvZ3JhbUlucHV0cyhwcm9ncmFtSW5kZXgsIGlucHV0cykge1xyXG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMucHJvZ3JhbXNbcHJvZ3JhbUluZGV4XTtcclxuXHJcbiAgICBpZiAoIXByb2dyYW0pXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvZ3JhbSB3aXRoIGluZGV4ICR7cHJvZ3JhbUluZGV4fSBkb2VzIG5vdCBleGlzdC5gKTtcclxuXHJcbiAgICBpZiAocHJvZ3JhbS5pbnB1dFRleHR1cmVzLmxlbmd0aCAhPSBpbnB1dHMubGVuZ3RoKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHByb3ZpZGUgdGhlIHNhbWUgbnVtYmVyIG9mIGlucHV0cyBhcyB3aGVuIHRoZSBwcm9ncmFtIHdhcyBzZXQgdXA6IGdvdCAke2lucHV0cy5sZW5ndGh9IGJ1dCBleHBlY3RlZCAke3Byb2dyYW0uaW5wdXRUZXh0dXJlcy5sZW5ndGh9LmApO1xyXG5cclxuICAgIGNvbnN0IHByZXZpb3VzSW5wdXRXaWR0aCA9IHByb2dyYW0uaW5wdXRXaWR0aDtcclxuICAgIGNvbnN0IHByZXZpb3VzSW5wdXRIZWlnaHQgPSBwcm9ncmFtLmlucHV0SGVpZ2h0O1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZyA9IHByb2dyYW0uY29uZmlnO1xyXG5cclxuICAgIGlmIChjb25maWcud2lkdGggPT09IHVuZGVmaW5lZCB8fCBjb25maWcuaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcHJvZ3JhbS5pbnB1dFdpZHRoID0gdW5kZWZpbmVkO1xyXG4gICAgICBwcm9ncmFtLmlucHV0SGVpZ2h0ID0gdW5kZWZpbmVkO1xyXG4gICAgICBwcm9ncmFtLmlucHV0RGF0YVNpemUgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fcHJlcGFyZVByb2dyYW1JbnB1dHMocHJvZ3JhbSwgaW5wdXRzKTtcclxuXHJcbiAgICBpZiAocHJvZ3JhbS5pbnB1dFdpZHRoICE9IHByZXZpb3VzSW5wdXRXaWR0aCB8fCBwcm9ncmFtLmlucHV0SGVpZ2h0ICE9IHByZXZpb3VzSW5wdXRIZWlnaHQpIHtcclxuICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHByb2dyYW0uZ2xQcm9ncmFtKTtcclxuICAgICAgdGhpcy5nbC51bmlmb3JtMmkocHJvZ3JhbS5rZXJuZWxTaXplTG9jYXRpb24sIHByb2dyYW0uaW5wdXRXaWR0aCwgcHJvZ3JhbS5pbnB1dEhlaWdodCk7XHJcbiAgICAgIHRoaXMuX3ByZXBhcmVQcm9ncmFtT3V0cHV0KHByb2dyYW0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlUHJvZ3JhbVNpemUocHJvZ3JhbU9yUHJvZ3JhbUluZGV4LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICBjb25zdCBwcm9ncmFtID0gdHlwZW9mKHByb2dyYW1PclByb2dyYW1JbmRleCkgPT0gJ251bWJlcicgPyB0aGlzLnByb2dyYW1zW3Byb2dyYW1PclByb2dyYW1JbmRleF0gOiBwcm9ncmFtT3JQcm9ncmFtSW5kZXg7XHJcblxyXG4gICAgaWYgKCFwcm9ncmFtKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb2dyYW0gd2l0aCBpbmRleCAke3Byb2dyYW1PclByb2dyYW1JbmRleH0gZG9lcyBub3QgZXhpc3QuYCk7XHJcblxyXG4gICAgaWYgKHByb2dyYW0uaW5wdXRUZXh0dXJlcy5sZW5ndGggIT0gMClcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTaXplIGNhbiBvbmx5IGJlIHVwZGF0ZWQgb24gcHJvZ3JhbXMgd2l0aCBubyBpbnB1dHMuYCk7XHJcblxyXG4gICAgaWYgKHdpZHRoID09IHByb2dyYW0uaW5wdXRXaWR0aCAmJiBoZWlnaHQgPT0gcHJvZ3JhbS5pbnB1dEhlaWdodCkgcmV0dXJuO1xyXG5cclxuICAgIHByb2dyYW0uaW5wdXRXaWR0aCA9IHdpZHRoO1xyXG4gICAgcHJvZ3JhbS5pbnB1dEhlaWdodCA9IGhlaWdodDtcclxuICAgIHByb2dyYW0uaW5wdXREYXRhU2l6ZSA9IHdpZHRoICogaGVpZ2h0O1xyXG5cclxuICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShwcm9ncmFtLmdsUHJvZ3JhbSk7XHJcbiAgICB0aGlzLmdsLnVuaWZvcm0yaShwcm9ncmFtLmtlcm5lbFNpemVMb2NhdGlvbiwgcHJvZ3JhbS5pbnB1dFdpZHRoLCBwcm9ncmFtLmlucHV0SGVpZ2h0KTtcclxuICAgIHRoaXMuX3ByZXBhcmVQcm9ncmFtT3V0cHV0KHByb2dyYW0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlUHJvZ3JhbVVuaWZvcm1zKHByb2dyYW1PclByb2dyYW1JbmRleCwgdW5pZm9ybXMpIHtcclxuICAgIGNvbnN0IHByb2dyYW0gPSB0eXBlb2YocHJvZ3JhbU9yUHJvZ3JhbUluZGV4KSA9PSAnbnVtYmVyJyA/IHRoaXMucHJvZ3JhbXNbcHJvZ3JhbU9yUHJvZ3JhbUluZGV4XSA6IHByb2dyYW1PclByb2dyYW1JbmRleDtcclxuICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShwcm9ncmFtLmdsUHJvZ3JhbSk7XHJcblxyXG4gICAgaWYgKCFwcm9ncmFtKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb2dyYW0gd2l0aCBpbmRleCAke3Byb2dyYW1PclByb2dyYW1JbmRleH0gZG9lcyBub3QgZXhpc3QuYCk7XHJcblxyXG4gICAgZm9yIChjb25zdCB1bmlmb3JtTmFtZSBpbiB1bmlmb3Jtcykge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHVuaWZvcm1zW3VuaWZvcm1OYW1lXTtcclxuICAgICAgbGV0IHVuaWZvcm07XHJcblxyXG4gICAgICBpZiAodW5pZm9ybSA9IHByb2dyYW0udW5pZm9ybXNbdW5pZm9ybU5hbWVdKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0VW5pZm9ybSh1bmlmb3JtLnR5cGUsIHVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKVxyXG4gICAgICB9IGVsc2UgaWYgKHVuaWZvcm0gPSBwcm9ncmFtLnVuaWZvcm1UZXh0dXJlc1t1bmlmb3JtTmFtZV0pIHtcclxuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSAhPSAnb2JqZWN0JyB8fCB2YWx1ZS50eXBlICE9ICd0ZXh0dXJlJylcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdGV4dHVyZSB0eXBlIGZvciB1bmlmb3JtICR7dW5pZm9ybU5hbWV9LmApO1xyXG5cclxuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGNoYW5uZWxzLCBkYXRhIH0gPSB1bmlmb3JtO1xyXG4gICAgICAgIGlmIChwcm9ncmFtLnVuaWZvcm1UZXh0dXJlc1t1bmlmb3JtTmFtZV0udGV4dHVyZSkgdGhpcy5nbC5kZWxldGVUZXh0dXJlKHByb2dyYW0udW5pZm9ybVRleHR1cmVzW3VuaWZvcm1OYW1lXS50ZXh0dXJlKTtcclxuICAgICAgICBwcm9ncmFtLnVuaWZvcm1UZXh0dXJlc1t1bmlmb3JtTmFtZV0udGV4dHVyZSA9IHRoaXMuX2NyZWF0ZVRleHR1cmUoZGF0YSwgd2lkdGgsIGhlaWdodCwgY2hhbm5lbHMsIHVuaWZvcm0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHVuaWZvcm0gJHt1bmlmb3JtTmFtZX0gZG9lcyBub3QgZXhpc3QgaW4gdGhpcyBwcm9ncmFtLmApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBydW4oKSB7XHJcbiAgICBjb25zdCBvdXRwdXRzID0gW107XHJcblxyXG4gICAgZm9yIChjb25zdCBwcm9ncmFtIG9mIHRoaXMucHJvZ3JhbXMpIHtcclxuICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHByb2dyYW0uZ2xQcm9ncmFtKTtcclxuICAgICAgdGhpcy5nbC52aWV3cG9ydCgwLCAwLCBwcm9ncmFtLmlucHV0V2lkdGgsIHByb2dyYW0uaW5wdXRIZWlnaHQpO1xyXG4gICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCBwcm9ncmFtLmZyYW1lQnVmZmVyKTtcclxuXHJcbiAgICAgIGZvciAoY29uc3QgW2luZGV4LCBpbnB1dFRleHR1cmVdIG9mIHByb2dyYW0uaW5wdXRUZXh0dXJlcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCArIGluZGV4KTtcclxuICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgaW5wdXRUZXh0dXJlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChjb25zdCB1bmlmb3JtTmFtZSBpbiBwcm9ncmFtLnVuaWZvcm1UZXh0dXJlcykge1xyXG4gICAgICAgIGNvbnN0IHVuaWZvcm1UZXh0dXJlID0gcHJvZ3JhbS51bmlmb3JtVGV4dHVyZXNbdW5pZm9ybU5hbWVdO1xyXG4gICAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwICsgdW5pZm9ybVRleHR1cmUuaW5kZXgpO1xyXG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodW5pZm9ybVRleHR1cmUudGFyZ2V0LCB1bmlmb3JtVGV4dHVyZS50ZXh0dXJlIHx8IHRoaXMuc2hhcmVkVGV4dHVyZXNbdW5pZm9ybVRleHR1cmUubmFtZV0gfHwgdGhpcy5vdXRwdXRUZXh0dXJlc1t1bmlmb3JtVGV4dHVyZS5uYW1lXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0eXBlb2YocHJvZ3JhbS5kcmF3KSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcHJvZ3JhbS5kcmF3KHRoaXMsIHByb2dyYW0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdGhpcy50ZXh0dXJlQnVmZmVyKTtcclxuICAgICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHByb2dyYW0udGV4dHVyZUxvY2F0aW9uKTtcclxuICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIocHJvZ3JhbS50ZXh0dXJlTG9jYXRpb24sIDIsIHRoaXMuZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHRoaXMucG9zaXRpb25CdWZmZXIpO1xyXG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocHJvZ3JhbS5wb3NpdGlvbkxvY2F0aW9uKTtcclxuICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIocHJvZ3JhbS5wb3NpdGlvbkxvY2F0aW9uLCAyLCB0aGlzLmdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuaW5kZXhCdWZmZXIpO1xyXG5cclxuICAgICAgICBpZiAocHJvZ3JhbS5kcmF3UHJveHkpIHtcclxuICAgICAgICAgIGNvbnN0IGRyYXcgPSAoKCkgPT4gdGhpcy5nbC5kcmF3RWxlbWVudHModGhpcy5nbC5UUklBTkdMRVMsIDYsIHRoaXMuZ2wuVU5TSUdORURfU0hPUlQsIDApKS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgcHJvZ3JhbS5kcmF3UHJveHkodGhpcywgcHJvZ3JhbSwgZHJhdyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKHRoaXMuZ2wuVFJJQU5HTEVTLCA2LCB0aGlzLmdsLlVOU0lHTkVEX1NIT1JULCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwcm9ncmFtLm91dHB1dCAmJiBwcm9ncmFtLm91dHB1dC5uYW1lICYmICFwcm9ncmFtLm91dHB1dC5yZWFkKSB7XHJcbiAgICAgICAgb3V0cHV0cy5wdXNoKG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IG5ldyBGbG9hdDMyQXJyYXkocHJvZ3JhbS5pbnB1dFdpZHRoICogcHJvZ3JhbS5pbnB1dEhlaWdodCAqIDQpO1xyXG4gICAgICAgIHRoaXMuZ2wucmVhZFBpeGVscygwLCAwLCBwcm9ncmFtLmlucHV0V2lkdGgsIHByb2dyYW0uaW5wdXRIZWlnaHQsIHRoaXMuZ2wuUkdCQSwgdGhpcy5nbC5GTE9BVCwgb3V0cHV0KTtcclxuICAgICAgICBvdXRwdXRzLnB1c2gob3V0cHV0LnN1YmFycmF5KDAsIHByb2dyYW0uaW5wdXREYXRhU2l6ZSAqIDQpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvdXRwdXRzO1xyXG4gIH1cclxuXHJcbiAgX3NldFVwR0woKSB7XHJcbiAgICBsZXQgY2FudmFzO1xyXG5cclxuICAgIGlmIChzZWxmLmRvY3VtZW50KVxyXG4gICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgIGVsc2UgaWYgKHNlbGYuT2Zmc2NyZWVuQ2FudmFzKVxyXG4gICAgICBjYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKDAsIDApO1xyXG4gICAgZWxzZVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBjcmVhdGUgYSBjYW52YXMuJyk7XHJcblxyXG4gICAgY29uc3QgYXR0ciA9IHsgYWxwaGE6IGZhbHNlLCBhbnRpYWxpYXM6IGZhbHNlIH07XHJcbiAgICB0aGlzLmdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbDJcIiwgYXR0cikgfHwgY2FudmFzLmdldENvbnRleHQoXCJleHBlcmltZW50YWwtd2ViZ2wyXCIsIGF0dHIpO1xyXG5cclxuICAgIGlmICghdGhpcy5nbClcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGluaXRpYWxpemUgV2ViR0wyLiBZb3VyIGJyb3dzZXIgbWF5IG5vdCBzdXBwb3J0IGl0LlwiKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JykpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgV2ViR0wgZXh0ZW5zaW9uIEVYVF9jb2xvcl9idWZmZXJfZmxvYXQgbm90IHN1cHBvcnRlZC4nKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInKSlcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBXZWJHTCBleHRlbnNpb24gT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyIG5vdCBzdXBwb3J0ZWQuJyk7XHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbkJ1ZmZlciA9IHRoaXMuX25ld0J1ZmZlcihbLTEsIC0xLCAxLCAtMSwgMSwgMSwgLTEsIDFdKTtcclxuICAgIHRoaXMudGV4dHVyZUJ1ZmZlciA9IHRoaXMuX25ld0J1ZmZlcihbMCwgMCwgMSwgMCwgMSwgMSwgMCwgMV0pO1xyXG4gICAgdGhpcy5pbmRleEJ1ZmZlciA9IHRoaXMuX25ld0J1ZmZlcihbMSwgMiwgMCwgMywgMCwgMl0sIFVpbnQxNkFycmF5LCB0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSKTtcclxuICB9XHJcblxyXG4gIF9wcmVwYXJlUHJvZ3JhbShjb25maWcpIHtcclxuICAgIGNvbnN0IHByb2dyYW0gPSB7IGNvbmZpZyB9O1xyXG5cclxuICAgIHByb2dyYW0uZHJhdyA9IGNvbmZpZy5kcmF3O1xyXG4gICAgcHJvZ3JhbS5kcmF3UHJveHkgPSBjb25maWcuZHJhd1Byb3h5O1xyXG4gICAgcHJvZ3JhbS5tZXRhID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnLm1ldGEpO1xyXG5cclxuICAgIGlmIChjb25maWcud2lkdGggJiYgY29uZmlnLmhlaWdodCkge1xyXG4gICAgICBwcm9ncmFtLmlucHV0V2lkdGggPSBjb25maWcud2lkdGg7XHJcbiAgICAgIHByb2dyYW0uaW5wdXRIZWlnaHQgPSBjb25maWcuaGVpZ2h0O1xyXG4gICAgICBwcm9ncmFtLmlucHV0RGF0YVNpemUgPSBjb25maWcud2lkdGggKiBjb25maWcuaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHByb2dyYW0ub3V0cHV0ID0gY29uZmlnLm91dHB1dDtcclxuXHJcbiAgICBjb25zdCBrZXJuZWwgPSBjb25maWcua2VybmVsO1xyXG5cclxuICAgIGlmICh0eXBlb2Yoa2VybmVsKSAhPSAnc3RyaW5nJyB8fCBrZXJuZWwubGVuZ3RoID09IDApXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIktlcm5lbCBjb2RlIGNhbm5vdCBiZSBlbXB0eS5cIik7XHJcblxyXG4gICAgY29uc3QgaW5wdXRzID0gY29uZmlnLmlucHV0cyB8fCBbXTtcclxuICAgIGNvbnN0IHVuaWZvcm1zID0gY29uZmlnLnVuaWZvcm1zIHx8IHt9O1xyXG5cclxuICAgIHRoaXMuX3ByZXBhcmVQcm9ncmFtSW5wdXRzKHByb2dyYW0sIGlucHV0cyk7XHJcblxyXG4gICAgbGV0IGZyYWdtZW50U2hhZGVyQ29uZmlnID0gXCJcIjtcclxuICAgIFxyXG4gICAgZm9yIChjb25zdCBpbmRleCBpbiBpbnB1dHMpXHJcbiAgICAgIGZyYWdtZW50U2hhZGVyQ29uZmlnICs9IGB1bmlmb3JtIHNhbXBsZXIyRCBfaW5wdXQke2luZGV4fTtcXG5gO1xyXG5cclxuICAgIGlmIChwcm9ncmFtLmlucHV0V2lkdGggPT09IHVuZGVmaW5lZCB8fCBwcm9ncmFtLmlucHV0SGVpZ2h0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24ga2VybmVsIHNpemUuIFlvdSBtdXN0IHByb3ZpZGUgZWl0aGVyIGFuIGlucHV0IG9yIHRoZSBgd2lkdGhgIGFuZCBgaGVpZ2h0YCBwYXJhbWV0ZXJzIGluIHRoZSBrZXJuZWwgY29uZmlnLlwiKTtcclxuXHJcbiAgICBwcm9ncmFtLnVuaWZvcm1UZXh0dXJlcyA9IHt9O1xyXG4gICAgcHJvZ3JhbS51bmlmb3JtcyA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgdW5pZm9ybU5hbWUgaW4gdW5pZm9ybXMpIHtcclxuICAgICAgY29uc3QgdW5pZm9ybSA9IHVuaWZvcm1zW3VuaWZvcm1OYW1lXTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YodW5pZm9ybSkgPT0gJ251bWJlcicpIHtcclxuICAgICAgICBwcm9ncmFtLnVuaWZvcm1zW3VuaWZvcm1OYW1lXSA9IHtcclxuICAgICAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgICAgICB2YWx1ZTogdW5pZm9ybVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZnJhZ21lbnRTaGFkZXJDb25maWcgKz0gYHVuaWZvcm0gZmxvYXQgJHt1bmlmb3JtTmFtZX07XFxuYDtcclxuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHVuaWZvcm0pKSB7XHJcbiAgICAgICAgaWYgKHVuaWZvcm0ubGVuZ3RoIDwgMiB8fCB1bmlmb3JtLmxlbmd0aCA+IDQpXHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFycmF5IHVuaWZvcm1zIGNhbiBvbmx5IGhhdmUgbGVuZ3RocyBvZiAyLCAzLCBvciA0IGVsZW1lbnRzIChjb3JyZXNwb25kaW5nIHRvIHZlYzIsIHZlYzMsIGFuZCB2ZWM0KS5gKTtcclxuXHJcbiAgICAgICAgY29uc3QgdHlwZSA9IFsndmVjMicsICd2ZWMzJywgJ3ZlYzQnXVt1bmlmb3JtLmxlbmd0aCAtIDJdO1xyXG4gICAgICAgIHByb2dyYW0udW5pZm9ybXNbdW5pZm9ybU5hbWVdID0ge1xyXG4gICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgIHZhbHVlOiB1bmlmb3JtXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmcmFnbWVudFNoYWRlckNvbmZpZyArPSBgdW5pZm9ybSAke3R5cGV9ICR7dW5pZm9ybU5hbWV9O1xcbmA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCB3aWR0aCwgaGVpZ2h0LCBjaGFubmVscywgZGF0YSwgdmFsdWUsIGxlbmd0aCwgbmFtZSB9ID0gdW5pZm9ybTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT0gJ3RleHR1cmUnIHx8IHR5cGUgPT0gJ291dHB1dFRleHR1cmUnIHx8IHR5cGUgPT0gJ3NoYXJlZFRleHR1cmUnKSB7XHJcbiAgICAgICAgICBsZXQgdGFyZ2V0LCB0eXBlO1xyXG5cclxuICAgICAgICAgIGlmICh1bmlmb3JtLnRleHR1cmVUeXBlID09ICczRCcpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy5nbC5URVhUVVJFXzNEO1xyXG4gICAgICAgICAgICB0eXBlID0gJ3NhbXBsZXIzRCc7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHVuaWZvcm0udGV4dHVyZVR5cGUgPT0gJzJEQXJyYXknKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHRoaXMuZ2wuVEVYVFVSRV8yRF9BUlJBWTtcclxuICAgICAgICAgICAgdHlwZSA9ICdzYW1wbGVyMkRBcnJheSc7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0YXJnZXQgPSB0aGlzLmdsLlRFWFRVUkVfMkQ7XHJcbiAgICAgICAgICAgIHR5cGUgPSAnc2FtcGxlcjJEJztcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAodHlwZSA9PSAndGV4dHVyZScpIHtcclxuICAgICAgICAgICAgcHJvZ3JhbS51bmlmb3JtVGV4dHVyZXNbdW5pZm9ybU5hbWVdID0geyB0YXJnZXQsIHRleHR1cmU6IGRhdGEgPyB0aGlzLl9jcmVhdGVUZXh0dXJlKGRhdGEsIHdpZHRoLCBoZWlnaHQsIGNoYW5uZWxzLCB1bmlmb3JtKSA6IG51bGwgfTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHByb2dyYW0udW5pZm9ybVRleHR1cmVzW3VuaWZvcm1OYW1lXSA9IHsgdGFyZ2V0LCB0ZXh0dXJlOiBudWxsLCBuYW1lOiBuYW1lIHx8IHVuaWZvcm1OYW1lIH07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZnJhZ21lbnRTaGFkZXJDb25maWcgKz0gYHVuaWZvcm0gJHt0eXBlfSAke3VuaWZvcm1OYW1lfTtcXG5gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwcm9ncmFtLnVuaWZvcm1zW3VuaWZvcm1OYW1lXSA9IHsgdHlwZSwgdmFsdWUgfTtcclxuICAgICAgICAgIGlmIChsZW5ndGggIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXJDb25maWcgKz0gYHVuaWZvcm0gJHt0eXBlfSAke3VuaWZvcm1OYW1lfVske2xlbmd0aH1dO1xcbmA7XHJcbiAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyQ29uZmlnICs9IGB1bmlmb3JtICR7dHlwZX0gJHt1bmlmb3JtTmFtZX07XFxuYDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2ZXJ0ZXhTaGFkZXIgPSB0aGlzLmdsLmNyZWF0ZVNoYWRlcih0aGlzLmdsLlZFUlRFWF9TSEFERVIpO1xyXG4gICAgdGhpcy5nbC5zaGFkZXJTb3VyY2UodmVydGV4U2hhZGVyLCBjb25maWcudmVydGV4U2hhZGVyIHx8IHZlcnRleFNoYWRlckNvZGUpO1xyXG4gICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKHZlcnRleFNoYWRlcik7XHJcblxyXG4gICAgaWYgKCF0aGlzLmdsLmdldFNoYWRlclBhcmFtZXRlcih2ZXJ0ZXhTaGFkZXIsIHRoaXMuZ2wuQ09NUElMRV9TVEFUVVMpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICBcIkNvdWxkIG5vdCBidWlsZCB2ZXJ0ZXggc2hhZGVyIChmYXRhbCkuXFxuXCIgKyBcIlxcblwiICtcclxuICAgICAgICBcIi0tLSBDT0RFIERVTVAgLS0tXFxuXCIgKyAoY29uZmlnLnZlcnRleFNoYWRlciB8fCB2ZXJ0ZXhTaGFkZXJDb2RlKSArIFwiXFxuXFxuXCIgK1xyXG4gICAgICAgIFwiLS0tIEVSUk9SIExPRyAtLS1cXG5cIiArIHRoaXMuZ2wuZ2V0U2hhZGVySW5mb0xvZyh2ZXJ0ZXhTaGFkZXIpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXJNYWluID0gYFxyXG52b2lkIG1haW4oKSB7XHJcbiAga2VybmVsT3V0ID0gdmVjNChrZXJuZWwoJHtbLi4uQXJyYXkoaW5wdXRzLmxlbmd0aCkua2V5cygpXS5tYXAoaSA9PiBgdGV4dHVyZShfaW5wdXQke2l9LCBrZXJuZWxQb3NpdGlvbilgKS5qb2luKCcsICcpfSkpO1xyXG59XHJcbiAgICBgO1xyXG5cclxuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIodGhpcy5nbC5GUkFHTUVOVF9TSEFERVIpO1xyXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXJTb3VyY2UgPSBmcmFnbWVudFNoYWRlckhlYWRlciArIGZyYWdtZW50U2hhZGVyQ29uZmlnICsga2VybmVsICsgZnJhZ21lbnRTaGFkZXJNYWluO1xyXG4gICAgdGhpcy5nbC5zaGFkZXJTb3VyY2UoZnJhZ21lbnRTaGFkZXIsIGZyYWdtZW50U2hhZGVyU291cmNlKTtcclxuICAgIHRoaXMuZ2wuY29tcGlsZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XHJcblxyXG4gICAgaWYgKCF0aGlzLmdsLmdldFNoYWRlclBhcmFtZXRlcihmcmFnbWVudFNoYWRlciwgdGhpcy5nbC5DT01QSUxFX1NUQVRVUykpIHtcclxuICAgICAgY29uc3Qgc291cmNlID0gZnJhZ21lbnRTaGFkZXJTb3VyY2Uuc3BsaXQoJ1xcbicpO1xyXG4gICAgICBsZXQgZGJnTXNnID0gXCJFUlJPUjogQ291bGQgbm90IGJ1aWxkIHNoYWRlciAoZmF0YWwpLlxcblxcbi0tLS0tLS0tLS0tLS0tLS0tLSBLRVJORUwgQ09ERSBEVU1QIC0tLS0tLS0tLS0tLS0tLS0tLVxcblwiXHJcblxyXG4gICAgICBmb3IgKGxldCBsID0gMDsgbCA8IHNvdXJjZS5sZW5ndGg7IGwrKylcclxuICAgICAgICBkYmdNc2cgKz0gYCR7bCArIDF9PiAke3NvdXJjZVtsXX1cXG5gO1xyXG5cclxuICAgICAgZGJnTXNnICs9IFwiXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEVSUk9SICBMT0cgLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXCIgKyB0aGlzLmdsLmdldFNoYWRlckluZm9Mb2coZnJhZ21lbnRTaGFkZXIpO1xyXG5cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGRiZ01zZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvZ3JhbS5nbFByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgIHRoaXMuZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0uZ2xQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xyXG4gICAgdGhpcy5nbC5hdHRhY2hTaGFkZXIocHJvZ3JhbS5nbFByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICAgIHRoaXMuZ2wubGlua1Byb2dyYW0ocHJvZ3JhbS5nbFByb2dyYW0pO1xyXG4gICAgdGhpcy5nbC51c2VQcm9ncmFtKHByb2dyYW0uZ2xQcm9ncmFtKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLmdsUHJvZ3JhbSwgdGhpcy5nbC5MSU5LX1NUQVRVUykpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGxpbmsgR0xTTCBwcm9ncmFtIGNvZGUuJyk7XHJcblxyXG4gICAgbGV0IHRleHR1cmVJbmRleCA9IDA7XHJcblxyXG4gICAgZm9yIChjb25zdCBpbnB1dCBvZiBwcm9ncmFtLmlucHV0VGV4dHVyZXMpIHtcclxuICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLmdsUHJvZ3JhbSwgYF9pbnB1dCR7dGV4dHVyZUluZGV4fWApO1xyXG4gICAgICB0aGlzLmdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdGV4dHVyZUluZGV4KTtcclxuICAgICAgdGV4dHVyZUluZGV4Kys7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCB1bmlmb3JtTmFtZSBpbiBwcm9ncmFtLnVuaWZvcm1UZXh0dXJlcykge1xyXG4gICAgICBwcm9ncmFtLnVuaWZvcm1UZXh0dXJlc1t1bmlmb3JtTmFtZV0uaW5kZXggPSB0ZXh0dXJlSW5kZXg7XHJcbiAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbS5nbFByb2dyYW0sIHVuaWZvcm1OYW1lKTtcclxuICAgICAgdGhpcy5nbC51bmlmb3JtMWkobG9jYXRpb24sIHRleHR1cmVJbmRleCk7XHJcbiAgICAgIHRleHR1cmVJbmRleCsrO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgdW5pZm9ybU5hbWUgaW4gcHJvZ3JhbS51bmlmb3Jtcykge1xyXG4gICAgICBjb25zdCB7IHR5cGUsIHZhbHVlIH0gPSBwcm9ncmFtLnVuaWZvcm1zW3VuaWZvcm1OYW1lXTtcclxuICAgICAgY29uc3QgbG9jYXRpb24gPSBwcm9ncmFtLnVuaWZvcm1zW3VuaWZvcm1OYW1lXS5sb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0uZ2xQcm9ncmFtLCB1bmlmb3JtTmFtZSk7XHJcblxyXG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcclxuICAgICAgICB0aGlzLl9zZXRVbmlmb3JtKHR5cGUsIGxvY2F0aW9uLCB2YWx1ZSk7XHJcblxyXG4gICAgICBkZWxldGUgcHJvZ3JhbS51bmlmb3Jtc1t1bmlmb3JtTmFtZV0udmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvZ3JhbS5rZXJuZWxTaXplTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLmdsUHJvZ3JhbSwgJ2tlcm5lbFNpemUnKTtcclxuICAgIHRoaXMuZ2wudW5pZm9ybTJpKHByb2dyYW0ua2VybmVsU2l6ZUxvY2F0aW9uLCBwcm9ncmFtLmlucHV0V2lkdGgsIHByb2dyYW0uaW5wdXRIZWlnaHQpO1xyXG5cclxuICAgIHByb2dyYW0ucG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbS5nbFByb2dyYW0sICdwb3NpdGlvbicpO1xyXG4gICAgcHJvZ3JhbS50ZXh0dXJlTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0uZ2xQcm9ncmFtLCAndGV4dHVyZScpO1xyXG5cclxuICAgIHByb2dyYW0uZnJhbWVCdWZmZXIgPSB0aGlzLmdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XHJcbiAgICB0aGlzLl9wcmVwYXJlUHJvZ3JhbU91dHB1dChwcm9ncmFtKTtcclxuXHJcbiAgICByZXR1cm4gcHJvZ3JhbTtcclxuICB9XHJcblxyXG4gIF9wcmVwYXJlUHJvZ3JhbUlucHV0cyhwcm9ncmFtLCBpbnB1dHMpIHtcclxuICAgIGlmIChwcm9ncmFtLmlucHV0VGV4dHVyZXMpXHJcbiAgICAgIHByb2dyYW0uaW5wdXRUZXh0dXJlcy5mb3JFYWNoKHQgPT4gdGhpcy5nbC5kZWxldGVUZXh0dXJlKHQpKTtcclxuXHJcbiAgICBwcm9ncmFtLmlucHV0VGV4dHVyZXMgPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtpbmRleCwgZGF0YV0gb2YgaW5wdXRzLmVudHJpZXMoKSkge1xyXG4gICAgICBpZiAoZGF0YS5ncGdwdVNpemUgPT09IHVuZGVmaW5lZCB8fCBkYXRhLmdwZ3B1U3RyaWRlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHUEdQVSBpbnB1dHMgbXVzdCBiZSBjcmVhdGVkIGJ5IHRoZSBgYWxsb2NgIGZ1bmN0aW9uLicpO1xyXG5cclxuICAgICAgY29uc3Qgc2l6ZSA9IE1hdGguc3FydChkYXRhLmxlbmd0aCAvIGRhdGEuZ3BncHVTdHJpZGUpO1xyXG4gICAgICBpZiAoc2l6ZSA8PSAwIHx8IHNpemUgJSAxICE9IDApXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHUEdQVSBpbnB1dCBzaXplIGlzIGV4cGVjdGVkIHRvIGJlIGEgcGVyZmVjdCBzcXVhcmUuJyk7XHJcblxyXG4gICAgICBpZiAocHJvZ3JhbS5pbnB1dFdpZHRoID09PSB1bmRlZmluZWQgfHwgcHJvZ3JhbS5pbnB1dEhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcHJvZ3JhbS5pbnB1dFdpZHRoID0gc2l6ZTtcclxuICAgICAgICBwcm9ncmFtLmlucHV0SGVpZ2h0ID0gc2l6ZTtcclxuICAgICAgICBwcm9ncmFtLmlucHV0RGF0YVNpemUgPSBkYXRhLmdwZ3B1U2l6ZTtcclxuICAgICAgfSBlbHNlIGlmIChzaXplICE9IHByb2dyYW0uaW5wdXRXaWR0aCB8fCBzaXplICE9IHByb2dyYW0uaW5wdXRIZWlnaHQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFsbCBHUEdQVSBpbnB1dHMgbXVzdCBiZSBvZiB0aGUgc2FtZSBzaXplLiBSZWNlaXZlZCAke2RhdGEuZ3BncHVTaXplfSAoaW50ZXJuYWwgJHtzaXplICogc2l6ZX0pIGJ1dCBleHBlY3RlZCAke3Byb2dyYW0uaW5wdXREYXRhU2l6ZX0gKGludGVybmFsICR7cHJvZ3JhbS5pbnB1dFdpZHRoICogcHJvZ3JhbS5pbnB1dEhlaWdodH0pLmApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwcm9ncmFtLmlucHV0VGV4dHVyZXMucHVzaCh0aGlzLl9jcmVhdGVUZXh0dXJlKGRhdGEsIHNpemUsIHNpemUsIGRhdGEuZ3BncHVTdHJpZGUpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9wcmVwYXJlUHJvZ3JhbU91dHB1dChwcm9ncmFtKSB7XHJcbiAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCBwcm9ncmFtLmZyYW1lQnVmZmVyKTtcclxuXHJcbiAgICBjb25zdCBvdXRwdXRUZXh0dXJlID0gdGhpcy5fY3JlYXRlVGV4dHVyZShudWxsLCBwcm9ncmFtLmlucHV0V2lkdGgsIHByb2dyYW0uaW5wdXRIZWlnaHQsIDQsIHByb2dyYW0ub3V0cHV0KTtcclxuXHJcbiAgICBpZiAocHJvZ3JhbS5vdXRwdXQgJiYgcHJvZ3JhbS5vdXRwdXQudGV4dHVyZVR5cGUgIT09ICczRCcgJiYgcHJvZ3JhbS5vdXRwdXQudGV4dHVyZVR5cGUgIT09ICcyREFycmF5Jykge1xyXG4gICAgICB0aGlzLmdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZ2wuQ09MT1JfQVRUQUNITUVOVDAsIHRoaXMuZ2wuVEVYVFVSRV8yRCwgb3V0cHV0VGV4dHVyZSwgMCk7XHJcbiAgICAgIGNvbnN0IGZyYW1lQnVmZmVyU3RhdHVzID0gKHRoaXMuZ2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyh0aGlzLmdsLkZSQU1FQlVGRkVSKSA9PSB0aGlzLmdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFKTtcclxuICAgICAgaWYgKCFmcmFtZUJ1ZmZlclN0YXR1cylcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGF0dGFjaGluZyBmbG9hdCB0ZXh0dXJlIHRvIGZyYW1lYnVmZmVyLiBZb3VyIGRldmljZSBpcyBwcm9iYWJseSBpbmNvbXBhdGlibGUuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHByb2dyYW0ub3V0cHV0VGV4dHVyZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICB0aGlzLmdsLmRlbGV0ZVRleHR1cmUocHJvZ3JhbS5vdXRwdXRUZXh0dXJlKTtcclxuICAgIHByb2dyYW0ub3V0cHV0VGV4dHVyZSA9IG91dHB1dFRleHR1cmU7XHJcblxyXG4gICAgaWYgKHByb2dyYW0ub3V0cHV0ICYmIHByb2dyYW0ub3V0cHV0Lm5hbWUpXHJcbiAgICAgIHRoaXMub3V0cHV0VGV4dHVyZXNbcHJvZ3JhbS5vdXRwdXQubmFtZV0gPSBvdXRwdXRUZXh0dXJlO1xyXG4gIH1cclxuXHJcbiAgX3NldFVuaWZvcm0odHlwZSwgbG9jYXRpb24sIHZhbHVlKSB7XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgY2FzZSAnaW50JzogdGhpcy5nbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2Zsb2F0JzogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB0aGlzLmdsLnVuaWZvcm0xZnYobG9jYXRpb24sIHZhbHVlKSA6IHRoaXMuZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2YWx1ZSk7IGJyZWFrO1xyXG4gICAgICBjYXNlICd2ZWMyJzogdGhpcy5nbC51bmlmb3JtMmZ2KGxvY2F0aW9uLCB2YWx1ZSk7IGJyZWFrO1xyXG4gICAgICBjYXNlICd2ZWMzJzogdGhpcy5nbC51bmlmb3JtM2Z2KGxvY2F0aW9uLCB2YWx1ZSk7IGJyZWFrO1xyXG4gICAgICBjYXNlICd2ZWM0JzogdGhpcy5nbC51bmlmb3JtNGZ2KGxvY2F0aW9uLCB2YWx1ZSk7IGJyZWFrO1xyXG4gICAgICBjYXNlICdtYXQzJzogdGhpcy5nbC51bmlmb3JtTWF0cml4M2Z2KGxvY2F0aW9uLCB2YWx1ZSk7IGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdW5pZm9ybSB0eXBlICR7dHlwZX0uYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfbmV3QnVmZmVyKGRhdGEsIGtsYXNzLCB0YXJnZXQpIHtcclxuICAgIGNvbnN0IGJ1ZiA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XHJcblxyXG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKCh0YXJnZXQgfHwgdGhpcy5nbC5BUlJBWV9CVUZGRVIpLCBidWYpO1xyXG4gICAgdGhpcy5nbC5idWZmZXJEYXRhKCh0YXJnZXQgfHwgdGhpcy5nbC5BUlJBWV9CVUZGRVIpLCBuZXcgKGtsYXNzIHx8IEZsb2F0MzJBcnJheSkoZGF0YSksIHRoaXMuZ2wuU1RBVElDX0RSQVcpO1xyXG5cclxuICAgIHJldHVybiBidWY7XHJcbiAgfVxyXG5cclxuICBfY3JlYXRlVGV4dHVyZShkYXRhLCB3aWR0aCwgaGVpZ2h0LCBjaGFubmVscywgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICBjb25zdCB0ZXh0dXJlID0gdGhpcy5nbC5jcmVhdGVUZXh0dXJlKCk7XHJcblxyXG4gICAgbGV0IGludGVybmFsRm9ybWF0LCBmb3JtYXQ7XHJcblxyXG4gICAgc3dpdGNoIChjaGFubmVscykge1xyXG4gICAgICBjYXNlIDE6XHJcbiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSB0aGlzLmdsLlIzMkY7XHJcbiAgICAgICAgZm9ybWF0ID0gdGhpcy5nbC5SRUQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMjpcclxuICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IHRoaXMuZ2wuUkczMkY7XHJcbiAgICAgICAgZm9ybWF0ID0gdGhpcy5nbC5SRztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAzOlxyXG4gICAgICAgIGludGVybmFsRm9ybWF0ID0gdGhpcy5nbC5SR0IzMkY7XHJcbiAgICAgICAgZm9ybWF0ID0gdGhpcy5nbC5SR0I7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgNDpcclxuICAgICAgICBpbnRlcm5hbEZvcm1hdCA9IHRoaXMuZ2wuUkdCQTMyRjtcclxuICAgICAgICBmb3JtYXQgPSB0aGlzLmdsLlJHQkE7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhyb3coXCJUZXh0dXJlIGNoYW5uZWxzIG11c3QgYmV0d2VlbiAxIGFuZCA0LlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0YXJnZXQgPSBvcHRpb25zLnRleHR1cmVUeXBlID09ICczRCcgPyB0aGlzLmdsLlRFWFRVUkVfM0QgOiBvcHRpb25zLnRleHR1cmVUeXBlID09ICcyREFycmF5JyA/IHRoaXMuZ2wuVEVYVFVSRV8yRF9BUlJBWSA6IHRoaXMuZ2wuVEVYVFVSRV8yRDtcclxuXHJcbiAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRhcmdldCwgdGV4dHVyZSk7XHJcbiAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfV1JBUF9TLCB0aGlzLmdsLkNMQU1QX1RPX0VER0UpO1xyXG4gICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgdGhpcy5nbC5URVhUVVJFX1dSQVBfVCwgdGhpcy5nbC5DTEFNUF9UT19FREdFKTtcclxuICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0YXJnZXQsIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1IsIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRSk7XHJcbiAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgb3B0aW9ucy5maWx0ZXIgPT0gJ2xpbmVhcicgPyB0aGlzLmdsLkxJTkVBUiA6IHRoaXMuZ2wuTkVBUkVTVCk7XHJcbiAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgb3B0aW9ucy5maWx0ZXIgPT0gJ2xpbmVhcicgPyB0aGlzLmdsLkxJTkVBUiA6IHRoaXMuZ2wuTkVBUkVTVCk7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMudGV4dHVyZVR5cGUgPT0gJzNEJyB8fCBvcHRpb25zLnRleHR1cmVUeXBlID09ICcyREFycmF5Jykge1xyXG4gICAgICB0aGlzLmdsLnRleEltYWdlM0QodGFyZ2V0LCAwLCBpbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgb3B0aW9ucy5kZXB0aCwgMCwgZm9ybWF0LCB0aGlzLmdsLkZMT0FULCBkYXRhKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIDAsIGludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCAwLCBmb3JtYXQsIHRoaXMuZ2wuRkxPQVQsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGFyZ2V0LCBudWxsKTtcclxuXHJcbiAgICByZXR1cm4gdGV4dHVyZTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyIHtcclxuXHJcblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgcm90YXRpb24gPSAwICkge1xyXG5cclxuXHRcdHRoaXMuc2V0UG9zZSggeCwgeSwgcm90YXRpb24gKTtcclxuXHJcblx0XHR0aGlzLnNjb3JlID0gMTAwO1xyXG4gICAgXHR0aGlzLmxhc3RUaW1lTG9nZ2VyID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG5cdH1cclxuXHJcbiAgc3RhdGljIGdldEZyb250QXhsZVBvc2l0aW9uKHBvcywgcm90KSB7XHJcbiAgICByZXR1cm4gVEhSRUUuVmVjdG9yMi5mcm9tQW5nbGUocm90KS5tdWx0aXBseVNjYWxhcihDYXIuV0hFRUxfQkFTRSkuYWRkKHBvcyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0RmFrZUF4bGVQb3NpdGlvbihwb3MsIHJvdCkge1xyXG4gICAgcmV0dXJuIENhci5mcm9udFRvUmVhckF4bGVQb3NpdGlvbihwb3MsIHJvdCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2VudGVyVG9SZWFyQXhsZVBvc2l0aW9uKHBvcywgcm90KSB7XHJcbiAgICByZXR1cm4gVEhSRUUuVmVjdG9yMi5mcm9tQW5nbGUocm90KS5tdWx0aXBseVNjYWxhcihDYXIuUkVBUl9BWExFX1BPUykuYWRkKHBvcyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZnJvbnRUb1JlYXJBeGxlUG9zaXRpb24ocG9zLCByb3QpIHtcclxuICAgIHJldHVybiBUSFJFRS5WZWN0b3IyLmZyb21BbmdsZShyb3QpLm11bHRpcGx5U2NhbGFyKC1DYXIuV0hFRUxfQkFTRSkuYWRkKHBvcyk7XHJcbiAgfVxyXG5cclxuICBnZXQgcG9zZSgpIHtcclxuICAgIHJldHVybiB7IHBvczogdGhpcy5yZWFyQXhsZVBvc2l0aW9uLmNsb25lKCksIHJvdDogdGhpcy5yb3RhdGlvbiwgdmVsb2NpdHk6IHRoaXMudmVsb2NpdHksIGN1cnY6IHRoaXMuY3VydmF0dXJlLCBkQ3VydjogdGhpcy5kQ3VydiwgZGRDdXJ2OiB0aGlzLmRkQ3VydiB9O1xyXG4gIH1cclxuXHJcbiAgZ2V0IGN1cnZhdHVyZSgpIHtcclxuICAgIHJldHVybiBNYXRoLnRhbih0aGlzLndoZWVsQW5nbGUpIC8gQ2FyLldIRUVMX0JBU0U7XHJcbiAgfVxyXG5cclxuICBnZXQgcmVhckF4bGVQb3NpdGlvbigpIHtcclxuICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5wb3NpdGlvbjtcclxuICAgIGNvbnN0IHJvdCA9IHRoaXMucm90YXRpb247XHJcbiAgICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIoeCArIE1hdGguY29zKHJvdCkgKiBDYXIuUkVBUl9BWExFX1BPUywgeSArIE1hdGguc2luKHJvdCkgKiBDYXIuUkVBUl9BWExFX1BPUyk7XHJcbiAgfVxyXG5cclxuICBnZXQgZnJvbnRBeGxlUG9zaXRpb24oKSB7XHJcbiAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXMucG9zaXRpb247XHJcbiAgICBjb25zdCByb3QgPSB0aGlzLnJvdGF0aW9uO1xyXG4gICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IyKHggKyBNYXRoLmNvcyhyb3QpICogQ2FyLkZST05UX0FYTEVfUE9TLCB5ICsgTWF0aC5zaW4ocm90KSAqIENhci5GUk9OVF9BWExFX1BPUyk7XHJcbiAgfVxyXG5cclxuICBzZXRQb3NlKHgsIHksIHJvdGF0aW9uKSB7XHJcbiAgICAvLyBUcmFuc2xhdGUgc28gdGhhdCB4IGFuZCB5IGJlY29tZSB0aGUgY2VudGVyIG9mIHRoZSB2ZWhpY2xlIChpbnN0ZWFkIG9mIHRoZSBjZW50ZXIgb2YgdGhlIHJlYXIgYXhsZSlcclxuICAgIHggLT0gQ2FyLlJFQVJfQVhMRV9QT1MgKiBNYXRoLmNvcyhyb3RhdGlvbik7XHJcbiAgICB5IC09IENhci5SRUFSX0FYTEVfUE9TICogTWF0aC5zaW4ocm90YXRpb24pO1xyXG5cclxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMih4LCB5KTtcclxuICAgIHRoaXMucm90YXRpb24gPSBNYXRoLndyYXBBbmdsZShyb3RhdGlvbik7XHJcbiAgICB0aGlzLnZlbG9jaXR5ID0gMDtcclxuICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gMDtcclxuICAgIHRoaXMud2hlZWxBbmdsZSA9IDA7XHJcbiAgICB0aGlzLndoZWVsQW5ndWxhclZlbG9jaXR5ID0gMDtcclxuICAgIHRoaXMuZEN1cnYgPSAwOyAvLyBkZXJpdmF0aXZlIHdpdGggcmVzcGVjdCB0byBhcmMgbGVuZ3RoXHJcbiAgICB0aGlzLmRkQ3VydiA9IDA7IC8vIGRlcml2YXRpdmUgd2l0aCByZXNwZWN0IHRvIGFyYyBsZW5ndGhcclxuICB9XHJcblxyXG5cdHN0ZXAgKCBkZWx0YSApIHtcclxuXHJcblx0XHRjb25zdCBjdXJ2UHJldiA9IHRoaXMuY3VydmF0dXJlO1xyXG5cdFx0Y29uc3QgZEN1cnZQcmV2ID0gdGhpcy5kQ3VydjtcclxuXHJcblx0XHRjb25zdCBkcmFnID0gKCAwLjUgKiBDYXIuRFJBR19DT0VGRiAqIENhci5GUk9OVEFMX0FSRUEgKiBDYXIuREVOU0lUWV9PRl9BSVIgKiBNYXRoLmFicyggdGhpcy52ZWxvY2l0eSApICsgQ2FyLlJPTExfUkVTSVNUICkgKiAtdGhpcy52ZWxvY2l0eTtcclxuXHRcdHRoaXMudmVsb2NpdHkgKz0gKCB0aGlzLmFjY2VsZXJhdGlvbiArIGRyYWcgLyBDYXIuTUFTUyApICogZGVsdGE7XHJcblxyXG5cdFx0Y29uc3QgdmVsb2NpdHlTcSA9IHRoaXMudmVsb2NpdHkgKiB0aGlzLnZlbG9jaXR5O1xyXG5cdFx0Y29uc3QgbWF4V2hlZWxBbmdsZSA9IE1hdGguY2xhbXAoIE1hdGguYXRhbiggQ2FyLk1BWF9MQVRFUkFMX0FDQ0VMICogQ2FyLldIRUVMX0JBU0UgLyB2ZWxvY2l0eVNxICksIDAuMDcsIENhci5NQVhfV0hFRUxfQU5HTEUgKTtcclxuXHRcdHRoaXMud2hlZWxBbmdsZSA9IE1hdGguY2xhbXAoIE1hdGgud3JhcEFuZ2xlKCB0aGlzLndoZWVsQW5nbGUgKyB0aGlzLndoZWVsQW5ndWxhclZlbG9jaXR5ICogZGVsdGEgKSwgLW1heFdoZWVsQW5nbGUsIG1heFdoZWVsQW5nbGUpO1xyXG5cclxuXHRcdGNvbnN0IGFuZ3VsYXJWZWxvY2l0eSA9IHRoaXMudmVsb2NpdHkgKiB0aGlzLmN1cnZhdHVyZTtcclxuXHRcdHRoaXMucm90YXRpb24gPSBNYXRoLndyYXBBbmdsZSggdGhpcy5yb3RhdGlvbiArIGFuZ3VsYXJWZWxvY2l0eSAqIGRlbHRhICk7XHJcblxyXG5cdFx0Y29uc3QgZGlzdCA9IHRoaXMudmVsb2NpdHkgKiBkZWx0YTtcclxuXHRcdHRoaXMucG9zaXRpb24gPSBUSFJFRS5WZWN0b3IyLmZyb21BbmdsZSggdGhpcy5yb3RhdGlvbiApLm11bHRpcGx5U2NhbGFyKCBkaXN0ICkuYWRkKCB0aGlzLnBvc2l0aW9uICk7XHJcblxyXG5cdFx0dGhpcy5kQ3VydiA9IGRpc3QgPiAwLjEgPyAoIHRoaXMuY3VydmF0dXJlIC0gY3VydlByZXYgKSAvIGRpc3QgOiAwO1xyXG5cdFx0dGhpcy5kZEN1cnYgPSBkaXN0ID4gMC4xID8gKCB0aGlzLmRDdXJ2IC0gZEN1cnZQcmV2ICkgLyBkaXN0IDogMDtcclxuXHJcblx0fVxyXG5cclxuXHR1cGRhdGUgKCBjb250cm9scywgZGVsdGEgKSB7XHJcblxyXG5cdFx0Y29uc3QgZ2FzID0gTWF0aC5jbGFtcCggY29udHJvbHMuZ2FzLCAtMSwgKzEgKTtcclxuXHRcdGNvbnN0IGJyYWtlID0gTWF0aC5jbGFtcCggY29udHJvbHMuYnJha2UsIDAsIDEgKTtcclxuXHRcdGNvbnN0IHN0ZWVyID0gTWF0aC5jbGFtcCggY29udHJvbHMuc3RlZXIsIC0xLCArMSApO1xyXG5cclxuXHRcdGlmICggYnJha2UgPiAwICkge1xyXG5cclxuXHRcdFx0dGhpcy5hY2NlbGVyYXRpb24gPSAtTWF0aC5zaWduKCB0aGlzLnZlbG9jaXR5ICkgKiBDYXIuTUFYX0JSQUtFX0RFQ0VMICogYnJha2U7XHJcblx0XHRcdGNvbnN0IG5ld1ZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eSArIHRoaXMuYWNjZWxlcmF0aW9uICogZGVsdGE7XHJcblxyXG5cdFx0XHQvLyBJZiBhcHBseWluZyB0aGUgYnJha2luZyBkZWNlbGVyYXRpb24gYXQgdGhlIG5leHQgc3RlcCB3b3VsZCBjYXVzZSB0aGUgdmVsb2NpdHlcclxuXHRcdFx0Ly8gdG8gY2hhbmdlIGRpcmVjdGlvbnMsIHRoZW4ganVzdCBzZXQgdGhlIGNhciBhcyBzdG9wcGVkLlxyXG5cdFx0XHRpZiAoIE1hdGguc2lnbiggbmV3VmVsb2NpdHkgKSAhPSBNYXRoLnNpZ24oIHRoaXMudmVsb2NpdHkgKSApIHtcclxuXHJcblx0XHRcdFx0dGhpcy52ZWxvY2l0eSA9IDA7XHJcblx0XHRcdFx0dGhpcy5hY2NlbGVyYXRpb24gPSAwO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLmFjY2VsZXJhdGlvbiA9IENhci5NQVhfR0FTX0FDQ0VMICogZ2FzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHN0ZWVyICE9IDAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLndoZWVsQW5ndWxhclZlbG9jaXR5ID0gc3RlZXIgKiBDYXIuTUFYX1NURUVSX1NQRUVEO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLndoZWVsQW5ndWxhclZlbG9jaXR5ID0gTWF0aC5jbGFtcCggLXRoaXMud2hlZWxBbmdsZSAvIENhci5NQVhfV0hFRUxfQU5HTEUgKiB0aGlzLnZlbG9jaXR5ICogdGhpcy52ZWxvY2l0eSAqIGRlbHRhLCAtQ2FyLk1BWF9TVEVFUl9TUEVFRCwgQ2FyLk1BWF9TVEVFUl9TUEVFRCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5sYXN0VGltZUxvZ2dlciA+IDUwMDAgKSB7XHJcblxyXG5cdFx0XHR0aGlzLmxhc3RUaW1lTG9nZ2VyID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblx0XHRcdGNvbnNvbGUubG9nKCB0aGlzICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59O1xyXG5cclxuQ2FyLkhBTEZfQ0FSX0xFTkdUSCA9IDIuNTsgLy8gbWV0ZXJzXHJcbkNhci5IQUxGX0NBUl9XSURUSCA9IDE7IC8vIG1ldGVyc1xyXG5DYXIuSEFMRl9XSEVFTF9MRU5HVEggPSAwLjM4OyAvLyBtZXRlcnNcclxuQ2FyLkhBTEZfV0hFRUxfV0lEVEggPSAwLjEyOyAvLyBtZXRlcnNcclxuQ2FyLk1BWF9XSEVFTF9BTkdMRSA9IDMyIC8gMTgwICogTWF0aC5QSTsgLy8gcmFkaWFuc1xyXG5DYXIuTUFTUyA9IDE2MDA7IC8vIGtnXHJcbkNhci5EUkFHX0NPRUZGID0gMC43O1xyXG5DYXIuREVOU0lUWV9PRl9BSVIgPSAxLjg1ODA2MDg7IC8vIChrZy9tXjMpXHJcbkNhci5GUk9OVEFMX0FSRUEgPSAxLjg1OyAvLyBtXjJcclxuQ2FyLlJPTExfUkVTSVNUID0gMDtcclxuQ2FyLk1BWF9TVEVFUl9TUEVFRCA9IDAuODsvLzEuMjsgLy8gUmFkaWFucyBwZXIgc2Vjb25kXHJcbkNhci5NQVhfR0FTX0FDQ0VMID0gMy41OyAvLyBtIC8gc14yXHJcbkNhci5NQVhfQlJBS0VfREVDRUwgPSA2LjU7IC8vIG0gLyBzXjJcclxuQ2FyLldIRUVMX0xBVEVSQUxfUE9TID0gMC44NDM7IC8vIG1ldGVyc1xyXG5DYXIuRlJPTlRfQVhMRV9QT1MgPSAxLjY7IC8vIG1ldGVyc1xyXG5DYXIuUkVBUl9BWExFX1BPUyA9IC0xLjQzOyAvLyBtZXRlcnNcclxuQ2FyLldIRUVMX0JBU0UgPSBDYXIuRlJPTlRfQVhMRV9QT1MgLSBDYXIuUkVBUl9BWExFX1BPUzsgLy8gbWV0ZXJzXHJcbkNhci5NQVhfTEFURVJBTF9BQ0NFTCA9IDkuODE7IC8vIG0gLyBzXjJcclxuIiwiY29uc3QgU0lNUFNPTlNfSU5URVJWQUxTID0gODtcclxuY29uc3QgTkVXVE9OX0lURVJBVElPTlMgPSAxNjtcclxuY29uc3QgUkVMQVhBVElPTl9JVEVSQVRJT05TID0gMzI7XHJcbmNvbnN0IENPTlZFUkdFTkNFX0VSUk9SID0gMC4wMTtcclxuXHJcbmNvbnN0IGphY29iaWFuID0gbmV3IFRIUkVFLk1hdHJpeDMoKTtcclxuY29uc3QgaW52SmFjb2JpYW4gPSBuZXcgVEhSRUUuTWF0cml4MygpO1xyXG5cclxuLy8gQWx0ZXJuYXRlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0Fwb2xsb0F1dG8vYXBvbGxvL2Jsb2IvbWFzdGVyL21vZHVsZXMvcGxhbm5pbmcvbWF0aC9zcGlyYWxfY3VydmUvY3ViaWNfc3BpcmFsX2N1cnZlLmNjXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1YmljUGF0aCB7XHJcbiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCwgcGFyYW1zID0gbnVsbCkge1xyXG4gICAgdGhpcy5zdGFydCA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXJ0KTtcclxuICAgIHRoaXMuZW5kID0gT2JqZWN0LmFzc2lnbih7fSwgZW5kKTtcclxuXHJcbiAgICBpZiAoc3RhcnQucG9zKSB7XHJcbiAgICAgIHRoaXMuc3RhcnQueCA9IHN0YXJ0LnBvcy54O1xyXG4gICAgICB0aGlzLnN0YXJ0LnkgPSBzdGFydC5wb3MueVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChlbmQucG9zKSB7XHJcbiAgICAgIHRoaXMuZW5kLnggPSBlbmQucG9zLng7XHJcbiAgICAgIHRoaXMuZW5kLnkgPSBlbmQucG9zLnlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkaWZmWCA9IHRoaXMuZW5kLnggLSB0aGlzLnN0YXJ0Lng7XHJcbiAgICBjb25zdCBkaWZmWSA9IHRoaXMuZW5kLnkgLSB0aGlzLnN0YXJ0Lnk7XHJcbiAgICBjb25zdCBzaW5Sb3QgPSBNYXRoLnNpbih0aGlzLnN0YXJ0LnJvdCk7XHJcbiAgICBjb25zdCBjb3NSb3QgPSBNYXRoLmNvcyh0aGlzLnN0YXJ0LnJvdCk7XHJcblxyXG4gICAgdGhpcy5nb2FsID0ge1xyXG4gICAgICB4OiBjb3NSb3QgKiBkaWZmWCArIHNpblJvdCAqIGRpZmZZLFxyXG4gICAgICB5OiAtc2luUm90ICogZGlmZlggKyBjb3NSb3QgKiBkaWZmWSxcclxuICAgICAgcm90OiBNYXRoLndyYXBBbmdsZSh0aGlzLmVuZC5yb3QgLSB0aGlzLnN0YXJ0LnJvdCksXHJcbiAgICAgIGN1cnY6IHRoaXMuZW5kLmN1cnZcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHBhcmFtcylcclxuICAgICAgdGhpcy5wYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMsIHsgcDA6IHRoaXMuc3RhcnQuY3VydiwgcDM6IHRoaXMuZW5kLmN1cnYgfSk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHRoaXMuZ3Vlc3NJbml0aWFsUGFyYW1zKCk7XHJcblxyXG4gICAgdGhpcy5jb252ZXJnZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGd1ZXNzSW5pdGlhbFBhcmFtcygpIHtcclxuICAgIGNvbnN0IG9yaWdpbmFsR29hbCA9IHRoaXMuZ29hbDtcclxuICAgIGNvbnN0IGRTdGFydEN1cnYgPSB0aGlzLnN0YXJ0LmN1cnYgLyBSRUxBWEFUSU9OX0lURVJBVElPTlM7XHJcbiAgICBjb25zdCBkR29hbFkgPSBvcmlnaW5hbEdvYWwueSAvIFJFTEFYQVRJT05fSVRFUkFUSU9OUztcclxuICAgIGNvbnN0IGRHb2FsUm90ID0gb3JpZ2luYWxHb2FsLnJvdCAvIFJFTEFYQVRJT05fSVRFUkFUSU9OUztcclxuICAgIGNvbnN0IGRHb2FsQ3VydiA9IG9yaWdpbmFsR29hbC5jdXJ2IC8gUkVMQVhBVElPTl9JVEVSQVRJT05TO1xyXG5cclxuICAgIHRoaXMuZ29hbCA9IHtcclxuICAgICAgeDogb3JpZ2luYWxHb2FsLngsXHJcbiAgICAgIHk6IDAsXHJcbiAgICAgIHJvdDogMCxcclxuICAgICAgY3VydjogMFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnBhcmFtcyA9IHtcclxuICAgICAgcDA6IDAsXHJcbiAgICAgIHAxOiAwLFxyXG4gICAgICBwMjogMCxcclxuICAgICAgcDM6IDAsXHJcbiAgICAgIHNHOiBvcmlnaW5hbEdvYWwueFxyXG4gICAgfTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IFJFTEFYQVRJT05fSVRFUkFUSU9OUzsgaSsrKSB7XHJcbiAgICAgIHRoaXMucGFyYW1zLnAwICs9IGRTdGFydEN1cnY7XHJcbiAgICAgIHRoaXMucGFyYW1zLnAzICs9IGRHb2FsQ3VydjtcclxuICAgICAgdGhpcy5nb2FsLnkgKz0gZEdvYWxZO1xyXG4gICAgICB0aGlzLmdvYWwucm90ICs9IGRHb2FsUm90O1xyXG4gICAgICB0aGlzLmdvYWwuY3VydiArPSBkR29hbEN1cnY7XHJcblxyXG4gICAgICB0aGlzLml0ZXJhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmdvYWwgPSBvcmlnaW5hbEdvYWw7XHJcbiAgfVxyXG5cclxuICBvcHRpbWl6ZSgpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTkVXVE9OX0lURVJBVElPTlM7IGkrKykge1xyXG4gICAgICBpZiAodGhpcy5pdGVyYXRlKCkpIHtcclxuICAgICAgICB0aGlzLmNvbnZlcmdlZCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbnZlcmdlZCA9IGZhbHNlO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaXRlcmF0ZSgpIHtcclxuICAgIGNvbnN0IHsgcDAsIHAxLCBwMiwgcDMsIHNHIH0gPSB0aGlzLnBhcmFtcztcclxuXHJcbiAgICBjb25zdCBkcyA9IHNHIC8gU0lNUFNPTlNfSU5URVJWQUxTO1xyXG4gICAgY29uc3Qgc0dfMiA9IHNHICogc0c7XHJcbiAgICBjb25zdCBzR18zID0gc0dfMiAqIHNHO1xyXG5cclxuICAgIGxldCBkWF9wMSA9IDA7XHJcbiAgICBsZXQgZFhfcDIgPSAwO1xyXG4gICAgbGV0IGRYX3NHID0gMDtcclxuICAgIGxldCBkWV9wMSA9IDA7XHJcbiAgICBsZXQgZFlfcDIgPSAwO1xyXG4gICAgbGV0IGRZX3NHID0gMDtcclxuICAgIGxldCBndWVzc1ggPSAwO1xyXG4gICAgbGV0IGd1ZXNzWSA9IDA7XHJcblxyXG4gICAgbGV0IHRoZXRhLCBjb3NUaGV0YSwgc2luVGhldGEsIGRUX3AxLCBkVF9wMiwgZFRfc0c7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDAsIHMgPSAwOyBpIDw9IFNJTVBTT05TX0lOVEVSVkFMUzsgaSsrLCBzICs9IGRzKSB7XHJcbiAgICAgIGNvbnN0IGNvZWZmID0gaSA9PSAwIHx8IGkgPT0gU0lNUFNPTlNfSU5URVJWQUxTID8gMSA6IGkgJSAyID09IDAgPyAyIDogNDtcclxuXHJcbiAgICAgIGNvbnN0IGEgPSBwMDtcclxuICAgICAgY29uc3QgYiA9ICgtNS41ICogcDAgKyA5ICogcDEgLSA0LjUgKiBwMiArIHAzKSAvIHNHO1xyXG4gICAgICBjb25zdCBjID0gKDkgKiBwMCAtIDIyLjUgKiBwMSArIDE4ICogcDIgLSA0LjUgKiBwMykgLyBzR18yO1xyXG4gICAgICBjb25zdCBkID0gKC00LjUgKiAocDAgLSAzICogcDEgKyAzICogcDIgLSBwMykpIC8gc0dfMztcclxuXHJcbiAgICAgIHRoZXRhID0gKCgoZCAqIHMgLyA0ICsgYyAvIDMpICogcyArIGIgLyAyKSAqIHMgKyBhKSAqIHM7XHJcbiAgICAgIGNvc1RoZXRhID0gTWF0aC5jb3ModGhldGEpO1xyXG4gICAgICBzaW5UaGV0YSA9IE1hdGguc2luKHRoZXRhKTtcclxuXHJcbiAgICAgIGNvbnN0IHNfc0cgPSBzIC8gc0c7XHJcbiAgICAgIGRUX3AxID0gKCgzLjM3NSAqIHNfc0cgLSA3LjUpICogc19zRyArIDQuNSkgKiBzX3NHICogcztcclxuICAgICAgZFRfcDIgPSAoKC0zLjM3NSAqIHNfc0cgKyA2KSAqIHNfc0cgLSAyLjI1KSAqIHNfc0cgKiBzO1xyXG4gICAgICBkVF9zRyA9ICgoMy4zNzUgKiAocDAgLSAzICogcDEgKyAzICogcDIgLSBwMykgKiBzX3NHIC0gMyAqICgyICogcDAgLSA1ICogcDEgKyA0ICogcDIgLSBwMykpICogc19zRyArIDAuMjUgKiAoMTEgKiBwMCAtIDE4ICogcDEgKyA5ICogcDIgLSAyICogcDMpKSAqIHNfc0cgKiBzX3NHO1xyXG5cclxuICAgICAgZFhfcDEgLT0gY29lZmYgKiBzaW5UaGV0YSAqIGRUX3AxO1xyXG4gICAgICBkWF9wMiAtPSBjb2VmZiAqIHNpblRoZXRhICogZFRfcDI7XHJcbiAgICAgIGRYX3NHIC09IGNvZWZmICogc2luVGhldGEgKiBkVF9zRztcclxuXHJcbiAgICAgIGRZX3AxICs9IGNvZWZmICogY29zVGhldGEgKiBkVF9wMTtcclxuICAgICAgZFlfcDIgKz0gY29lZmYgKiBjb3NUaGV0YSAqIGRUX3AyO1xyXG4gICAgICBkWV9zRyArPSBjb2VmZiAqIGNvc1RoZXRhICogZFRfc0c7XHJcblxyXG4gICAgICBndWVzc1ggKz0gY29lZmYgKiBjb3NUaGV0YTtcclxuICAgICAgZ3Vlc3NZICs9IGNvZWZmICogc2luVGhldGE7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWZ0ZXIgdGhlIFNpbXBzb24ncyBpbnRlZ3JhdGlvbiBsb29wLCBgdGhldGFgLCBgY29zVGhldGFgLCBgc2luVGhldGFgLFxyXG4gICAgLy8gYGRUX3AxYCwgYGRUX3AyYCwgYW5kIGBkVF9zR2AgaG9sZCB0aGUgYXBwcm9wcmlhdGUgdmFsdWVzIGZvciBgc0dgLlxyXG5cclxuICAgIGNvbnN0IGhPdmVyMyA9IHNHIC8gU0lNUFNPTlNfSU5URVJWQUxTIC8gMztcclxuXHJcbiAgICBjb25zdCBkZWx0YVggPSB0aGlzLmdvYWwueCAtIGd1ZXNzWCAqIGhPdmVyMztcclxuICAgIGNvbnN0IGRlbHRhWSA9IHRoaXMuZ29hbC55IC0gZ3Vlc3NZICogaE92ZXIzO1xyXG4gICAgY29uc3QgZGVsdGFSb3QgPSBNYXRoLndyYXBBbmdsZSh0aGlzLmdvYWwucm90IC0gdGhldGEpO1xyXG5cclxuICAgIGlmIChNYXRoLmFicyhkZWx0YVgpICsgTWF0aC5hYnMoZGVsdGFZKSArIE1hdGguYWJzKGRlbHRhUm90KSA8IENPTlZFUkdFTkNFX0VSUk9SKVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICBqYWNvYmlhbi5zZXQoXHJcbiAgICAgIGRYX3AxICogaE92ZXIzLCBkWF9wMiAqIGhPdmVyMywgY29zVGhldGEgKyBkWF9zRyAqIGhPdmVyMyxcclxuICAgICAgZFlfcDEgKiBoT3ZlcjMsIGRZX3AyICogaE92ZXIzLCBzaW5UaGV0YSArIGRZX3NHICogaE92ZXIzLFxyXG4gICAgICBkVF9wMSwgZFRfcDIsIGRUX3NHXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IFttMTEsIG0yMSwgbTMxLCBtMTIsIG0yMiwgbTMyLCBtMTMsIG0yMywgbTMzXSA9IGludkphY29iaWFuLmdldEludmVyc2UoamFjb2JpYW4pLmVsZW1lbnRzO1xyXG5cclxuICAgIHRoaXMucGFyYW1zLnAxICs9IG0xMSAqIGRlbHRhWCArIG0xMiAqIGRlbHRhWSArIG0xMyAqIGRlbHRhUm90O1xyXG4gICAgdGhpcy5wYXJhbXMucDIgKz0gbTIxICogZGVsdGFYICsgbTIyICogZGVsdGFZICsgbTIzICogZGVsdGFSb3Q7XHJcbiAgICB0aGlzLnBhcmFtcy5zRyArPSBtMzEgKiBkZWx0YVggKyBtMzIgKiBkZWx0YVkgKyBtMzMgKiBkZWx0YVJvdDtcclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBidWlsZFBhdGgobnVtKSB7XHJcbiAgICBjb25zdCB7IHAwLCBwMSwgcDIsIHAzLCBzRyB9ID0gdGhpcy5wYXJhbXM7XHJcblxyXG4gICAgY29uc3Qgc0dfMiA9IHNHICogc0c7XHJcbiAgICBjb25zdCBzR18zID0gc0dfMiAqIHNHO1xyXG5cclxuICAgIGNvbnN0IGEgPSBwMDtcclxuICAgIGNvbnN0IGIgPSAoLTUuNSAqIHAwICsgOSAqIHAxIC0gNC41ICogcDIgKyBwMykgLyBzRztcclxuICAgIGNvbnN0IGMgPSAoOSAqIHAwIC0gMjIuNSAqIHAxICsgMTggKiBwMiAtIDQuNSAqIHAzKSAvIHNHXzI7XHJcbiAgICBjb25zdCBkID0gKC00LjUgKiAocDAgLSAzICogcDEgKyAzICogcDIgLSBwMykpIC8gc0dfMztcclxuXHJcbiAgICBjb25zdCBwYXRoID0gW3sgcG9zOiBuZXcgVEhSRUUuVmVjdG9yMih0aGlzLnN0YXJ0LngsIHRoaXMuc3RhcnQueSksIHJvdDogdGhpcy5zdGFydC5yb3QsIGN1cnY6IHRoaXMuc3RhcnQuY3VydiB9XTtcclxuICAgIGNvbnN0IGRzID0gc0cgLyAobnVtIC0gMSk7XHJcbiAgICBsZXQgcyA9IGRzO1xyXG4gICAgbGV0IGR4ID0gMDtcclxuICAgIGxldCBkeSA9IDA7XHJcbiAgICBsZXQgcHJldkNvc1JvdCA9IE1hdGguY29zKHBhdGhbMF0ucm90KTtcclxuICAgIGxldCBwcmV2U2luUm90ID0gTWF0aC5zaW4ocGF0aFswXS5yb3QpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbnVtIC0gMTsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHJvdCA9ICgoKGQgKiBzIC8gNCArIGMgLyAzKSAqIHMgKyBiIC8gMikgKiBzICsgYSkgKiBzICsgdGhpcy5zdGFydC5yb3Q7XHJcbiAgICAgIGNvbnN0IGN1cnYgPSAoKGQgKiBzICsgYykgKiBzICsgYikgKiBzICsgYTtcclxuICAgICAgY29uc3QgY29zUm90ID0gTWF0aC5jb3Mocm90KTtcclxuICAgICAgY29uc3Qgc2luUm90ID0gTWF0aC5zaW4ocm90KTtcclxuXHJcbiAgICAgIGR4ID0gZHggKiAoaSAtIDEpIC8gaSArIChjb3NSb3QgKyBwcmV2Q29zUm90KSAvICgyICogaSk7XHJcbiAgICAgIGR5ID0gZHkgKiAoaSAtIDEpIC8gaSArIChzaW5Sb3QgKyBwcmV2U2luUm90KSAvICgyICogaSk7XHJcblxyXG4gICAgICBwYXRoLnB1c2goeyBwb3M6IG5ldyBUSFJFRS5WZWN0b3IyKHMgKiBkeCArIHRoaXMuc3RhcnQueCwgcyAqIGR5ICsgdGhpcy5zdGFydC55KSwgcm90OiByb3QsIGN1cnY6IGN1cnYgfSk7XHJcblxyXG4gICAgICBzICs9IGRzO1xyXG4gICAgICBwcmV2Q29zUm90ID0gY29zUm90O1xyXG4gICAgICBwcmV2U2luUm90ID0gc2luUm90O1xyXG4gICAgfVxyXG5cclxuICAgIHBhdGgucHVzaCh7IHBvczogbmV3IFRIUkVFLlZlY3RvcjIodGhpcy5lbmQueCwgdGhpcy5lbmQueSksIHJvdDogdGhpcy5lbmQucm90LCBjdXJ2OiB0aGlzLmVuZC5jdXJ2IH0pO1xyXG5cclxuICAgIHJldHVybiBwYXRoO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBRdWludGljUGF0aCB7XHJcbiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCwgcGFyYW1zKSB7XHJcbiAgICB0aGlzLnN0YXJ0ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhcnQpO1xyXG4gICAgdGhpcy5lbmQgPSBPYmplY3QuYXNzaWduKHt9LCBlbmQpO1xyXG5cclxuICAgIGlmIChzdGFydC5wb3MpIHtcclxuICAgICAgdGhpcy5zdGFydC54ID0gc3RhcnQucG9zLng7XHJcbiAgICAgIHRoaXMuc3RhcnQueSA9IHN0YXJ0LnBvcy55XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVuZC5wb3MpIHtcclxuICAgICAgdGhpcy5lbmQueCA9IGVuZC5wb3MueDtcclxuICAgICAgdGhpcy5lbmQueSA9IGVuZC5wb3MueVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRpZmZYID0gdGhpcy5lbmQueCAtIHRoaXMuc3RhcnQueDtcclxuICAgIGNvbnN0IGRpZmZZID0gdGhpcy5lbmQueSAtIHRoaXMuc3RhcnQueTtcclxuICAgIGNvbnN0IHNpblJvdCA9IE1hdGguc2luKHRoaXMuc3RhcnQucm90KTtcclxuICAgIGNvbnN0IGNvc1JvdCA9IE1hdGguY29zKHRoaXMuc3RhcnQucm90KTtcclxuXHJcbiAgICB0aGlzLmdvYWwgPSB7XHJcbiAgICAgIHg6IGNvc1JvdCAqIGRpZmZYICsgc2luUm90ICogZGlmZlksXHJcbiAgICAgIHk6IC1zaW5Sb3QgKiBkaWZmWCArIGNvc1JvdCAqIGRpZmZZLFxyXG4gICAgICByb3Q6IE1hdGgud3JhcEFuZ2xlKHRoaXMuZW5kLnJvdCAtIHRoaXMuc3RhcnQucm90KSxcclxuICAgICAgY3VydjogdGhpcy5lbmQuY3VydlxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcywgeyBwMDogdGhpcy5zdGFydC5jdXJ2LCBwMTogdGhpcy5zdGFydC5kQ3VydiB8fCAwLCBwMjogdGhpcy5zdGFydC5kZEN1cnYgfHwgMCwgcDU6IHRoaXMuZW5kLmN1cnYgfSk7XHJcbiAgfVxyXG5cclxuICBidWlsZFBhdGgobnVtKSB7XHJcbiAgICBjb25zdCB7IHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUsIHNHIH0gPSB0aGlzLnBhcmFtcztcclxuXHJcbiAgICBjb25zdCBzR18yID0gc0cgKiBzRztcclxuICAgIGNvbnN0IHNHXzMgPSBzR18yICogc0c7XHJcblxyXG4gICAgY29uc3QgYSA9IHAwO1xyXG4gICAgY29uc3QgYiA9IHAxO1xyXG4gICAgY29uc3QgYyA9IHAyIC8gMi4wO1xyXG4gICAgY29uc3QgZCA9ICgtNzEuODc1ICogcDAgKyA4MS4wICogcDMgLSAxMC4xMjUgKiBwNCArIHA1IC0gMjEuMjUgKiBwMSAqIHNHIC0gMi43NSAqIHAyICogc0dfMikgLyBzR18zO1xyXG4gICAgY29uc3QgZSA9ICgxNjYuNSAqIHAwIC0gMjAyLjUgKiBwMyArIDQwLjUgKiBwNCAtIDQuNSAqIHA1ICsgNDUuMCAqIHAxICogc0cgKyA0LjUgKiBwMiAqIHNHXzIpIC8gKHNHXzIgKiBzR18yKTtcclxuICAgIGNvbnN0IGYgPSAoLTk1LjYyNSAqIHAwICsgMTIxLjUgKiBwMyAtIDMwLjM3NSAqIHA0ICsgNC41ICogcDUgLSAyNC43NSAqIHAxICogc0cgLSAyLjI1ICogcDIgKiBzR18yKSAvIChzR18yICogc0dfMyk7XHJcblxyXG4gICAgY29uc3QgcGF0aCA9IFt7IHBvczogbmV3IFRIUkVFLlZlY3RvcjIodGhpcy5zdGFydC54LCB0aGlzLnN0YXJ0LnkpLCByb3Q6IHRoaXMuc3RhcnQucm90LCBjdXJ2OiB0aGlzLnN0YXJ0LmN1cnYgfV07XHJcbiAgICBjb25zdCBkcyA9IHNHIC8gKG51bSAtIDEpO1xyXG4gICAgbGV0IHMgPSBkcztcclxuICAgIGxldCBkeCA9IDA7XHJcbiAgICBsZXQgZHkgPSAwO1xyXG4gICAgbGV0IHByZXZDb3NSb3QgPSBNYXRoLmNvcyhwYXRoWzBdLnJvdCk7XHJcbiAgICBsZXQgcHJldlNpblJvdCA9IE1hdGguc2luKHBhdGhbMF0ucm90KTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG51bSAtIDE7IGkrKykge1xyXG4gICAgICBjb25zdCByb3QgPSAoKCgoKGYgKiBzIC8gNi4wICsgZSAvIDUuMCkgKiBzICsgZCAvIDQuMCkgKiBzICsgYyAvIDMuMCkgKiBzICsgYiAvIDIuMCkgKiBzICsgYSkgKiBzICsgdGhpcy5zdGFydC5yb3Q7XHJcbiAgICAgIGNvbnN0IGN1cnYgPSAoKCgoZiAqIHMgKyBlKSAqIHMgKyBkKSAqIHMgKyBjKSAqIHMgKyBiKSAqIHMgKyBhO1xyXG4gICAgICBjb25zdCBjb3NSb3QgPSBNYXRoLmNvcyhyb3QpO1xyXG4gICAgICBjb25zdCBzaW5Sb3QgPSBNYXRoLnNpbihyb3QpO1xyXG5cclxuICAgICAgZHggPSBkeCAqIChpIC0gMSkgLyBpICsgKGNvc1JvdCArIHByZXZDb3NSb3QpIC8gKDIgKiBpKTtcclxuICAgICAgZHkgPSBkeSAqIChpIC0gMSkgLyBpICsgKHNpblJvdCArIHByZXZTaW5Sb3QpIC8gKDIgKiBpKTtcclxuXHJcbiAgICAgIHBhdGgucHVzaCh7IHBvczogbmV3IFRIUkVFLlZlY3RvcjIocyAqIGR4ICsgdGhpcy5zdGFydC54LCBzICogZHkgKyB0aGlzLnN0YXJ0LnkpLCByb3Q6IHJvdCwgY3VydjogY3VydiB9KTtcclxuXHJcbiAgICAgIHMgKz0gZHM7XHJcbiAgICAgIHByZXZDb3NSb3QgPSBjb3NSb3Q7XHJcbiAgICAgIHByZXZTaW5Sb3QgPSBzaW5Sb3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcGF0aC5wdXNoKHsgcG9zOiBuZXcgVEhSRUUuVmVjdG9yMih0aGlzLmVuZC54LCB0aGlzLmVuZC55KSwgcm90OiB0aGlzLmVuZC5yb3QsIGN1cnY6IHRoaXMuZW5kLmN1cnYgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBhdGg7XHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IE9CU1RBQ0xFX1ZFUlRFWF9TSEFERVIgPSBgI3ZlcnNpb24gMzAwIGVzXHJcbnVuaWZvcm0gbWF0MyB4Zm9ybTtcclxuaW4gdmVjMiBwb3NpdGlvbjtcclxuXHJcbnZvaWQgbWFpbih2b2lkKSB7XHJcbiAgZ2xfUG9zaXRpb24gPSB2ZWM0KCh4Zm9ybSAqIHZlYzMocG9zaXRpb24sIDEpKS54eSwgMCwgMSk7XHJcbn1cclxuYDtcclxuXHJcbmNvbnN0IE9CU1RBQ0xFX0tFUk5FTCA9IGBcclxuICB2ZWM0IGtlcm5lbCgpIHtcclxuICAgIHJldHVybiB2ZWM0KDEsIDAsIDAsIDEpO1xyXG4gIH1cclxuYDtcclxuXHJcbmxldCBvYnN0YWNsZVZlcnRpY2VzO1xyXG5sZXQgb2JzdGFjbGVYZm9ybTtcclxuXHJcbi8vIERyYXcgb2JzdGFjbGUgdHJpYW5nbGVzIHRvIFhZLXNwYWNlIG9ic3RhY2xlIGdyaWRcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNldFVwKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAga2VybmVsOiBPQlNUQUNMRV9LRVJORUwsXHJcbiAgICAgIHZlcnRleFNoYWRlcjogT0JTVEFDTEVfVkVSVEVYX1NIQURFUixcclxuICAgICAgb3V0cHV0OiB7IG5hbWU6ICd4eU9ic3RhY2xlR3JpZCcgfSxcclxuICAgICAgZHJhdzogKGdwZ3B1LCBwcm9ncmFtKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZ2wgPSBncGdwdS5nbDtcclxuXHJcbiAgICAgICAgZ2wuY2xlYXJDb2xvcigwLCAwLCAwLCAwKTtcclxuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcclxuXHJcbiAgICAgICAgaWYgKG9ic3RhY2xlVmVydGljZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgY29uc3QgYnVmID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcblxyXG4gICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1Zik7XHJcbiAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgb2JzdGFjbGVWZXJ0aWNlcywgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocHJvZ3JhbS5wb3NpdGlvbkxvY2F0aW9uKTtcclxuICAgICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIocHJvZ3JhbS5wb3NpdGlvbkxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHhmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbS5nbFByb2dyYW0sICd4Zm9ybScpO1xyXG4gICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdih4Zm9ybUxvY2F0aW9uLCBmYWxzZSwgb2JzdGFjbGVYZm9ybS5lbGVtZW50cyk7XHJcblxyXG4gICAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIG9ic3RhY2xlVmVydGljZXMubGVuZ3RoIC8gMik7XHJcblxyXG4gICAgICAgICAgZ2wuZGVsZXRlQnVmZmVyKGJ1Zik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIHVwZGF0ZShjb25maWcsIHh5V2lkdGgsIHh5SGVpZ2h0LCB4eUNlbnRlclBvaW50LCB2ZWhpY2xlWGZvcm0sIG9ic3RhY2xlcykge1xyXG4gICAgb2JzdGFjbGVWZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgb2JzdGFjbGVzLm1hcChvID0+IG8udmVydGljZXMpKSk7XHJcblxyXG4gICAgY29uc3QgdHJhbnNsYXRlID0gbmV3IFRIUkVFLk1hdHJpeDMoKTtcclxuICAgIHRyYW5zbGF0ZS5zZXQoXHJcbiAgICAgIDEsIDAsIC14eUNlbnRlclBvaW50LngsXHJcbiAgICAgIDAsIDEsIC14eUNlbnRlclBvaW50LnksXHJcbiAgICAgIDAsIDAsIDFcclxuICAgICk7XHJcblxyXG4gICAgY29uc3Qgc2NhbGUgPSBuZXcgVEhSRUUuTWF0cml4MygpO1xyXG4gICAgc2NhbGUuc2V0KFxyXG4gICAgICAyIC8gKHh5V2lkdGggKiBjb25maWcueHlHcmlkQ2VsbFNpemUpLCAwLCAwLFxyXG4gICAgICAwLCAyIC8gKHh5SGVpZ2h0ICogY29uZmlnLnh5R3JpZENlbGxTaXplKSwgMCxcclxuICAgICAgMCwgMCwgMVxyXG4gICAgKTtcclxuXHJcbiAgICBvYnN0YWNsZVhmb3JtID0gc2NhbGUubXVsdGlwbHkodHJhbnNsYXRlKS5tdWx0aXBseSh2ZWhpY2xlWGZvcm0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHdpZHRoOiB4eVdpZHRoLFxyXG4gICAgICBoZWlnaHQ6IHh5SGVpZ2h0XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IFNMX09CU1RBQ0xFX0tFUk5FTCA9IGBcclxuXHJcbnZlYzQga2VybmVsKCkge1xyXG4gIGZsb2F0IGNlbnRlcmxpbmVXaWR0aCA9IGZsb2F0KHRleHR1cmVTaXplKGNlbnRlcmxpbmUsIDApLngpO1xyXG5cclxuICB2ZWMyIHNsID0gKGtlcm5lbFBvc2l0aW9uIC0gMC41KSAqIHZlYzIoa2VybmVsU2l6ZSkgKiB2ZWMyKHNsR3JpZENlbGxTaXplKSArIHNsQ2VudGVyUG9pbnQ7XHJcbiAgZmxvYXQgY2VudGVybGluZUNvb3JkID0gc2wueCAvIGNlbnRlcmxpbmVTdGF0aW9uSW50ZXJ2YWwgLyBjZW50ZXJsaW5lV2lkdGggKiAoY2VudGVybGluZVdpZHRoIC0gMS4wKSAvIGNlbnRlcmxpbmVXaWR0aCArICgwLjUgLyBjZW50ZXJsaW5lV2lkdGgpO1xyXG4gIGlmIChjZW50ZXJsaW5lQ29vcmQgPCAwLjAgfHwgY2VudGVybGluZUNvb3JkID4gMS4wKSByZXR1cm4gdmVjNCgwKTtcclxuXHJcbiAgdmVjMyBjZW50ZXJsaW5lU2FtcGxlID0gdGV4dHVyZShjZW50ZXJsaW5lLCB2ZWMyKGNlbnRlcmxpbmVDb29yZCwgMCkpLnh5ejtcclxuICBmbG9hdCBwZXJwaW5kaWN1bGFyID0gY2VudGVybGluZVNhbXBsZS56ICsgcmFkaWFucyg5MC4wKTtcclxuICB2ZWMyIHh5ID0gY2VudGVybGluZVNhbXBsZS54eSArIHNsLnl5ICogdmVjMihjb3MocGVycGluZGljdWxhciksIHNpbihwZXJwaW5kaWN1bGFyKSk7XHJcblxyXG4gIHZlYzIgeHlUZXhDb29yZHMgPSAoeHkgLSB4eUNlbnRlclBvaW50KSAvIHZlYzIodGV4dHVyZVNpemUoeHlPYnN0YWNsZUdyaWQsIDApKSAvIHZlYzIoeHlHcmlkQ2VsbFNpemUpICsgMC41O1xyXG4gIHJldHVybiB0ZXh0dXJlKHh5T2JzdGFjbGVHcmlkLCB4eVRleENvb3Jkcyk7XHJcbn1cclxuXHJcbmA7XHJcblxyXG4vLyBDb252ZXJ0IFhZLXNwYWNlIG9ic3RhY2xlIGdyaWQgdG8gU0wtc3BhY2Ugb2JzdGFjbGUgZ3JpZFxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgc2V0VXAoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBrZXJuZWw6IFNMX09CU1RBQ0xFX0tFUk5FTCxcclxuICAgICAgb3V0cHV0OiB7IG5hbWU6ICdzbE9ic3RhY2xlR3JpZCcgfSxcclxuICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICB4eU9ic3RhY2xlR3JpZDogeyB0eXBlOiAnb3V0cHV0VGV4dHVyZScgfSxcclxuICAgICAgICBzbEdyaWRDZWxsU2l6ZTogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgICAgICAgeHlHcmlkQ2VsbFNpemU6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gICAgICAgIHNsQ2VudGVyUG9pbnQ6IHsgdHlwZTogJ3ZlYzInIH0sXHJcbiAgICAgICAgeHlDZW50ZXJQb2ludDogeyB0eXBlOiAndmVjMicgfSxcclxuICAgICAgICBjZW50ZXJsaW5lU3RhdGlvbkludGVydmFsOiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICAgICAgICBjZW50ZXJsaW5lOiB7IHR5cGU6ICdzaGFyZWRUZXh0dXJlJyB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG5cclxuICB1cGRhdGUoY29uZmlnLCBzbFdpZHRoLCBzbEhlaWdodCwgc2xDZW50ZXJQb2ludCwgeHlDZW50ZXJQb2ludCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGg6IHNsV2lkdGgsXHJcbiAgICAgIGhlaWdodDogc2xIZWlnaHQsXHJcbiAgICAgIHVuaWZvcm1zOiB7XHJcbiAgICAgICAgc2xHcmlkQ2VsbFNpemU6IGNvbmZpZy5zbEdyaWRDZWxsU2l6ZSxcclxuICAgICAgICB4eUdyaWRDZWxsU2l6ZTogY29uZmlnLnh5R3JpZENlbGxTaXplLFxyXG4gICAgICAgIHNsQ2VudGVyUG9pbnQ6IFtzbENlbnRlclBvaW50LngsIHNsQ2VudGVyUG9pbnQueV0sXHJcbiAgICAgICAgeHlDZW50ZXJQb2ludDogW3h5Q2VudGVyUG9pbnQueCwgeHlDZW50ZXJQb2ludC55XSxcclxuICAgICAgICBjZW50ZXJsaW5lU3RhdGlvbkludGVydmFsOiBjb25maWcuY2VudGVybGluZVN0YXRpb25JbnRlcnZhbFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IFNMX09CU1RBQ0xFX0RJTEFUSU9OX0tFUk5FTCA9IGBcclxuXHJcbi8vIFRPRE86IHRlc3QgcGVyZm9ybWFuY2Ugb2YgcmV0dXJuaW5nIGVhcmx5IGlmIG5vbi16ZXJvIHBpeGVsIGZvdW5kXHJcbnZlYzQga2VybmVsKCkge1xyXG4gIGZsb2F0IHZhbCA9IDAuMDtcclxuXHJcbiAgZm9yIChpbnQgZCA9IDA7IGQgPD0gY29sbGlzaW9uRGlsYXRpb247IGQrKykge1xyXG4gICAgdmFsID0gbWF4KHZhbCwgdGV4dHVyZShzbE9ic3RhY2xlR3JpZCwga2VybmVsUG9zaXRpb24gKyBkZWx0YSAqIHZlYzIoZCkpLnIpO1xyXG4gICAgdmFsID0gbWF4KHZhbCwgdGV4dHVyZShzbE9ic3RhY2xlR3JpZCwga2VybmVsUG9zaXRpb24gKyBkZWx0YSAqIHZlYzIoLWQpKS5yKTtcclxuICB9XHJcblxyXG4gIGZvciAoaW50IGQgPSBjb2xsaXNpb25EaWxhdGlvbiArIDE7IGQgPD0gY29sbGlzaW9uRGlsYXRpb24gKyBoYXphcmREaWxhdGlvbjsgZCsrKSB7XHJcbiAgICB2YWwgPSBtYXgodmFsLCB0ZXh0dXJlKHNsT2JzdGFjbGVHcmlkLCBrZXJuZWxQb3NpdGlvbiArIGRlbHRhICogdmVjMihkKSkuciAqIDAuNSk7XHJcbiAgICB2YWwgPSBtYXgodmFsLCB0ZXh0dXJlKHNsT2JzdGFjbGVHcmlkLCBrZXJuZWxQb3NpdGlvbiArIGRlbHRhICogdmVjMigtZCkpLnIgKiAwLjUpO1xyXG4gIH1cclxuXHJcbiAgdmFsID0gbWF4KHZhbCwgc3RlcCgwLjEsIHZhbCkgKiAwLjUpO1xyXG5cclxuICByZXR1cm4gdmVjNCh2YWwsIDAsIDAsIDEpO1xyXG59XHJcblxyXG5gO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNldFVwKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgeyAvLyBTTC1zcGFjZSBvYnN0YWNsZSBncmlkIFMgZGlsYXRpb25cclxuICAgICAgICBrZXJuZWw6IFNMX09CU1RBQ0xFX0RJTEFUSU9OX0tFUk5FTCxcclxuICAgICAgICBvdXRwdXQ6IHsgbmFtZTogJ3NsT2JzdGFjbGVHcmlkU3RhdGlvbkRpbGF0ZWQnIH0sXHJcbiAgICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICAgIHNsT2JzdGFjbGVHcmlkOiB7IHR5cGU6ICdvdXRwdXRUZXh0dXJlJyB9LFxyXG4gICAgICAgICAgZGVsdGE6IHsgdHlwZTogJ3ZlYzInIH0sXHJcbiAgICAgICAgICBjb2xsaXNpb25EaWxhdGlvbjogeyB0eXBlOiAnaW50JyB9LFxyXG4gICAgICAgICAgaGF6YXJkRGlsYXRpb246IHsgdHlwZTogJ2ludCcgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgeyAvLyBTTC1zcGFjZSBvYnN0YWNsZSBncmlkIEwgZGlsYXRpb25cclxuICAgICAgICBrZXJuZWw6IFNMX09CU1RBQ0xFX0RJTEFUSU9OX0tFUk5FTCxcclxuICAgICAgICBvdXRwdXQ6IHsgbmFtZTogJ3NsT2JzdGFjbGVHcmlkRGlsYXRlZCcgfSxcclxuICAgICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgICAgc2xPYnN0YWNsZUdyaWQ6IHsgdHlwZTogJ291dHB1dFRleHR1cmUnLCBuYW1lOiAnc2xPYnN0YWNsZUdyaWRTdGF0aW9uRGlsYXRlZCcgfSxcclxuICAgICAgICAgIGRlbHRhOiB7IHR5cGU6ICd2ZWMyJyB9LFxyXG4gICAgICAgICAgY29sbGlzaW9uRGlsYXRpb246IHsgdHlwZTogJ2ludCcgfSxcclxuICAgICAgICAgIGhhemFyZERpbGF0aW9uOiB7IHR5cGU6ICdpbnQnIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIF07XHJcbiAgfSxcclxuXHJcbiAgdXBkYXRlKGNvbmZpZywgc2xXaWR0aCwgc2xIZWlnaHQpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHsgLy8gU0wtc3BhY2Ugb2JzdGFjbGUgZ3JpZCBTIGRpbGF0aW9uXHJcbiAgICAgICAgd2lkdGg6IHNsV2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiBzbEhlaWdodCxcclxuICAgICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgICAgZGVsdGE6IFsxIC8gc2xXaWR0aCwgMF0sXHJcbiAgICAgICAgICBjb2xsaXNpb25EaWxhdGlvbjogTWF0aC5jZWlsKGNvbmZpZy5jb2xsaXNpb25EaWxhdGlvblMgLyBjb25maWcuc2xHcmlkQ2VsbFNpemUpLFxyXG4gICAgICAgICAgaGF6YXJkRGlsYXRpb246IE1hdGguY2VpbChjb25maWcuaGF6YXJkRGlsYXRpb25TIC8gY29uZmlnLnNsR3JpZENlbGxTaXplKVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgeyAvLyBTTC1zcGFjZSBvYnN0YWNsZSBncmlkIEwgZGlsYXRpb25cclxuICAgICAgICB3aWR0aDogc2xXaWR0aCxcclxuICAgICAgICBoZWlnaHQ6IHNsSGVpZ2h0LFxyXG4gICAgICAgIHVuaWZvcm1zOiB7XHJcbiAgICAgICAgICBkZWx0YTogWzAsIDEgLyBzbEhlaWdodF0sXHJcbiAgICAgICAgICBjb2xsaXNpb25EaWxhdGlvbjogTWF0aC5jZWlsKGNvbmZpZy5jb2xsaXNpb25EaWxhdGlvbkwgLyBjb25maWcuc2xHcmlkQ2VsbFNpemUpLFxyXG4gICAgICAgICAgaGF6YXJkRGlsYXRpb246IE1hdGguY2VpbChjb25maWcuaGF6YXJkRGlsYXRpb25MIC8gY29uZmlnLnNsR3JpZENlbGxTaXplKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXTtcclxuICB9XHJcbn1cclxuIiwiY29uc3QgRFlOQU1JQ19PQlNUQUNMRV9WRVJURVhfU0hBREVSID0gYCN2ZXJzaW9uIDMwMCBlc1xyXG51bmlmb3JtIG1hdDMgeGZvcm07XHJcbmluIHZlYzMgcG9zaXRpb247XHJcbm91dCBmbG9hdCBjb2xvcjtcclxuXHJcbnZvaWQgbWFpbih2b2lkKSB7XHJcbiAgZ2xfUG9zaXRpb24gPSB2ZWM0KCh4Zm9ybSAqIHZlYzMocG9zaXRpb24ueHksIDEpKS54eSwgcG9zaXRpb24ueiwgMSk7XHJcblxyXG4gIC8vIFRoZSB6IGNvb3JkaW5hdGUgaXMgMC4yNSBmb3IgY29sbGlzaW9uIHpvbmUgYW5kIDAuNzUgZm9yIGhhemFyZCB6b25lLFxyXG4gIC8vIHNvIHRoYXQgdGhlIGNvbGxpc2lvbiB6b25lIGlzIGRyYXduIG9uIHRvcC5cclxuICAvLyBDb252ZXJ0IHRoaXMgdG8gMS4wIGZvciBjb2xsaXNpb24gem9uZSwgMC41IGZvciBoYXphcmQgem9uZVxyXG4gIGNvbG9yID0gKDEuMCAtIHN0ZXAoMC41LCBwb3NpdGlvbi56KSkgKiAwLjUgKyAwLjU7XHJcbn1cclxuYDtcclxuXHJcbmNvbnN0IERZTkFNSUNfT0JTVEFDTEVfS0VSTkVMID0gYFxyXG4gIGluIGZsb2F0IGNvbG9yO1xyXG5cclxuICB2ZWM0IGtlcm5lbCgpIHtcclxuICAgIHJldHVybiB2ZWM0KGNvbG9yLCAwLCAwLCAxKTtcclxuICB9XHJcbmA7XHJcblxyXG5sZXQgb2JzdGFjbGVWZXJ0aWNlcztcclxubGV0IG9ic3RhY2xlWGZvcm07XHJcbmNvbnN0IG51bUR5bmFtaWNGcmFtZXMgPSAyMDtcclxuXHJcbi8vIERyYXcgZHluYW1pYyBvYnN0YWNsZSB0cmlhbmdsZXMgdG8gU0wtc3BhY2Ugb2JzdGFjbGUgZ3JpZFxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgc2V0VXAoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBrZXJuZWw6IERZTkFNSUNfT0JTVEFDTEVfS0VSTkVMLFxyXG4gICAgICB2ZXJ0ZXhTaGFkZXI6IERZTkFNSUNfT0JTVEFDTEVfVkVSVEVYX1NIQURFUixcclxuICAgICAgb3V0cHV0OiB7IG5hbWU6ICdzbER5bmFtaWNPYnN0YWNsZUdyaWQnLCB0ZXh0dXJlVHlwZTogJzJEQXJyYXknLCBkZXB0aDogbnVtRHluYW1pY0ZyYW1lcyB9LFxyXG4gICAgICBkcmF3OiAoZ3BncHUsIHByb2dyYW0pID0+IHtcclxuICAgICAgICBjb25zdCBnbCA9IGdwZ3B1LmdsO1xyXG5cclxuICAgICAgICBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbmRlcmJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xyXG4gICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xyXG4gICAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9DT01QT05FTlQxNiwgcHJvZ3JhbS5pbnB1dFdpZHRoLCBwcm9ncmFtLmlucHV0SGVpZ2h0KTtcclxuICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBmcmFtZSA9IDA7IGZyYW1lIDwgbnVtRHluYW1pY0ZyYW1lczsgZnJhbWUrKykge1xyXG4gICAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBwcm9ncmFtLm91dHB1dFRleHR1cmUsIDAsIGZyYW1lKTtcclxuICAgICAgICAgIGNvbnN0IGZyYW1lQnVmZmVyU3RhdHVzID0gKGdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpID09IGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFKTtcclxuICAgICAgICAgIGlmICghZnJhbWVCdWZmZXJTdGF0dXMpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgYXR0YWNoaW5nIGZsb2F0IHRleHR1cmUgdG8gZnJhbWVidWZmZXIuIFlvdXIgZGV2aWNlIGlzIHByb2JhYmx5IGluY29tcGF0aWJsZS4nKTtcclxuXHJcbiAgICAgICAgICBnbC5jbGVhckNvbG9yKDAsIDAsIDAsIDApO1xyXG4gICAgICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xyXG5cclxuICAgICAgICAgIGlmIChvYnN0YWNsZVZlcnRpY2VzW2ZyYW1lXS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG5cclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1Zik7XHJcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBvYnN0YWNsZVZlcnRpY2VzW2ZyYW1lXSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShwcm9ncmFtLnBvc2l0aW9uTG9jYXRpb24pO1xyXG4gICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHByb2dyYW0ucG9zaXRpb25Mb2NhdGlvbiwgMywgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHhmb3JtTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbS5nbFByb2dyYW0sICd4Zm9ybScpO1xyXG4gICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4M2Z2KHhmb3JtTG9jYXRpb24sIGZhbHNlLCBvYnN0YWNsZVhmb3JtLmVsZW1lbnRzKTtcclxuXHJcbiAgICAgICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCBvYnN0YWNsZVZlcnRpY2VzW2ZyYW1lXS5sZW5ndGggLyAzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmcmFtZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgY29uc3Qgb2JzdGFjbGVHcmlkID0gbmV3IEZsb2F0MzJBcnJheShwcm9ncmFtLmlucHV0V2lkdGggKiBwcm9ncmFtLmlucHV0SGVpZ2h0ICogNCk7XHJcbiAgICAgICAgICAgICAgZ2wucmVhZFBpeGVscygwLCAwLCBwcm9ncmFtLmlucHV0V2lkdGgsIHByb2dyYW0uaW5wdXRIZWlnaHQsIGdsLlJHQkEsIGdsLkZMT0FULCBvYnN0YWNsZUdyaWQpO1xyXG4gICAgICAgICAgICAgIGdwZ3B1Ll9keW5hbWljT2JzdGFjbGVHcmlkID0gb2JzdGFjbGVHcmlkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnbC5kZWxldGVCdWZmZXIoYnVmKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcclxuICAgICAgICBnbC5kZWxldGVSZW5kZXJidWZmZXIocmVuZGVyYnVmZmVyKTtcclxuICAgICAgICBnbC5kaXNhYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIHVwZGF0ZShjb25maWcsIHNsV2lkdGgsIHNsSGVpZ2h0LCBzbENlbnRlclBvaW50LCB2ZWhpY2xlU3RhdGlvbiwgc3RhcnRUaW1lLCBkeW5hbWljRnJhbWVUaW1lLCBkeW5hbWljT2JzdGFjbGVzKSB7XHJcbiAgICBvYnN0YWNsZVZlcnRpY2VzID0gW107XHJcblxyXG4gICAgbGV0IHRpbWUgPSBzdGFydFRpbWU7XHJcbiAgICBmb3IgKGxldCBmcmFtZSA9IDA7IGZyYW1lIDwgbnVtRHluYW1pY0ZyYW1lczsgZnJhbWUrKykge1xyXG4gICAgICBjb25zdCB2ZXJ0aWNlcyA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGR5bmFtaWNPYnN0YWNsZXMubWFwKG8gPT4gby52ZXJ0aWNlc0luVGltZVJhbmdlKHRpbWUsIHRpbWUgKyBkeW5hbWljRnJhbWVUaW1lLCBjb25maWcpKSk7XHJcbiAgICAgIG9ic3RhY2xlVmVydGljZXMucHVzaChuZXcgRmxvYXQzMkFycmF5KHZlcnRpY2VzKSk7XHJcbiAgICAgIHRpbWUgKz0gZHluYW1pY0ZyYW1lVGltZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0cmFuc2xhdGUgPSBuZXcgVEhSRUUuTWF0cml4MygpO1xyXG4gICAgdHJhbnNsYXRlLnNldChcclxuICAgICAgMSwgMCwgLXNsQ2VudGVyUG9pbnQueCAtIHZlaGljbGVTdGF0aW9uLFxyXG4gICAgICAwLCAxLCAtc2xDZW50ZXJQb2ludC55LFxyXG4gICAgICAwLCAwLCAxXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHNjYWxlID0gbmV3IFRIUkVFLk1hdHJpeDMoKTtcclxuICAgIHNjYWxlLnNldChcclxuICAgICAgMiAvIChzbFdpZHRoICogY29uZmlnLnNsR3JpZENlbGxTaXplKSwgMCwgMCxcclxuICAgICAgMCwgMiAvIChzbEhlaWdodCAqIGNvbmZpZy5zbEdyaWRDZWxsU2l6ZSksIDAsXHJcbiAgICAgIDAsIDAsIDFcclxuICAgICk7XHJcblxyXG4gICAgb2JzdGFjbGVYZm9ybSA9IHNjYWxlLm11bHRpcGx5KHRyYW5zbGF0ZSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGg6IHNsV2lkdGgsXHJcbiAgICAgIGhlaWdodDogc2xIZWlnaHRcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiY29uc3QgWFlTTF9NQVBfS0VSTkVMID0gYFxyXG5cclxudmVjNCBrZXJuZWwoKSB7XHJcbiAgdmVjMiB4eSA9IChrZXJuZWxQb3NpdGlvbiAtIDAuNSkgKiB2ZWMyKGtlcm5lbFNpemUpICogdmVjMih4eUdyaWRDZWxsU2l6ZSkgKyB4eUNlbnRlclBvaW50O1xyXG5cclxuICBpbnQgbnVtU2FtcGxlcyA9IHRleHR1cmVTaXplKGNlbnRlcmxpbmUsIDApLng7XHJcbiAgaW50IGNsb3Nlc3QgPSAwO1xyXG4gIGZsb2F0IGNsb3Nlc3REaXN0ID0gZGlzdGFuY2UoeHksIHRleGVsRmV0Y2goY2VudGVybGluZSwgaXZlYzIoMCwgMCksIDApLnh5KTtcclxuICBmb3IgKGludCBpID0gMTsgaSA8IG51bVNhbXBsZXM7IGkrKykge1xyXG4gICAgZmxvYXQgZGlzdCA9IGRpc3RhbmNlKHh5LCB0ZXhlbEZldGNoKGNlbnRlcmxpbmUsIGl2ZWMyKGksIDApLCAwKS54eSk7XHJcbiAgICBpZiAoZGlzdCA8IGNsb3Nlc3REaXN0KSB7XHJcbiAgICAgIGNsb3Nlc3REaXN0ID0gZGlzdDtcclxuICAgICAgY2xvc2VzdCA9IGk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2ZWMyIGNsb3Nlc3RQb3MgPSB0ZXhlbEZldGNoKGNlbnRlcmxpbmUsIGl2ZWMyKGNsb3Nlc3QsIDApLCAwKS54eTtcclxuICB2ZWMyIHByZXYsIG5leHQ7XHJcbiAgaW50IHByZXZJbmRleCwgbmV4dEluZGV4O1xyXG5cclxuICBpZiAoY2xvc2VzdCA9PSAwKSB7XHJcbiAgICBwcmV2SW5kZXggPSAwO1xyXG4gICAgbmV4dEluZGV4ID0gMTtcclxuICAgIHByZXYgPSBjbG9zZXN0UG9zO1xyXG4gICAgbmV4dCA9IHRleGVsRmV0Y2goY2VudGVybGluZSwgaXZlYzIoMSwgMCksIDApLnh5O1xyXG4gIH0gZWxzZSBpZiAoY2xvc2VzdCA9PSBudW1TYW1wbGVzIC0gMSkge1xyXG4gICAgcHJldkluZGV4ID0gY2xvc2VzdCAtIDE7XHJcbiAgICBuZXh0SW5kZXggPSBjbG9zZXN0O1xyXG4gICAgcHJldiA9IHRleGVsRmV0Y2goY2VudGVybGluZSwgaXZlYzIocHJldkluZGV4LCAwKSwgMCkueHk7XHJcbiAgICBuZXh0ID0gY2xvc2VzdFBvcztcclxuICB9IGVsc2Uge1xyXG4gICAgdmVjMiBiZWZvcmUgPSB0ZXhlbEZldGNoKGNlbnRlcmxpbmUsIGl2ZWMyKGNsb3Nlc3QgLSAxLCAwKSwgMCkueHk7XHJcbiAgICB2ZWMyIGFmdGVyID0gdGV4ZWxGZXRjaChjZW50ZXJsaW5lLCBpdmVjMihjbG9zZXN0ICsgMSwgMCksIDApLnh5O1xyXG5cclxuICAgIGlmIChkaXN0YW5jZShiZWZvcmUsIHh5KSA8IGRpc3RhbmNlKGFmdGVyLCB4eSkpIHtcclxuICAgICAgcHJldkluZGV4ID0gY2xvc2VzdCAtIDE7XHJcbiAgICAgIG5leHRJbmRleCA9IGNsb3Nlc3Q7XHJcbiAgICAgIHByZXYgPSBiZWZvcmU7XHJcbiAgICAgIG5leHQgPSBjbG9zZXN0UG9zO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcHJldkluZGV4ID0gY2xvc2VzdDtcclxuICAgICAgbmV4dEluZGV4ID0gY2xvc2VzdCArIDE7XHJcbiAgICAgIHByZXYgPSBjbG9zZXN0UG9zO1xyXG4gICAgICBuZXh0ID0gYWZ0ZXI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmbG9hdCBkaXN0ID0gZGlzdGFuY2UocHJldiwgbmV4dCk7XHJcbiAgZmxvYXQgcHJvZ3Jlc3MgPSBjbGFtcChkb3QoeHkgLSBwcmV2LCBuZXh0IC0gcHJldikgLyBkaXN0IC8gZGlzdCwgMC4wLCAxLjApO1xyXG4gIHZlYzIgcHJvamVjdGVkUG9zID0gKG5leHQgLSBwcmV2KSAqIHZlYzIocHJvZ3Jlc3MpICsgcHJldjtcclxuXHJcbiAgcmV0dXJuIHZlYzQoXHJcbiAgICAoZmxvYXQocHJldkluZGV4KSArIHByb2dyZXNzKSAqIGNlbnRlcmxpbmVTdGF0aW9uSW50ZXJ2YWwsXHJcbiAgICBzaWduKGRldGVybWluYW50KG1hdDIobmV4dCAtIHByZXYsIHh5IC0gcHJldikpKSAqIGRpc3RhbmNlKHh5LCBwcm9qZWN0ZWRQb3MpLFxyXG4gICAgMCxcclxuICAgIDBcclxuICApO1xyXG59XHJcblxyXG5gO1xyXG5cclxuLy8gQnVpbGQgWFktU0wgbWFwXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBzZXRVcCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGtlcm5lbDogWFlTTF9NQVBfS0VSTkVMLFxyXG4gICAgICBvdXRwdXQ6IHsgbmFtZTogJ3h5c2xNYXAnLCBmaWx0ZXI6ICdsaW5lYXInIH0sXHJcbiAgICAgIHVuaWZvcm1zOiB7XHJcbiAgICAgICAgY2VudGVybGluZTogeyB0eXBlOiAnc2hhcmVkVGV4dHVyZScgfSxcclxuICAgICAgICB4eUNlbnRlclBvaW50OiB7IHR5cGU6ICd2ZWMyJyB9LFxyXG4gICAgICAgIHh5R3JpZENlbGxTaXplOiB7IHR5cGU6ICdmbG9hdCd9LFxyXG4gICAgICAgIGNlbnRlcmxpbmVTdGF0aW9uSW50ZXJ2YWw6IHsgdHlwZTogJ2Zsb2F0J31cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICB1cGRhdGUoY29uZmlnLCB4eVdpZHRoLCB4eUhlaWdodCwgeHlDZW50ZXJQb2ludCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGg6IHh5V2lkdGgsXHJcbiAgICAgIGhlaWdodDogeHlIZWlnaHQsXHJcbiAgICAgIHVuaWZvcm1zOiB7XHJcbiAgICAgICAgeHlDZW50ZXJQb2ludDogW3h5Q2VudGVyUG9pbnQueCwgeHlDZW50ZXJQb2ludC55XSxcclxuICAgICAgICB4eUdyaWRDZWxsU2l6ZTogY29uZmlnLnh5R3JpZENlbGxTaXplLFxyXG4gICAgICAgIGNlbnRlcmxpbmVTdGF0aW9uSW50ZXJ2YWw6IGNvbmZpZy5jZW50ZXJsaW5lU3RhdGlvbkludGVydmFsXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsIi8vIENvbmZpZzpcclxuLy8gbnVtIHN0YXRpb25zXHJcbi8vIG51bSBsYXRpdHVkZXNcclxuLy8gc3RhdGlvbiBjb25uZWN0aXZpdHlcclxuLy8gbGF0aXR1ZGUgY29ubmVjdGl2aXR5XHJcbi8vXHJcbi8vIFNoYXJlZDpcclxuLy8gbGF0dGljZVxyXG5cclxuY29uc3QgT1BUSU1JWkVfQ1VCSUNfU0hBUkVEID0gYFxyXG5cclxuY29uc3QgaW50IE5FV1RPTl9JVEVSQVRJT05TID0gMTY7XHJcbmNvbnN0IGludCBSRUxBWEFUSU9OX0lURVJBVElPTlMgPSAxNjtcclxuY29uc3QgZmxvYXQgQ09OVkVSR0VOQ0VfRVJST1IgPSAwLjAxO1xyXG5cclxuLy8gVGhlc2UgdHdvIGNvbnN0cyBtdXN0IHN0YXkgaW4gc3luYy5cclxuY29uc3QgaW50IFNJTVBTT05TX0lOVEVSVkFMUyA9IDg7XHJcbi8vY29uc3QgZmxvYXQgU0lNUFNPTlNfQ09FRkZTW1NJTVBTT05TX0lOVEVSVkFMUyArIDFdID0gZmxvYXRbXSgxLjAsIDQuMCwgMi4wLCA0LjAsIDIuMCwgNC4wLCAyLjAsIDQuMCwgMi4wLCA0LjAsIDIuMCwgNC4wLCAyLjAsIDQuMCwgMi4wLCA0LjAsIDEuMCk7XHJcbmNvbnN0IGZsb2F0IFNJTVBTT05TX0NPRUZGU1tTSU1QU09OU19JTlRFUlZBTFMgKyAxXSA9IGZsb2F0W10oMS4wLCA0LjAsIDIuMCwgNC4wLCAyLjAsIDQuMCwgMi4wLCA0LjAsIDEuMCk7XHJcblxyXG5jb25zdCBmbG9hdCBQSSA9IDMuMTQxNTkyNjUzNTg5NzkzMjM4NDYyNjQzMzgzMjc5NTtcclxuY29uc3QgZmxvYXQgVFdPX1BJID0gUEkgKyBQSTtcclxuXHJcbmNvbnN0IGZsb2F0IFJFTEFYQVRJT05fSVRFUkFUSU9OU19GID0gZmxvYXQoUkVMQVhBVElPTl9JVEVSQVRJT05TKTtcclxuY29uc3QgZmxvYXQgU0lNUFNPTlNfSU5URVJWQUxTX0YgPSBmbG9hdChTSU1QU09OU19JTlRFUlZBTFMpO1xyXG5cclxuZmxvYXQgd3JhcEFuZ2xlKGZsb2F0IGFuZ2xlKSB7XHJcbiAgYW5nbGUgPSBtb2QoYW5nbGUsIFRXT19QSSk7XHJcbiAgaWYgKGFuZ2xlIDw9IC1QSSkgcmV0dXJuIGFuZ2xlICsgVFdPX1BJO1xyXG4gIGVsc2UgaWYgKGFuZ2xlID4gUEkpIHJldHVybiBhbmdsZSAtIFRXT19QSTtcclxuICByZXR1cm4gYW5nbGU7XHJcbn1cclxuXHJcbnZlYzQgaXRlcmF0ZSh2ZWM0IGdvYWwsIGZsb2F0IHAwLCBmbG9hdCBwMSwgZmxvYXQgcDIsIGZsb2F0IHAzLCBmbG9hdCBzRykge1xyXG4gIGZsb2F0IGRzID0gc0cgLyBTSU1QU09OU19JTlRFUlZBTFNfRjtcclxuICBmbG9hdCBzR18yID0gc0cgKiBzRztcclxuICBmbG9hdCBzR18zID0gc0dfMiAqIHNHO1xyXG5cclxuICB2ZWMzIGRYX3AgPSB2ZWMzKDAuMCk7XHJcbiAgdmVjMyBkWV9wID0gdmVjMygwLjApO1xyXG4gIHZlYzIgZ3Vlc3MgPSB2ZWMyKDAuMCk7XHJcbiAgZmxvYXQgcyA9IDAuMDtcclxuXHJcbiAgZmxvYXQgdGhldGEsIGNvc1RoZXRhLCBzaW5UaGV0YTtcclxuICB2ZWMzIGRUX3A7XHJcblxyXG4gIGZvciAoaW50IGkgPSAwOyBpIDw9IFNJTVBTT05TX0lOVEVSVkFMUzsgaSsrKSB7XHJcbiAgICBmbG9hdCBjb2VmZiA9IFNJTVBTT05TX0NPRUZGU1tpXTtcclxuXHJcbiAgICBmbG9hdCBhID0gcDA7XHJcbiAgICBmbG9hdCBiID0gKC01LjUgKiBwMCArIDkuMCAqIHAxIC0gNC41ICogcDIgKyBwMykgLyBzRztcclxuICAgIGZsb2F0IGMgPSAoOS4wICogcDAgLSAyMi41ICogcDEgKyAxOC4wICogcDIgLSA0LjUgKiBwMykgLyBzR18yO1xyXG4gICAgZmxvYXQgZCA9ICgtNC41ICogKHAwIC0gMy4wICogcDEgKyAzLjAgKiBwMiAtIHAzKSkgLyBzR18zO1xyXG5cclxuICAgIHRoZXRhID0gKCgoZCAqIHMgLyA0LjAgKyBjIC8gMy4wKSAqIHMgKyBiIC8gMi4wKSAqIHMgKyBhKSAqIHM7XHJcbiAgICBjb3NUaGV0YSA9IGNvcyh0aGV0YSk7XHJcbiAgICBzaW5UaGV0YSA9IHNpbih0aGV0YSk7XHJcblxyXG4gICAgZmxvYXQgc19zRyA9IHMgLyBzRztcclxuXHJcbiAgICBkVF9wID0gdmVjMyhcclxuICAgICAgLy8gcDFcclxuICAgICAgKCgzLjM3NSAqIHNfc0cgLSA3LjUpICogc19zRyArIDQuNSkgKiBzX3NHICogcyxcclxuXHJcbiAgICAgIC8vIHAyXHJcbiAgICAgICgoLTMuMzc1ICogc19zRyArIDYuMCkgKiBzX3NHIC0gMi4yNSkgKiBzX3NHICogcyxcclxuXHJcbiAgICAgIC8vIHNHXHJcbiAgICAgICgoMy4zNzUgKiAocDAgLSAzLjAgKiBwMSArIDMuMCAqIHAyIC0gcDMpICogc19zRyAtIDMuMCAqICgyLjAgKiBwMCAtIDUuMCAqIHAxICsgNC4wICogcDIgLSBwMykpICogc19zRyArIDAuMjUgKiAoMTEuMCAqIHAwIC0gMTguMCAqIHAxICsgOS4wICogcDIgLSAyLjAgKiBwMykpICogc19zRyAqIHNfc0dcclxuICAgICk7XHJcblxyXG4gICAgZFhfcCAtPSBjb2VmZiAqIHNpblRoZXRhICogZFRfcDtcclxuICAgIGRZX3AgKz0gY29lZmYgKiBjb3NUaGV0YSAqIGRUX3A7XHJcblxyXG4gICAgZ3Vlc3MgKz0gY29lZmYgKiB2ZWMyKGNvc1RoZXRhLCBzaW5UaGV0YSk7XHJcblxyXG4gICAgcyArPSBkcztcclxuICB9XHJcblxyXG4gIGZsb2F0IGhPdmVyMyA9IHNHIC8gU0lNUFNPTlNfSU5URVJWQUxTX0YgLyAzLjA7XHJcblxyXG4gIHZlYzMgZGVsdGE7XHJcbiAgZGVsdGEueHkgPSBnb2FsLnh5IC0gZ3Vlc3MgKiBoT3ZlcjM7XHJcbiAgZGVsdGEueiA9IHdyYXBBbmdsZShnb2FsLnogLSB0aGV0YSk7XHJcblxyXG4gIGlmIChhYnMoZGVsdGEueCkgKyBhYnMoZGVsdGEueSkgKyBhYnMoZGVsdGEueikgPCBDT05WRVJHRU5DRV9FUlJPUilcclxuICAgIHJldHVybiB2ZWM0KHAxLCBwMiwgc0csIDEuMCk7XHJcblxyXG4gIGRYX3AueHl6ICo9IGhPdmVyMztcclxuICBkWV9wLnh5eiAqPSBoT3ZlcjM7XHJcbiAgZFhfcC56ICs9IGNvc1RoZXRhO1xyXG4gIGRZX3AueiArPSBzaW5UaGV0YTtcclxuXHJcbiAgbWF0MyBpbnZKYWNvYmlhbiA9IGludmVyc2UodHJhbnNwb3NlKG1hdDMoZFhfcCwgZFlfcCwgZFRfcCkpKTtcclxuXHJcbiAgdmVjMyBkZWx0YVAgPSBpbnZKYWNvYmlhbiAqIGRlbHRhO1xyXG4gIHZlYzQgcGFyYW1zID0gdmVjNChwMSwgcDIsIHNHLCAwLjApO1xyXG4gIHBhcmFtcy54eXogKz0gZGVsdGFQO1xyXG5cclxuICByZXR1cm4gcGFyYW1zO1xyXG59XHJcblxyXG4vKiBJbnB1dDpcclxuICogICBzdGFydDogKHZlYzQpXHJcbiAqICAgICB4OiB4IHBvc2l0aW9uLFxyXG4gKiAgICAgeTogeSBwb3NpdGlvbixcclxuICogICAgIHo6IHRoZXRhIHJvdGF0aW9uLFxyXG4gKiAgICAgdzogayBjdXJ2YXR1cmVcclxuICogICBlbmQ6ICh2ZWM0KVxyXG4gKiAgICAgeDogeCBwb3NpdGlvbixcclxuICogICAgIHk6IHkgcG9zaXRpb24sXHJcbiAqICAgICB6OiB0aGV0YSByb3RhdGlvbixcclxuICogICAgIHc6IGsgY3VydmF0dXJlXHJcbiAqXHJcbiAqIE91dHB1dDogKHZlYzQpXHJcbiAqICAgeDogcDEsXHJcbiAqICAgeTogcDIsXHJcbiAqICAgejogc0csXHJcbiAqICAgdzogMSBpZiBjb252ZXJnZWQsIDAgaWYgbm90XHJcbiAqL1xyXG5cclxudmVjNCBvcHRpbWl6ZSh2ZWM0IHN0YXJ0LCB2ZWM0IGVuZCkge1xyXG4gIC8vIFRyYW5zbGF0ZSBhbmQgcm90YXRlIHN0YXJ0IGFuZCBlbmQgc28gdGhhdCBzdGFydCBpcyBhdCB0aGUgb3JpZ2luXHJcbiAgZmxvYXQgc2luUm90ID0gc2luKHN0YXJ0LnopO1xyXG4gIGZsb2F0IGNvc1JvdCA9IGNvcyhzdGFydC56KTtcclxuXHJcbiAgdmVjNCBkaWZmID0gZW5kIC0gc3RhcnQ7XHJcbiAgdmVjNCBnb2FsO1xyXG4gIGdvYWwueHkgPSBtYXQyKGNvc1JvdCwgLXNpblJvdCwgc2luUm90LCBjb3NSb3QpICogZGlmZi54eTtcclxuICBnb2FsLnogPSB3cmFwQW5nbGUoZGlmZi56KTtcclxuICBnb2FsLncgPSBlbmQudztcclxuXHJcbiAgdmVjNCBvcmlnaW5hbEdvYWwgPSBnb2FsO1xyXG4gIHZlYzQgZEdvYWw7XHJcbiAgZEdvYWwueCA9IDAuMDtcclxuICBkR29hbC55encgPSBnb2FsLnl6dyAvIFJFTEFYQVRJT05fSVRFUkFUSU9OU19GO1xyXG4gIGZsb2F0IGRLMCA9IHN0YXJ0LncgLyBSRUxBWEFUSU9OX0lURVJBVElPTlNfRjtcclxuXHJcbiAgLy8gUmVsYXggdGhlIGdvYWwgdG8gKHgsIDAsIDAsIDApXHJcbiAgZ29hbC55encgPSB2ZWMzKDAsIDAsIDApO1xyXG5cclxuICAvLyBSZWxheCB0aGUgcGFyYW1zIHRvICgwLCAwLCAwLCAwLCBnb2FsLngpXHJcbiAgZmxvYXQgcDAgPSAwLjA7XHJcbiAgZmxvYXQgcDEgPSAwLjA7XHJcbiAgZmxvYXQgcDIgPSAwLjA7XHJcbiAgZmxvYXQgcDMgPSAwLjA7XHJcbiAgZmxvYXQgc0cgPSBnb2FsLng7XHJcblxyXG4gIGlmIChzRyA8IDAuMSkgcmV0dXJuIHZlYzQoMC4wKTtcclxuXHJcbiAgZm9yIChpbnQgaSA9IDA7IGkgPCBSRUxBWEFUSU9OX0lURVJBVElPTlM7IGkrKykge1xyXG4gICAgcDAgKz0gZEswO1xyXG4gICAgcDMgKz0gZEdvYWwudztcclxuICAgIGdvYWwgKz0gZEdvYWw7XHJcbiAgICBcclxuICAgIHZlYzQgcmVzdWx0ID0gaXRlcmF0ZShnb2FsLCBwMCwgcDEsIHAyLCBwMywgc0cpO1xyXG4gICAgcDEgPSByZXN1bHQueDtcclxuICAgIHAyID0gcmVzdWx0Lnk7XHJcbiAgICBzRyA9IHJlc3VsdC56O1xyXG4gIH1cclxuXHJcbiAgZ29hbCA9IG9yaWdpbmFsR29hbDtcclxuXHJcbiAgZm9yIChpbnQgaSA9IDA7IGkgPCBORVdUT05fSVRFUkFUSU9OUzsgaSsrKSB7XHJcbiAgICB2ZWM0IHJlc3VsdCA9IGl0ZXJhdGUoZ29hbCwgcDAsIHAxLCBwMiwgcDMsIHNHKTtcclxuICAgIGlmIChyZXN1bHQudyA9PSAxLjApIHtcclxuICAgICAgcmVzdWx0LncgPSBzdGVwKDAuMCwgcmVzdWx0LnopO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHAxID0gcmVzdWx0Lng7XHJcbiAgICBwMiA9IHJlc3VsdC55O1xyXG4gICAgc0cgPSByZXN1bHQuejtcclxuICB9XHJcblxyXG4gIHJldHVybiB2ZWM0KHAxLCBwMiwgc0csIDAuMCk7XHJcbn1cclxuXHJcbmA7XHJcblxyXG5jb25zdCBPUFRJTUlaRV9DVUJJQ19LRVJORUwgPSBPUFRJTUlaRV9DVUJJQ19TSEFSRUQgKyBgXHJcblxyXG4vLyB3aWR0aDogc3RhdGlvbiAqIGxhdGl0dWRlIGluZGV4XHJcbi8vIGhlaWdodDogc3RhdGlvbl9jb25uICogbGF0dGljZV9jb25uXHJcbi8vXHJcbi8vIGxhdHRpY2U6XHJcbi8vIHdpZHRoOiBsYXRpdHVkZXNcclxuLy8gaGVpZ2h0OiBzdGF0aW9uc1xyXG5cclxudmVjNCBrZXJuZWwoKSB7XHJcbiAgaXZlYzIgaW5kZXhlcyA9IGl2ZWMyKGtlcm5lbFBvc2l0aW9uICogdmVjMihrZXJuZWxTaXplKSk7XHJcblxyXG4gIGludCBlbmRTdGF0aW9uID0gaW5kZXhlcy54IC8gbnVtTGF0aXR1ZGVzO1xyXG4gIGludCBlbmRMYXRpdHVkZSA9IGludChtb2QoZmxvYXQoaW5kZXhlcy54KSwgZmxvYXQobnVtTGF0aXR1ZGVzKSkpO1xyXG5cclxuICBpbnQgc3RhcnRTdGF0aW9uID0gZW5kU3RhdGlvbiAtIHN0YXRpb25Db25uZWN0aXZpdHkgKyBpbmRleGVzLnkgLyBsYXRpdHVkZUNvbm5lY3Rpdml0eTtcclxuICBpbnQgc3RhcnRMYXRpdHVkZSA9IGVuZExhdGl0dWRlIC0gbGF0aXR1ZGVDb25uZWN0aXZpdHkgLyAyICsgaW50KG1vZChmbG9hdChpbmRleGVzLnkpLCBmbG9hdChsYXRpdHVkZUNvbm5lY3Rpdml0eSkpKTtcclxuXHJcbiAgaWYgKHN0YXJ0U3RhdGlvbiA8IDAgfHwgc3RhcnRTdGF0aW9uID49IG51bVN0YXRpb25zIHx8IHN0YXJ0TGF0aXR1ZGUgPCAwIHx8IHN0YXJ0TGF0aXR1ZGUgPj0gbnVtTGF0aXR1ZGVzKVxyXG4gICAgcmV0dXJuIHZlYzQoMC4wKTtcclxuXHJcbiAgdmVjNCBzdGFydCA9IHRleGVsRmV0Y2gobGF0dGljZSwgaXZlYzIoc3RhcnRMYXRpdHVkZSwgc3RhcnRTdGF0aW9uKSwgMCk7XHJcbiAgdmVjNCBlbmQgPSB0ZXhlbEZldGNoKGxhdHRpY2UsIGl2ZWMyKGVuZExhdGl0dWRlLCBlbmRTdGF0aW9uKSwgMCk7XHJcblxyXG4gIHJldHVybiBvcHRpbWl6ZShzdGFydCwgZW5kKTtcclxufVxyXG5cclxuYDtcclxuXHJcbmNvbnN0IE9QVElNSVpFX0NVQklDX0ZST01fVkVISUNMRV9LRVJORUwgPSBPUFRJTUlaRV9DVUJJQ19TSEFSRUQgKyBgXHJcblxyXG52ZWM0IGtlcm5lbCgpIHtcclxuICBpdmVjMiBpbmRleGVzID0gaXZlYzIoa2VybmVsUG9zaXRpb24gKiB2ZWMyKGtlcm5lbFNpemUpKTtcclxuXHJcbiAgdmVjNCBzdGFydCA9IHZlYzQoMCwgMCwgMCwgY3VydlZlaGljbGUpO1xyXG4gIHZlYzQgZW5kID0gdGV4ZWxGZXRjaChsYXR0aWNlLCBpbmRleGVzLCAwKTtcclxuXHJcbiAgcmV0dXJuIG9wdGltaXplKHN0YXJ0LCBlbmQpO1xyXG59XHJcblxyXG5gO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNldFVwKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgeyAvLyBDdWJpYyBwYXRocyBiZXR3ZWVuIGxhdHRpY2Ugbm9kZXNcclxuICAgICAgICBrZXJuZWw6IE9QVElNSVpFX0NVQklDX0tFUk5FTCxcclxuICAgICAgICBvdXRwdXQ6IHsgbmFtZTogJ2N1YmljUGF0aHMnLCByZWFkOiB0cnVlIH0sXHJcbiAgICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICAgIGxhdHRpY2U6IHsgdHlwZTogJ3NoYXJlZFRleHR1cmUnIH0sXHJcbiAgICAgICAgICBudW1TdGF0aW9uczogeyB0eXBlOiAnaW50JyB9LFxyXG4gICAgICAgICAgbnVtTGF0aXR1ZGVzOiB7IHR5cGU6ICdpbnQnIH0sXHJcbiAgICAgICAgICBzdGF0aW9uQ29ubmVjdGl2aXR5OiB7IHR5cGU6ICdpbnQnIH0sXHJcbiAgICAgICAgICBsYXRpdHVkZUNvbm5lY3Rpdml0eTogeyB0eXBlOiAnaW50JyB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB7IC8vIEN1YmljIHBhdGhzIGZyb20gdmVoaWNsZSB0byBsYXR0aWNlIG5vZGVzXHJcbiAgICAgICAga2VybmVsOiBPUFRJTUlaRV9DVUJJQ19GUk9NX1ZFSElDTEVfS0VSTkVMLFxyXG4gICAgICAgIG91dHB1dDogeyBuYW1lOiAnY3ViaWNQYXRoc0Zyb21WZWhpY2xlJywgcmVhZDogdHJ1ZSB9LFxyXG4gICAgICAgIHVuaWZvcm1zOiB7XHJcbiAgICAgICAgICBsYXR0aWNlOiB7IHR5cGU6ICdzaGFyZWRUZXh0dXJlJyB9LFxyXG4gICAgICAgICAgY3VydlZlaGljbGU6IHsgdHlwZTogJ2Zsb2F0JyB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBdXHJcbiAgfSxcclxuXHJcbiAgdXBkYXRlKGNvbmZpZywgcG9zZSkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgeyAvLyBDdWJpYyBwYXRocyBiZXR3ZWVuIGxhdHRpY2Ugbm9kZXNcclxuICAgICAgICB3aWR0aDogY29uZmlnLmxhdHRpY2UubnVtU3RhdGlvbnMgKiBjb25maWcubGF0dGljZS5udW1MYXRpdHVkZXMsXHJcbiAgICAgICAgaGVpZ2h0OiBjb25maWcubGF0dGljZS5zdGF0aW9uQ29ubmVjdGl2aXR5ICogY29uZmlnLmxhdHRpY2UubGF0aXR1ZGVDb25uZWN0aXZpdHksXHJcbiAgICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICAgIG51bVN0YXRpb25zOiBjb25maWcubGF0dGljZS5udW1TdGF0aW9ucyxcclxuICAgICAgICAgIG51bUxhdGl0dWRlczogY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzLFxyXG4gICAgICAgICAgc3RhdGlvbkNvbm5lY3Rpdml0eTogY29uZmlnLmxhdHRpY2Uuc3RhdGlvbkNvbm5lY3Rpdml0eSxcclxuICAgICAgICAgIGxhdGl0dWRlQ29ubmVjdGl2aXR5OiBjb25maWcubGF0dGljZS5sYXRpdHVkZUNvbm5lY3Rpdml0eSxcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHsgLy8gQ3ViaWMgcGF0aHMgZnJvbSB2ZWhpY2xlIHRvIGxhdHRpY2Ugbm9kZXNcclxuICAgICAgICB3aWR0aDogY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzLFxyXG4gICAgICAgIGhlaWdodDogY29uZmlnLmxhdHRpY2Uuc3RhdGlvbkNvbm5lY3Rpdml0eSxcclxuICAgICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgICAgY3VydlZlaGljbGU6IHBvc2UuY3VydlxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXTtcclxuICB9XHJcbn1cclxuIiwiY29uc3QgT1BUSU1JWkVfS0VSTkVMID0gYFxyXG5cclxuY29uc3QgaW50IE5FV1RPTl9JVEVSQVRJT05TID0gMzI7XHJcbmNvbnN0IGludCBSRUxBWEFUSU9OX0lURVJBVElPTlMgPSAzMjtcclxuY29uc3QgZmxvYXQgQ09OVkVSR0VOQ0VfRVJST1IgPSAwLjAxO1xyXG5cclxuLy8gVGhlc2UgdHdvIGNvbnN0cyBtdXN0IHN0YXkgaW4gc3luYy5cclxuY29uc3QgaW50IFNJTVBTT05TX0lOVEVSVkFMUyA9IDg7XHJcbmNvbnN0IGZsb2F0IFNJTVBTT05TX0NPRUZGU1tTSU1QU09OU19JTlRFUlZBTFMgKyAxXSA9IGZsb2F0W10oMS4wLCA0LjAsIDIuMCwgNC4wLCAyLjAsIDQuMCwgMi4wLCA0LjAsIDEuMCk7XHJcblxyXG5jb25zdCBmbG9hdCBQSSA9IDMuMTQxNTkyNjUzNTg5NzkzMjM4NDYyNjQzMzgzMjc5NTtcclxuY29uc3QgZmxvYXQgVFdPX1BJID0gUEkgKyBQSTtcclxuXHJcbmNvbnN0IGZsb2F0IFJFTEFYQVRJT05fSVRFUkFUSU9OU19GID0gZmxvYXQoUkVMQVhBVElPTl9JVEVSQVRJT05TKTtcclxuY29uc3QgZmxvYXQgU0lNUFNPTlNfSU5URVJWQUxTX0YgPSBmbG9hdChTSU1QU09OU19JTlRFUlZBTFMpO1xyXG5cclxuZmxvYXQgd3JhcEFuZ2xlKGZsb2F0IGFuZ2xlKSB7XHJcbiAgYW5nbGUgPSBtb2QoYW5nbGUsIFRXT19QSSk7XHJcbiAgaWYgKGFuZ2xlIDw9IC1QSSkgcmV0dXJuIGFuZ2xlICsgVFdPX1BJO1xyXG4gIGVsc2UgaWYgKGFuZ2xlID4gUEkpIHJldHVybiBhbmdsZSAtIFRXT19QSTtcclxuICByZXR1cm4gYW5nbGU7XHJcbn1cclxuXHJcbnZlYzQgaXRlcmF0ZSh2ZWM0IGdvYWwsIGZsb2F0IHAwLCBmbG9hdCBwMSwgZmxvYXQgcDIsIGZsb2F0IHAzLCBmbG9hdCBwNCwgZmxvYXQgcDUsIGZsb2F0IHNHKSB7XHJcbiAgZmxvYXQgZHMgPSBzRyAvIFNJTVBTT05TX0lOVEVSVkFMU19GO1xyXG4gIGZsb2F0IHNHXzIgPSBzRyAqIHNHO1xyXG4gIGZsb2F0IHNHXzMgPSBzR18yICogc0c7XHJcblxyXG4gIHZlYzMgZFhfcCA9IHZlYzMoMC4wKTtcclxuICB2ZWMzIGRZX3AgPSB2ZWMzKDAuMCk7XHJcbiAgdmVjMiBndWVzcyA9IHZlYzIoMC4wKTtcclxuICBmbG9hdCBzID0gMC4wO1xyXG5cclxuICBmbG9hdCB0aGV0YSwgY29zVGhldGEsIHNpblRoZXRhO1xyXG4gIHZlYzMgZFRfcDtcclxuXHJcbiAgZm9yIChpbnQgaSA9IDA7IGkgPD0gU0lNUFNPTlNfSU5URVJWQUxTOyBpKyspIHtcclxuICAgIGZsb2F0IGNvZWZmID0gU0lNUFNPTlNfQ09FRkZTW2ldO1xyXG5cclxuICAgIGZsb2F0IGEgPSBwMDtcclxuICAgIGZsb2F0IGIgPSBwMTtcclxuICAgIGZsb2F0IGMgPSBwMiAvIDIuMDtcclxuICAgIGZsb2F0IGQgPSAoLTcxLjg3NSAqIHAwICsgODEuMCAqIHAzIC0gMTAuMTI1ICogcDQgKyBwNSAtIDIxLjI1ICogcDEgKiBzRyAtIDIuNzUgKiBwMiAqIHNHXzIpIC8gc0dfMztcclxuICAgIGZsb2F0IGUgPSAoMTY2LjUgKiBwMCAtIDIwMi41ICogcDMgKyA0MC41ICogcDQgLSA0LjUgKiBwNSArIDQ1LjAgKiBwMSAqIHNHICsgNC41ICogcDIgKiBzR18yKSAvIChzR18yICogc0dfMik7XHJcbiAgICBmbG9hdCBmID0gKC05NS42MjUgKiBwMCArIDEyMS41ICogcDMgLSAzMC4zNzUgKiBwNCArIDQuNSAqIHA1IC0gMjQuNzUgKiBwMSAqIHNHIC0gMi4yNSAqIHAyICogc0dfMikgLyAoc0dfMiAqIHNHXzMpO1xyXG5cclxuICAgIHRoZXRhID0gKCgoKChmICogcyAvIDYuMCArIGUgLyA1LjApICogcyArIGQgLyA0LjApICogcyArIGMgLyAzLjApICogcyArIGIgLyAyLjApICogcyArIGEpICogcztcclxuICAgIGNvc1RoZXRhID0gY29zKHRoZXRhKTtcclxuICAgIHNpblRoZXRhID0gc2luKHRoZXRhKTtcclxuXHJcbiAgICBmbG9hdCBzXzIgPSBzICogcztcclxuICAgIGZsb2F0IHNfc0cgPSBzIC8gc0c7XHJcbiAgICBmbG9hdCBzX3NHXzIgPSBzX3NHICogc19zRztcclxuICAgIGZsb2F0IHNfc0dfMyA9IHNfc0dfMiAqIHNfc0c7XHJcbiAgICBmbG9hdCBzX3NHXzQgPSBzX3NHXzMgKiBzX3NHO1xyXG4gICAgZmxvYXQgc19zR181ID0gc19zR180ICogc19zRztcclxuXHJcbiAgICBkVF9wID0gdmVjMyhcclxuICAgICAgLy8gcDNcclxuICAgICAgKCgyMC4yNSAqIHNfc0cgLSA0MC41KSAqIHNfc0cgKyAyMC4yNSkgKiBzX3NHXzMgKiBzLFxyXG5cclxuICAgICAgLy8gcDRcclxuICAgICAgKCgtNS4wNjI1ICogc19zRyArIDguMSkgKiBzX3NHIC0gMi41MzEyNSkgKiBzX3NHXzMgKiBzLFxyXG5cclxuICAgICAgLy8gc0dcclxuICAgICAgKDUzLjkwNjI1ICogcDAgLSA2MC43NSAqIHAzICsgNy41OTM3NSAqIHA0IC0gMC43NSAqIHA1KSAqIHNfc0dfNCArIDEwLjYyNSAqIHAxICogcyAqIHNfc0dfMyArIDAuNjg3NSAqIHAyICogc18yICogc19zR18yICsgKC0xMzMuMiAqIHAwICsgMTYyLjAgKiBwMyAtIDMyLjQgKiBwNCArIDMuNiAqIHA1KSAqIHNfc0dfNSArICgtMjcuMCkgKiBwMSAqIHMgKiBzX3NHXzQgLSAxLjggKiBwMiAqIHNfMiAqIHNfc0dfMyArICg3OS42ODc1ICogcDAgLSAxMDEuMjUgKiBwMyArIDI1LjMxMjUgKiBwNCAtIDMuNzUgKiBwNSkgKiBzX3NHXzUgKiBzX3NHICsgMTYuNSAqIHAxICogcyAqIHNfc0dfNSArIDEuMTI1ICogcDIgKiBzXzIgKiBzX3NHXzRcclxuICAgICk7XHJcblxyXG4gICAgZFhfcCAtPSBjb2VmZiAqIHNpblRoZXRhICogZFRfcDtcclxuICAgIGRZX3AgKz0gY29lZmYgKiBjb3NUaGV0YSAqIGRUX3A7XHJcblxyXG4gICAgZ3Vlc3MgKz0gY29lZmYgKiB2ZWMyKGNvc1RoZXRhLCBzaW5UaGV0YSk7XHJcblxyXG4gICAgcyArPSBkcztcclxuICB9XHJcblxyXG4gIGZsb2F0IGhPdmVyMyA9IHNHIC8gU0lNUFNPTlNfSU5URVJWQUxTX0YgLyAzLjA7XHJcblxyXG4gIHZlYzMgZGVsdGE7XHJcbiAgZGVsdGEueHkgPSBnb2FsLnh5IC0gZ3Vlc3MgKiBoT3ZlcjM7XHJcbiAgZGVsdGEueiA9IHdyYXBBbmdsZShnb2FsLnogLSB0aGV0YSk7XHJcblxyXG4gIGlmIChhYnMoZGVsdGEueCkgKyBhYnMoZGVsdGEueSkgKyBhYnMoZGVsdGEueikgPCBDT05WRVJHRU5DRV9FUlJPUilcclxuICAgIHJldHVybiB2ZWM0KHAzLCBwNCwgc0csIDEuMCk7XHJcblxyXG4gIGRYX3AueHl6ICo9IGhPdmVyMztcclxuICBkWV9wLnh5eiAqPSBoT3ZlcjM7XHJcbiAgZFhfcC56ICs9IGNvc1RoZXRhO1xyXG4gIGRZX3AueiArPSBzaW5UaGV0YTtcclxuXHJcbiAgbWF0MyBpbnZKYWNvYmlhbiA9IGludmVyc2UodHJhbnNwb3NlKG1hdDMoZFhfcCwgZFlfcCwgZFRfcCkpKTtcclxuXHJcbiAgdmVjMyBkZWx0YVAgPSBpbnZKYWNvYmlhbiAqIGRlbHRhO1xyXG4gIHZlYzQgcGFyYW1zID0gdmVjNChwMywgcDQsIHNHLCAwLjApO1xyXG4gIHBhcmFtcy54eXogKz0gZGVsdGFQO1xyXG5cclxuICByZXR1cm4gcGFyYW1zO1xyXG59XHJcblxyXG52ZWM0IG9wdGltaXplKHZlYzQgc3RhcnQsIHZlYzQgZW5kKSB7XHJcbiAgLy8gVHJhbnNsYXRlIGFuZCByb3RhdGUgc3RhcnQgYW5kIGVuZCBzbyB0aGF0IHN0YXJ0IGlzIGF0IHRoZSBvcmlnaW5cclxuICBmbG9hdCBzaW5Sb3QgPSBzaW4oc3RhcnQueik7XHJcbiAgZmxvYXQgY29zUm90ID0gY29zKHN0YXJ0LnopO1xyXG5cclxuICB2ZWM0IGRpZmYgPSBlbmQgLSBzdGFydDtcclxuICB2ZWM0IGdvYWw7XHJcbiAgZ29hbC54eSA9IG1hdDIoY29zUm90LCAtc2luUm90LCBzaW5Sb3QsIGNvc1JvdCkgKiBkaWZmLnh5O1xyXG4gIGdvYWwueiA9IHdyYXBBbmdsZShkaWZmLnopO1xyXG4gIGdvYWwudyA9IGVuZC53O1xyXG5cclxuICB2ZWM0IG9yaWdpbmFsR29hbCA9IGdvYWw7XHJcbiAgdmVjNCBkR29hbDtcclxuICBkR29hbC54ID0gMC4wO1xyXG4gIGRHb2FsLnl6dyA9IGdvYWwueXp3IC8gUkVMQVhBVElPTl9JVEVSQVRJT05TX0Y7XHJcbiAgZmxvYXQgZF9LMCA9IHN0YXJ0LncgLyBSRUxBWEFUSU9OX0lURVJBVElPTlNfRjtcclxuICBmbG9hdCBkX2RLMCA9IGRDdXJ2VmVoaWNsZSAvIFJFTEFYQVRJT05fSVRFUkFUSU9OU19GO1xyXG4gIGZsb2F0IGRfZGRLMCA9IGRkQ3VydlZlaGljbGUgLyBSRUxBWEFUSU9OX0lURVJBVElPTlNfRjtcclxuXHJcbiAgLy8gUmVsYXggdGhlIGdvYWwgdG8gKHgsIDAsIDAsIDApXHJcbiAgZ29hbC55encgPSB2ZWMzKDAsIDAsIDApO1xyXG5cclxuICAvLyBSZWxheCB0aGUgcGFyYW1zIHRvICgwLCAwLCAwLCAwLCBnb2FsLngpXHJcbiAgZmxvYXQgcDAgPSAwLjA7XHJcbiAgZmxvYXQgcDEgPSAwLjA7XHJcbiAgZmxvYXQgcDIgPSAwLjA7XHJcbiAgZmxvYXQgcDMgPSAwLjA7XHJcbiAgZmxvYXQgcDQgPSAwLjA7XHJcbiAgZmxvYXQgcDUgPSAwLjA7XHJcbiAgZmxvYXQgc0cgPSBnb2FsLng7XHJcblxyXG4gIGlmIChzRyA8IDAuMSkgcmV0dXJuIHZlYzQoMC4wKTtcclxuXHJcbiAgZm9yIChpbnQgaSA9IDA7IGkgPCBSRUxBWEFUSU9OX0lURVJBVElPTlM7IGkrKykge1xyXG4gICAgcDAgKz0gZF9LMDtcclxuICAgIHAxICs9IGRfZEswO1xyXG4gICAgcDIgKz0gZF9kZEswO1xyXG4gICAgcDUgKz0gZEdvYWwudztcclxuICAgIGdvYWwgKz0gZEdvYWw7XHJcbiAgICBcclxuICAgIHZlYzQgcmVzdWx0ID0gaXRlcmF0ZShnb2FsLCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1LCBzRyk7XHJcbiAgICBwMyA9IHJlc3VsdC54O1xyXG4gICAgcDQgPSByZXN1bHQueTtcclxuICAgIHNHID0gcmVzdWx0Lno7XHJcbiAgfVxyXG5cclxuICBnb2FsID0gb3JpZ2luYWxHb2FsO1xyXG5cclxuICBmb3IgKGludCBpID0gMDsgaSA8IE5FV1RPTl9JVEVSQVRJT05TOyBpKyspIHtcclxuICAgIHZlYzQgcmVzdWx0ID0gaXRlcmF0ZShnb2FsLCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1LCBzRyk7XHJcbiAgICBpZiAocmVzdWx0LncgPT0gMS4wKSB7XHJcbiAgICAgIHJlc3VsdC53ID0gc3RlcCgwLjAsIHJlc3VsdC56KTtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBwMyA9IHJlc3VsdC54O1xyXG4gICAgcDQgPSByZXN1bHQueTtcclxuICAgIHNHID0gcmVzdWx0Lno7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdmVjNChwMywgcDQsIHNHLCAwLjApO1xyXG59XHJcblxyXG52ZWM0IGtlcm5lbCgpIHtcclxuICBpdmVjMiBsYXR0aWNlSW5kZXhlcyA9IGl2ZWMyKGtlcm5lbFBvc2l0aW9uICogdmVjMihrZXJuZWxTaXplKSk7XHJcblxyXG4gIHZlYzQgc3RhcnQgPSB2ZWM0KDAsIDAsIDAsIGN1cnZWZWhpY2xlKTtcclxuICB2ZWM0IGVuZCA9IHRleGVsRmV0Y2gobGF0dGljZSwgbGF0dGljZUluZGV4ZXMsIDApO1xyXG5cclxuICByZXR1cm4gb3B0aW1pemUoc3RhcnQsIGVuZCk7XHJcbn1cclxuXHJcbmA7XHJcblxyXG4vLyBRdWludGljIHNwaXJhbCBwYXRoIG9wdGltaXplclxyXG4vLyAgICogU3RhcnQgb2YgcGF0aHMgaXMgdGhlIHZlaGljbGUgcG9zZVxyXG4vLyAgICAgKiB4LXBvcywgeS1wb3MsIGFuZCByb3RhdGlvbiBhcmVuJ3QgbmVlZGVkLCBzaW5jZSB0aGUgbGF0dGljZSBvcmlnaW4gaXMgdGhlIHZlaGljbGUgcG9zZVxyXG4vLyAgICAgKiBTbyBhc3N1bWUgcG9zaXRpb24gYW5kIHJvdGF0aW9uIGFyZSAwXHJcbi8vICAgKiBFbmRzIG9mIHBhdGhzIGFyZSBhbGwgbGF0aXR1ZGVzIHdpdGhpbiB0aGUgZmlyc3QgKHN0YXRpb25Db25uZWN0aXZpdHkpIHN0YXRpb25zXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBzZXRVcCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGtlcm5lbDogT1BUSU1JWkVfS0VSTkVMLFxyXG4gICAgICBvdXRwdXQ6IHsgbmFtZTogJ3F1aW50aWNQYXRoc0Zyb21WZWhpY2xlJywgcmVhZDogdHJ1ZSB9LFxyXG4gICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgIGxhdHRpY2U6IHsgdHlwZTogJ3NoYXJlZFRleHR1cmUnIH0sXHJcbiAgICAgICAgY3VydlZlaGljbGU6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gICAgICAgIGRDdXJ2VmVoaWNsZTogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgICAgICAgZGRDdXJ2VmVoaWNsZTogeyB0eXBlOiAnZmxvYXQnIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICB1cGRhdGUoY29uZmlnLCBwb3NlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzLFxyXG4gICAgICBoZWlnaHQ6IGNvbmZpZy5sYXR0aWNlLnN0YXRpb25Db25uZWN0aXZpdHksXHJcbiAgICAgIHVuaWZvcm1zOiB7XHJcbiAgICAgICAgY3VydlZlaGljbGU6IHBvc2UuY3VydixcclxuICAgICAgICBkQ3VydlZlaGljbGU6IHBvc2UuZEN1cnYsXHJcbiAgICAgICAgZGRDdXJ2VmVoaWNsZTogcG9zZS5kZEN1cnZcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIiwiY29uc3QgU0hBUkVEX1NIQURFUiA9IGBcclxuXHJcbmNvbnN0IGZsb2F0IHNtYWxsViA9IDAuMDE7XHJcbnZlYzQgcGF0aFNhbXBsZXNbMTI4XTtcclxuZmxvYXQgcGF0aFNhbXBsZUN1cnZSYXRlc1sxMjhdO1xyXG5cclxuZmxvYXQgY2FsY3VsYXRlQWNjZWxlcmF0aW9uKGludCBpbmRleCwgZmxvYXQgaW5pdGlhbFZlbG9jaXR5U3EsIGZsb2F0IGRpc3RhbmNlKSB7XHJcbiAgaWYgKGluZGV4IDw9IDQpIHtcclxuICAgIC8vIFthTWF4SGFyZCwgYU1pbkhhcmQsIGFNYXhTb2Z0LCBhTWluU29mdCwgMF1cclxuICAgIHJldHVybiBhY2NlbGVyYXRpb25Qcm9maWxlc1tpbmRleF07XHJcbiAgfSBlbHNlIHtcclxuICAgIGZsb2F0IGZpbmFsVmVsb2NpdHkgPSBmaW5hbFZlbG9jaXR5UHJvZmlsZXNbaW5kZXggLSA1XTtcclxuICAgIGlmIChkaXN0YW5jZSA8IDAuMDAxKSByZXR1cm4gMC4wO1xyXG4gICAgcmV0dXJuIGNsYW1wKChmaW5hbFZlbG9jaXR5ICogZmluYWxWZWxvY2l0eSAtIGluaXRpYWxWZWxvY2l0eVNxKSAvICgyLjAgKiBkaXN0YW5jZSksIGFjY2VsZXJhdGlvblByb2ZpbGVzWzFdLCBhY2NlbGVyYXRpb25Qcm9maWxlc1swXSk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWMyIHh5MnNsKHZlYzQgeHl0aykge1xyXG4gIHZlYzIgeHkgPSB4eXRrLnh5ICsgcmVhckF4bGVUb0NlbnRlciAqIHZlYzIoY29zKHh5dGsueiksIHNpbih4eXRrLnopKTtcclxuICB2ZWMyIHh5VGV4Q29vcmRzID0gKHh5IC0geHlDZW50ZXJQb2ludCkgLyB2ZWMyKHRleHR1cmVTaXplKHh5c2xNYXAsIDApKSAvIHZlYzIoeHlHcmlkQ2VsbFNpemUpICsgMC41O1xyXG4gIHJldHVybiB0ZXh0dXJlKHh5c2xNYXAsIHh5VGV4Q29vcmRzKS54eTtcclxufVxyXG5cclxuZmxvYXQgc2FtcGxlU3RhdGljQ29zdCh2ZWM0IHh5dGspIHtcclxuICB2ZWMyIHNsID0geHkyc2woeHl0ayk7XHJcbiAgdmVjMiBzbFRleENvb3JkcyA9IChzbCAtIHNsQ2VudGVyUG9pbnQpIC8gdmVjMih0ZXh0dXJlU2l6ZShzbE9ic3RhY2xlR3JpZCwgMCkpIC8gdmVjMihzbEdyaWRDZWxsU2l6ZSkgKyAwLjU7XHJcbiAgZmxvYXQgb2JzdGFjbGVDb3N0ID0gdGV4dHVyZShzbE9ic3RhY2xlR3JpZCwgc2xUZXhDb29yZHMpLnI7XHJcblxyXG4gIGlmIChvYnN0YWNsZUNvc3QgPj0gMC43NSkgcmV0dXJuIC0xLjA7IC8vIEluZmluaXRlIGNvc3RcclxuXHJcbiAgb2JzdGFjbGVDb3N0ID0gc3RlcCgwLjI1LCBvYnN0YWNsZUNvc3QpICogb2JzdGFjbGVIYXphcmRDb3N0O1xyXG5cclxuICBmbG9hdCBhYnNMYXRpdHVkZSA9IGFicyhzbC55KTtcclxuICBpZiAoYWJzTGF0aXR1ZGUgPj0gbGFuZVNob3VsZGVyTGF0aXR1ZGUpIHJldHVybiAtMS4wO1xyXG5cclxuICBmbG9hdCBsYW5lQ29zdCA9IGFicyhhYnNMYXRpdHVkZSAtIGxhbmVDZW50ZXJMYXRpdHVkZSkgKiBsYW5lQ29zdFNsb3BlICsgc3RlcCgwLjAsIC1zbC55ICogc2lnbihsYW5lUHJlZmVyZW5jZSkpICogbGFuZVByZWZlcmVuY2VEaXNjb3VudDtcclxuXHJcbiAgcmV0dXJuIG9ic3RhY2xlQ29zdCArIGxhbmVDb3N0O1xyXG59XHJcblxyXG5mbG9hdCBzYW1wbGVEeW5hbWljQ29zdCh2ZWM0IHh5dGssIGZsb2F0IHRpbWUsIGZsb2F0IHZlbG9jaXR5LCBmbG9hdCBhY2NlbGVyYXRpb24pIHtcclxuICB2ZWMyIHNsID0geHkyc2woeHl0ayk7XHJcbiAgdmVjMiBzbFRleENvb3JkcyA9IChzbCAtIHNsQ2VudGVyUG9pbnQpIC8gdmVjMih0ZXh0dXJlU2l6ZShzbER5bmFtaWNPYnN0YWNsZUdyaWQsIDApLnh5KSAvIHZlYzIoc2xHcmlkQ2VsbFNpemUpICsgMC41O1xyXG4gIGZsb2F0IGR5bmFtaWNGcmFtZSA9IGZsb29yKHRpbWUgLyBkeW5hbWljRnJhbWVUaW1lKTtcclxuXHJcbiAgZmxvYXQgb2JzdGFjbGVDb3N0ID0gdGV4dHVyZShzbER5bmFtaWNPYnN0YWNsZUdyaWQsIHZlYzMoc2xUZXhDb29yZHMsIGR5bmFtaWNGcmFtZSkpLnI7XHJcblxyXG4gIGlmIChvYnN0YWNsZUNvc3QgPiAwLjc1KSByZXR1cm4gLTEuMDsgLy8gSW5maW5pdGUgY29zdFxyXG5cclxuICByZXR1cm4gc3RlcCgwLjI1LCBvYnN0YWNsZUNvc3QpICogb2JzdGFjbGVIYXphcmRDb3N0O1xyXG59XHJcblxyXG5mbG9hdCBjYWxjdWxhdGVBdmVyYWdlU3RhdGljQ29zdChpbnQgbnVtU2FtcGxlcykge1xyXG4gIGZsb2F0IGF2ZXJhZ2VTdGF0aWNDb3N0ID0gMC4wO1xyXG5cclxuICBmb3IgKGludCBpID0gMDsgaSA8IG51bVNhbXBsZXM7IGkrKykge1xyXG4gICAgZmxvYXQgY29zdCA9IHNhbXBsZVN0YXRpY0Nvc3QocGF0aFNhbXBsZXNbaV0pO1xyXG5cclxuICAgIGlmIChjb3N0IDwgMC4wKSByZXR1cm4gY29zdDtcclxuXHJcbiAgICBhdmVyYWdlU3RhdGljQ29zdCArPSBjb3N0O1xyXG4gIH1cclxuXHJcbiAgYXZlcmFnZVN0YXRpY0Nvc3QgLz0gZmxvYXQobnVtU2FtcGxlcyk7XHJcblxyXG4gIHJldHVybiBhdmVyYWdlU3RhdGljQ29zdDtcclxufVxyXG5cclxuZmxvYXQgY2FsY3VsYXRlQXZlcmFnZUR5bmFtaWNDb3N0KGludCBudW1TYW1wbGVzLCBmbG9hdCBwYXRoTGVuZ3RoLCBmbG9hdCBpbml0aWFsVGltZSwgZmxvYXQgaW5pdGlhbFZlbG9jaXR5LCBmbG9hdCBhY2NlbGVyYXRpb24sIGZsb2F0IGFiYW5kb25UaHJlc2hvbGQpIHtcclxuICBmbG9hdCBzID0gMC4wO1xyXG4gIGZsb2F0IGRzID0gcGF0aExlbmd0aCAvIGZsb2F0KG51bVNhbXBsZXMgLSAxKTtcclxuICBmbG9hdCBhdmVyYWdlRHluYW1pY0Nvc3QgPSAwLjA7XHJcbiAgZmxvYXQgbWF4VmVsb2NpdHkgPSAwLjA7XHJcbiAgZmxvYXQgbWF4TGF0ZXJhbEFjY2VsZXJhdGlvbiA9IDAuMDtcclxuICBmbG9hdCBudW1TYW1wbGVzX2YgPSBmbG9hdChudW1TYW1wbGVzKTtcclxuXHJcbiAgZm9yIChpbnQgaSA9IDA7IGkgPCBudW1TYW1wbGVzOyBpKyspIHtcclxuICAgIHZlYzQgcGF0aFNhbXBsZSA9IHBhdGhTYW1wbGVzW2ldOyAvLyB2ZWM0KHgtcG9zLCB5LXBvcywgdGhldGEgKHJvdGF0aW9uKSwga2FwcGEgKGN1cnZhdHVyZSkpXHJcblxyXG4gICAgZmxvYXQgdmVsb2NpdHlTcSA9IDIuMCAqIGFjY2VsZXJhdGlvbiAqIHMgKyBpbml0aWFsVmVsb2NpdHkgKiBpbml0aWFsVmVsb2NpdHk7XHJcbiAgICBmbG9hdCB2ZWxvY2l0eSA9IG1heChzbWFsbFYsIHNxcnQobWF4KDAuMCwgdmVsb2NpdHlTcSkpKTtcclxuICAgIG1heFZlbG9jaXR5ID0gbWF4KG1heFZlbG9jaXR5LCB2ZWxvY2l0eSk7XHJcbiAgICBtYXhMYXRlcmFsQWNjZWxlcmF0aW9uID0gbWF4KG1heExhdGVyYWxBY2NlbGVyYXRpb24sIGFicyhwYXRoU2FtcGxlLncgKiB2ZWxvY2l0eSAqIHZlbG9jaXR5KSk7XHJcblxyXG4gICAgZmxvYXQgdGltZSA9IDIuMCAqIHMgLyAoaW5pdGlhbFZlbG9jaXR5ICsgdmVsb2NpdHkpICsgaW5pdGlhbFRpbWU7XHJcblxyXG4gICAgZmxvYXQgZEN1cnYgPSBwYXRoU2FtcGxlQ3VydlJhdGVzW2ldICogdmVsb2NpdHk7XHJcbiAgICBpZiAoZEN1cnYgPiBkQ3VydmF0dXJlTWF4KSByZXR1cm4gLTEuMDtcclxuXHJcbiAgICBmbG9hdCBjb3N0ID0gc2FtcGxlRHluYW1pY0Nvc3QocGF0aFNhbXBsZSwgdGltZSwgdmVsb2NpdHksIGFjY2VsZXJhdGlvbik7XHJcbiAgICBpZiAoY29zdCA8IDAuMCkgcmV0dXJuIGNvc3Q7XHJcblxyXG4gICAgYXZlcmFnZUR5bmFtaWNDb3N0ICs9IGNvc3Q7XHJcbiAgICBpZiAoYXZlcmFnZUR5bmFtaWNDb3N0IC8gbnVtU2FtcGxlc19mID49IGFiYW5kb25UaHJlc2hvbGQpIHJldHVybiAtMS4wO1xyXG5cclxuICAgIHMgKz0gZHM7XHJcbiAgfVxyXG5cclxuICBhdmVyYWdlRHluYW1pY0Nvc3QgLz0gbnVtU2FtcGxlc19mO1xyXG5cclxuICAvLyBBcHBseSBzcGVlZGluZyBwZW5hbGl0eSBpZiBhbnkgdmVsb2NpdHkgYWxvbmcgdGhlIHRyYWplY3RvcnkgaXMgb3ZlciB0aGUgc3BlZWQgbGltaXRcclxuICBhdmVyYWdlRHluYW1pY0Nvc3QgKz0gc3RlcChzcGVlZExpbWl0LCBtYXhWZWxvY2l0eSkgKiBzcGVlZExpbWl0UGVuYWx0eTtcclxuXHJcbiAgLy8gQXBwbHkgaGFyZCBhY2NlbGVyYXRpb24vZGVjZWxlcmF0aW9uIHBlbmFsdGllcyBpZiB0aGUgYWNjZWxlcmF0aW9uL2RlY2VsZXJhdGlvbiBleGNlZWRzIHRoZSBzb2Z0IGxpbWl0c1xyXG4gIGF2ZXJhZ2VEeW5hbWljQ29zdCArPSBzdGVwKGFjY2VsZXJhdGlvblByb2ZpbGVzWzJdICsgMC4wMDAxLCBhY2NlbGVyYXRpb24pICogaGFyZEFjY2VsZXJhdGlvblBlbmFsdHk7XHJcbiAgYXZlcmFnZUR5bmFtaWNDb3N0ICs9ICgxLjAgLSBzdGVwKGFjY2VsZXJhdGlvblByb2ZpbGVzWzNdLCBhY2NlbGVyYXRpb24pKSAqIGhhcmREZWNlbGVyYXRpb25QZW5hbHR5O1xyXG5cclxuICAvLyBQZW5hbGl6ZSBsYXRlcmFsIGFjY2VsZXJhdGlvblxyXG4gIGF2ZXJhZ2VEeW5hbWljQ29zdCArPSBzdGVwKHNvZnRMYXRlcmFsQWNjZWxlcmF0aW9uTGltaXQsIG1heExhdGVyYWxBY2NlbGVyYXRpb24pICogc29mdExhdGVyYWxBY2NlbGVyYXRpb25QZW5hbHR5O1xyXG4gIGF2ZXJhZ2VEeW5hbWljQ29zdCArPSBsaW5lYXJMYXRlcmFsQWNjZWxlcmF0aW9uUGVuYWx0eSAqIG1heExhdGVyYWxBY2NlbGVyYXRpb247XHJcblxyXG4gIHJldHVybiBhdmVyYWdlRHluYW1pY0Nvc3Q7XHJcbn1cclxuXHJcbnZlYzMgY2FsY3VsYXRlQVZUKGludCBhY2NlbGVyYXRpb25JbmRleCwgZmxvYXQgaW5pdGlhbFZlbG9jaXR5LCBmbG9hdCBpbml0aWFsVGltZSwgZmxvYXQgcGF0aExlbmd0aCkge1xyXG4gIGZsb2F0IGluaXRpYWxWZWxvY2l0eVNxID0gaW5pdGlhbFZlbG9jaXR5ICogaW5pdGlhbFZlbG9jaXR5O1xyXG4gIGZsb2F0IGFjY2VsZXJhdGlvbiA9IGNhbGN1bGF0ZUFjY2VsZXJhdGlvbihhY2NlbGVyYXRpb25JbmRleCwgaW5pdGlhbFZlbG9jaXR5U3EsIHBhdGhMZW5ndGgpO1xyXG5cclxuICBmbG9hdCBmaW5hbFZlbG9jaXR5U3EgPSAyLjAgKiBhY2NlbGVyYXRpb24gKiBwYXRoTGVuZ3RoICsgaW5pdGlhbFZlbG9jaXR5U3E7XHJcbiAgZmxvYXQgZmluYWxWZWxvY2l0eSA9IG1heChzbWFsbFYsIHNxcnQobWF4KDAuMCwgZmluYWxWZWxvY2l0eVNxKSkpO1xyXG5cclxuICBmbG9hdCBmaW5hbFRpbWUgPSBpbml0aWFsVGltZTtcclxuXHJcbiAgaWYgKGFjY2VsZXJhdGlvbiA9PSAwLjApIHtcclxuICAgIGZpbmFsVGltZSArPSBwYXRoTGVuZ3RoIC8gZmluYWxWZWxvY2l0eTtcclxuICB9IGVsc2UgaWYgKGZpbmFsVmVsb2NpdHlTcSA8PSAwLjApIHsgLy8gQ2FsY3VsYXRlIGZpbmFsIHRpbWUgaWYgdGhlIHZlaGljbGUgc3RvcHMgYmVmb3JlIHRoZSBlbmQgb2YgdGhlIHRyYWplY3RvcnlcclxuICAgIGZsb2F0IGRpc3RhbmNlTGVmdCA9IHBhdGhMZW5ndGggLSAoc21hbGxWICogc21hbGxWIC0gaW5pdGlhbFZlbG9jaXR5U3EpIC8gKDIuMCAqIGFjY2VsZXJhdGlvbik7XHJcbiAgICBmaW5hbFRpbWUgKz0gKGZpbmFsVmVsb2NpdHkgLSBpbml0aWFsVmVsb2NpdHkpIC8gYWNjZWxlcmF0aW9uICsgZGlzdGFuY2VMZWZ0IC8gc21hbGxWO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBmaW5hbFRpbWUgKz0gMi4wICogcGF0aExlbmd0aCAvIChmaW5hbFZlbG9jaXR5ICsgaW5pdGlhbFZlbG9jaXR5KTtcclxuICB9XHJcblxyXG4gIHJldHVybiB2ZWMzKGFjY2VsZXJhdGlvbiwgZmluYWxWZWxvY2l0eSwgZmluYWxUaW1lKTtcclxufVxyXG5cclxuYDtcclxuXHJcbmNvbnN0IFNBTVBMRV9DVUJJQ19QQVRIX0ZOID0gYFxyXG5cclxuaW50IHNhbXBsZUN1YmljUGF0aCh2ZWM0IHN0YXJ0LCB2ZWM0IGVuZCwgdmVjNCBjdWJpY1BhdGhQYXJhbXMpIHtcclxuICBmbG9hdCBwMCA9IHN0YXJ0Lnc7XHJcbiAgZmxvYXQgcDEgPSBjdWJpY1BhdGhQYXJhbXMueDtcclxuICBmbG9hdCBwMiA9IGN1YmljUGF0aFBhcmFtcy55O1xyXG4gIGZsb2F0IHAzID0gZW5kLnc7XHJcbiAgZmxvYXQgc0cgPSBjdWJpY1BhdGhQYXJhbXMuejtcclxuXHJcbiAgaWYgKHNHIDw9IDAuMCkgcmV0dXJuIDA7XHJcblxyXG4gIGludCBudW1TYW1wbGVzID0gaW50KGNlaWwoc0cgLyBwYXRoU2FtcGxpbmdTdGVwKSkgKyAxO1xyXG5cclxuICBmbG9hdCBzR18yID0gc0cgKiBzRztcclxuICBmbG9hdCBzR18zID0gc0dfMiAqIHNHO1xyXG5cclxuICBmbG9hdCBhID0gcDA7XHJcbiAgZmxvYXQgYiA9ICgtNS41ICogcDAgKyA5LjAgKiBwMSAtIDQuNSAqIHAyICsgcDMpIC8gc0c7XHJcbiAgZmxvYXQgYyA9ICg5LjAgKiBwMCAtIDIyLjUgKiBwMSArIDE4LjAgKiBwMiAtIDQuNSAqIHAzKSAvIHNHXzI7XHJcbiAgZmxvYXQgZCA9ICgtNC41ICogKHAwIC0gMy4wICogcDEgKyAzLjAgKiBwMiAtIHAzKSkgLyBzR18zO1xyXG5cclxuICBwYXRoU2FtcGxlc1swXSA9IHN0YXJ0O1xyXG5cclxuICBmbG9hdCBkcyA9IHNHIC8gZmxvYXQobnVtU2FtcGxlcyAtIDEpO1xyXG4gIGZsb2F0IHMgPSBkcztcclxuICB2ZWMyIGR4eSA9IHZlYzIoMCk7XHJcbiAgdmVjMiBwcmV2Q29zU2luID0gdmVjMihjb3Moc3RhcnQueiksIHNpbihzdGFydC56KSk7XHJcblxyXG4gIGZvciAoaW50IGkgPSAxOyBpIDwgbnVtU2FtcGxlczsgaSsrKSB7XHJcbiAgICBmbG9hdCByb3QgPSAoKChkICogcyAvIDQuMCArIGMgLyAzLjApICogcyArIGIgLyAyLjApICogcyArIGEpICogcyArIHN0YXJ0Lno7XHJcbiAgICBmbG9hdCBjdXJ2ID0gKChkICogcyArIGMpICogcyArIGIpICogcyArIGE7XHJcblxyXG4gICAgdmVjMiBjb3NTaW4gPSB2ZWMyKGNvcyhyb3QpLCBzaW4ocm90KSk7XHJcbiAgICBkeHkgPSBkeHkgKiB2ZWMyKGZsb2F0KGkgLSAxKSAvIGZsb2F0KGkpKSArIChjb3NTaW4gKyBwcmV2Q29zU2luKSAvIHZlYzIoMiAqIGkpO1xyXG5cclxuICAgIHBhdGhTYW1wbGVzW2ldID0gdmVjNChkeHkgKiB2ZWMyKHMpICsgc3RhcnQueHksIHJvdCwgY3Vydik7XHJcbiAgICBwYXRoU2FtcGxlQ3VydlJhdGVzW2ldID0gYiArIHMgKiAoMi4wICogYyArIDMuMCAqIGQgKiBzKTtcclxuXHJcbiAgICBzICs9IGRzO1xyXG4gICAgcHJldkNvc1NpbiA9IGNvc1NpbjtcclxuICB9XHJcblxyXG4gIHJldHVybiBudW1TYW1wbGVzO1xyXG59XHJcblxyXG5gO1xyXG5cclxuY29uc3QgU0FNUExFX1FVSU5USUNfUEFUSF9GTiA9IGBcclxuXHJcbmludCBzYW1wbGVRdWludGljUGF0aCh2ZWM0IHN0YXJ0LCB2ZWM0IGVuZCwgdmVjNCBxdWludGljUGF0aFBhcmFtcykge1xyXG4gIGZsb2F0IHAwID0gc3RhcnQudztcclxuICBmbG9hdCBwMSA9IGRDdXJ2VmVoaWNsZTtcclxuICBmbG9hdCBwMiA9IGRkQ3VydlZlaGljbGU7XHJcbiAgZmxvYXQgcDMgPSBxdWludGljUGF0aFBhcmFtcy54O1xyXG4gIGZsb2F0IHA0ID0gcXVpbnRpY1BhdGhQYXJhbXMueTtcclxuICBmbG9hdCBwNSA9IGVuZC53O1xyXG4gIGZsb2F0IHNHID0gcXVpbnRpY1BhdGhQYXJhbXMuejtcclxuXHJcbiAgaWYgKHNHIDw9IDAuMCkgcmV0dXJuIDA7XHJcblxyXG4gIGludCBudW1TYW1wbGVzID0gaW50KGNlaWwoc0cgLyBwYXRoU2FtcGxpbmdTdGVwKSkgKyAxO1xyXG5cclxuICBmbG9hdCBzR18yID0gc0cgKiBzRztcclxuICBmbG9hdCBzR18zID0gc0dfMiAqIHNHO1xyXG5cclxuICBmbG9hdCBhID0gcDA7XHJcbiAgZmxvYXQgYiA9IHAxO1xyXG4gIGZsb2F0IGMgPSBwMiAvIDIuMDtcclxuICBmbG9hdCBkID0gKC03MS44NzUgKiBwMCArIDgxLjAgKiBwMyAtIDEwLjEyNSAqIHA0ICsgcDUgLSAyMS4yNSAqIHAxICogc0cgLSAyLjc1ICogcDIgKiBzR18yKSAvIHNHXzM7XHJcbiAgZmxvYXQgZSA9ICgxNjYuNSAqIHAwIC0gMjAyLjUgKiBwMyArIDQwLjUgKiBwNCAtIDQuNSAqIHA1ICsgNDUuMCAqIHAxICogc0cgKyA0LjUgKiBwMiAqIHNHXzIpIC8gKHNHXzIgKiBzR18yKTtcclxuICBmbG9hdCBmID0gKC05NS42MjUgKiBwMCArIDEyMS41ICogcDMgLSAzMC4zNzUgKiBwNCArIDQuNSAqIHA1IC0gMjQuNzUgKiBwMSAqIHNHIC0gMi4yNSAqIHAyICogc0dfMikgLyAoc0dfMiAqIHNHXzMpO1xyXG5cclxuICBwYXRoU2FtcGxlc1swXSA9IHN0YXJ0O1xyXG5cclxuICBmbG9hdCBkcyA9IHNHIC8gZmxvYXQobnVtU2FtcGxlcyAtIDEpO1xyXG4gIGZsb2F0IHMgPSBkcztcclxuICB2ZWMyIGR4eSA9IHZlYzIoMCk7XHJcbiAgdmVjMiBwcmV2Q29zU2luID0gdmVjMihjb3Moc3RhcnQueiksIHNpbihzdGFydC56KSk7XHJcblxyXG4gIGZvciAoaW50IGkgPSAxOyBpIDwgbnVtU2FtcGxlczsgaSsrKSB7XHJcbiAgICBmbG9hdCByb3QgPSAoKCgoKGYgKiBzIC8gNi4wICsgZSAvIDUuMCkgKiBzICsgZCAvIDQuMCkgKiBzICsgYyAvIDMuMCkgKiBzICsgYiAvIDIuMCkgKiBzICsgYSkgKiBzICsgc3RhcnQuejtcclxuICAgIGZsb2F0IGN1cnYgPSAoKCgoZiAqIHMgKyBlKSAqIHMgKyBkKSAqIHMgKyBjKSAqIHMgKyBiKSAqIHMgKyBhO1xyXG5cclxuICAgIHZlYzIgY29zU2luID0gdmVjMihjb3Mocm90KSwgc2luKHJvdCkpO1xyXG4gICAgZHh5ID0gZHh5ICogdmVjMihmbG9hdChpIC0gMSkgLyBmbG9hdChpKSkgKyAoY29zU2luICsgcHJldkNvc1NpbikgLyB2ZWMyKDIgKiBpKTtcclxuXHJcbiAgICBwYXRoU2FtcGxlc1tpXSA9IHZlYzQoZHh5ICogdmVjMihzKSArIHN0YXJ0Lnh5LCByb3QsIGN1cnYpO1xyXG4gICAgcGF0aFNhbXBsZUN1cnZSYXRlc1tpXSA9IGIgKyBzICogKDIuMCAqIGMgKyBzICogKDMuMCAqIGQgKyBzICogKDQuMCAqIGUgKyA1LjAgKiBmICogcykpKTtcclxuXHJcbiAgICBzICs9IGRzO1xyXG4gICAgcHJldkNvc1NpbiA9IGNvc1NpbjtcclxuICB9XHJcblxyXG4gIHJldHVybiBudW1TYW1wbGVzO1xyXG59XHJcblxyXG5gO1xyXG5cclxuY29uc3QgTlVNX0FDQ0VMRVJBVElPTl9QUk9GSUxFUyA9IDg7XHJcbmNvbnN0IE5VTV9WRUxPQ0lUWV9SQU5HRVMgPSA0O1xyXG5jb25zdCBOVU1fVElNRV9SQU5HRVMgPSAyO1xyXG5cclxuY29uc3QgU0hBUkVEX1VOSUZPUk1TID0ge1xyXG4gIHh5c2xNYXA6IHsgdHlwZTogJ291dHB1dFRleHR1cmUnIH0sXHJcbiAgc2xPYnN0YWNsZUdyaWQ6IHsgdHlwZTogJ291dHB1dFRleHR1cmUnLCBuYW1lOiAnc2xPYnN0YWNsZUdyaWREaWxhdGVkJyB9LFxyXG4gIHNsRHluYW1pY09ic3RhY2xlR3JpZDogeyB0eXBlOiAnb3V0cHV0VGV4dHVyZScsIG5hbWU6ICdzbER5bmFtaWNPYnN0YWNsZUdyaWQnLCB0ZXh0dXJlVHlwZTogJzJEQXJyYXknIH0sXHJcbiAgYWNjZWxlcmF0aW9uUHJvZmlsZXM6IHsgdHlwZTogJ2Zsb2F0JywgbGVuZ3RoOiA1IH0sXHJcbiAgZmluYWxWZWxvY2l0eVByb2ZpbGVzOiB7IHR5cGU6ICdmbG9hdCcsIGxlbmd0aDogMyB9LFxyXG4gIHh5Q2VudGVyUG9pbnQ6IHsgdHlwZTogJ3ZlYzInIH0sXHJcbiAgeHlHcmlkQ2VsbFNpemU6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gIHNsQ2VudGVyUG9pbnQ6IHsgdHlwZTogJ3ZlYzInIH0sXHJcbiAgc2xHcmlkQ2VsbFNpemU6IHsgdHlwZTogJ2Zsb2F0J30sXHJcbiAgbGFuZUNlbnRlckxhdGl0dWRlOiB7IHR5cGU6ICdmbG9hdCd9LFxyXG4gIGxhbmVTaG91bGRlckxhdGl0dWRlOiB7IHR5cGU6ICdmbG9hdCd9LFxyXG4gIGxhbmVDb3N0U2xvcGU6IHsgdHlwZTogJ2Zsb2F0J30sXHJcbiAgbGFuZVByZWZlcmVuY2U6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gIGxhbmVQcmVmZXJlbmNlRGlzY291bnQ6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gIG9ic3RhY2xlSGF6YXJkQ29zdDogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgc3BlZWRMaW1pdDogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgc3BlZWRMaW1pdFBlbmFsdHk6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gIGhhcmRBY2NlbGVyYXRpb25QZW5hbHR5OiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICBoYXJkRGVjZWxlcmF0aW9uUGVuYWx0eTogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgc29mdExhdGVyYWxBY2NlbGVyYXRpb25MaW1pdDogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgc29mdExhdGVyYWxBY2NlbGVyYXRpb25QZW5hbHR5OiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICBsaW5lYXJMYXRlcmFsQWNjZWxlcmF0aW9uUGVuYWx0eTogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgZEN1cnZhdHVyZU1heDogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgcGF0aFNhbXBsaW5nU3RlcDogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgcmVhckF4bGVUb0NlbnRlcjogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgZHluYW1pY0ZyYW1lVGltZTogeyB0eXBlOiAnZmxvYXQnIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkVW5pZm9ybVZhbHVlcyhjb25maWcsIHh5Q2VudGVyUG9pbnQsIHNsQ2VudGVyUG9pbnQsIGR5bmFtaWNGcmFtZVRpbWUpIHtcclxuICByZXR1cm4ge1xyXG4gICAgYWNjZWxlcmF0aW9uUHJvZmlsZXM6IFszLjUsIC02LjUsIDIuMCwgLTMuMCwgMF0sXHJcbiAgICBmaW5hbFZlbG9jaXR5UHJvZmlsZXM6IFswLjk5OSAqIGNvbmZpZy5zcGVlZExpbWl0LCAxLjAsIDAuMDFdLFxyXG4gICAgeHlDZW50ZXJQb2ludDogW3h5Q2VudGVyUG9pbnQueCwgeHlDZW50ZXJQb2ludC55XSxcclxuICAgIHh5R3JpZENlbGxTaXplOiBjb25maWcueHlHcmlkQ2VsbFNpemUsXHJcbiAgICBzbENlbnRlclBvaW50OiBbc2xDZW50ZXJQb2ludC54LCBzbENlbnRlclBvaW50LnldLFxyXG4gICAgc2xHcmlkQ2VsbFNpemU6IGNvbmZpZy5zbEdyaWRDZWxsU2l6ZSxcclxuICAgIGxhbmVDZW50ZXJMYXRpdHVkZTogY29uZmlnLmxhbmVDZW50ZXJMYXRpdHVkZSxcclxuICAgIGxhbmVTaG91bGRlckxhdGl0dWRlOiBjb25maWcubGFuZVNob3VsZGVyTGF0aXR1ZGUsXHJcbiAgICBsYW5lQ29zdFNsb3BlOiBjb25maWcubGFuZUNvc3RTbG9wZSxcclxuICAgIGxhbmVQcmVmZXJlbmNlOiBjb25maWcubGFuZVByZWZlcmVuY2UsXHJcbiAgICBsYW5lUHJlZmVyZW5jZURpc2NvdW50OiBjb25maWcubGFuZVByZWZlcmVuY2VEaXNjb3VudCxcclxuICAgIG9ic3RhY2xlSGF6YXJkQ29zdDogY29uZmlnLm9ic3RhY2xlSGF6YXJkQ29zdCxcclxuICAgIHNwZWVkTGltaXQ6IGNvbmZpZy5zcGVlZExpbWl0LFxyXG4gICAgc3BlZWRMaW1pdFBlbmFsdHk6IGNvbmZpZy5zcGVlZExpbWl0UGVuYWx0eSxcclxuICAgIGhhcmRBY2NlbGVyYXRpb25QZW5hbHR5OiBjb25maWcuaGFyZEFjY2VsZXJhdGlvblBlbmFsdHksXHJcbiAgICBoYXJkRGVjZWxlcmF0aW9uUGVuYWx0eTogY29uZmlnLmhhcmREZWNlbGVyYXRpb25QZW5hbHR5LFxyXG4gICAgc29mdExhdGVyYWxBY2NlbGVyYXRpb25MaW1pdDogY29uZmlnLnNvZnRMYXRlcmFsQWNjZWxlcmF0aW9uTGltaXQsXHJcbiAgICBzb2Z0TGF0ZXJhbEFjY2VsZXJhdGlvblBlbmFsdHk6IGNvbmZpZy5zb2Z0TGF0ZXJhbEFjY2VsZXJhdGlvblBlbmFsdHksXHJcbiAgICBsaW5lYXJMYXRlcmFsQWNjZWxlcmF0aW9uUGVuYWx0eTogY29uZmlnLmxpbmVhckxhdGVyYWxBY2NlbGVyYXRpb25QZW5hbHR5LFxyXG4gICAgZEN1cnZhdHVyZU1heDogY29uZmlnLmRDdXJ2YXR1cmVNYXgsXHJcbiAgICBwYXRoU2FtcGxpbmdTdGVwOiBjb25maWcucGF0aFNhbXBsaW5nU3RlcCxcclxuICAgIHJlYXJBeGxlVG9DZW50ZXI6IGNvbmZpZy5yZWFyQXhsZVRvQ2VudGVyLFxyXG4gICAgZHluYW1pY0ZyYW1lVGltZTogZHluYW1pY0ZyYW1lVGltZVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgU0hBUkVEX1NIQURFUixcclxuICBTQU1QTEVfQ1VCSUNfUEFUSF9GTixcclxuICBTQU1QTEVfUVVJTlRJQ19QQVRIX0ZOLFxyXG5cclxuICBOVU1fQUNDRUxFUkFUSU9OX1BST0ZJTEVTLFxyXG4gIE5VTV9WRUxPQ0lUWV9SQU5HRVMsXHJcbiAgTlVNX1RJTUVfUkFOR0VTLFxyXG5cclxuICBTSEFSRURfVU5JRk9STVMsXHJcbiAgYnVpbGRVbmlmb3JtVmFsdWVzXHJcbn1cclxuIiwiaW1wb3J0IHsgU0hBUkVEX1NIQURFUiwgU0FNUExFX0NVQklDX1BBVEhfRk4sIFNBTVBMRV9RVUlOVElDX1BBVEhfRk4sIE5VTV9BQ0NFTEVSQVRJT05fUFJPRklMRVMsIFNIQVJFRF9VTklGT1JNUywgYnVpbGRVbmlmb3JtVmFsdWVzIH0gZnJvbSBcIi4vZ3JhcGhTZWFyY2hTaGFyZWQuanNcIjtcclxuXHJcbmZ1bmN0aW9uIGZyb21WZWhpY2xlUGF0aENvc3RzS2VybmVsKHBhdGhUeXBlKSB7XHJcbiAgcmV0dXJuIFNIQVJFRF9TSEFERVIgKyAocGF0aFR5cGUgPT0gJ2N1YmljJyA/IFNBTVBMRV9DVUJJQ19QQVRIX0ZOIDogU0FNUExFX1FVSU5USUNfUEFUSF9GTikgK1xyXG5cclxuYFxyXG5cclxuLyogQ2FsY3VsYXRlIGNvc3Qgb2YgYSB7Y3ViaWN8cXVpbnRpY30gcGF0aCBmcm9tIHZlaGljbGUgdG8gKHN0YXRpb25Db25uZWN0aXZpdHkgKiBudW1MYXRpdHVkZXMgKiBudW1BY2NlbGVyYXRpb25zKSBub2Rlc1xyXG4gKiAgIHdpZHRoOiBudW1MYXRpdHVkZXNcclxuICogICBoZWlnaHQ6IHN0YXRpb24gKiBudW1BY2NlbGVyYXRpb25zXHJcbiAqL1xyXG52ZWM0IGtlcm5lbCgpIHtcclxuICBpdmVjMiBpbmRleGVzID0gaXZlYzIoa2VybmVsUG9zaXRpb24gKiB2ZWMyKGtlcm5lbFNpemUpKTtcclxuXHJcbiAgaW50IGxhdGl0dWRlID0gaW5kZXhlcy54O1xyXG4gIGludCBzdGF0aW9uID0gaW5kZXhlcy55IC8gbnVtQWNjZWxlcmF0aW9ucztcclxuICBpbnQgYWNjZWxlcmF0aW9uSW5kZXggPSBpbnQobW9kKGZsb2F0KGluZGV4ZXMueSksIGZsb2F0KG51bUFjY2VsZXJhdGlvbnMpKSk7XHJcblxyXG4gIHZlYzQgcGF0aFN0YXJ0ID0gdmVjNCgwLCAwLCAwLCBjdXJ2VmVoaWNsZSk7XHJcbiAgdmVjNCBwYXRoRW5kID0gdGV4ZWxGZXRjaChsYXR0aWNlLCBpdmVjMihsYXRpdHVkZSwgc3RhdGlvbiksIDApO1xyXG5cclxuICB2ZWM0IHBhdGhQYXJhbXMgPSB0ZXhlbEZldGNoKHBhdGhzRnJvbVZlaGljbGUsIGl2ZWMyKGxhdGl0dWRlLCBzdGF0aW9uKSwgMCk7XHJcblxyXG4gIC8vIElmIHRoZSBwYXRoIGRpZG4ndCBjb252ZXJnZVxyXG4gIGlmIChwYXRoUGFyYW1zLncgPT0gMC4wKSByZXR1cm4gdmVjNCgtMSk7XHJcblxyXG4gIGludCBudW1TYW1wbGVzID0gJHtwYXRoVHlwZSA9PSAnY3ViaWMnID8gJ3NhbXBsZUN1YmljUGF0aCcgOiAnc2FtcGxlUXVpbnRpY1BhdGgnfShwYXRoU3RhcnQsIHBhdGhFbmQsIHBhdGhQYXJhbXMpO1xyXG4gIGZsb2F0IHBhdGhMZW5ndGggPSBwYXRoUGFyYW1zLno7XHJcblxyXG4gIGlmIChudW1TYW1wbGVzIDwgMikgcmV0dXJuIHZlYzQoLTEpO1xyXG5cclxuICBmbG9hdCBhdmVyYWdlU3RhdGljQ29zdCA9IGNhbGN1bGF0ZUF2ZXJhZ2VTdGF0aWNDb3N0KG51bVNhbXBsZXMpO1xyXG4gIGlmIChhdmVyYWdlU3RhdGljQ29zdCA8IDAuMCkgcmV0dXJuIHZlYzQoLTEpO1xyXG5cclxuICBpbnQgc2xJbmRleCA9IHN0YXRpb24gKiBrZXJuZWxTaXplLnggKyBsYXRpdHVkZTtcclxuICBmbG9hdCBoeXN0ZXJlc2lzQWRqdXN0bWVudCA9IChzbEluZGV4ID09IGZpcnN0TGF0dGljZVBvaW50IHx8IHNsSW5kZXggPT0gc2Vjb25kTGF0dGljZVBvaW50KSA/ICAwLjAgOiBoeXN0ZXJlc2lzRGlzY291bnQ7XHJcbiAgYXZlcmFnZVN0YXRpY0Nvc3QgKz0gaHlzdGVyZXNpc0FkanVzdG1lbnQ7XHJcblxyXG4gIHZlYzMgYXZ0ID0gY2FsY3VsYXRlQVZUKGFjY2VsZXJhdGlvbkluZGV4LCB2ZWxvY2l0eVZlaGljbGUsIDAuMCwgcGF0aExlbmd0aCk7XHJcbiAgZmxvYXQgYWNjZWxlcmF0aW9uID0gYXZ0Lng7XHJcbiAgZmxvYXQgZmluYWxWZWxvY2l0eSA9IGF2dC55O1xyXG4gIGZsb2F0IGZpbmFsVGltZSA9IGF2dC56O1xyXG5cclxuICBmbG9hdCBhdmVyYWdlRHluYW1pY0Nvc3QgPSBjYWxjdWxhdGVBdmVyYWdlRHluYW1pY0Nvc3QobnVtU2FtcGxlcywgcGF0aExlbmd0aCwgMC4wLCB2ZWxvY2l0eVZlaGljbGUsIGFjY2VsZXJhdGlvbiwgMS4wIC8gMC4wKTtcclxuICBpZiAoYXZlcmFnZUR5bmFtaWNDb3N0IDwgMC4wKSByZXR1cm4gdmVjNCgtMSk7XHJcblxyXG4gIGF2ZXJhZ2VEeW5hbWljQ29zdCArPSBhY2NlbGVyYXRpb25DaGFuZ2VQZW5hbHR5O1xyXG5cclxuICAvLyBUaGUgY29zdCBvZiBhIHRyYWplY3RvcnkgaXMgdGhlIGF2ZXJhZ2Ugc2FtcGxlIGNvc3Qgc2NhbGVkIGJ5IHRoZSBwYXRoIGxlbmd0aFxyXG4gIGZsb2F0IHRvdGFsQ29zdCA9IChhdmVyYWdlU3RhdGljQ29zdCArIGF2ZXJhZ2VEeW5hbWljQ29zdCArICR7cGF0aFR5cGUgPT0gJ2N1YmljJyA/ICcoY3ViaWNQYXRoUGVuYWx0eSAqIHZlbG9jaXR5VmVoaWNsZSAqIHZlbG9jaXR5VmVoaWNsZSknIDogJzAuMCd9KSAqIHBhdGhMZW5ndGg7XHJcbiAgJHtwYXRoVHlwZSAhPSAnY3ViaWMnID8gJ3RvdGFsQ29zdCA9IC0xLjA7JyA6ICcnfVxyXG5cclxuICByZXR1cm4gdmVjNCh0b3RhbENvc3QsIGZpbmFsVmVsb2NpdHksIGZpbmFsVGltZSwgJHtwYXRoVHlwZSA9PSAnY3ViaWMnID8gJy0yJyA6ICctMSd9KTtcclxufVxyXG5cclxuYDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNldFVwKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAge1xyXG4gICAgICAgIGtlcm5lbDogZnJvbVZlaGljbGVQYXRoQ29zdHNLZXJuZWwoJ2N1YmljJyksXHJcbiAgICAgICAgb3V0cHV0OiB7IG5hbWU6ICdjdWJpY1BhdGhGcm9tVmVoaWNsZUNvc3RzJyB9LFxyXG4gICAgICAgIHVuaWZvcm1zOiBPYmplY3QuYXNzaWduKHt9LCBTSEFSRURfVU5JRk9STVMsIHtcclxuICAgICAgICAgIGxhdHRpY2U6IHsgdHlwZTogJ3NoYXJlZFRleHR1cmUnIH0sXHJcbiAgICAgICAgICBwYXRoc0Zyb21WZWhpY2xlOiB7IHR5cGU6ICdvdXRwdXRUZXh0dXJlJywgbmFtZTogJ2N1YmljUGF0aHNGcm9tVmVoaWNsZScgfSxcclxuICAgICAgICAgIGZpcnN0TGF0dGljZVBvaW50OiB7IHR5cGU6ICdpbnQnIH0sXHJcbiAgICAgICAgICBzZWNvbmRMYXR0aWNlUG9pbnQ6IHsgdHlwZTogJ2ludCcgfSxcclxuICAgICAgICAgIHZlbG9jaXR5VmVoaWNsZTogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgICAgICAgICBjdXJ2VmVoaWNsZTogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgICAgICAgICBudW1BY2NlbGVyYXRpb25zOiB7IHR5cGU6ICdpbnQnIH0sXHJcbiAgICAgICAgICBjdWJpY1BhdGhQZW5hbHR5OiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICAgICAgICAgIGh5c3RlcmVzaXNEaXNjb3VudDogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgICAgICAgICBhY2NlbGVyYXRpb25DaGFuZ2VQZW5hbHR5OiB7IHR5cGU6ICdmbG9hdCcgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBrZXJuZWw6IGZyb21WZWhpY2xlUGF0aENvc3RzS2VybmVsKCdxdWludGljJyksXHJcbiAgICAgICAgb3V0cHV0OiB7IG5hbWU6ICdxdWludGljUGF0aEZyb21WZWhpY2xlQ29zdHMnIH0sXHJcbiAgICAgICAgdW5pZm9ybXM6IE9iamVjdC5hc3NpZ24oe30sIFNIQVJFRF9VTklGT1JNUywge1xyXG4gICAgICAgICAgbGF0dGljZTogeyB0eXBlOiAnc2hhcmVkVGV4dHVyZScgfSxcclxuICAgICAgICAgIHBhdGhzRnJvbVZlaGljbGU6IHsgdHlwZTogJ291dHB1dFRleHR1cmUnLCBuYW1lOiAncXVpbnRpY1BhdGhzRnJvbVZlaGljbGUnIH0sXHJcbiAgICAgICAgICBmaXJzdExhdHRpY2VQb2ludDogeyB0eXBlOiAnaW50JyB9LFxyXG4gICAgICAgICAgc2Vjb25kTGF0dGljZVBvaW50OiB7IHR5cGU6ICdpbnQnIH0sXHJcbiAgICAgICAgICB2ZWxvY2l0eVZlaGljbGU6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gICAgICAgICAgY3VydlZlaGljbGU6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gICAgICAgICAgZEN1cnZWZWhpY2xlOiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICAgICAgICAgIGRkQ3VydlZlaGljbGU6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gICAgICAgICAgbnVtQWNjZWxlcmF0aW9uczogeyB0eXBlOiAnaW50JyB9LFxyXG4gICAgICAgICAgaHlzdGVyZXNpc0Rpc2NvdW50OiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICAgICAgICAgIGFjY2VsZXJhdGlvbkNoYW5nZVBlbmFsdHk6IHsgdHlwZTogJ2Zsb2F0JyB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgXTtcclxuICB9LFxyXG5cclxuICB1cGRhdGUoY29uZmlnLCBwb3NlLCB4eUNlbnRlclBvaW50LCBzbENlbnRlclBvaW50LCBmaXJzdExhdHRpY2VQb2ludCwgc2Vjb25kTGF0dGljZVBvaW50LCBkeW5hbWljRnJhbWVUaW1lKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7XHJcbiAgICAgICAgd2lkdGg6IGNvbmZpZy5sYXR0aWNlLm51bUxhdGl0dWRlcyxcclxuICAgICAgICBoZWlnaHQ6IGNvbmZpZy5sYXR0aWNlLnN0YXRpb25Db25uZWN0aXZpdHkgKiBOVU1fQUNDRUxFUkFUSU9OX1BST0ZJTEVTLFxyXG4gICAgICAgIHVuaWZvcm1zOiBPYmplY3QuYXNzaWduKHt9LCBidWlsZFVuaWZvcm1WYWx1ZXMoY29uZmlnLCB4eUNlbnRlclBvaW50LCBzbENlbnRlclBvaW50LCBkeW5hbWljRnJhbWVUaW1lKSwge1xyXG4gICAgICAgICAgZmlyc3RMYXR0aWNlUG9pbnQ6IGZpcnN0TGF0dGljZVBvaW50LFxyXG4gICAgICAgICAgc2Vjb25kTGF0dGljZVBvaW50OiBzZWNvbmRMYXR0aWNlUG9pbnQsXHJcbiAgICAgICAgICB2ZWxvY2l0eVZlaGljbGU6IHBvc2UudmVsb2NpdHksXHJcbiAgICAgICAgICBjdXJ2VmVoaWNsZTogcG9zZS5jdXJ2LFxyXG4gICAgICAgICAgbnVtQWNjZWxlcmF0aW9uczogTlVNX0FDQ0VMRVJBVElPTl9QUk9GSUxFUyxcclxuICAgICAgICAgIGN1YmljUGF0aFBlbmFsdHk6IGNvbmZpZy5jdWJpY1BhdGhQZW5hbHR5LFxyXG4gICAgICAgICAgaHlzdGVyZXNpc0Rpc2NvdW50OiBjb25maWcuaHlzdGVyZXNpc0Rpc2NvdW50LFxyXG4gICAgICAgICAgYWNjZWxlcmF0aW9uQ2hhbmdlUGVuYWx0eTogY29uZmlnLmFjY2VsZXJhdGlvbkNoYW5nZVBlbmFsdHlcclxuICAgICAgICB9KVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgd2lkdGg6IGNvbmZpZy5sYXR0aWNlLm51bUxhdGl0dWRlcyxcclxuICAgICAgICBoZWlnaHQ6IGNvbmZpZy5sYXR0aWNlLnN0YXRpb25Db25uZWN0aXZpdHkgKiBOVU1fQUNDRUxFUkFUSU9OX1BST0ZJTEVTLFxyXG4gICAgICAgIHVuaWZvcm1zOiBPYmplY3QuYXNzaWduKHt9LCBidWlsZFVuaWZvcm1WYWx1ZXMoY29uZmlnLCB4eUNlbnRlclBvaW50LCBzbENlbnRlclBvaW50LCBkeW5hbWljRnJhbWVUaW1lKSwge1xyXG4gICAgICAgICAgZmlyc3RMYXR0aWNlUG9pbnQ6IGZpcnN0TGF0dGljZVBvaW50LFxyXG4gICAgICAgICAgc2Vjb25kTGF0dGljZVBvaW50OiBzZWNvbmRMYXR0aWNlUG9pbnQsXHJcbiAgICAgICAgICB2ZWxvY2l0eVZlaGljbGU6IHBvc2UudmVsb2NpdHksXHJcbiAgICAgICAgICBjdXJ2VmVoaWNsZTogcG9zZS5jdXJ2LFxyXG4gICAgICAgICAgZEN1cnZWZWhpY2xlOiBwb3NlLmRDdXJ2LFxyXG4gICAgICAgICAgZGRDdXJ2VmVoaWNsZTogcG9zZS5kZEN1cnYsXHJcbiAgICAgICAgICBudW1BY2NlbGVyYXRpb25zOiBOVU1fQUNDRUxFUkFUSU9OX1BST0ZJTEVTLFxyXG4gICAgICAgICAgaHlzdGVyZXNpc0Rpc2NvdW50OiBjb25maWcuaHlzdGVyZXNpc0Rpc2NvdW50LFxyXG4gICAgICAgICAgYWNjZWxlcmF0aW9uQ2hhbmdlUGVuYWx0eTogY29uZmlnLmFjY2VsZXJhdGlvbkNoYW5nZVBlbmFsdHlcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG4gIH1cclxufVxyXG4iLCIvKiBTdGF0ZSBMYXR0aWNlIENvc3QgTWFwXHJcbiAqIFxyXG4gKiA1LWRpbWVuc2lvbmFsIG5vZGU6IHN0YXRpb24sIGxhdGl0dWRlLCBhY2NlbGVyYXRpb24gcHJvZmlsZSwgdmVsb2NpdHksIHRpbWVcclxuICpcclxuICogQSBkcmF3IGNhbGwgcGVyIHN0YXRpb24gc1xyXG4gKiAgICogSW5wdXQgdG8ga2VybmVsOiBsYXRpdHVkZSBsLCBhY2NlbGVyYXRpb24gcHJvZmlsZSBhLCB2ZWxvY2l0eSByYW5nZSB2LCB0aW1lIHJhbmdlIHRcclxuICogICAqIEZpbmQgYWxsIFNMIHZlcnRpY2VzIHRoYXQgY2FuIGNvbm5lY3QgdG8gdGhpcyBub2RlXHJcbiAqICAgKiBGb3IgZWFjaCBvZiB0aG9zZSB2ZXJ0aWNlcywgY2hlY2sgaWYgYW55IHRlcm1pbmF0ZSBpbiB0aGlzIHNwZWNpZmljIHZlbG9jaXR5IGFuZCB0aW1lIHJhbmdlXHJcbiAqICAgICAqIEJhc2VkIG9uIGluaXRpYWwgdmVsb2NpdHksIGluaXRpYWwgdGltZSwgYW5kIGFjY2VsZXJhdGlvblxyXG4gKiAgICAgKiBFYWNoIGNvbm5lY3RlZCBTTCB2ZXJ0ZXggc2hvdWxkIGhhdmUgYSAqIHYgKiB0IG5vZGVzIHRoYXQgY291bGQgcG9zc2libHkgdGVybWluYXRlIGF0IHRoaXMgbm9kZVxyXG4gKiAgICogRm9yIGFsbCB2YWxpZCBlZGdlcywgZmluZCB0aGUgb25lIHdpdGggdGhlIGxvd2VzdCBjb3N0XHJcbiAqXHJcbiAqIElucHV0OlxyXG4gKiAgICogMkQgdGV4dHVyZSBhcnJheSBjb3N0IG1hcFxyXG4gKiAgICAgKiBIZWlnaHQ6IG51bSBvZiBsYXRpdHVkZXMgKH4yMClcclxuICogICAgICogV2lkdGg6IG51bSBvZiBhY2NlbGVyYXRpb24gcHJvZmlsZXMgKiBudW0gb2YgdGltZSByYW5nZXMgKiBudW0gb2YgdmVsb2NpdHkgcmFuZ2VzICg4ICogMiAqIDQgPSB+NjQpXHJcbiAqICAgICAgICogQSBmbGF0dGVuZWQgM0QgYXJyYXk6XHJcbiAqICAgICAgICAgZDE6IGFjY2VsZXJhdGlvblxyXG4gKiAgICAgICAgIGQyOiB2ZWxvY2l0eVxyXG4gKiAgICAgICAgIGQzOiB0aW1lXHJcbiAqICAgICAqIExheWVyOiBudW0gb2Ygc3RhdGlvbnMgKH4xMClcclxuICogICBcclxuICogT3V0cHV0OlxyXG4gKiAgICogMkQgdGV4dHVyZSBzbGljZSBvZiB0aGUgbmV4dCBzdGF0aW9uIGluIHRoZSBpbnB1dCAyRCB0ZXh0dXJlIGFycmF5IGNvc3QgbWFwXHJcbiAqXHJcbiAqIENvc3QgTWFwIEVsZW1lbnRzOlxyXG4gKiAgICogVHJhdmVyc2FsIGNvc3Qgc28gZmFyXHJcbiAqICAgKiBFbmRpbmcgdmVsb2NpdHlcclxuICogICAqIEVuZGluZyB0aW1lXHJcbiAqICAgKiBJbmRleCBvZiBwYXJlbnQgbm9kZVxyXG4gKlxyXG4gKiBTaW5jZSBvbmUgY3ViaWMgcGF0aCBjYW4gYmUgc2hhcmVkIGJldHdlZW4gbXVsdGlwbGUgdHJhamVjdG9yaWVzLCB0aGV5IG5lZWQgdG8gYmUgcHJlLW9wdGltaXplZC5cclxuICpcclxuICogUXVpbnRpYyBQYXRoczpcclxuICogICBTdGF0aW9ucyAwIHRocm91Z2ggKG51bVN0YXRpb25zIC0gMSkgY29ycmVzcG9uZCB0byB0aGUgc3RhdGlvbnMgb24gdGhlIGxhdHRpY2U7IGhvd2V2ZXIsXHJcbiAqICAgYSBuZXcgc3RhdGlvbiAoc3RhdGlvbiAtMSkgd2lsbCBiZSB1c2VkIHRvIHNpZ25pZml5IHRoZSBzaW5nbGUgdmVoaWNsZSBwb3NlIG5vZGUuIEVpdGhlclxyXG4gKiAgIGEgY3ViaWMgcGF0aCBvciBxdWludGljIHBhdGggY2FuIGJlIHVzZWQgdG8gY29ubmVjdCB0aGlzIHNpbmdsZSBub2RlIHRvIHRoZSBsYXR0aWNlXHJcbiAqICAgKGRlcGVuZGluZyBvbiB2ZWhpY2xlIHZlbG9jaXR5KS4gQXQgc3RhdGlvbiAtMSwgbGF0aXR1ZGUgMCB3aWxsIGNvcnJlc3BvbmQgdG8gYSBjdWJpYyBwYXRoLFxyXG4gKiAgIGFuZCBsYXRpdHVkZSAxIHdpbGwgY29ycmVzcG9uZCB0byBhIHF1aW50aWMgcGF0aC4gQWxsIG90aGVyIGxhdGl0dWRlcyB3aWxsIGJlIHNraXBwZWQuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU0hBUkVEX1NIQURFUiwgU0FNUExFX0NVQklDX1BBVEhfRk4sIFNBTVBMRV9RVUlOVElDX1BBVEhfRk4sIE5VTV9BQ0NFTEVSQVRJT05fUFJPRklMRVMsIE5VTV9WRUxPQ0lUWV9SQU5HRVMsIE5VTV9USU1FX1JBTkdFUywgU0hBUkVEX1VOSUZPUk1TLCBidWlsZFVuaWZvcm1WYWx1ZXMgfSBmcm9tIFwiLi9ncmFwaFNlYXJjaFNoYXJlZC5qc1wiO1xyXG5cclxuY29uc3QgU09MVkVfU1RBVElPTl9LRVJORUwgPVxyXG4gIFNIQVJFRF9TSEFERVIgK1xyXG4gIFNBTVBMRV9DVUJJQ19QQVRIX0ZOICtcclxuICBTQU1QTEVfUVVJTlRJQ19QQVRIX0ZOICtcclxuXHJcbmBcclxuXHJcbnZlYzQga2VybmVsKCkge1xyXG4gIGl2ZWMyIGluZGV4ZXMgPSBpdmVjMihrZXJuZWxQb3NpdGlvbiAqIHZlYzIoa2VybmVsU2l6ZSkpO1xyXG5cclxuICBpbnQgbGF0aXR1ZGUgPSBpbmRleGVzLnk7XHJcblxyXG4gIGludCBudW1QZXJUaW1lID0gbnVtQWNjZWxlcmF0aW9ucyAqIG51bVZlbG9jaXRpZXM7XHJcbiAgaW50IHRpbWVJbmRleCA9IGluZGV4ZXMueCAvIG51bVBlclRpbWU7XHJcbiAgaW5kZXhlcy54IC09IHRpbWVJbmRleCAqIG51bVBlclRpbWU7XHJcbiAgaW50IHZlbG9jaXR5SW5kZXggPSBpbmRleGVzLnggLyBudW1BY2NlbGVyYXRpb25zO1xyXG4gIGludCBhY2NlbGVyYXRpb25JbmRleCA9IGludChtb2QoZmxvYXQoaW5kZXhlcy54KSwgZmxvYXQobnVtQWNjZWxlcmF0aW9ucykpKTtcclxuXHJcbiAgaW50IG1pbkxhdGl0dWRlID0gbWF4KGxhdGl0dWRlIC0gbGF0aXR1ZGVDb25uZWN0aXZpdHkgLyAyLCAwKTtcclxuICBpbnQgbWF4TGF0aXR1ZGUgPSBtaW4obGF0aXR1ZGUgKyBsYXRpdHVkZUNvbm5lY3Rpdml0eSAvIDIsIG51bUxhdGl0dWRlcyAtIDEpO1xyXG5cclxuICBpbnQgc2xJbmRleCA9IHN0YXRpb24gKiBudW1MYXRpdHVkZXMgKyBsYXRpdHVkZTtcclxuXHJcbiAgdmVjNCBwYXRoRW5kID0gdGV4ZWxGZXRjaChsYXR0aWNlLCBpdmVjMihsYXRpdHVkZSwgc3RhdGlvbiksIDApO1xyXG5cclxuICBmbG9hdCBtaW5WZWxvY2l0eSA9IHZlbG9jaXR5UmFuZ2VzW3ZlbG9jaXR5SW5kZXhdO1xyXG4gIGZsb2F0IG1heFZlbG9jaXR5ID0gdmVsb2NpdHlSYW5nZXNbdmVsb2NpdHlJbmRleCArIDFdO1xyXG5cclxuICBmbG9hdCBtaW5UaW1lID0gdGltZVJhbmdlc1t0aW1lSW5kZXhdO1xyXG4gIGZsb2F0IG1heFRpbWUgPSB0aW1lUmFuZ2VzW3RpbWVJbmRleCArIDFdO1xyXG5cclxuICB2ZWM0IGJlc3RUcmFqZWN0b3J5ID0gdmVjNCgtMSk7IC8vIC0xIG1lYW5zIGluZmluaXRlIGNvc3RcclxuICBmbG9hdCBiZXN0VGVybWluYWxDb3N0ID0gMS4wIC8gMC4wO1xyXG5cclxuICBmbG9hdCBoeXN0ZXJlc2lzQWRqdXN0bWVudCA9IChzbEluZGV4ID09IGZpcnN0TGF0dGljZVBvaW50IHx8IHNsSW5kZXggPT0gc2Vjb25kTGF0dGljZVBvaW50KSA/ICAwLjAgOiBoeXN0ZXJlc2lzRGlzY291bnQ7XHJcblxyXG4gIGZvciAoaW50IHByZXZTdGF0aW9uID0gbWF4KHN0YXRpb24gLSBzdGF0aW9uQ29ubmVjdGl2aXR5LCAwKTsgcHJldlN0YXRpb24gPCBzdGF0aW9uOyBwcmV2U3RhdGlvbisrKSB7XHJcbiAgICBpbnQgc3RhdGlvbkNvbm5lY3Rpdml0eUluZGV4ID0gcHJldlN0YXRpb24gLSBzdGF0aW9uICsgc3RhdGlvbkNvbm5lY3Rpdml0eTtcclxuXHJcbiAgICBmb3IgKGludCBwcmV2TGF0aXR1ZGUgPSBtaW5MYXRpdHVkZTsgcHJldkxhdGl0dWRlIDw9IG1heExhdGl0dWRlOyBwcmV2TGF0aXR1ZGUrKykge1xyXG4gICAgICBpbnQgbGF0aXR1ZGVDb25uZWN0aXZpdHlJbmRleCA9IHByZXZMYXRpdHVkZSAtIGxhdGl0dWRlICsgbGF0aXR1ZGVDb25uZWN0aXZpdHkgLyAyO1xyXG4gICAgICBpbnQgY29ubmVjdGl2aXR5SW5kZXggPSBzdGF0aW9uQ29ubmVjdGl2aXR5SW5kZXggKiBsYXRpdHVkZUNvbm5lY3Rpdml0eSArIGxhdGl0dWRlQ29ubmVjdGl2aXR5SW5kZXg7XHJcblxyXG4gICAgICB2ZWM0IHBhdGhTdGFydCA9IHRleGVsRmV0Y2gobGF0dGljZSwgaXZlYzIocHJldkxhdGl0dWRlLCBwcmV2U3RhdGlvbiksIDApO1xyXG4gICAgICB2ZWM0IGN1YmljUGF0aFBhcmFtcyA9IHRleGVsRmV0Y2goY3ViaWNQYXRocywgaXZlYzIoc2xJbmRleCwgY29ubmVjdGl2aXR5SW5kZXgpLCAwKTtcclxuXHJcbiAgICAgIC8vIElmIHRoZSBwYXRoIGRpZG4ndCBjb252ZXJnZVxyXG4gICAgICBpZiAoY3ViaWNQYXRoUGFyYW1zLncgPT0gMC4wKSBjb250aW51ZTtcclxuXHJcbiAgICAgIGludCBudW1TYW1wbGVzID0gc2FtcGxlQ3ViaWNQYXRoKHBhdGhTdGFydCwgcGF0aEVuZCwgY3ViaWNQYXRoUGFyYW1zKTtcclxuICAgICAgZmxvYXQgcGF0aExlbmd0aCA9IGN1YmljUGF0aFBhcmFtcy56O1xyXG5cclxuICAgICAgaWYgKG51bVNhbXBsZXMgPCAyKSBjb250aW51ZTtcclxuXHJcbiAgICAgIGZsb2F0IGF2ZXJhZ2VTdGF0aWNDb3N0ID0gY2FsY3VsYXRlQXZlcmFnZVN0YXRpY0Nvc3QobnVtU2FtcGxlcyk7XHJcbiAgICAgIGlmIChhdmVyYWdlU3RhdGljQ29zdCA8IDAuMCkgY29udGludWU7XHJcblxyXG4gICAgICBhdmVyYWdlU3RhdGljQ29zdCArPSBoeXN0ZXJlc2lzQWRqdXN0bWVudDtcclxuXHJcbiAgICAgIGlmIChhdmVyYWdlU3RhdGljQ29zdCAqIHBhdGhMZW5ndGggPj0gYmVzdFRlcm1pbmFsQ29zdCkgY29udGludWU7XHJcblxyXG4gICAgICBmb3IgKGludCBwcmV2VmVsb2NpdHkgPSAwOyBwcmV2VmVsb2NpdHkgPCBudW1WZWxvY2l0aWVzOyBwcmV2VmVsb2NpdHkrKykge1xyXG4gICAgICAgIGZvciAoaW50IHByZXZUaW1lID0gMDsgcHJldlRpbWUgPCBudW1UaW1lczsgcHJldlRpbWUrKykge1xyXG4gICAgICAgICAgZm9yIChpbnQgcHJldkFjY2VsID0gMDsgcHJldkFjY2VsIDwgbnVtQWNjZWxlcmF0aW9uczsgcHJldkFjY2VsKyspIHtcclxuICAgICAgICAgICAgaW50IGF2dEluZGV4ID0gcHJldlRpbWUgKiBudW1QZXJUaW1lICsgcHJldlZlbG9jaXR5ICogbnVtQWNjZWxlcmF0aW9ucyArIHByZXZBY2NlbDtcclxuXHJcbiAgICAgICAgICAgIC8vIENvc3QgdGFibGUgZW50cnk6XHJcbiAgICAgICAgICAgIC8vICAgeDogY29zdCBzbyBmYXJcclxuICAgICAgICAgICAgLy8gICB5OiBlbmQgdmVsb2NpdHlcclxuICAgICAgICAgICAgLy8gICB6OiBlbmQgdGltZVxyXG4gICAgICAgICAgICAvLyAgIHc6IHBhcmVudCBpbmRleFxyXG4gICAgICAgICAgICB2ZWM0IGNvc3RUYWJsZUVudHJ5ID0gdGV4ZWxGZXRjaChjb3N0VGFibGUsIGl2ZWMzKGF2dEluZGV4LCBwcmV2TGF0aXR1ZGUsIHByZXZTdGF0aW9uKSwgMCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBjb3N0IGVudHJ5IGlzIGluZmluaXR5XHJcbiAgICAgICAgICAgIGlmIChjb3N0VGFibGVFbnRyeS54IDwgMC4wIHx8IGF2ZXJhZ2VTdGF0aWNDb3N0ICogcGF0aExlbmd0aCArIGNvc3RUYWJsZUVudHJ5LnggPj0gYmVzdFRlcm1pbmFsQ29zdCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICB2ZWMzIGF2dCA9IGNhbGN1bGF0ZUFWVChhY2NlbGVyYXRpb25JbmRleCwgY29zdFRhYmxlRW50cnkueSwgY29zdFRhYmxlRW50cnkueiwgcGF0aExlbmd0aCk7XHJcbiAgICAgICAgICAgIGZsb2F0IGFjY2VsZXJhdGlvbiA9IGF2dC54O1xyXG4gICAgICAgICAgICBmbG9hdCBmaW5hbFZlbG9jaXR5ID0gYXZ0Lnk7XHJcbiAgICAgICAgICAgIGZsb2F0IGZpbmFsVGltZSA9IGF2dC56O1xyXG5cclxuICAgICAgICAgICAgaWYgKGF2ZXJhZ2VTdGF0aWNDb3N0ICogcGF0aExlbmd0aCArIGNvc3RUYWJsZUVudHJ5LnggKyBleHRyYVRpbWVQZW5hbHR5ICogZmluYWxUaW1lID49IGJlc3RUZXJtaW5hbENvc3QpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgdGhlIGNhbGN1bGF0ZWQgZmluYWwgdmVsb2NpdHkgZG9lcyBub3QgbWF0Y2ggdGhpcyBmcmFnbWVudCdzIHZlbG9jaXR5IHJhbmdlLCB0aGVuIHNraXAgdGhpcyB0cmFqZWN0b3J5XHJcbiAgICAgICAgICAgIGlmIChmaW5hbFZlbG9jaXR5IDwgbWluVmVsb2NpdHkgfHwgZmluYWxWZWxvY2l0eSA+PSBtYXhWZWxvY2l0eSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB0aGUgY2FsY3VsYXRlZCBmaW5hbCB0aW1lIGRvZXMgbm90IG1hdGNoIHRoaXMgZnJhZ21lbnQncyB0aW1lIHJhbmdlLCB0aGVuIHNraXAgdGhpcyB0cmFqZWN0b3J5XHJcbiAgICAgICAgICAgIGlmIChmaW5hbFRpbWUgPCBtaW5UaW1lIHx8IGZpbmFsVGltZSA+PSBtYXhUaW1lKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIGZsb2F0IGFiYW5kb25UaHJlc2hvbGQgPSAoYmVzdFRlcm1pbmFsQ29zdCAtIGV4dHJhVGltZVBlbmFsdHkgKiBmaW5hbFRpbWUgLSBjb3N0VGFibGVFbnRyeS54KSAvIHBhdGhMZW5ndGggLSBhdmVyYWdlU3RhdGljQ29zdDtcclxuICAgICAgICAgICAgZmxvYXQgYXZlcmFnZUR5bmFtaWNDb3N0ID0gY2FsY3VsYXRlQXZlcmFnZUR5bmFtaWNDb3N0KG51bVNhbXBsZXMsIHBhdGhMZW5ndGgsIGNvc3RUYWJsZUVudHJ5LnosIGNvc3RUYWJsZUVudHJ5LnksIGFjY2VsZXJhdGlvbiwgYWJhbmRvblRocmVzaG9sZCk7XHJcbiAgICAgICAgICAgIGlmIChhdmVyYWdlRHluYW1pY0Nvc3QgPCAwLjApIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFjY2VsZXJhdGlvbkluZGV4ICE9IHByZXZBY2NlbClcclxuICAgICAgICAgICAgICBhdmVyYWdlRHluYW1pY0Nvc3QgKz0gYWNjZWxlcmF0aW9uQ2hhbmdlUGVuYWx0eTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZSBjb3N0IG9mIGEgdHJhamVjdG9yeSBpcyB0aGUgYXZlcmFnZSBzYW1wbGUgY29zdCBzY2FsZWQgYnkgdGhlIHBhdGggbGVuZ3RoXHJcbiAgICAgICAgICAgIGZsb2F0IHRvdGFsQ29zdCA9IChhdmVyYWdlU3RhdGljQ29zdCArIGF2ZXJhZ2VEeW5hbWljQ29zdCkgKiBwYXRoTGVuZ3RoICsgY29zdFRhYmxlRW50cnkueDtcclxuXHJcbiAgICAgICAgICAgIGZsb2F0IHRlcm1pbmFsQ29zdCA9IHRvdGFsQ29zdCArIGV4dHJhVGltZVBlbmFsdHkgKiBmaW5hbFRpbWU7XHJcbiAgICAgICAgICAgIGlmICh0ZXJtaW5hbENvc3QgPj0gYmVzdFRlcm1pbmFsQ29zdCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGJlc3RUZXJtaW5hbENvc3QgPSB0ZXJtaW5hbENvc3Q7XHJcblxyXG4gICAgICAgICAgICBpbnQgaW5jb21pbmdJbmRleCA9IGF2dEluZGV4ICsgbnVtUGVyVGltZSAqIG51bVRpbWVzICogKHByZXZMYXRpdHVkZSArIG51bUxhdGl0dWRlcyAqIHByZXZTdGF0aW9uKTtcclxuICAgICAgICAgICAgYmVzdFRyYWplY3RvcnkgPSB2ZWM0KHRvdGFsQ29zdCwgZmluYWxWZWxvY2l0eSwgZmluYWxUaW1lLCBpbmNvbWluZ0luZGV4KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChzdGF0aW9uIDwgc3RhdGlvbkNvbm5lY3Rpdml0eSkge1xyXG4gICAgaXZlYzIgc2xhSW5kZXggPSBpdmVjMihsYXRpdHVkZSwgc3RhdGlvbiAqIG51bUFjY2VsZXJhdGlvbnMgKyBhY2NlbGVyYXRpb25JbmRleCk7XHJcblxyXG4gICAgdmVjNCBjb3N0VGFibGVFbnRyeSA9IHRleGVsRmV0Y2goY3ViaWNQYXRoRnJvbVZlaGljbGVDb3N0cywgc2xhSW5kZXgsIDApO1xyXG4gICAgZmxvYXQgdGVybWluYWxDb3N0O1xyXG5cclxuICAgIGlmIChjb3N0VGFibGVFbnRyeS54ID49IDAuMCkge1xyXG4gICAgICB0ZXJtaW5hbENvc3QgPSBjb3N0VGFibGVFbnRyeS54ICsgZXh0cmFUaW1lUGVuYWx0eSAqIGNvc3RUYWJsZUVudHJ5Lno7XHJcblxyXG4gICAgICBpZiAodGVybWluYWxDb3N0IDwgYmVzdFRlcm1pbmFsQ29zdCkge1xyXG4gICAgICAgIGJlc3RUZXJtaW5hbENvc3QgPSB0ZXJtaW5hbENvc3Q7XHJcbiAgICAgICAgYmVzdFRyYWplY3RvcnkgPSBjb3N0VGFibGVFbnRyeTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvc3RUYWJsZUVudHJ5ID0gdGV4ZWxGZXRjaChxdWludGljUGF0aEZyb21WZWhpY2xlQ29zdHMsIHNsYUluZGV4LCAwKTtcclxuXHJcbiAgICBpZiAoY29zdFRhYmxlRW50cnkueCA+PSAwLjApIHtcclxuICAgICAgdGVybWluYWxDb3N0ID0gY29zdFRhYmxlRW50cnkueCArIGV4dHJhVGltZVBlbmFsdHkgKiBjb3N0VGFibGVFbnRyeS56O1xyXG5cclxuICAgICAgaWYgKHRlcm1pbmFsQ29zdCA8IGJlc3RUZXJtaW5hbENvc3QpIHtcclxuICAgICAgICBiZXN0VGVybWluYWxDb3N0ID0gdGVybWluYWxDb3N0O1xyXG4gICAgICAgIGJlc3RUcmFqZWN0b3J5ID0gY29zdFRhYmxlRW50cnk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBiZXN0VHJhamVjdG9yeTtcclxufVxyXG5cclxuYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBzZXRVcCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGtlcm5lbDogU09MVkVfU1RBVElPTl9LRVJORUwsXHJcbiAgICAgIG91dHB1dDogeyBuYW1lOiAnZ3JhcGhTZWFyY2gnIH0sXHJcbiAgICAgIHVuaWZvcm1zOiBPYmplY3QuYXNzaWduKHt9LCBTSEFSRURfVU5JRk9STVMsIHtcclxuICAgICAgICBsYXR0aWNlOiB7IHR5cGU6ICdzaGFyZWRUZXh0dXJlJyB9LFxyXG4gICAgICAgIGNvc3RUYWJsZTogeyB0eXBlOiAnc2hhcmVkVGV4dHVyZScsIHRleHR1cmVUeXBlOiAnMkRBcnJheScgfSxcclxuICAgICAgICBjdWJpY1BhdGhzOiB7IHR5cGU6ICdvdXRwdXRUZXh0dXJlJyB9LFxyXG4gICAgICAgIGN1YmljUGF0aEZyb21WZWhpY2xlQ29zdHM6IHsgdHlwZTogJ291dHB1dFRleHR1cmUnIH0sXHJcbiAgICAgICAgcXVpbnRpY1BhdGhGcm9tVmVoaWNsZUNvc3RzOiB7IHR5cGU6ICdvdXRwdXRUZXh0dXJlJyB9LFxyXG4gICAgICAgIGZpcnN0TGF0dGljZVBvaW50OiB7IHR5cGU6ICdpbnQnIH0sXHJcbiAgICAgICAgc2Vjb25kTGF0dGljZVBvaW50OiB7IHR5cGU6ICdpbnQnIH0sXHJcbiAgICAgICAgdmVsb2NpdHlWZWhpY2xlOiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICAgICAgICBjdXJ2VmVoaWNsZTogeyB0eXBlOiAnZmxvYXQnIH0sXHJcbiAgICAgICAgZEN1cnZWZWhpY2xlOiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICAgICAgICBkZEN1cnZWZWhpY2xlOiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICAgICAgICBleHRyYVRpbWVQZW5hbHR5OiB7IHR5cGU6ICdmbG9hdCcgfSxcclxuICAgICAgICBoeXN0ZXJlc2lzRGlzY291bnQ6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gICAgICAgIGFjY2VsZXJhdGlvbkNoYW5nZVBlbmFsdHk6IHsgdHlwZTogJ2Zsb2F0JyB9LFxyXG4gICAgICAgIG51bVN0YXRpb25zOiB7IHR5cGU6ICdpbnQnIH0sXHJcbiAgICAgICAgbnVtTGF0aXR1ZGVzOiB7IHR5cGU6ICdpbnQnIH0sXHJcbiAgICAgICAgbnVtQWNjZWxlcmF0aW9uczogeyB0eXBlOiAnaW50JyB9LFxyXG4gICAgICAgIG51bVZlbG9jaXRpZXM6IHsgdHlwZTogJ2ludCcgfSxcclxuICAgICAgICBudW1UaW1lczogeyB0eXBlOiAnaW50JyB9LFxyXG4gICAgICAgIHN0YXRpb25Db25uZWN0aXZpdHk6IHsgdHlwZTogJ2ludCcgfSxcclxuICAgICAgICBsYXRpdHVkZUNvbm5lY3Rpdml0eTogeyB0eXBlOiAnaW50JyB9LFxyXG4gICAgICAgIHZlbG9jaXR5UmFuZ2VzOiB7IHR5cGU6ICdmbG9hdCcsIGxlbmd0aDogTlVNX1ZFTE9DSVRZX1JBTkdFUyArIDEgfSxcclxuICAgICAgICB0aW1lUmFuZ2VzOiB7IHR5cGU6ICdmbG9hdCcsIGxlbmd0aDogTlVNX1RJTUVfUkFOR0VTICsgMSB9LFxyXG4gICAgICAgIHN0YXRpb246IHsgdHlwZTogJ2ludCcgfSAvLyBVcGRhdGVkIGluIGBkcmF3UHJveHlgXHJcbiAgICAgIH0pLFxyXG4gICAgICBkcmF3UHJveHk6IChncGdwdSwgcHJvZ3JhbSwgZHJhdykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gTlVNX0FDQ0VMRVJBVElPTl9QUk9GSUxFUyAqIE5VTV9WRUxPQ0lUWV9SQU5HRVMgKiBOVU1fVElNRV9SQU5HRVM7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcHJvZ3JhbS5tZXRhLmxhdHRpY2UubnVtTGF0aXR1ZGVzO1xyXG4gICAgICAgIGNvbnN0IGNvc3RUYWJsZSA9IG5ldyBGbG9hdDMyQXJyYXkod2lkdGggKiBoZWlnaHQgKiBwcm9ncmFtLm1ldGEubGF0dGljZS5udW1TdGF0aW9ucyAqIDQpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IHByb2dyYW0ubWV0YS5sYXR0aWNlLm51bVN0YXRpb25zOyBzKyspIHtcclxuICAgICAgICAgIGdwZ3B1LnVwZGF0ZVByb2dyYW1Vbmlmb3Jtcyhwcm9ncmFtLCB7IHN0YXRpb246IHMgfSk7XHJcbiAgICAgICAgICBkcmF3KCk7XHJcblxyXG4gICAgICAgICAgZ3BncHUuZ2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBncGdwdS5nbC5SR0JBLCBncGdwdS5nbC5GTE9BVCwgY29zdFRhYmxlLCBzICogd2lkdGggKiBoZWlnaHQgKiA0KTtcclxuXHJcbiAgICAgICAgICBncGdwdS5nbC5iaW5kVGV4dHVyZShncGdwdS5nbC5URVhUVVJFXzJEX0FSUkFZLCBncGdwdS5zaGFyZWRUZXh0dXJlcy5jb3N0VGFibGUpO1xyXG4gICAgICAgICAgZ3BncHUuZ2wuY29weVRleFN1YkltYWdlM0QoZ3BncHUuZ2wuVEVYVFVSRV8yRF9BUlJBWSwgMCwgMCwgMCwgcywgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBncGdwdS5fZ3JhcGhTZWFyY2hDb3N0VGFibGUgPSBjb3N0VGFibGU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfSxcclxuXHJcbiAgdXBkYXRlKGNvbmZpZywgcG9zZSwgeHlDZW50ZXJQb2ludCwgc2xDZW50ZXJQb2ludCwgZmlyc3RMYXR0aWNlUG9pbnQsIHNlY29uZExhdHRpY2VQb2ludCwgZHluYW1pY0ZyYW1lVGltZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGg6IE5VTV9BQ0NFTEVSQVRJT05fUFJPRklMRVMgKiBOVU1fVkVMT0NJVFlfUkFOR0VTICogTlVNX1RJTUVfUkFOR0VTLFxyXG4gICAgICBoZWlnaHQ6IGNvbmZpZy5sYXR0aWNlLm51bUxhdGl0dWRlcyxcclxuICAgICAgbWV0YToge1xyXG4gICAgICAgIGxhdHRpY2U6IGNvbmZpZy5sYXR0aWNlXHJcbiAgICAgIH0sXHJcbiAgICAgIHVuaWZvcm1zOiBPYmplY3QuYXNzaWduKHt9LCBidWlsZFVuaWZvcm1WYWx1ZXMoY29uZmlnLCB4eUNlbnRlclBvaW50LCBzbENlbnRlclBvaW50LCBkeW5hbWljRnJhbWVUaW1lKSwge1xyXG4gICAgICAgIGZpcnN0TGF0dGljZVBvaW50OiBmaXJzdExhdHRpY2VQb2ludCxcclxuICAgICAgICBzZWNvbmRMYXR0aWNlUG9pbnQ6IHNlY29uZExhdHRpY2VQb2ludCxcclxuICAgICAgICB2ZWxvY2l0eVZlaGljbGU6IHBvc2UudmVsb2NpdHksXHJcbiAgICAgICAgY3VydlZlaGljbGU6IHBvc2UuY3VydixcclxuICAgICAgICBkQ3VydlZlaGljbGU6IHBvc2UuZEN1cnYsXHJcbiAgICAgICAgZGRDdXJ2VmVoaWNsZTogcG9zZS5kZEN1cnYsXHJcbiAgICAgICAgZXh0cmFUaW1lUGVuYWx0eTogY29uZmlnLmV4dHJhVGltZVBlbmFsdHksXHJcbiAgICAgICAgaHlzdGVyZXNpc0Rpc2NvdW50OiBjb25maWcuaHlzdGVyZXNpc0Rpc2NvdW50LFxyXG4gICAgICAgIGFjY2VsZXJhdGlvbkNoYW5nZVBlbmFsdHk6IGNvbmZpZy5hY2NlbGVyYXRpb25DaGFuZ2VQZW5hbHR5LFxyXG4gICAgICAgIG51bVN0YXRpb25zOiBjb25maWcubGF0dGljZS5udW1TdGF0aW9ucyxcclxuICAgICAgICBudW1MYXRpdHVkZXM6IGNvbmZpZy5sYXR0aWNlLm51bUxhdGl0dWRlcyxcclxuICAgICAgICBudW1BY2NlbGVyYXRpb25zOiBOVU1fQUNDRUxFUkFUSU9OX1BST0ZJTEVTLFxyXG4gICAgICAgIG51bVZlbG9jaXRpZXM6IE5VTV9WRUxPQ0lUWV9SQU5HRVMsXHJcbiAgICAgICAgbnVtVGltZXM6IE5VTV9USU1FX1JBTkdFUyxcclxuICAgICAgICBzdGF0aW9uQ29ubmVjdGl2aXR5OiBjb25maWcubGF0dGljZS5zdGF0aW9uQ29ubmVjdGl2aXR5LFxyXG4gICAgICAgIGxhdGl0dWRlQ29ubmVjdGl2aXR5OiBjb25maWcubGF0dGljZS5sYXRpdHVkZUNvbm5lY3Rpdml0eSxcclxuICAgICAgICB2ZWxvY2l0eVJhbmdlczogWzAsIGNvbmZpZy5zcGVlZExpbWl0IC8gMywgY29uZmlnLnNwZWVkTGltaXQgKiAyIC8gMywgY29uZmlnLnNwZWVkTGltaXQsIDEwMDAwMDBdLFxyXG4gICAgICAgIHRpbWVSYW5nZXM6IFswLCAxMCwgMTAwMDAwMF1cclxuICAgICAgfSlcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IFhZX09CU1RBQ0xFX0NPU1RfS0VSTkVMID0gYFxyXG5cclxudmVjNCBrZXJuZWwoKSB7XHJcbiAgdmVjMiB4eSA9IChrZXJuZWxQb3NpdGlvbiAtIDAuNSkgKiB2ZWMyKGtlcm5lbFNpemUpICogdmVjMih4eUdyaWRDZWxsU2l6ZSkgKyB4eUNlbnRlclBvaW50O1xyXG5cclxuICB2ZWMyIHh5VGV4Q29vcmRzID0gKHh5IC0geHlDZW50ZXJQb2ludCkgLyB2ZWMyKHRleHR1cmVTaXplKHh5c2xNYXAsIDApKSAvIHZlYzIoeHlHcmlkQ2VsbFNpemUpICsgMC41O1xyXG4gIHZlYzIgc2wgPSB0ZXh0dXJlKHh5c2xNYXAsIHh5VGV4Q29vcmRzKS54eTtcclxuXHJcbiAgdmVjMiBzbFRleENvb3JkcyA9IChzbCAtIHNsQ2VudGVyUG9pbnQpIC8gdmVjMih0ZXh0dXJlU2l6ZShzbE9ic3RhY2xlR3JpZCwgMCkpIC8gdmVjMihzbEdyaWRDZWxsU2l6ZSkgKyAwLjU7XHJcbiAgcmV0dXJuIHRleHR1cmUoc2xPYnN0YWNsZUdyaWQsIHNsVGV4Q29vcmRzKTtcclxufVxyXG5cclxuYDtcclxuXHJcbi8vIEJ1aWxkIFhZIG9ic3RhY2xlIGNvc3RzIHVzaW5nIFhZU0wgbWFwXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBzZXRVcCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGtlcm5lbDogWFlfT0JTVEFDTEVfQ09TVF9LRVJORUwsXHJcbiAgICAgIG91dHB1dDogeyBuYW1lOiAneHlPYnN0YWNsZUNvc3RHcmlkJywgcmVhZDogdHJ1ZSB9LFxyXG4gICAgICB1bmlmb3Jtczoge1xyXG4gICAgICAgIHh5c2xNYXA6IHsgdHlwZTogJ291dHB1dFRleHR1cmUnIH0sXHJcbiAgICAgICAgc2xPYnN0YWNsZUdyaWQ6IHsgdHlwZTogJ291dHB1dFRleHR1cmUnLCBuYW1lOiAnc2xPYnN0YWNsZUdyaWREaWxhdGVkJyB9LFxyXG4gICAgICAgIHh5Q2VudGVyUG9pbnQ6IHsgdHlwZTogJ3ZlYzInIH0sXHJcbiAgICAgICAgeHlHcmlkQ2VsbFNpemU6IHsgdHlwZTogJ2Zsb2F0J30sXHJcbiAgICAgICAgc2xDZW50ZXJQb2ludDogeyB0eXBlOiAndmVjMicgfSxcclxuICAgICAgICBzbEdyaWRDZWxsU2l6ZTogeyB0eXBlOiAnZmxvYXQnfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIHVwZGF0ZShjb25maWcsIHh5V2lkdGgsIHh5SGVpZ2h0LCB4eUNlbnRlclBvaW50LCBzbENlbnRlclBvaW50KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogeHlXaWR0aCxcclxuICAgICAgaGVpZ2h0OiB4eUhlaWdodCxcclxuICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICB4eUNlbnRlclBvaW50OiBbeHlDZW50ZXJQb2ludC54LCB4eUNlbnRlclBvaW50LnldLFxyXG4gICAgICAgIHh5R3JpZENlbGxTaXplOiBjb25maWcueHlHcmlkQ2VsbFNpemUsXHJcbiAgICAgICAgc2xDZW50ZXJQb2ludDogW3NsQ2VudGVyUG9pbnQueCwgc2xDZW50ZXJQb2ludC55XSxcclxuICAgICAgICBzbEdyaWRDZWxsU2l6ZTogY29uZmlnLnNsR3JpZENlbGxTaXplXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBHUEdQVSBmcm9tIFwiLi4vLi4vR1BHUFUuanNcIjtcclxuaW1wb3J0IENhciBmcm9tIFwiLi4vLi4vcGh5c2ljcy9DYXIuanNcIjtcclxuaW1wb3J0IEN1YmljUGF0aCBmcm9tIFwiLi9DdWJpY1BhdGguanNcIjtcclxuaW1wb3J0IFF1aW50aWNQYXRoIGZyb20gXCIuL1F1aW50aWNQYXRoLmpzXCI7XHJcbmltcG9ydCB4eU9ic3RhY2xlR3JpZCBmcm9tIFwiLi9ncGdwdS1wcm9ncmFtcy94eU9ic3RhY2xlR3JpZC5qc1wiO1xyXG5pbXBvcnQgc2xPYnN0YWNsZUdyaWQgZnJvbSBcIi4vZ3BncHUtcHJvZ3JhbXMvc2xPYnN0YWNsZUdyaWQuanNcIjtcclxuaW1wb3J0IHNsT2JzdGFjbGVHcmlkRGlsYXRpb24gZnJvbSBcIi4vZ3BncHUtcHJvZ3JhbXMvc2xPYnN0YWNsZUdyaWREaWxhdGlvbi5qc1wiO1xyXG5pbXBvcnQgc2xEeW5hbWljT2JzdGFjbGVHcmlkIGZyb20gXCIuL2dwZ3B1LXByb2dyYW1zL3NsRHluYW1pY09ic3RhY2xlR3JpZC5qc1wiO1xyXG5pbXBvcnQgeHlzbE1hcCBmcm9tIFwiLi9ncGdwdS1wcm9ncmFtcy94eXNsTWFwLmpzXCI7XHJcbmltcG9ydCBvcHRpbWl6ZUN1YmljUGF0aHMgZnJvbSBcIi4vZ3BncHUtcHJvZ3JhbXMvb3B0aW1pemVDdWJpY1BhdGhzLmpzXCI7XHJcbmltcG9ydCBvcHRpbWl6ZVF1aW50aWNQYXRocyBmcm9tIFwiLi9ncGdwdS1wcm9ncmFtcy9vcHRpbWl6ZVF1aW50aWNQYXRocy5qc1wiO1xyXG5pbXBvcnQgcGF0aEZyb21WZWhpY2xlQ29zdHMgZnJvbSBcIi4vZ3BncHUtcHJvZ3JhbXMvcGF0aEZyb21WZWhpY2xlQ29zdHMuanNcIjtcclxuaW1wb3J0IGdyYXBoU2VhcmNoIGZyb20gXCIuL2dwZ3B1LXByb2dyYW1zL2dyYXBoU2VhcmNoLmpzXCI7XHJcbmltcG9ydCB4eU9ic3RhY2xlQ29zdEdyaWQgZnJvbSBcIi4vZ3BncHUtcHJvZ3JhbXMveHlPYnN0YWNsZUNvc3RHcmlkLmpzXCI7XHJcblxyXG5jb25zdCBOVU1fQUNDRUxFUkFUSU9OX1BST0ZJTEVTID0gODtcclxuY29uc3QgTlVNX1ZFTE9DSVRZX1JBTkdFUyA9IDQ7XHJcbmNvbnN0IE5VTV9USU1FX1JBTkdFUyA9IDI7XHJcblxyXG4vKiBPYnN0YWNsZSBjb3N0IG1hcDpcclxuICpcclxuICogMS4gUmFzdGVyaXplIHRyaWFuZ2xlcyBmcm9tIHBvbHlnb25hbCBvYnN0YWNsZXMgaW50byBYWS1zcGFjZSBvY2N1cGFuY3kgZ3JpZFxyXG4gKiAyLiBDb252ZXJ0IG9jY3VwYW5jeSBncmlkIHRvIFNMLXNwYWNlXHJcbiAqICAgICogV2lkdGggaXMgc3BhdGlhbCBob3Jpem9uIG9mIHRoZSBzdGF0ZSBsYXR0aWNlXHJcbiAqICAgICogSGVpZ2h0IGlzIGxhbmUgd2lkdGhcclxuICogICAgKiBSZXNvbHV0aW9uIHNob3VsZCBiZSBoaWdoZXIgdGhhbiBYWS1ncmlkXHJcbiAqICAgICogR2V0IFhZIHBvc2l0aW9uIGZyb20gY2VudGVybGluZSB0ZXh0dXJlXHJcbiAqICAgICogTG9va3VwIFhZIGluIFhZIG9jY3VwYW5jeSBncmlkIChuZWFyZXN0KVxyXG4gKiAzLiBEaWxhdGUgU0wtc3BhY2UgZ3JpZCB1c2luZyB0d28gcGFzc2VzIChhbG9uZyBzdGF0aW9uLCB0aGVuIGFsb25nIGxhdGl0dWRlKVxyXG4gKiAgICAqIGNvbGxpc2lvbiBhcmVhOiBoYWxmIGNhciBzaXplICsgMC4zbVxyXG4gKiAgICAqIGhpZ2ggY29zdCBhcmVhOiAxIG1ldGVyXHJcbiAqIDQuIENvbnZlcnQgYmFjayB0byBYWS1zcGFjZSB1c2luZyBYWVNMIG1hcFxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdGhQbGFubmVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucHJldmlvdXNTdGFydFN0YXRpb24gPSBudWxsO1xyXG4gICAgdGhpcy5wcmV2aW91c0ZpcnN0TGF0dGljZVBvaW50ID0gLTE7XHJcbiAgICB0aGlzLnByZXZpb3VzU2Vjb25kTGF0dGljZVBvaW50ID0gLTE7XHJcbiAgICB0aGlzLnByZXZpb3VzRmlyc3RBY2NlbGVyYXRpb24gPSAtMTtcclxuICAgIHRoaXMucHJldmlvdXNTZWNvbmRMYXR0aWNlUG9pbnQgPSAtMTtcclxuXHJcbiAgICBsZXQgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgIGNvbnN0IHByb2dyYW1zID0gW1xyXG4gICAgICB4eU9ic3RhY2xlR3JpZC5zZXRVcCgpLFxyXG4gICAgICBzbE9ic3RhY2xlR3JpZC5zZXRVcCgpLFxyXG4gICAgICAuLi5zbE9ic3RhY2xlR3JpZERpbGF0aW9uLnNldFVwKCksXHJcbiAgICAgIHNsRHluYW1pY09ic3RhY2xlR3JpZC5zZXRVcCgpLFxyXG4gICAgICB4eXNsTWFwLnNldFVwKCksXHJcbiAgICAgIC4uLm9wdGltaXplQ3ViaWNQYXRocy5zZXRVcCgpLFxyXG4gICAgICBvcHRpbWl6ZVF1aW50aWNQYXRocy5zZXRVcCgpLFxyXG4gICAgICAuLi5wYXRoRnJvbVZlaGljbGVDb3N0cy5zZXRVcCgpLFxyXG4gICAgICBncmFwaFNlYXJjaC5zZXRVcCgpLFxyXG4gICAgXS5tYXAocCA9PiBPYmplY3QuYXNzaWduKHt9LCBwLCB7IHdpZHRoOiAxLCBoZWlnaHQ6IDEgfSkpO1xyXG5cclxuICAgIHRoaXMuZ3BncHUgPSBuZXcgR1BHUFUocHJvZ3JhbXMpO1xyXG4gIH1cclxuXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnByZXZpb3VzU3RhcnRTdGF0aW9uID0gbnVsbDtcclxuICAgIHRoaXMucHJldmlvdXNGaXJzdExhdHRpY2VQb2ludCA9IC0xO1xyXG4gICAgdGhpcy5wcmV2aW91c1NlY29uZExhdHRpY2VQb2ludCA9IC0xO1xyXG4gICAgdGhpcy5wcmV2aW91c0ZpcnN0QWNjZWxlcmF0aW9uID0gLTE7XHJcbiAgICB0aGlzLnByZXZpb3VzU2Vjb25kTGF0dGljZVBvaW50ID0gLTE7XHJcbiAgfVxyXG5cclxuICBwbGFuKHZlaGljbGVQb3NlLCB2ZWhpY2xlU3RhdGlvbiwgbGFuZVBhdGgsIHN0YXJ0VGltZSwgc3RhdGljT2JzdGFjbGVzLCBkeW5hbWljT2JzdGFjbGVzKSB7XHJcbiAgICBjb25zdCBsYXR0aWNlU3RhdGlvbkludGVydmFsID0gdGhpcy5fbGF0dGljZVN0YXRpb25JbnRlcnZhbCgpO1xyXG5cclxuICAgIGNvbnN0IGNlbnRlcmxpbmVSYXcgPSBsYW5lUGF0aC5zYW1wbGVTdGF0aW9ucyh2ZWhpY2xlU3RhdGlvbiwgTWF0aC5jZWlsKCh0aGlzLmNvbmZpZy5zcGF0aWFsSG9yaXpvbiArIGxhdHRpY2VTdGF0aW9uSW50ZXJ2YWwpIC8gdGhpcy5jb25maWcuY2VudGVybGluZVN0YXRpb25JbnRlcnZhbCkgKyAxLCB0aGlzLmNvbmZpZy5jZW50ZXJsaW5lU3RhdGlvbkludGVydmFsKTtcclxuXHJcbiAgICAvLyBUcmFuc2Zvcm0gYWxsIGNlbnRlcmxpbmUgcG9pbnRzIGludG8gdmVoaWNsZSBmcmFtZVxyXG4gICAgY29uc3QgdmVoaWNsZVhmb3JtID0gdmVoaWNsZVRyYW5zZm9ybSh2ZWhpY2xlUG9zZSk7XHJcbiAgICBjb25zdCBjZW50ZXJsaW5lID0gY2VudGVybGluZVJhdy5tYXAoYyA9PiB7IHJldHVybiB7IHBvczogYy5wb3MuY2xvbmUoKS5hcHBseU1hdHJpeDModmVoaWNsZVhmb3JtKSwgcm90OiBjLnJvdCAtIHZlaGljbGVQb3NlLnJvdCwgY3VydjogYy5jdXJ2IH0gfSk7XHJcblxyXG4gICAgY29uc3QgY2VudGVybGluZURhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGNlbnRlcmxpbmUubGVuZ3RoICogMyk7XHJcbiAgICBjb25zdCBtYXhQb2ludCA9IG5ldyBUSFJFRS5WZWN0b3IyKDAsIDApO1xyXG4gICAgY29uc3QgbWluUG9pbnQgPSBuZXcgVEhSRUUuVmVjdG9yMigwLCAwKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbnRlcmxpbmUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgc2FtcGxlID0gY2VudGVybGluZVtpXTtcclxuICAgICAgY29uc3QgcG9zID0gc2FtcGxlLnBvcztcclxuICAgICAgY2VudGVybGluZURhdGFbaSAqIDMgKyAwXSA9IHBvcy54O1xyXG4gICAgICBjZW50ZXJsaW5lRGF0YVtpICogMyArIDFdID0gcG9zLnk7XHJcbiAgICAgIGNlbnRlcmxpbmVEYXRhW2kgKiAzICsgMl0gPSBzYW1wbGUucm90O1xyXG5cclxuICAgICAgbWF4UG9pbnQubWF4KHBvcyk7XHJcbiAgICAgIG1pblBvaW50Lm1pbihwb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRpZmYgPSBtYXhQb2ludC5jbG9uZSgpLnN1YihtaW5Qb2ludCk7XHJcbiAgICBjb25zdCB4eUNlbnRlclBvaW50ID0gbWluUG9pbnQuY2xvbmUoKS5hZGQobWF4UG9pbnQpLmRpdmlkZVNjYWxhcigyKTtcclxuXHJcbiAgICAvLyBTaXplcyBvZiB0aGUgeHkgZ3JpZHMgKGluIHBpeGVscywgbm90IG1ldGVycylcclxuICAgIGNvbnN0IHh5V2lkdGggPSBNYXRoLmNlaWwoKGRpZmYueCArIHRoaXMuY29uZmlnLmdyaWRNYXJnaW4gKiAyKSAvIHRoaXMuY29uZmlnLnh5R3JpZENlbGxTaXplKTtcclxuICAgIGNvbnN0IHh5SGVpZ2h0ID0gTWF0aC5jZWlsKChkaWZmLnkgKyB0aGlzLmNvbmZpZy5ncmlkTWFyZ2luICogMikgLyB0aGlzLmNvbmZpZy54eUdyaWRDZWxsU2l6ZSk7XHJcblxyXG4gICAgY29uc3Qgc3RhdGlvbldpZHRoID0gdGhpcy5jb25maWcuc3BhdGlhbEhvcml6b24gKyBsYXR0aWNlU3RhdGlvbkludGVydmFsICogMjtcclxuICAgIGNvbnN0IHNsQ2VudGVyUG9pbnQgPSBuZXcgVEhSRUUuVmVjdG9yMih0aGlzLmNvbmZpZy5zcGF0aWFsSG9yaXpvbiAvIDIsIDApO1xyXG5cclxuICAgIC8vIFNpemVzIG9mIHRoZSBzbCBncmlkcyAoaW4gcGl4ZWxzLCBub3QgbWV0ZXJzKVxyXG4gICAgY29uc3Qgc2xXaWR0aCA9IE1hdGguY2VpbChzdGF0aW9uV2lkdGggLyB0aGlzLmNvbmZpZy5zbEdyaWRDZWxsU2l6ZSk7XHJcbiAgICBjb25zdCBzbEhlaWdodCA9IE1hdGguY2VpbCgodGhpcy5jb25maWcucm9hZFdpZHRoICsgdGhpcy5jb25maWcuZ3JpZE1hcmdpbiAqIDIpIC8gdGhpcy5jb25maWcuc2xHcmlkQ2VsbFNpemUpO1xyXG5cclxuICAgIGxldCBzdGFydFN0YXRpb247XHJcblxyXG4gICAgaWYgKHRoaXMucHJldmlvdXNTdGFydFN0YXRpb24gPT09IG51bGwgfHwgdmVoaWNsZVN0YXRpb24gKyBsYXR0aWNlU3RhdGlvbkludGVydmFsIC8gMiA+IHRoaXMucHJldmlvdXNTdGFydFN0YXRpb24pIHtcclxuICAgICAgc3RhcnRTdGF0aW9uID0gKHRoaXMucHJldmlvdXNTdGFydFN0YXRpb24gPT09IG51bGwgPyB2ZWhpY2xlU3RhdGlvbiA6IHRoaXMucHJldmlvdXNTdGFydFN0YXRpb24pICsgbGF0dGljZVN0YXRpb25JbnRlcnZhbDtcclxuICAgICAgdGhpcy5wcmV2aW91c1N0YXJ0U3RhdGlvbiA9IHN0YXJ0U3RhdGlvbjtcclxuICAgICAgdGhpcy5wcmV2aW91c0ZpcnN0TGF0dGljZVBvaW50IC09IHRoaXMuY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzO1xyXG4gICAgICB0aGlzLnByZXZpb3VzU2Vjb25kTGF0dGljZVBvaW50IC09IHRoaXMuY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RhcnRTdGF0aW9uID0gdGhpcy5wcmV2aW91c1N0YXJ0U3RhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsYXR0aWNlID0gdGhpcy5fYnVpbGRMYXR0aWNlKGxhbmVQYXRoLCBzdGFydFN0YXRpb24sIHZlaGljbGVQb3NlLnJvdCwgdmVoaWNsZVhmb3JtKTtcclxuXHJcbiAgICBjb25zdCB0ZW1wb3JhbEhvcml6b24gPSB0aGlzLmNvbmZpZy5zcGF0aWFsSG9yaXpvbiAvIHRoaXMuY29uZmlnLnNwZWVkTGltaXQ7XHJcbiAgICBjb25zdCBkeW5hbWljRnJhbWVUaW1lID0gdGVtcG9yYWxIb3Jpem9uIC8gdGhpcy5jb25maWcubnVtRHluYW1pY0ZyYW1lcztcclxuXHJcbiAgICBmb3IgKGNvbnN0IFtpLCBwXSBvZiBbXHJcbiAgICAgIHh5T2JzdGFjbGVHcmlkLnVwZGF0ZSh0aGlzLmNvbmZpZywgeHlXaWR0aCwgeHlIZWlnaHQsIHh5Q2VudGVyUG9pbnQsIHZlaGljbGVYZm9ybSwgc3RhdGljT2JzdGFjbGVzKSxcclxuICAgICAgc2xPYnN0YWNsZUdyaWQudXBkYXRlKHRoaXMuY29uZmlnLCBzbFdpZHRoLCBzbEhlaWdodCwgc2xDZW50ZXJQb2ludCwgeHlDZW50ZXJQb2ludCksXHJcbiAgICAgIC4uLnNsT2JzdGFjbGVHcmlkRGlsYXRpb24udXBkYXRlKHRoaXMuY29uZmlnLCBzbFdpZHRoLCBzbEhlaWdodCksXHJcbiAgICAgIHNsRHluYW1pY09ic3RhY2xlR3JpZC51cGRhdGUodGhpcy5jb25maWcsIHNsV2lkdGgsIHNsSGVpZ2h0LCBzbENlbnRlclBvaW50LCB2ZWhpY2xlU3RhdGlvbiwgc3RhcnRUaW1lLCBkeW5hbWljRnJhbWVUaW1lLCBkeW5hbWljT2JzdGFjbGVzKSxcclxuICAgICAgeHlzbE1hcC51cGRhdGUodGhpcy5jb25maWcsIHh5V2lkdGgsIHh5SGVpZ2h0LCB4eUNlbnRlclBvaW50KSxcclxuICAgICAgLi4ub3B0aW1pemVDdWJpY1BhdGhzLnVwZGF0ZSh0aGlzLmNvbmZpZywgdmVoaWNsZVBvc2UpLFxyXG4gICAgICBvcHRpbWl6ZVF1aW50aWNQYXRocy51cGRhdGUodGhpcy5jb25maWcsIHZlaGljbGVQb3NlKSxcclxuICAgICAgLi4ucGF0aEZyb21WZWhpY2xlQ29zdHMudXBkYXRlKHRoaXMuY29uZmlnLCB2ZWhpY2xlUG9zZSwgeHlDZW50ZXJQb2ludCwgc2xDZW50ZXJQb2ludCwgdGhpcy5wcmV2aW91c0ZpcnN0TGF0dGljZVBvaW50LCB0aGlzLnByZXZpb3VzU2Vjb25kTGF0dGljZVBvaW50LCBkeW5hbWljRnJhbWVUaW1lKSxcclxuICAgICAgZ3JhcGhTZWFyY2gudXBkYXRlKHRoaXMuY29uZmlnLCB2ZWhpY2xlUG9zZSwgeHlDZW50ZXJQb2ludCwgc2xDZW50ZXJQb2ludCwgdGhpcy5wcmV2aW91c0ZpcnN0TGF0dGljZVBvaW50LCB0aGlzLnByZXZpb3VzU2Vjb25kTGF0dGljZVBvaW50LCBkeW5hbWljRnJhbWVUaW1lKVxyXG4gICAgXS5lbnRyaWVzKCkpIHtcclxuICAgICAgdGhpcy5ncGdwdS51cGRhdGVQcm9ncmFtKGksIHApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZ3BncHUudXBkYXRlU2hhcmVkVGV4dHVyZXMoe1xyXG4gICAgICBjZW50ZXJsaW5lOiB7XHJcbiAgICAgICAgd2lkdGg6IGNlbnRlcmxpbmUubGVuZ3RoLFxyXG4gICAgICAgIGhlaWdodDogMSxcclxuICAgICAgICBjaGFubmVsczogMyxcclxuICAgICAgICBmaWx0ZXI6ICdsaW5lYXInLFxyXG4gICAgICAgIGRhdGE6IGNlbnRlcmxpbmVEYXRhXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvc3RUYWJsZToge1xyXG4gICAgICAgIHdpZHRoOiBOVU1fQUNDRUxFUkFUSU9OX1BST0ZJTEVTICogTlVNX1ZFTE9DSVRZX1JBTkdFUyAqIE5VTV9USU1FX1JBTkdFUyxcclxuICAgICAgICBoZWlnaHQ6IHRoaXMuY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzLFxyXG4gICAgICAgIGRlcHRoOiB0aGlzLmNvbmZpZy5sYXR0aWNlLm51bVN0YXRpb25zLFxyXG4gICAgICAgIGNoYW5uZWxzOiA0LFxyXG4gICAgICAgIHRleHR1cmVUeXBlOiAnMkRBcnJheSdcclxuICAgICAgfSxcclxuICAgICAgbGF0dGljZToge1xyXG4gICAgICAgIHdpZHRoOiB0aGlzLmNvbmZpZy5sYXR0aWNlLm51bUxhdGl0dWRlcyxcclxuICAgICAgICBoZWlnaHQ6IHRoaXMuY29uZmlnLmxhdHRpY2UubnVtU3RhdGlvbnMsXHJcbiAgICAgICAgY2hhbm5lbHM6IDQsXHJcbiAgICAgICAgZGF0YTogbGF0dGljZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmdwZ3B1Ll9ncmFwaFNlYXJjaENvc3RUYWJsZSA9IG51bGw7XHJcbiAgICB0aGlzLmdwZ3B1Ll9keW5hbWljT2JzdGFjbGVHcmlkID0gbnVsbDtcclxuXHJcbiAgICBsZXQgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgIGNvbnN0IG91dHB1dHMgPSB0aGlzLmdwZ3B1LnJ1bigpO1xyXG4gICAgY29uc3QgY29zdFRhYmxlID0gdGhpcy5ncGdwdS5fZ3JhcGhTZWFyY2hDb3N0VGFibGU7XHJcbiAgICBjb25zdCBjdWJpY1BhdGhQYXJhbXMgPSBvdXRwdXRzWzZdO1xyXG4gICAgY29uc3QgY3ViaWNQYXRoRnJvbVZlaGljbGVQYXJhbXMgPSBvdXRwdXRzWzddO1xyXG4gICAgY29uc3QgcXVpbnRpY1BhdGhGcm9tVmVoaWNsZVBhcmFtcyA9IG91dHB1dHNbOF07XHJcblxyXG4gICAgbGV0IGJlc3RFbnRyeSA9IFtOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldO1xyXG4gICAgbGV0IGJlc3RFbnRyeUluZGV4O1xyXG4gICAgY29uc3QgbnVtRW50cmllcyA9IGNvc3RUYWJsZS5sZW5ndGggLyA0O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRW50cmllczsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGVudHJ5VW5wYWNrZWQgPSB0aGlzLl91bnBhY2tDb3N0VGFibGVJbmRleChpKTtcclxuICAgICAgY29uc3QgZW50cnkgPSBbXHJcbiAgICAgICAgY29zdFRhYmxlW2kgKiA0XSxcclxuICAgICAgICBjb3N0VGFibGVbaSAqIDQgKyAxXSxcclxuICAgICAgICBjb3N0VGFibGVbaSAqIDQgKyAyXSxcclxuICAgICAgICBjb3N0VGFibGVbaSAqIDQgKyAzXVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgaWYgKGVudHJ5WzBdIDwgMCkgY29udGludWU7XHJcblxyXG4gICAgICBlbnRyeVswXSArPSB0aGlzLl90ZXJtaW5hbENvc3QoZW50cnlVbnBhY2tlZCwgZW50cnkpO1xyXG5cclxuICAgICAgaWYgKGVudHJ5WzBdIDwgYmVzdEVudHJ5WzBdKSB7XHJcbiAgICAgICAgYmVzdEVudHJ5SW5kZXggPSBpO1xyXG4gICAgICAgIGJlc3RFbnRyeSA9IGVudHJ5O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW52ZXJzZVZlaGljbGVYZm9ybSA9IChuZXcgVEhSRUUuTWF0cml4MygpKS5nZXRJbnZlcnNlKHZlaGljbGVYZm9ybSk7XHJcbiAgICBsZXQgYmVzdFRyYWplY3RvcnkgPSBudWxsO1xyXG4gICAgbGV0IGZyb21WZWhpY2xlU2VnbWVudCA9IG51bGw7XHJcbiAgICBsZXQgZnJvbVZlaGljbGVQYXJhbXMgPSBudWxsO1xyXG4gICAgbGV0IGZpcnN0TGF0dGljZVBvaW50ID0gLTE7XHJcbiAgICBsZXQgZmlyc3RBY2NlbGVyYXRpb24gPSAtMTtcclxuICAgIGxldCBzZWNvbmRMYXR0aWNlUG9pbnQgPSAtMTtcclxuICAgIGxldCBzZWNvbmRBY2NlbGVyYXRpb24gPSAtMTtcclxuXHJcbiAgICBpZiAoaXNGaW5pdGUoYmVzdEVudHJ5WzBdKSkge1xyXG4gICAgICBbYmVzdFRyYWplY3RvcnksIGZyb21WZWhpY2xlU2VnbWVudCwgZnJvbVZlaGljbGVQYXJhbXMsIGZpcnN0TGF0dGljZVBvaW50LCBmaXJzdEFjY2VsZXJhdGlvbiwgc2Vjb25kTGF0dGljZVBvaW50LCBzZWNvbmRBY2NlbGVyYXRpb25dID0gdGhpcy5fcmVjb25zdHJ1Y3RUcmFqZWN0b3J5KFxyXG4gICAgICAgIGJlc3RFbnRyeUluZGV4LFxyXG4gICAgICAgIGNvc3RUYWJsZSxcclxuICAgICAgICBjdWJpY1BhdGhQYXJhbXMsXHJcbiAgICAgICAgY3ViaWNQYXRoRnJvbVZlaGljbGVQYXJhbXMsXHJcbiAgICAgICAgcXVpbnRpY1BhdGhGcm9tVmVoaWNsZVBhcmFtcyxcclxuICAgICAgICB2ZWhpY2xlUG9zZSxcclxuICAgICAgICBsYXR0aWNlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBmcm9tVmVoaWNsZVNlZ21lbnQuZm9yRWFjaChwID0+IHtcclxuICAgICAgICBwLnBvcyA9IHAucG9zLmFwcGx5TWF0cml4MyhpbnZlcnNlVmVoaWNsZVhmb3JtKTtcclxuICAgICAgICBwLnJvdCArPSB2ZWhpY2xlUG9zZS5yb3Q7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgYmVzdFRyYWplY3RvcnkuZm9yRWFjaChwID0+IHtcclxuICAgICAgICBwLnBvcyA9IHAucG9zLmFwcGx5TWF0cml4MyhpbnZlcnNlVmVoaWNsZVhmb3JtKTtcclxuICAgICAgICBwLnJvdCArPSB2ZWhpY2xlUG9zZS5yb3Q7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucHJldmlvdXNGaXJzdExhdHRpY2VQb2ludCA9IGZpcnN0TGF0dGljZVBvaW50O1xyXG4gICAgdGhpcy5wcmV2aW91c0ZpcnN0QWNjZWxlcmF0aW9uID0gZmlyc3RBY2NlbGVyYXRpb247XHJcbiAgICB0aGlzLnByZXZpb3VzU2Vjb25kTGF0dGljZVBvaW50ID0gc2Vjb25kTGF0dGljZVBvaW50O1xyXG4gICAgdGhpcy5wcmV2aW91c1NlY29uZEFjY2VsZXJhdGlvbiA9IHNlY29uZEFjY2VsZXJhdGlvbjtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwYXRoOiBiZXN0VHJhamVjdG9yeSxcclxuICAgICAgZnJvbVZlaGljbGVTZWdtZW50OiBmcm9tVmVoaWNsZVNlZ21lbnQsXHJcbiAgICAgIGZyb21WZWhpY2xlUGFyYW1zOiBmcm9tVmVoaWNsZVBhcmFtcyxcclxuICAgICAgbGF0dGljZVN0YXJ0U3RhdGlvbjogdGhpcy5wcmV2aW91c1N0YXJ0U3RhdGlvbixcclxuICAgICAgZHluYW1pY09ic3RhY2xlR3JpZDogeyBkYXRhOiB0aGlzLmdwZ3B1Ll9keW5hbWljT2JzdGFjbGVHcmlkLCB3aWR0aDogc2xXaWR0aCwgaGVpZ2h0OiBzbEhlaWdodCB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgX2J1aWxkTGF0dGljZShsYW5lUGF0aCwgc3RhcnRTdGF0aW9uLCB2ZWhpY2xlUm90LCB2ZWhpY2xlWGZvcm0pIHtcclxuICAgIGNvbnN0IGNlbnRlcmxpbmUgPSBsYW5lUGF0aC5zYW1wbGVTdGF0aW9ucyhzdGFydFN0YXRpb24sIHRoaXMuY29uZmlnLmxhdHRpY2UubnVtU3RhdGlvbnMsIHRoaXMuX2xhdHRpY2VTdGF0aW9uSW50ZXJ2YWwoKSk7XHJcbiAgICBjb25zdCBvZmZzZXQgPSBNYXRoLmZsb29yKHRoaXMuY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzIC8gMik7XHJcbiAgICBjb25zdCBsYXR0aWNlID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLmNvbmZpZy5sYXR0aWNlLm51bVN0YXRpb25zICogdGhpcy5jb25maWcubGF0dGljZS5udW1MYXRpdHVkZXMgKiA0KTtcclxuICAgIGxldCBpbmRleCA9IDA7XHJcblxyXG4gICAgZm9yIChsZXQgcyA9IDA7IHMgPCBjZW50ZXJsaW5lLmxlbmd0aDsgcysrKSB7XHJcbiAgICAgIGNvbnN0IHNhbXBsZSA9IGNlbnRlcmxpbmVbc107XHJcblxyXG4gICAgICBmb3IgKGxldCBsID0gMDsgbCA8IHRoaXMuY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzOyBsKyspIHtcclxuICAgICAgICBjb25zdCBsYXRpdHVkZSA9IChsIC0gb2Zmc2V0KSAvIG9mZnNldCAqIHRoaXMuY29uZmlnLnJvYWRXaWR0aCAvIDI7XHJcbiAgICAgICAgY29uc3Qgcm90ID0gc2FtcGxlLnJvdCAtIHZlaGljbGVSb3Q7XHJcbiAgICAgICAgY29uc3QgcG9zID0gVEhSRUUuVmVjdG9yMi5mcm9tQW5nbGUocm90ICsgTWF0aC5QSSAvIDIpLm11bHRpcGx5U2NhbGFyKGxhdGl0dWRlKS5hZGQoc2FtcGxlLnBvcy5jbG9uZSgpLmFwcGx5TWF0cml4Myh2ZWhpY2xlWGZvcm0pKTtcclxuICAgICAgICBjb25zdCBjdXJ2ID0gc2FtcGxlLmN1cnYgPT0gMCA/IDAgOiAxIC8gKDEgLyBzYW1wbGUuY3VydiAtIGxhdGl0dWRlKTtcclxuXHJcbiAgICAgICAgbGF0dGljZVtpbmRleCsrXSA9IHBvcy54O1xyXG4gICAgICAgIGxhdHRpY2VbaW5kZXgrK10gPSBwb3MueTtcclxuICAgICAgICBsYXR0aWNlW2luZGV4KytdID0gcm90O1xyXG4gICAgICAgIGxhdHRpY2VbaW5kZXgrK10gPSBjdXJ2O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGxhdHRpY2U7XHJcbiAgfVxyXG5cclxuICBfbGF0dGljZVN0YXRpb25JbnRlcnZhbCgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5zcGF0aWFsSG9yaXpvbiAvIHRoaXMuY29uZmlnLmxhdHRpY2UubnVtU3RhdGlvbnM7XHJcbiAgfVxyXG5cclxuICBfdGVybWluYWxDb3N0KFtzdGF0aW9uSW5kZXgsIGxhdGl0dWRlSW5kZXgsIHRpbWVJbmRleCwgdmVsb2NpdHlJbmRleCwgYWNjZWxlcmF0aW9uSW5kZXhdLCBbY29zdCwgZmluYWxWZWxvY2l0eSwgZmluYWxUaW1lLCBpbmNvbWluZ0luZGV4XSkge1xyXG4gICAgLy8gT25seSBjb25zaWRlciB2ZXJ0aWNlcyB0aGF0IHJlYWNoIHRoZSBlbmQgb2YgdGhlIHNwYXRpYWwgb3IgdGVtcG9yYWwgaG9yaXpvblxyXG4gICAgaWYgKHN0YXRpb25JbmRleCAhPSB0aGlzLmNvbmZpZy5sYXR0aWNlLm51bVN0YXRpb25zIC0gMSAmJiBmaW5hbFZlbG9jaXR5ID4gMC4wNSlcclxuICAgICAgcmV0dXJuIE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuXHJcbiAgICBjb25zdCBzdGF0aW9uID0gKHRoaXMuY29uZmlnLnNwYXRpYWxIb3Jpem9uIC8gdGhpcy5jb25maWcubGF0dGljZS5udW1TdGF0aW9ucykgKiAoc3RhdGlvbkluZGV4ICsgMSk7XHJcblxyXG4gICAgcmV0dXJuIHN0YXRpb24gKiAtdGhpcy5jb25maWcuc3RhdGlvblJlYWNoRGlzY291bnQgKyBmaW5hbFRpbWUgKiB0aGlzLmNvbmZpZy5leHRyYVRpbWVQZW5hbHR5O1xyXG4gIH1cclxuXHJcbiAgX3VucGFja0Nvc3RUYWJsZUluZGV4KGluZGV4KSB7XHJcbiAgICBpZiAoaW5kZXggPCAwKSByZXR1cm4gWy0xLCBpbmRleCArIDIsIG51bGwsIG51bGwsIG51bGxdO1xyXG5cclxuICAgIGNvbnN0IG51bVBlclRpbWUgPSBOVU1fQUNDRUxFUkFUSU9OX1BST0ZJTEVTICogTlVNX1ZFTE9DSVRZX1JBTkdFUztcclxuICAgIGNvbnN0IG51bVBlckxhdGl0dWRlID0gbnVtUGVyVGltZSAqIE5VTV9USU1FX1JBTkdFUztcclxuICAgIGNvbnN0IG51bVBlclN0YXRpb24gPSB0aGlzLmNvbmZpZy5sYXR0aWNlLm51bUxhdGl0dWRlcyAqIG51bVBlckxhdGl0dWRlO1xyXG5cclxuICAgIGNvbnN0IHN0YXRpb25JbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyBudW1QZXJTdGF0aW9uKTtcclxuICAgIGluZGV4IC09IHN0YXRpb25JbmRleCAqIG51bVBlclN0YXRpb247XHJcblxyXG4gICAgY29uc3QgbGF0aXR1ZGVJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyBudW1QZXJMYXRpdHVkZSk7XHJcbiAgICBpbmRleCAtPSBsYXRpdHVkZUluZGV4ICogbnVtUGVyTGF0aXR1ZGU7XHJcblxyXG4gICAgY29uc3QgdGltZUluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIG51bVBlclRpbWUpO1xyXG4gICAgaW5kZXggLT0gdGltZUluZGV4ICogbnVtUGVyVGltZTtcclxuXHJcbiAgICBjb25zdCB2ZWxvY2l0eUluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIE5VTV9BQ0NFTEVSQVRJT05fUFJPRklMRVMpO1xyXG4gICAgY29uc3QgYWNjZWxlcmF0aW9uSW5kZXggPSBpbmRleCAlIE5VTV9BQ0NFTEVSQVRJT05fUFJPRklMRVM7XHJcblxyXG4gICAgcmV0dXJuIFtzdGF0aW9uSW5kZXgsIGxhdGl0dWRlSW5kZXgsIHRpbWVJbmRleCwgdmVsb2NpdHlJbmRleCwgYWNjZWxlcmF0aW9uSW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgX3JlY29uc3RydWN0VHJhamVjdG9yeShpbmRleCwgY29zdFRhYmxlLCBjdWJpY1BhdGhQYXJhbXMsIGN1YmljUGF0aEZyb21WZWhpY2xlUGFyYW1zLCBxdWludGljUGF0aEZyb21WZWhpY2xlUGFyYW1zLCB2ZWhpY2xlUG9zZSwgbGF0dGljZSkge1xyXG4gICAgbGV0IHVucGFja2VkID0gdGhpcy5fdW5wYWNrQ29zdFRhYmxlSW5kZXgoaW5kZXgpO1xyXG4gICAgdW5wYWNrZWQucHVzaChjb3N0VGFibGVbaW5kZXggKiA0ICsgMV0pO1xyXG4gICAgY29uc3Qgbm9kZXMgPSBbdW5wYWNrZWRdO1xyXG5cclxuICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICB3aGlsZSAodW5wYWNrZWRbMF0gPj0gMCAmJiBjb3VudCsrIDwgMTAwKSB7XHJcbiAgICAgIGluZGV4ID0gY29zdFRhYmxlW2luZGV4ICogNCArIDNdO1xyXG4gICAgICB1bnBhY2tlZCA9IHRoaXMuX3VucGFja0Nvc3RUYWJsZUluZGV4KGluZGV4KTtcclxuXHJcbiAgICAgIGNvbnN0IGZpbmFsVmVsb2NpdHkgPSB1bnBhY2tlZFswXSA+PSAwID8gY29zdFRhYmxlW2luZGV4ICogNCArIDFdIDogdmVoaWNsZVBvc2UudmVsb2NpdHk7XHJcbiAgICAgIHVucGFja2VkLnB1c2goZmluYWxWZWxvY2l0eSk7XHJcblxyXG4gICAgICBub2Rlcy51bnNoaWZ0KHVucGFja2VkKTtcclxuICAgIH1cclxuICAgIGlmIChjb3VudCA+PSAxMDApIHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBlbmNvdW50ZXJlZCB3aGlsZSByZWNvbnN0cnVjdGluZyB0cmFqZWN0b3J5LicpO1xyXG5cclxuICAgIGNvbnN0IHBvaW50cyA9IFtdO1xyXG4gICAgbGV0IGZyb21WZWhpY2xlU2VnbWVudCA9IFtdO1xyXG4gICAgbGV0IGZyb21WZWhpY2xlUGFyYW1zID0gbnVsbDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICBjb25zdCBbcHJldlN0YXRpb24sIHByZXZMYXRpdHVkZSwgX3B0LCBfcHYsIF9wYSwgcHJldlZlbG9jaXR5XSA9IG5vZGVzW2ldO1xyXG4gICAgICBjb25zdCBbc3RhdGlvbiwgbGF0aXR1ZGUsIF90LCBfdiwgX2EsIHZlbG9jaXR5XSA9IG5vZGVzW2kgKyAxXTtcclxuXHJcbiAgICAgIGxldCBsZW5ndGg7XHJcbiAgICAgIGxldCBwYXRoQnVpbGRlcjtcclxuXHJcbiAgICAgIGlmIChwcmV2U3RhdGlvbiA8IDApIHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IHtcclxuICAgICAgICAgIHBvczogbmV3IFRIUkVFLlZlY3RvcjIoMCwgMCksXHJcbiAgICAgICAgICByb3Q6IDAsXHJcbiAgICAgICAgICBjdXJ2OiB2ZWhpY2xlUG9zZS5jdXJ2XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgZW5kSW5kZXggPSAoc3RhdGlvbiAqIHRoaXMuY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzICsgbGF0aXR1ZGUpICogNDtcclxuICAgICAgICBjb25zdCBlbmQgPSB7XHJcbiAgICAgICAgICBwb3M6IG5ldyBUSFJFRS5WZWN0b3IyKGxhdHRpY2VbZW5kSW5kZXhdLCBsYXR0aWNlW2VuZEluZGV4ICsgMV0pLFxyXG4gICAgICAgICAgcm90OiBsYXR0aWNlW2VuZEluZGV4ICsgMl0sXHJcbiAgICAgICAgICBjdXJ2OiBsYXR0aWNlW2VuZEluZGV4ICsgM11cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAocHJldkxhdGl0dWRlID09IDApIHsgLy8gQ3ViaWMgcGF0aCBmcm9tIHZlaGljbGUgdG8gbGF0dGljZSBub2RlXHJcbiAgICAgICAgICBsZW5ndGggPSBjdWJpY1BhdGhGcm9tVmVoaWNsZVBhcmFtc1tlbmRJbmRleCArIDJdO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgcDE6IGN1YmljUGF0aEZyb21WZWhpY2xlUGFyYW1zW2VuZEluZGV4XSxcclxuICAgICAgICAgICAgcDI6IGN1YmljUGF0aEZyb21WZWhpY2xlUGFyYW1zW2VuZEluZGV4ICsgMV0sXHJcbiAgICAgICAgICAgIHNHOiBsZW5ndGhcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgcGF0aEJ1aWxkZXIgPSBuZXcgQ3ViaWNQYXRoKHN0YXJ0LCBlbmQsIHBhcmFtcyk7XHJcblxyXG4gICAgICAgICAgZnJvbVZlaGljbGVQYXJhbXMgPSB7IHR5cGU6ICdjdWJpYycsIHBhcmFtczogcGFyYW1zIH07XHJcbiAgICAgICAgfSBlbHNlIHsgLy8gUXVpbnRpYyBwYXRoIGZyb20gdmVoaWNsZSB0byBsYXR0aWNlIG5vZGVcclxuICAgICAgICAgIGxlbmd0aCA9IHF1aW50aWNQYXRoRnJvbVZlaGljbGVQYXJhbXNbZW5kSW5kZXggKyAyXTtcclxuXHJcbiAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIHAzOiBxdWludGljUGF0aEZyb21WZWhpY2xlUGFyYW1zW2VuZEluZGV4XSxcclxuICAgICAgICAgICAgcDQ6IHF1aW50aWNQYXRoRnJvbVZlaGljbGVQYXJhbXNbZW5kSW5kZXggKyAxXSxcclxuICAgICAgICAgICAgc0c6IGxlbmd0aFxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBwYXRoQnVpbGRlciA9IG5ldyBRdWludGljUGF0aChzdGFydCwgZW5kLCBwYXJhbXMpO1xyXG5cclxuICAgICAgICAgIGZyb21WZWhpY2xlUGFyYW1zID0geyB0eXBlOiAncXVpbnRpYycsIHBhcmFtczogcGFyYW1zIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSAocHJldlN0YXRpb24gKiB0aGlzLmNvbmZpZy5sYXR0aWNlLm51bUxhdGl0dWRlcyArIHByZXZMYXRpdHVkZSkgKiA0O1xyXG4gICAgICAgIGNvbnN0IGVuZEluZGV4ID0gKHN0YXRpb24gKiB0aGlzLmNvbmZpZy5sYXR0aWNlLm51bUxhdGl0dWRlcyArIGxhdGl0dWRlKSAqIDQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0ge1xyXG4gICAgICAgICAgcG9zOiBuZXcgVEhSRUUuVmVjdG9yMihsYXR0aWNlW3N0YXJ0SW5kZXhdLCBsYXR0aWNlW3N0YXJ0SW5kZXggKyAxXSksXHJcbiAgICAgICAgICByb3Q6IGxhdHRpY2Vbc3RhcnRJbmRleCArIDJdLFxyXG4gICAgICAgICAgY3VydjogbGF0dGljZVtzdGFydEluZGV4ICsgM11cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBlbmQgPSB7XHJcbiAgICAgICAgICBwb3M6IG5ldyBUSFJFRS5WZWN0b3IyKGxhdHRpY2VbZW5kSW5kZXhdLCBsYXR0aWNlW2VuZEluZGV4ICsgMV0pLFxyXG4gICAgICAgICAgcm90OiBsYXR0aWNlW2VuZEluZGV4ICsgMl0sXHJcbiAgICAgICAgICBjdXJ2OiBsYXR0aWNlW2VuZEluZGV4ICsgM11cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBzbEluZGV4ID0gc3RhdGlvbiAqIHRoaXMuY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzICsgbGF0aXR1ZGU7XHJcbiAgICAgICAgY29uc3QgY29ubmVjdGl2aXR5SW5kZXggPSAocHJldlN0YXRpb24gLSBzdGF0aW9uICsgdGhpcy5jb25maWcubGF0dGljZS5zdGF0aW9uQ29ubmVjdGl2aXR5KSAqIHRoaXMuY29uZmlnLmxhdHRpY2UubGF0aXR1ZGVDb25uZWN0aXZpdHkgKyBwcmV2TGF0aXR1ZGUgLSBsYXRpdHVkZSArIE1hdGguZmxvb3IodGhpcy5jb25maWcubGF0dGljZS5sYXRpdHVkZUNvbm5lY3Rpdml0eSAvIDIpO1xyXG4gICAgICAgIGNvbnN0IGN1YmljUGF0aEluZGV4ID0gKGNvbm5lY3Rpdml0eUluZGV4ICogdGhpcy5jb25maWcubGF0dGljZS5udW1TdGF0aW9ucyAqIHRoaXMuY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzICsgc2xJbmRleCkgKiA0O1xyXG5cclxuICAgICAgICBsZW5ndGggPSBjdWJpY1BhdGhQYXJhbXNbY3ViaWNQYXRoSW5kZXggKyAyXTtcclxuXHJcbiAgICAgICAgcGF0aEJ1aWxkZXIgPSBuZXcgQ3ViaWNQYXRoKHN0YXJ0LCBlbmQsIHtcclxuICAgICAgICAgIHAxOiBjdWJpY1BhdGhQYXJhbXNbY3ViaWNQYXRoSW5kZXhdLFxyXG4gICAgICAgICAgcDI6IGN1YmljUGF0aFBhcmFtc1tjdWJpY1BhdGhJbmRleCArIDFdLFxyXG4gICAgICAgICAgc0c6IGxlbmd0aFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBwYXRoID0gcGF0aEJ1aWxkZXIuYnVpbGRQYXRoKE1hdGguY2VpbChsZW5ndGggLyAwLjI1KSk7XHJcblxyXG4gICAgICBjb25zdCBwcmV2VmVsb2NpdHlTcSA9IHByZXZWZWxvY2l0eSAqIHByZXZWZWxvY2l0eTtcclxuICAgICAgY29uc3QgYWNjZWwgPSAodmVsb2NpdHkgKiB2ZWxvY2l0eSAtIHByZXZWZWxvY2l0eVNxKSAvIDIgLyBsZW5ndGg7XHJcbiAgICAgIGNvbnN0IGRzID0gbGVuZ3RoIC8gKHBhdGgubGVuZ3RoIC0gMSk7XHJcbiAgICAgIGxldCBzID0gMDtcclxuXHJcbiAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgcGF0aC5sZW5ndGg7IHArKykge1xyXG4gICAgICAgIHBhdGhbcF0udmVsb2NpdHkgPSBNYXRoLnNxcnQoMiAqIGFjY2VsICogcyArIHByZXZWZWxvY2l0eVNxKTtcclxuICAgICAgICBwYXRoW3BdLmFjY2VsZXJhdGlvbiA9IGFjY2VsO1xyXG4gICAgICAgIHMgKz0gZHM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwcmV2U3RhdGlvbiA8IDApIHtcclxuICAgICAgICBmcm9tVmVoaWNsZVNlZ21lbnQgPSBwYXRoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChpID4gMCkgcGF0aC5zaGlmdCgpO1xyXG4gICAgICAgIHBvaW50cy5wdXNoKC4uLnBhdGgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGZpcnN0TGF0dGljZVBvaW50ID0gbnVsbFxyXG4gICAgbGV0IGZpcnN0QWNjZWxlcmF0aW9uID0gbnVsbDtcclxuICAgIGxldCBzZWNvbmRMYXR0aWNlUG9pbnQgPSBudWxsO1xyXG4gICAgbGV0IHNlY29uZEFjY2VsZXJhdGlvbiA9IG51bGw7XHJcblxyXG4gICAgaWYgKG5vZGVzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIGZpcnN0TGF0dGljZVBvaW50ID0gbm9kZXNbMV1bMF0gKiB0aGlzLmNvbmZpZy5sYXR0aWNlLm51bUxhdGl0dWRlcyArIG5vZGVzWzFdWzFdO1xyXG4gICAgICBmaXJzdEFjY2VsZXJhdGlvbiA9IG5vZGVzWzFdWzRdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChub2Rlcy5sZW5ndGggPj0gMykge1xyXG4gICAgICBzZWNvbmRMYXR0aWNlUG9pbnQgPSBub2Rlc1syXVswXSAqIHRoaXMuY29uZmlnLmxhdHRpY2UubnVtTGF0aXR1ZGVzICsgbm9kZXNbMl1bMV07XHJcbiAgICAgIHNlY29uZEFjY2VsZXJhdGlvbiA9IG5vZGVzWzJdWzRdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbcG9pbnRzLCBmcm9tVmVoaWNsZVNlZ21lbnQsIGZyb21WZWhpY2xlUGFyYW1zLCBmaXJzdExhdHRpY2VQb2ludCwgZmlyc3RBY2NlbGVyYXRpb24sIHNlY29uZExhdHRpY2VQb2ludCwgc2Vjb25kQWNjZWxlcmF0aW9uXTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHZlaGljbGVUcmFuc2Zvcm0oeyBwb3MsIHJvdCB9KSB7XHJcbiAgY29uc3QgdHJhbnNsYXRlID0gbmV3IFRIUkVFLk1hdHJpeDMoKTtcclxuICB0cmFuc2xhdGUuc2V0KFxyXG4gICAgMSwgMCwgLXBvcy54LFxyXG4gICAgMCwgMSwgLXBvcy55LFxyXG4gICAgMCwgMCwgMVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IGNvc1JvdCA9IE1hdGguY29zKHJvdCk7XHJcbiAgY29uc3Qgc2luUm90ID0gTWF0aC5zaW4ocm90KTtcclxuXHJcbiAgY29uc3Qgcm90YXRlID0gbmV3IFRIUkVFLk1hdHJpeDMoKTtcclxuICByb3RhdGUuc2V0KFxyXG4gICAgY29zUm90LCBzaW5Sb3QsIDAsXHJcbiAgICAtc2luUm90LCBjb3NSb3QsIDAsXHJcbiAgICAwLCAwLCAxXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIHJvdGF0ZS5tdWx0aXBseSh0cmFuc2xhdGUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvYnN0YWNsZVRyYW5zZm9ybSh2ZWhpY2xlWGZvcm0sIHh5Q2VudGVyUG9pbnQsIHdpZHRoLCBoZWlnaHQpIHtcclxuICBjb25zdCB0cmFuc2xhdGUgPSBuZXcgVEhSRUUuTWF0cml4MygpO1xyXG4gIHRyYW5zbGF0ZS5zZXQoXHJcbiAgICAxLCAwLCAteHlDZW50ZXJQb2ludC54LFxyXG4gICAgMCwgMSwgLXh5Q2VudGVyUG9pbnQueSxcclxuICAgIDAsIDAsIDFcclxuICApO1xyXG5cclxuICBjb25zdCBzY2FsZSA9IG5ldyBUSFJFRS5NYXRyaXgzKCk7XHJcbiAgc2NhbGUuc2V0KFxyXG4gICAgMiAvIHdpZHRoLCAwLCAwLFxyXG4gICAgMCwgMiAvIGhlaWdodCwgMCxcclxuICAgIDAsIDAsIDFcclxuICApO1xyXG5cclxuICByZXR1cm4gc2NhbGUubXVsdGlwbHkodHJhbnNsYXRlKS5tdWx0aXBseSh2ZWhpY2xlWGZvcm0pO1xyXG59XHJcbiIsImNvbnN0IGhhbGZMYW5lV2lkdGggPSAzLjc7XHJcblxyXG5jb25zdCBjZW50ZXJsaW5lR2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcclxuY29uc3QgbGVmdEJvdW5kYXJ5R2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcclxuY29uc3QgcmlnaHRCb3VuZGFyeUdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYW5lUGF0aCB7XHJcbiAgc3RhdGljIGh5ZHJhdGUob2JqKSB7XHJcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLCBMYW5lUGF0aC5wcm90b3R5cGUpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFuY2hvcnMgPSBbXTtcclxuICAgIHRoaXMuY2VudGVybGluZXMgPSBbXTtcclxuICAgIHRoaXMuc2FtcGxlTGVuZ3RocyA9IFtdO1xyXG4gICAgdGhpcy5hcmNMZW5ndGhzID0gW107XHJcbiAgICB0aGlzLmxlZnRCb3VuZGFyaWVzID0gW107XHJcbiAgICB0aGlzLnJpZ2h0Qm91bmRhcmllcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNlbnRlcmxpbmUoKSB7XHJcbiAgICByZXR1cm4gW10uY29uY2F0KC4uLnRoaXMuY2VudGVybGluZXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGxlZnRCb3VuZGFyeSgpIHtcclxuICAgIHJldHVybiBbXS5jb25jYXQoLi4udGhpcy5sZWZ0Qm91bmRhcmllcyk7XHJcbiAgfVxyXG5cclxuICBnZXQgcmlnaHRCb3VuZGFyeSgpIHtcclxuICAgIHJldHVybiBbXS5jb25jYXQoLi4udGhpcy5yaWdodEJvdW5kYXJpZXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGFyY0xlbmd0aCgpIHtcclxuICAgIHJldHVybiB0aGlzLmFyY0xlbmd0aHMucmVkdWNlKChzdW0sIGwpID0+IHN1bSArIGwsIDApO1xyXG4gIH1cclxuXHJcbiAgc2FtcGxlU3RhdGlvbnMoc3RhcnRTdGF0aW9uLCBudW0sIGludGVydmFsKSB7XHJcbiAgICBjb25zdCBzYW1wbGVzID0gW107XHJcbiAgICBsZXQgYW5jaG9ySW5kZXggPSAwO1xyXG4gICAgbGV0IHNhbXBsZUluZGV4ID0gMDtcclxuICAgIGxldCB0b3RhbExlbmd0aCA9IDA7XHJcbiAgICBsZXQgbmV4dFN0YXRpb24gPSBzdGFydFN0YXRpb247XHJcblxyXG4gICAgd2hpbGUgKHRvdGFsTGVuZ3RoICsgdGhpcy5hcmNMZW5ndGhzW2FuY2hvckluZGV4XSA8IG5leHRTdGF0aW9uKSB7XHJcbiAgICAgIHRvdGFsTGVuZ3RoICs9IHRoaXMuYXJjTGVuZ3Roc1thbmNob3JJbmRleF07XHJcblxyXG4gICAgICBpZiAoKythbmNob3JJbmRleCA+PSB0aGlzLmFyY0xlbmd0aHMubGVuZ3RoKVxyXG4gICAgICAgIHJldHVybiBzYW1wbGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcclxuICAgICAgbGV0IGxlbmd0aCA9IHRoaXMuc2FtcGxlTGVuZ3Roc1thbmNob3JJbmRleF1bc2FtcGxlSW5kZXhdO1xyXG4gICAgICB3aGlsZSAodG90YWxMZW5ndGggKyBsZW5ndGggPCBuZXh0U3RhdGlvbikge1xyXG4gICAgICAgIHRvdGFsTGVuZ3RoICs9IGxlbmd0aDtcclxuXHJcbiAgICAgICAgaWYgKCsrc2FtcGxlSW5kZXggPj0gdGhpcy5zYW1wbGVMZW5ndGhzW2FuY2hvckluZGV4XS5sZW5ndGgpIHtcclxuICAgICAgICAgIHNhbXBsZUluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICBpZiAoKythbmNob3JJbmRleCA+PSB0aGlzLnNhbXBsZUxlbmd0aHMubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gc2FtcGxlcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxlbmd0aCA9IHRoaXMuc2FtcGxlTGVuZ3Roc1thbmNob3JJbmRleF1bc2FtcGxlSW5kZXhdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBbcDAsIHAxLCBwMiwgcDNdID0gdGhpcy5hbmNob3JzRm9yU3BsaW5lSW5kZXgoYW5jaG9ySW5kZXgpO1xyXG4gICAgICBjb25zdCB3ZWlnaHQgPSAoc2FtcGxlSW5kZXggKyAobmV4dFN0YXRpb24gLSB0b3RhbExlbmd0aCkgLyBsZW5ndGgpIC8gdGhpcy5zYW1wbGVMZW5ndGhzW2FuY2hvckluZGV4XS5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IHBvcyA9IGNhdG11bGxSb21WZWMod2VpZ2h0LCBwMCwgcDEsIHAyLCBwMyk7XHJcbiAgICAgIGNvbnN0IHRhbmdlbnQgPSB0YW5nZW50QXQod2VpZ2h0LCBwMCwgcDEsIHAyLCBwMyk7XHJcbiAgICAgIGNvbnN0IHJvdCA9IE1hdGguYXRhbjIodGFuZ2VudC55LCB0YW5nZW50LngpO1xyXG4gICAgICBjb25zdCBjdXJ2ID0gY3VydmF0dXJlQXQod2VpZ2h0LCBwMCwgcDEsIHAyLCBwMyk7XHJcblxyXG4gICAgICBzYW1wbGVzLnB1c2goeyBwb3MsIHJvdCwgY3VydiB9KTtcclxuICAgICAgbmV4dFN0YXRpb24gKz0gaW50ZXJ2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNhbXBsZXM7XHJcbiAgfVxyXG5cclxuICBzdGF0aW9uTGF0aXR1ZGVGcm9tUG9zaXRpb24ocG9zaXRpb24sIGFyb3VuZEFuY2hvckluZGV4ID0gbnVsbCkge1xyXG4gICAgY29uc3QgW2FuY2hvckluZGV4LCBzYW1wbGVJbmRleCwgc2FtcGxlU3RhdGlvbiwgcHJldlNhbXBsZVN0YXRpb25dID0gdGhpcy5fZmluZENsb3Nlc3RTYW1wbGUocG9zaXRpb24sIGFyb3VuZEFuY2hvckluZGV4KTtcclxuXHJcbiAgICBpZiAoYW5jaG9ySW5kZXggPT09IHVuZGVmaW5lZCkgcmV0dXJuIFswLCAwLCAwXTtcclxuXHJcbiAgICBsZXQgcHJldlBvaW50O1xyXG4gICAgbGV0IG5leHRQb2ludDtcclxuICAgIGxldCBwcmV2U3RhdGlvbjtcclxuICAgIGxldCBuZXh0U3RhdGlvbjtcclxuXHJcbiAgICBpZiAoYW5jaG9ySW5kZXggPT0gMCAmJiBzYW1wbGVJbmRleCA9PSAwKSB7XHJcbiAgICAgIHByZXZQb2ludCA9IHRoaXMuY2VudGVybGluZXNbYW5jaG9ySW5kZXhdW3NhbXBsZUluZGV4XTtcclxuICAgICAgbmV4dFBvaW50ID0gdGhpcy5jZW50ZXJsaW5lc1thbmNob3JJbmRleF1bc2FtcGxlSW5kZXggKyAxXTtcclxuICAgICAgcHJldlN0YXRpb24gPSAwO1xyXG4gICAgICBuZXh0U3RhdGlvbiA9IHRoaXMuc2FtcGxlTGVuZ3Roc1thbmNob3JJbmRleF1bc2FtcGxlSW5kZXhdO1xyXG4gICAgfSBlbHNlIGlmIChhbmNob3JJbmRleCA9PSB0aGlzLmNlbnRlcmxpbmVzLmxlbmd0aCAtIDEgJiYgc2FtcGxlSW5kZXggPT0gdGhpcy5jZW50ZXJsaW5lc1thbmNob3JJbmRleF0ubGVuZ3RoIC0gMSkge1xyXG4gICAgICBwcmV2UG9pbnQgPSB0aGlzLmNlbnRlcmxpbmVzW2FuY2hvckluZGV4XVtzYW1wbGVJbmRleCAtIDFdO1xyXG4gICAgICBuZXh0UG9pbnQgPSB0aGlzLmNlbnRlcmxpbmVzW2FuY2hvckluZGV4XVtzYW1wbGVJbmRleF07XHJcbiAgICAgIHByZXZTdGF0aW9uID0gcHJldlNhbXBsZVN0YXRpb247XHJcbiAgICAgIG5leHRTdGF0aW9uID0gc2FtcGxlU3RhdGlvbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHByZXZQb2ludCA9IHNhbXBsZUluZGV4ID09IDAgPyB0aGlzLmNlbnRlcmxpbmVzW2FuY2hvckluZGV4IC0gMV1bdGhpcy5jZW50ZXJsaW5lc1thbmNob3JJbmRleCAtIDFdLmxlbmd0aCAtIDFdIDogdGhpcy5jZW50ZXJsaW5lc1thbmNob3JJbmRleF1bc2FtcGxlSW5kZXggLSAxXTtcclxuICAgICAgbmV4dFBvaW50ID0gc2FtcGxlSW5kZXggPT0gdGhpcy5jZW50ZXJsaW5lc1thbmNob3JJbmRleF0ubGVuZ3RoIC0gMSA/IHRoaXMuY2VudGVybGluZXNbYW5jaG9ySW5kZXggKyAxXVswXSA6IHRoaXMuY2VudGVybGluZXNbYW5jaG9ySW5kZXhdW3NhbXBsZUluZGV4ICsgMV07XHJcblxyXG4gICAgICBjb25zdCBwb3NzaWJsZU5leHQgPSB0aGlzLmNlbnRlcmxpbmVzW2FuY2hvckluZGV4XVtzYW1wbGVJbmRleF07XHJcbiAgICAgIGNvbnN0IHBvc3NpYmxlUHJvZ3Jlc3MgPSBwb3NpdGlvbi5jbG9uZSgpLnN1YihwcmV2UG9pbnQpLmRvdChwb3NzaWJsZU5leHQuY2xvbmUoKS5zdWIocHJldlBvaW50KSkgLyBwcmV2UG9pbnQuZGlzdGFuY2VUb1NxdWFyZWQocG9zc2libGVOZXh0KTtcclxuXHJcbiAgICAgIGlmIChwb3NzaWJsZVByb2dyZXNzIDwgMSkge1xyXG4gICAgICAgIG5leHRQb2ludCA9IHBvc3NpYmxlTmV4dDtcclxuICAgICAgICBwcmV2U3RhdGlvbiA9IHByZXZTYW1wbGVTdGF0aW9uO1xyXG4gICAgICAgIG5leHRTdGF0aW9uID0gc2FtcGxlU3RhdGlvbjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwcmV2UG9pbnQgPSBwb3NzaWJsZU5leHQ7XHJcbiAgICAgICAgcHJldlN0YXRpb24gPSBzYW1wbGVTdGF0aW9uO1xyXG4gICAgICAgIG5leHRTdGF0aW9uID0gc2FtcGxlU3RhdGlvbiArIHRoaXMuc2FtcGxlTGVuZ3Roc1thbmNob3JJbmRleF1bc2FtcGxlSW5kZXhdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLmNsYW1wKHBvc2l0aW9uLmNsb25lKCkuc3ViKHByZXZQb2ludCkuZG90KG5leHRQb2ludC5jbG9uZSgpLnN1YihwcmV2UG9pbnQpKSAvIHByZXZQb2ludC5kaXN0YW5jZVRvU3F1YXJlZChuZXh0UG9pbnQpLCAwLCAxKTtcclxuICAgIGNvbnN0IHByb2plY3RlZFBvc2l0aW9uID0gbmV4dFBvaW50LmNsb25lKCkuc3ViKHByZXZQb2ludCkubXVsdGlwbHlTY2FsYXIocHJvZ3Jlc3MpLmFkZChwcmV2UG9pbnQpO1xyXG5cclxuICAgIGNvbnN0IHN0YXRpb24gPSBwcmV2U3RhdGlvbiArIChuZXh0U3RhdGlvbiAtIHByZXZTdGF0aW9uKSAqIHByb2dyZXNzO1xyXG4gICAgY29uc3QgbGF0aXR1ZGUgPSBNYXRoLnNpZ24oKG5leHRQb2ludC54IC0gcHJldlBvaW50LngpICogKHBvc2l0aW9uLnkgLSBwcmV2UG9pbnQueSkgLSAobmV4dFBvaW50LnkgLSBwcmV2UG9pbnQueSkgKiAocG9zaXRpb24ueCAtIHByZXZQb2ludC54KSkgKiBwb3NpdGlvbi5kaXN0YW5jZVRvKHByb2plY3RlZFBvc2l0aW9uKTtcclxuXHJcbiAgICByZXR1cm4gW3N0YXRpb24sIGxhdGl0dWRlLCBhbmNob3JJbmRleF07XHJcbiAgfVxyXG5cclxuICBfZmluZENsb3Nlc3RTYW1wbGUocG9zaXRpb24sIGFyb3VuZEFuY2hvckluZGV4ID0gbnVsbCkge1xyXG4gICAgbGV0IGNsb3Nlc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICBsZXQgYmVzdEFuY2hvckluZGV4O1xyXG4gICAgbGV0IGJlc3RTYW1wbGVJbmRleDtcclxuICAgIGxldCBiZXN0U3RhdGlvbjtcclxuICAgIGxldCBiZXN0UHJldlN0YXRpb247XHJcblxyXG4gICAgbGV0IGN1cnJTdGF0aW9uID0gMDtcclxuICAgIGxldCBwcmV2U3RhdGlvbiA9IDA7XHJcblxyXG4gICAgbGV0IHN0YXJ0QW5jaG9ySW5kZXggPSAwO1xyXG4gICAgbGV0IGVuZEFuY2hvckluZGV4ID0gdGhpcy5jZW50ZXJsaW5lcy5sZW5ndGggLSAxO1xyXG5cclxuICAgIGlmIChhcm91bmRBbmNob3JJbmRleCAhPT0gbnVsbCkge1xyXG4gICAgICBzdGFydEFuY2hvckluZGV4ID0gTWF0aC5tYXgoMCwgYXJvdW5kQW5jaG9ySW5kZXggLSAyKTtcclxuICAgICAgZW5kQW5jaG9ySW5kZXggPSBNYXRoLm1pbih0aGlzLmNlbnRlcmxpbmVzLmxlbmd0aCAtIDEsIGFyb3VuZEFuY2hvckluZGV4ICsgMik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHN0YXJ0QW5jaG9ySW5kZXggPiAwKSB7XHJcbiAgICAgIGZvciAobGV0IGFuY2hvckluZGV4ID0gMDsgYW5jaG9ySW5kZXggPCBzdGFydEFuY2hvckluZGV4OyBhbmNob3JJbmRleCsrKSB7XHJcbiAgICAgICAgY3VyclN0YXRpb24gKz0gdGhpcy5hcmNMZW5ndGhzW2FuY2hvckluZGV4XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcHJldlN0YXRpb24gPSBjdXJyU3RhdGlvbiAtIHRoaXMuc2FtcGxlTGVuZ3Roc1tzdGFydEFuY2hvckluZGV4IC0gMV1bdGhpcy5zYW1wbGVMZW5ndGhzW3N0YXJ0QW5jaG9ySW5kZXggLSAxXS5sZW5ndGggLSAxXTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBhbmNob3JJbmRleCA9IHN0YXJ0QW5jaG9ySW5kZXg7IGFuY2hvckluZGV4IDw9IGVuZEFuY2hvckluZGV4OyBhbmNob3JJbmRleCsrKSB7XHJcbiAgICAgIGNvbnN0IGNlbnRlcmxpbmUgPSB0aGlzLmNlbnRlcmxpbmVzW2FuY2hvckluZGV4XTtcclxuICAgICAgZm9yIChsZXQgc2FtcGxlSW5kZXggPSAwOyBzYW1wbGVJbmRleCA8IGNlbnRlcmxpbmUubGVuZ3RoOyBzYW1wbGVJbmRleCsrKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdFNxID0gcG9zaXRpb24uZGlzdGFuY2VUb1NxdWFyZWQoY2VudGVybGluZVtzYW1wbGVJbmRleF0pO1xyXG4gICAgICAgIGlmIChkaXN0U3EgPCBjbG9zZXN0KSB7XHJcbiAgICAgICAgICBjbG9zZXN0ID0gZGlzdFNxO1xyXG4gICAgICAgICAgYmVzdEFuY2hvckluZGV4ID0gYW5jaG9ySW5kZXg7XHJcbiAgICAgICAgICBiZXN0U2FtcGxlSW5kZXggPSBzYW1wbGVJbmRleDtcclxuICAgICAgICAgIGJlc3RTdGF0aW9uID0gY3VyclN0YXRpb247XHJcbiAgICAgICAgICBiZXN0UHJldlN0YXRpb24gPSBwcmV2U3RhdGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXZTdGF0aW9uID0gY3VyclN0YXRpb247XHJcbiAgICAgICAgY3VyclN0YXRpb24gKz0gdGhpcy5zYW1wbGVMZW5ndGhzW2FuY2hvckluZGV4XVtzYW1wbGVJbmRleF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW2Jlc3RBbmNob3JJbmRleCwgYmVzdFNhbXBsZUluZGV4LCBiZXN0U3RhdGlvbiwgYmVzdFByZXZTdGF0aW9uXTtcclxuICB9XHJcblxyXG4gIGFkZEFuY2hvcihwb3NpdGlvbiwgcmVzYW1wbGUgPSB0cnVlKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuYW5jaG9ycy5wdXNoKHBvc2l0aW9uKSAtIDE7XHJcblxyXG4gICAgaWYgKHJlc2FtcGxlKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSBpbmRleCAtIDI7IGkgPCBpbmRleDsgaSsrKVxyXG4gICAgICAgIHRoaXMucmVzYW1wbGUoaSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGVBbmNob3IoaW5kZXgsIHBvc2l0aW9uKSB7XHJcbiAgICB0aGlzLmFuY2hvcnNbaW5kZXhdID0gcG9zaXRpb247XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IGluZGV4IC0gMjsgaSA8PSBpbmRleCArIDE7IGkrKylcclxuICAgICAgdGhpcy5yZXNhbXBsZShpKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUFuY2hvcihpbmRleCkge1xyXG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmFuY2hvcnMubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgdGhpcy5hbmNob3JzLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgY29uc3Qgc2VnbWVudEluZGV4ID0gaW5kZXggPCB0aGlzLmFuY2hvcnMubGVuZ3RoID8gaW5kZXggOiBpbmRleCAtIDE7XHJcbiAgICB0aGlzLmNlbnRlcmxpbmVzLnNwbGljZShzZWdtZW50SW5kZXgsIDEpO1xyXG4gICAgdGhpcy5zYW1wbGVMZW5ndGhzLnNwbGljZShzZWdtZW50SW5kZXgsIDEpO1xyXG4gICAgdGhpcy5sZWZ0Qm91bmRhcmllcy5zcGxpY2Uoc2VnbWVudEluZGV4LCAxKTtcclxuICAgIHRoaXMucmlnaHRCb3VuZGFyaWVzLnNwbGljZShzZWdtZW50SW5kZXgsIDEpO1xyXG4gICAgdGhpcy5hcmNMZW5ndGhzLnNwbGljZShzZWdtZW50SW5kZXgsIDEpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSBzZWdtZW50SW5kZXggLSAyOyBpIDw9IHNlZ21lbnRJbmRleDsgaSsrKVxyXG4gICAgICB0aGlzLnJlc2FtcGxlKGkpO1xyXG4gIH1cclxuXHJcbiAgcmVzYW1wbGUoaW5kZXgpIHtcclxuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aGlzLmFuY2hvcnMubGVuZ3RoIC0gMikgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IFtwMCwgcDEsIHAyLCBwM10gPSB0aGlzLmFuY2hvcnNGb3JTcGxpbmVJbmRleChpbmRleCk7XHJcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcclxuICAgIGNvbnN0IGxlbmd0aHMgPSBbXTtcclxuICAgIGNvbnN0IGxlZnRCb3VuZGFyeSA9IFtdO1xyXG4gICAgY29uc3QgcmlnaHRCb3VuZGFyeSA9IFtdO1xyXG4gICAgbGV0IHByZXZQb2ludCA9IG51bGw7XHJcblxyXG4gICAgY29uc3QgcG9pbnRzUGVyU2VnbWVudCA9IE1hdGgubWF4KDEwLCBNYXRoLmNlaWwocDEuZGlzdGFuY2VUbyhwMikgLyAxKSk7XHJcbiAgICBjb25zdCBudW1Qb2ludHMgPSBpbmRleCA9PSB0aGlzLmFuY2hvcnMubGVuZ3RoIC0gMiA/IHBvaW50c1BlclNlZ21lbnQgKyAxIDogcG9pbnRzUGVyU2VnbWVudDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVBvaW50czsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHQgPSBpIC8gcG9pbnRzUGVyU2VnbWVudDtcclxuICAgICAgY29uc3QgcG9pbnQgPSBjYXRtdWxsUm9tVmVjKHQsIHAwLCBwMSwgcDIsIHAzKTtcclxuICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xyXG5cclxuICAgICAgaWYgKHByZXZQb2ludCAhPSBudWxsKVxyXG4gICAgICAgIGxlbmd0aHMucHVzaChwcmV2UG9pbnQuZGlzdGFuY2VUbyhwb2ludCkpO1xyXG4gICAgICBwcmV2UG9pbnQgPSBwb2ludDtcclxuXHJcbiAgICAgIGNvbnN0IHRhbmdlbnQgPSB0YW5nZW50QXQodCwgcDAsIHAxLCBwMiwgcDMpO1xyXG4gICAgICBjb25zdCBub3JtYWwgPSBuZXcgVEhSRUUuVmVjdG9yMigtdGFuZ2VudC55LCB0YW5nZW50LngpO1xyXG5cclxuICAgICAgbGVmdEJvdW5kYXJ5LnB1c2gobm9ybWFsLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoLWhhbGZMYW5lV2lkdGgpLmFkZChwb2ludCkpO1xyXG4gICAgICByaWdodEJvdW5kYXJ5LnB1c2gobm9ybWFsLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoaGFsZkxhbmVXaWR0aCkuYWRkKHBvaW50KSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGVuZ3Rocy5wdXNoKHByZXZQb2ludC5kaXN0YW5jZVRvKHAyKSk7XHJcblxyXG4gICAgdGhpcy5jZW50ZXJsaW5lc1tpbmRleF0gPSBwb2ludHM7XHJcbiAgICB0aGlzLnNhbXBsZUxlbmd0aHNbaW5kZXhdID0gbGVuZ3RocztcclxuICAgIHRoaXMubGVmdEJvdW5kYXJpZXNbaW5kZXhdID0gbGVmdEJvdW5kYXJ5O1xyXG4gICAgdGhpcy5yaWdodEJvdW5kYXJpZXNbaW5kZXhdID0gcmlnaHRCb3VuZGFyeTtcclxuICAgIHRoaXMuYXJjTGVuZ3Roc1tpbmRleF0gPSBsZW5ndGhzLnJlZHVjZSgoc3VtLCBsKSA9PiBzdW0gKyBsLCAwKTtcclxuICB9XHJcblxyXG4gIHJlc2FtcGxlQWxsKCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFuY2hvcnMubGVuZ3RoOyBpKyspXHJcbiAgICAgIHRoaXMucmVzYW1wbGUoaSk7XHJcbiAgfVxyXG5cclxuICBhbmNob3JzRm9yU3BsaW5lSW5kZXgoaW5kZXgpIHtcclxuICAgIGxldCBwO1xyXG4gICAgaWYgKGluZGV4ID09IDApXHJcbiAgICAgIHAgPSBbdGhpcy5hbmNob3JzWzBdXS5jb25jYXQodGhpcy5hbmNob3JzLnNsaWNlKDAsIDMpKTtcclxuICAgIGVsc2VcclxuICAgICAgcCA9IHRoaXMuYW5jaG9ycy5zbGljZShpbmRleCAtIDEsIGluZGV4ICsgMyk7XHJcblxyXG4gICAgaWYgKHBbM10gPT09IHVuZGVmaW5lZClcclxuICAgICAgcFszXSA9IHBbMl07XHJcblxyXG4gICAgcmV0dXJuIHA7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjYXRtdWxsUm9tKHQsIHAwLCBwMSwgcDIsIHAzKSB7XHJcbiAgY29uc3QgdjAgPSAocDIgLSBwMCkgKiAwLjU7XHJcbiAgY29uc3QgdjEgPSAocDMgLSBwMSkgKiAwLjU7XHJcbiAgY29uc3QgdDIgPSB0ICogdDtcclxuICBjb25zdCB0MyA9IHQgKiB0MjtcclxuICByZXR1cm4gKDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEpICogdDMgKyAoLTMgKiBwMSArIDMgKiBwMiAtIDIgKiB2MCAtIHYxKSAqIHQyICsgdjAgKiB0ICsgcDE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhdG11bGxSb21WZWModCwgcDAsIHAxLCBwMiwgcDMpIHtcclxuICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIoY2F0bXVsbFJvbSh0LCBwMC54LCBwMS54LCBwMi54LCBwMy54KSwgY2F0bXVsbFJvbSh0LCBwMC55LCBwMS55LCBwMi55LCBwMy55KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRhbmdlbnRBdCh0LCBwMCwgcDEsIHAyLCBwMykge1xyXG4gIGNvbnN0IGRlbHRhID0gMC4wMDAxO1xyXG4gIGxldCB0MSA9IHQgLSBkZWx0YTtcclxuICBsZXQgdDIgPSB0ICsgZGVsdGE7XHJcblxyXG4gIGlmICh0MSA8IDApIHQxID0gMDtcclxuICBpZiAodDIgPiAxKSB0MiA9IDE7XHJcblxyXG4gIGNvbnN0IHByZXYgPSBjYXRtdWxsUm9tVmVjKHQxLCBwMCwgcDEsIHAyLCBwMyk7XHJcbiAgY29uc3QgbmV4dCA9IGNhdG11bGxSb21WZWModDIsIHAwLCBwMSwgcDIsIHAzKTtcclxuXHJcbiAgcmV0dXJuIG5leHQuc3ViKHByZXYpLm5vcm1hbGl6ZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjdXJ2YXR1cmVBdCh0MiwgcDAsIHAxLCBwMiwgcDMpIHtcclxuICBjb25zdCBkZWx0YSA9IDAuMDAwMTtcclxuXHJcbiAgLy8gSWYgd2UncmUgZXN0aW1hdGluZyBjdXJ2YXR1cmUgYXQgb25lIG9mIHRoZSBlbmRwb2ludHMgb2YgdGhlIHNwbGluZSxcclxuICAvLyBzbGlnaHRseSBzaGlmdCBpdCBpbndhcmRzIHRvIGF2b2lkIGluZmluaXRlIGN1cnZhdHVyZS5cclxuICBpZiAodDIgPT0gMCkgdDIgPSBkZWx0YTtcclxuICBpZiAodDIgPT0gMSkgdDIgPSAxIC0gZGVsdGE7XHJcblxyXG4gIGxldCB0MSA9IHQyIC0gZGVsdGE7XHJcbiAgbGV0IHQzID0gdDIgKyBkZWx0YTtcclxuXHJcbiAgaWYgKHQxIDwgMCkgdDEgPSAwO1xyXG4gIGlmICh0MyA+IDEpIHQzID0gMTtcclxuXHJcbiAgY29uc3QgcHQxID0gY2F0bXVsbFJvbVZlYyh0MSwgcDAsIHAxLCBwMiwgcDMpO1xyXG4gIGNvbnN0IHB0MiA9IGNhdG11bGxSb21WZWModDIsIHAwLCBwMSwgcDIsIHAzKTtcclxuICBjb25zdCBwdDMgPSBjYXRtdWxsUm9tVmVjKHQzLCBwMCwgcDEsIHAyLCBwMyk7XHJcblxyXG4gIHJldHVybiAoTWF0aC5hdGFuMihwdDMueSAtIHB0Mi55LCBwdDMueCAtIHB0Mi54KSAtIE1hdGguYXRhbjIocHQyLnkgLSBwdDEueSwgcHQyLnggLSBwdDEueCkpIC8gcHQyLmRpc3RhbmNlVG8ocHQxKTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0aWNPYnN0YWNsZSB7XHJcbiAgc3RhdGljIGh5ZHJhdGUob2JqKSB7XHJcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLCBTdGF0aWNPYnN0YWNsZS5wcm90b3R5cGUpO1xyXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG9iai5wb3MsIFRIUkVFLlZlY3RvcjIucHJvdG90eXBlKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XHJcbiAgICByZXR1cm4gbmV3IFN0YXRpY09ic3RhY2xlKG5ldyBUSFJFRS5WZWN0b3IyKGpzb24ucFswXSwganNvbi5wWzFdKSwganNvbi5yLCBqc29uLncsIGpzb24uaCk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwb3MsIHJvdCwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgdGhpcy5wb3MgPSBwb3M7XHJcbiAgICB0aGlzLnJvdCA9IHJvdDtcclxuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgIHRoaXMudXBkYXRlVmVydGljZXMoKTtcclxuICB9XHJcblxyXG4gIHRvSlNPTigpIHtcclxuICAgIGNvbnN0IHRydW5jID0gbiA9PiArbi50b0ZpeGVkKDUpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHA6IFt0cnVuYyh0aGlzLnBvcy54KSwgdHJ1bmModGhpcy5wb3MueSldLFxyXG4gICAgICByOiB0cnVuYyh0aGlzLnJvdCksXHJcbiAgICAgIHc6IHRydW5jKHRoaXMud2lkdGgpLFxyXG4gICAgICBoOiB0cnVuYyh0aGlzLmhlaWdodClcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWZXJ0aWNlcygpIHtcclxuICAgIHRoaXMudmVydGljZXMgPSBbXTtcclxuXHJcbiAgICBjb25zdCBjb3NSb3QgPSBNYXRoLmNvcyh0aGlzLnJvdCk7XHJcbiAgICBjb25zdCBzaW5Sb3QgPSBNYXRoLnNpbih0aGlzLnJvdCk7XHJcbiAgICBjb25zdCBoYWxmV2lkdGggPSB0aGlzLndpZHRoIC8gMjtcclxuICAgIGNvbnN0IGhhbGZIZWlnaHQgPSB0aGlzLmhlaWdodCAvIDI7XHJcblxyXG4gICAgY29uc3QgaFdjUiA9IGhhbGZXaWR0aCAqIGNvc1JvdDtcclxuICAgIGNvbnN0IGhXc1IgPSBoYWxmV2lkdGggKiBzaW5Sb3Q7XHJcbiAgICBjb25zdCBoSGNSID0gaGFsZkhlaWdodCAqIGNvc1JvdDtcclxuICAgIGNvbnN0IGhIc1IgPSBoYWxmSGVpZ2h0ICogc2luUm90O1xyXG5cclxuICAgIGNvbnN0IHYxID0gWy1oV2NSIC0gaEhzUiArIHRoaXMucG9zLngsIC1oV3NSICsgaEhjUiArIHRoaXMucG9zLnldO1xyXG4gICAgY29uc3QgdjIgPSBbLWhXY1IgKyBoSHNSICsgdGhpcy5wb3MueCwgLWhXc1IgLSBoSGNSICsgdGhpcy5wb3MueV07XHJcbiAgICBjb25zdCB2MyA9IFtoV2NSICsgaEhzUiArIHRoaXMucG9zLngsIGhXc1IgLSBoSGNSICsgdGhpcy5wb3MueV07XHJcbiAgICBjb25zdCB2NCA9IFtoV2NSIC0gaEhzUiArIHRoaXMucG9zLngsIGhXc1IgKyBoSGNSICsgdGhpcy5wb3MueV07XHJcblxyXG4gICAgdGhpcy52ZXJ0aWNlcyA9IFtcclxuICAgICAgdjFbMF0sIHYxWzFdLFxyXG4gICAgICB2MlswXSwgdjJbMV0sXHJcbiAgICAgIHYzWzBdLCB2M1sxXSxcclxuICAgICAgdjNbMF0sIHYzWzFdLFxyXG4gICAgICB2NFswXSwgdjRbMV0sXHJcbiAgICAgIHYxWzBdLCB2MVsxXVxyXG4gICAgXTtcclxuICB9XHJcbn1cclxuIiwiLy8gSGFsZiB3aWR0aCBhbmQgaGFsZiBoZWlnaHRcclxuY29uc3QgVkVISUNMRV9TSVpFID0geyB3OiAyLjUsIGg6IDEgfTtcclxuY29uc3QgQ1lDTElTVF9TSVpFID0geyB3OiAxLjIsIGg6IDAuNiB9O1xyXG5jb25zdCBQRURFU1RSSUFOX1NJWkUgPSB7IHc6IDAuNiwgaDogMC42IH07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEeW5hbWljT2JzdGFjbGUge1xyXG4gIHN0YXRpYyBoeWRyYXRlKG9iaikge1xyXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG9iaiwgRHluYW1pY09ic3RhY2xlLnByb3RvdHlwZSk7XHJcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLnN0YXJ0UG9zLCBUSFJFRS5WZWN0b3IyLnByb3RvdHlwZSk7XHJcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLnZlbG9jaXR5LCBUSFJFRS5WZWN0b3IyLnByb3RvdHlwZSk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcih0eXBlLCBzdGFydFBvcywgdmVsb2NpdHksIHBhcmFsbGVsKSB7XHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5zdGFydFBvcyA9IHN0YXJ0UG9zO1xyXG4gICAgdGhpcy52ZWxvY2l0eSA9IHZlbG9jaXR5O1xyXG4gICAgdGhpcy5wYXJhbGxlbCA9IHBhcmFsbGVsO1xyXG5cclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ2N5Y2xpc3QnOlxyXG4gICAgICAgICAgdGhpcy5zaXplID0gT2JqZWN0LmFzc2lnbih7fSwgQ1lDTElTVF9TSVpFKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdwZWRlc3RyaWFuJzpcclxuICAgICAgICAgIHRoaXMuc2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIFBFREVTVFJJQU5fU0laRSk7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHRoaXMuc2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIFZFSElDTEVfU0laRSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFwYXJhbGxlbClcclxuICAgICAgW3RoaXMuc2l6ZS53LCB0aGlzLnNpemUuaF0gPSBbdGhpcy5zaXplLmgsIHRoaXMuc2l6ZS53XTtcclxuICB9XHJcblxyXG4gIHBvc2l0aW9uQXRUaW1lKHRpbWUpIHtcclxuICAgIHJldHVybiB0aGlzLnZlbG9jaXR5LmNsb25lKCkubXVsdGlwbHlTY2FsYXIodGltZSkuYWRkKHRoaXMuc3RhcnRQb3MpO1xyXG4gIH1cclxuXHJcbiAgcG9zaXRpb25zSW5UaW1lUmFuZ2Uoc3RhcnRUaW1lLCBlbmRUaW1lLCBudW1GcmFtZXMpIHtcclxuICAgIGNvbnN0IGR0ID0gKGVuZFRpbWUgLSBzdGFydFRpbWUpIC8gbnVtRnJhbWVzO1xyXG4gICAgY29uc3QgcG9zaXRpb25zID0gW107XHJcbiAgICBsZXQgdGltZSA9IHN0YXJ0VGltZTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBudW1GcmFtZXM7IGkrKykge1xyXG4gICAgICBwb3NpdGlvbnMucHVzaCh0aGlzLnBvc2l0aW9uQXRUaW1lKHRpbWUpKTtcclxuICAgICAgdGltZSArPSBkdDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcG9zaXRpb25zO1xyXG4gIH1cclxuXHJcbiAgdmVydGljZXNJblRpbWVSYW5nZShzdGFydFRpbWUsIGVuZFRpbWUsIGNvbmZpZykge1xyXG4gICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5wb3NpdGlvbnNJblRpbWVSYW5nZShzdGFydFRpbWUsIGVuZFRpbWUsIGNvbmZpZy5udW1EeW5hbWljU3ViZnJhbWVzKTtcclxuICAgIGNvbnN0IHZlcnRpY2VzID0gW107XHJcblxyXG4gICAgLy8gSGF6YXJkIGRpbGF0aW9uIChkcmF3biBiZWhpbmQsIHogPSAwLjc1KVxyXG4gICAgY29uc3QgaGF6YXJkSGFsZldpZHRoID0gdGhpcy5zaXplLncgKyBjb25maWcuZHluYW1pY0hhemFyZERpbGF0aW9uUyArIGNvbmZpZy5jb2xsaXNpb25EaWxhdGlvblM7XHJcbiAgICBjb25zdCBoYXphcmRIYWxmSGVpZ2h0ID0gdGhpcy5zaXplLmggKyBjb25maWcuZHluYW1pY0hhemFyZERpbGF0aW9uTCArIGNvbmZpZy5jb2xsaXNpb25EaWxhdGlvbkw7XHJcblxyXG4gICAgcG9zaXRpb25zLmZvckVhY2gocCA9PiB7XHJcbiAgICAgIGNvbnN0IHYxID0gWy1oYXphcmRIYWxmV2lkdGggKyBwLngsIGhhemFyZEhhbGZIZWlnaHQgKyBwLnldO1xyXG4gICAgICBjb25zdCB2MiA9IFtoYXphcmRIYWxmV2lkdGggKyBwLngsIGhhemFyZEhhbGZIZWlnaHQgKyBwLnldO1xyXG4gICAgICBjb25zdCB2MyA9IFtoYXphcmRIYWxmV2lkdGggKyBwLngsIC1oYXphcmRIYWxmSGVpZ2h0ICsgcC55XTtcclxuICAgICAgY29uc3QgdjQgPSBbLWhhemFyZEhhbGZXaWR0aCArIHAueCwgLWhhemFyZEhhbGZIZWlnaHQgKyBwLnldO1xyXG5cclxuICAgICAgdmVydGljZXMucHVzaChcclxuICAgICAgICB2MVswXSwgdjFbMV0sIDAuNzUsXHJcbiAgICAgICAgdjJbMF0sIHYyWzFdLCAwLjc1LFxyXG4gICAgICAgIHYzWzBdLCB2M1sxXSwgMC43NSxcclxuICAgICAgICB2M1swXSwgdjNbMV0sIDAuNzUsXHJcbiAgICAgICAgdjRbMF0sIHY0WzFdLCAwLjc1LFxyXG4gICAgICAgIHYxWzBdLCB2MVsxXSwgMC43NVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIENvbGxpc2lvbiBkaWxhdGlvbiAoZHJhd24gaW4gZnJvbnQsIHogPSAwLjI1KVxyXG4gICAgY29uc3QgY29sbGlzaW9uSGFsZldpZHRoID0gdGhpcy5zaXplLncgKyBjb25maWcuY29sbGlzaW9uRGlsYXRpb25TO1xyXG4gICAgY29uc3QgY29sbGlzaW9uSGFsZkhlaWdodCA9IHRoaXMuc2l6ZS5oICsgY29uZmlnLmNvbGxpc2lvbkRpbGF0aW9uTDtcclxuXHJcbiAgICBwb3NpdGlvbnMuZm9yRWFjaChwID0+IHtcclxuICAgICAgY29uc3QgdjEgPSBbLWNvbGxpc2lvbkhhbGZXaWR0aCArIHAueCwgY29sbGlzaW9uSGFsZkhlaWdodCArIHAueV07XHJcbiAgICAgIGNvbnN0IHYyID0gW2NvbGxpc2lvbkhhbGZXaWR0aCArIHAueCwgY29sbGlzaW9uSGFsZkhlaWdodCArIHAueV07XHJcbiAgICAgIGNvbnN0IHYzID0gW2NvbGxpc2lvbkhhbGZXaWR0aCArIHAueCwgLWNvbGxpc2lvbkhhbGZIZWlnaHQgKyBwLnldO1xyXG4gICAgICBjb25zdCB2NCA9IFstY29sbGlzaW9uSGFsZldpZHRoICsgcC54LCAtY29sbGlzaW9uSGFsZkhlaWdodCArIHAueV07XHJcblxyXG4gICAgICB2ZXJ0aWNlcy5wdXNoKFxyXG4gICAgICAgIHYxWzBdLCB2MVsxXSwgMC4yNSxcclxuICAgICAgICB2MlswXSwgdjJbMV0sIDAuMjUsXHJcbiAgICAgICAgdjNbMF0sIHYzWzFdLCAwLjI1LFxyXG4gICAgICAgIHYzWzBdLCB2M1sxXSwgMC4yNSxcclxuICAgICAgICB2NFswXSwgdjRbMV0sIDAuMjUsXHJcbiAgICAgICAgdjFbMF0sIHYxWzFdLCAwLjI1XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdmVydGljZXM7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBUSFJFRSBmcm9tICdzY3JpcHQtbG9hZGVyIS4uL3ZlbmRvci90aHJlZS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICdzY3JpcHQtbG9hZGVyIS4uL2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFBhdGhQbGFubmVyIGZyb20gJy4uL2pzL2F1dG9ub215L3BhdGgtcGxhbm5pbmcvUGF0aFBsYW5uZXIuanMnO1xyXG5pbXBvcnQgTGFuZVBhdGggZnJvbSAnLi4vanMvYXV0b25vbXkvTGFuZVBhdGguanMnO1xyXG5pbXBvcnQgU3RhdGljT2JzdGFjbGUgZnJvbSAnLi4vanMvYXV0b25vbXkvU3RhdGljT2JzdGFjbGUuanMnO1xyXG5pbXBvcnQgRHluYW1pY09ic3RhY2xlIGZyb20gJy4uL2pzL2F1dG9ub215L0R5bmFtaWNPYnN0YWNsZS5qcyc7XHJcblxyXG5mdW5jdGlvbiBpbml0ICgpIHtcclxuICBsZXQgcGF0aFBsYW5uZXI7XHJcbiAgdHJ5IHtcclxuICAgIHBhdGhQbGFubmVyID0gbmV3IFBhdGhQbGFubmVyKCk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgY29uc29sZS5sb2coJ0Vycm9yIGluaXRpYWxpemluZyBwYXRoIHBsYW5uZXI6Jyk7XHJcbiAgICBjb25zb2xlLmxvZyhlKTtcclxuXHJcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHsgZXJyb3I6IHRydWUgfSk7XHJcblxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgY29uc3QgeyBjb25maWcsIHZlaGljbGVQb3NlLCB2ZWhpY2xlU3RhdGlvbiwgbGFuZVBhdGgsIHN0YXJ0VGltZSwgc3RhdGljT2JzdGFjbGVzLCBkeW5hbWljT2JzdGFjbGVzLCByZXNldCB9ID0gZXZlbnQuZGF0YTtcclxuXHJcbiAgICBMYW5lUGF0aC5oeWRyYXRlKGxhbmVQYXRoKTtcclxuICAgIHN0YXRpY09ic3RhY2xlcy5mb3JFYWNoKG8gPT4gU3RhdGljT2JzdGFjbGUuaHlkcmF0ZShvKSk7XHJcbiAgICBkeW5hbWljT2JzdGFjbGVzLmZvckVhY2gobyA9PiBEeW5hbWljT2JzdGFjbGUuaHlkcmF0ZShvKSk7XHJcblxyXG4gICAgaWYgKHJlc2V0KSBwYXRoUGxhbm5lci5yZXNldCgpO1xyXG5cclxuICAgIHBhdGhQbGFubmVyLmNvbmZpZyA9IGNvbmZpZztcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB7IHBhdGgsIGZyb21WZWhpY2xlU2VnbWVudCwgZnJvbVZlaGljbGVQYXJhbXMsIGxhdHRpY2VTdGFydFN0YXRpb24sIGR5bmFtaWNPYnN0YWNsZUdyaWQgfSA9IHBhdGhQbGFubmVyLnBsYW4odmVoaWNsZVBvc2UsIHZlaGljbGVTdGF0aW9uLCBsYW5lUGF0aCwgc3RhcnRUaW1lLCBzdGF0aWNPYnN0YWNsZXMsIGR5bmFtaWNPYnN0YWNsZXMpO1xyXG5cclxuICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7IHBhdGgsIGZyb21WZWhpY2xlU2VnbWVudCwgZnJvbVZlaGljbGVQYXJhbXMsIHZlaGljbGVQb3NlLCB2ZWhpY2xlU3RhdGlvbiwgbGF0dGljZVN0YXJ0U3RhdGlvbiwgY29uZmlnLCBkeW5hbWljT2JzdGFjbGVHcmlkIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1BhdGhQbGFubmVyV29ya2VyIGVycm9yJyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuaWYgKHR5cGVvZih3aW5kb3cpID09PSAndW5kZWZpbmVkJykge1xyXG4gIGluaXQoKTtcclxufSBlbHNlIHtcclxuICB3aW5kb3cuZGFzaF9pbml0UGF0aFBsYW5uZXJXb3JrZXIgPSBpbml0O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///279\n")}},__webpack_module_cache__={};function __webpack_require__(c){var t=__webpack_module_cache__[c];if(void 0!==t)return t.exports;var X=__webpack_module_cache__[c]={exports:{}};return __webpack_modules__[c](X,X.exports,__webpack_require__),X.exports}var __webpack_exports__=__webpack_require__(279)})()}void 0===typeof window&&dash_initPathPlannerWorker();